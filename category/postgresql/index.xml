<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Postgresql on Mark Needham</title>
    <link>http://mneedham.github.io/category/postgresql/</link>
    <description>Recent content in Postgresql on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 May 2017 20:42:07 +0000</lastBuildDate>
    
	<atom:link href="http://mneedham.github.io/category/postgresql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PostgreSQL: ERROR:  argument of WHERE must not return a set</title>
      <link>http://mneedham.github.io/2017/05/01/postgresql-error-argument-must-not-return-set/</link>
      <pubDate>Mon, 01 May 2017 20:42:07 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2017/05/01/postgresql-error-argument-must-not-return-set/</guid>
      <description>In my last post I showed how to load and query data from the Strava API in PostgreSQL and after executing some simple queries my next task was to query more complex part of the JSON structure.   Strava allows users to create segments, which are edited portions of road or trail where athletes can compete for time.  I wanted to write a query to find all the times that I&#39;d run a particular segment.</description>
    </item>
    
    <item>
      <title>Loading and analysing Strava runs using PostgreSQL JSON data type</title>
      <link>http://mneedham.github.io/2017/05/01/loading-and-analysing-strava-runs-using-postgresql-json-data-type/</link>
      <pubDate>Mon, 01 May 2017 19:11:54 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2017/05/01/loading-and-analysing-strava-runs-using-postgresql-json-data-type/</guid>
      <description>In my last post I showed how to map Strava runs using data that I&#39;d extracted from their /activities API, but the API returns a lot of other data that I discarded because I wasn&#39;t sure what I should keep.  The API returns a nested JSON structure so the easiest solution would be to save each run as an individual file but I&#39;ve always wanted to try out PostgreSQL&#39;s JSON data type and this seemed like a good opportunity.</description>
    </item>
    
  </channel>
</rss>