<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on Mark Needham</title>
    <link>https://mneedham.github.io/category/scala/</link>
    <description>Recent content in Scala on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 May 2012 10:26:49 +0000</lastBuildDate>
    
	<atom:link href="https://mneedham.github.io/category/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scala/Haskell: A simple example of type classes</title>
      <link>https://mneedham.github.io/2012/05/22/scalahaskell-a-simple-example-of-type-classes/</link>
      <pubDate>Tue, 22 May 2012 10:26:49 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2012/05/22/scalahaskell-a-simple-example-of-type-classes/</guid>
      <description>I never really understood type classes when I was working with Scala but I recently came across a video where Dan Rosen explains them pretty well.
Since the last time I worked in Scala I&amp;rsquo;ve been playing around with Haskell where type classes are much more common - for example if we want to compare two values we need to make sure that their type extends the &amp;lsquo;Eq&amp;rsquo; type class.</description>
    </item>
    
    <item>
      <title>Scala: Counting number of inversions (via merge sort) for an unsorted collection</title>
      <link>https://mneedham.github.io/2012/03/20/scala-counting-number-of-inversions-via-merge-sort-for-an-unsorted-collection/</link>
      <pubDate>Tue, 20 Mar 2012 06:53:18 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2012/03/20/scala-counting-number-of-inversions-via-merge-sort-for-an-unsorted-collection/</guid>
      <description>The first programming questions of algo-class requires you to calculate the number of inversions it would take using merge sort to sort a collection in ascending order.
I found quite a nice explanation here too:
 Finding &#34;similarity&#34; between two rankings. Given a sequence of n numbers 1..n (assume all numbers are distinct). Define a measure that tells us how far this list is from being in ascending order. The value should be 0 if a_1 The simple/naive way of solving this problem is to iterate through the collection in two loops and compare each value and its current index with the others, looking for ones which are not in the right order.</description>
    </item>
    
    <item>
      <title>Scala: Converting a scala collection to java.util.List</title>
      <link>https://mneedham.github.io/2012/02/05/scala-converting-a-scala-collection-to-java-util-list/</link>
      <pubDate>Sun, 05 Feb 2012 21:40:33 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2012/02/05/scala-converting-a-scala-collection-to-java-util-list/</guid>
      <description>I&amp;rsquo;ve been playing around a little with Goose - a library for extracting the main body of text from web pages - and I thought I&amp;rsquo;d try converting some of the code to be more scala-esque in style.
The API of the various classes/methods is designed so it&amp;rsquo;s interoperable with Java code but in order to use functions like map/filter we need the collection to be a Scala one.
That&amp;rsquo;s achieved by importing &amp;lsquo;scala.</description>
    </item>
    
    <item>
      <title>Scala: Our Retrospective of the benefits/drawbacks</title>
      <link>https://mneedham.github.io/2011/11/28/scala-our-retrospective-of-the-benefitsdrawbacks/</link>
      <pubDate>Mon, 28 Nov 2011 00:15:00 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/11/28/scala-our-retrospective-of-the-benefitsdrawbacks/</guid>
      <description>As the closing part of a Scala Experience Report Liz and I gave at XP Day we detailed a retrospective that we&amp;rsquo;d carried out on the project after 3 months where the team outlined the positives/negatives of working with Scala.
The team members who were there right at the beginning of the project 3 months earlier had come up with what they thought the proposed benefits/drawbacks would be so it was quite interesting to look at our thoughts at both times.</description>
    </item>
    
    <item>
      <title>Java/Scala: Runtime.exec hanging/in &#39;pipe_w&#39; state</title>
      <link>https://mneedham.github.io/2011/11/20/javascala-runtime-exec-hangingin-pipe_w-state/</link>
      <pubDate>Sun, 20 Nov 2011 20:20:08 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/11/20/javascala-runtime-exec-hangingin-pipe_w-state/</guid>
      <description>On the system that I&amp;rsquo;m currently working on we have a data ingestion process which needs to take zip files, unzip them and then import their contents into the database.
As a result we delegate from Scala code to the system unzip command like so:
def extract { var command = &amp;quot;unzip %s -d %s&amp;quot; format(&amp;quot;/file/to/unzip.zip&amp;quot;, &amp;quot;/place/to/unzip/to&amp;quot;) var process: Process = null try { process = Runtime.getRuntime.exec(command) val exitCode = process.</description>
    </item>
    
    <item>
      <title>Scala: scala.xml.SpecialNode: StackOverFlowError</title>
      <link>https://mneedham.github.io/2011/11/15/scala-scala-xml-specialnode-stackoverflowerror/</link>
      <pubDate>Tue, 15 Nov 2011 00:26:46 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/11/15/scala-scala-xml-specialnode-stackoverflowerror/</guid>
      <description>We have some code in our application where we parse reasonably complex XML structures and then sometimes choose to get rid of certain elements from the structure.
When we wanted to get rid of an element we replaced that element with a SpecialNode:
val emptyNode = new scala.xml.SpecialNode() { def buildString(sb:StringBuilder) = new StringBuilder() def label = null }  Unfortunately when you call #text on the node it results in the following exception which we only found out today:</description>
    </item>
    
    <item>
      <title>Scala: Setting default argument for function parameter</title>
      <link>https://mneedham.github.io/2011/11/08/scala-setting-default-argument-for-function-parameter/</link>
      <pubDate>Tue, 08 Nov 2011 22:46:47 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/11/08/scala-setting-default-argument-for-function-parameter/</guid>
      <description>Yesterday I wrote about a problem we&amp;rsquo;ve been having with trying to work out how to default a function parameter that we have in one of our methods.
Our current version of the code defines the function parameter as implicit which means that if it isn&amp;rsquo;t passed in it defaults to Predef.conforms():
def foo[T](bar: String)(implicit blah:(String =&amp;gt; T)) = { println(blah(bar)); bar }  It&amp;rsquo;s not entirely clear just from reading the code where the implicit value is coming from so we want to try and make the code a bit more expressive.</description>
    </item>
    
    <item>
      <title>Scala: Which implicit conversion is being used?</title>
      <link>https://mneedham.github.io/2011/11/06/scala-which-implicit-conversion-is-being-used/</link>
      <pubDate>Sun, 06 Nov 2011 21:25:06 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/11/06/scala-which-implicit-conversion-is-being-used/</guid>
      <description>Last week my colleague Pat created a method which had a parameter which he wanted to make optional so that consumers of the API wouldn&amp;rsquo;t have to provide it if they didn&amp;rsquo;t want to.
We ended up making the method take in an implicit value such that the method signature looked a bit like this:
def foo[T](implicit blah:(String =&amp;gt; T)) = { println(blah(&amp;quot;mark&amp;quot;)) &amp;quot;foo&amp;quot; }  We can call foo with or without an argument:</description>
    </item>
    
    <item>
      <title>Scala: Option.isDefined as the new null check</title>
      <link>https://mneedham.github.io/2011/11/01/scala-option-isdefined-as-the-new-null-check/</link>
      <pubDate>Tue, 01 Nov 2011 00:58:45 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/11/01/scala-option-isdefined-as-the-new-null-check/</guid>
      <description>One cool thing about using Scala on my current project is that we don&amp;rsquo;t have nulls anywhere in our code, instead when something may or may not be there we make use of the Option type.
Unfortunately what we&amp;rsquo;ve (heavily contributed by me) ended up with in our code base is repeated use of the isDefined method whenever we want to make a decision depending on whether or not the option is populated.</description>
    </item>
    
    <item>
      <title>Scala: Adding logging around a repository</title>
      <link>https://mneedham.github.io/2011/10/25/scala-adding-logging-around-a-repository/</link>
      <pubDate>Tue, 25 Oct 2011 21:19:22 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/10/25/scala-adding-logging-around-a-repository/</guid>
      <description>We wanted to add some logging around one of our repositories to track how many times users were trying to do various things on the application and came across a cool blog post explaining how we might be able to do this.
We ended up with the following code:
class BarRepository { def all: Seq[Bar] = Seq() def find(barId:String) : Bar = Bar(&amp;quot;myBar&amp;quot;) }  class TrackService(barRepository:BarRepository) { def all : Seq[Bar] = { var bars = barRepository.</description>
    </item>
    
    <item>
      <title>Scala: Creating an Xml element with an optional attribute</title>
      <link>https://mneedham.github.io/2011/10/25/scala-creating-an-xml-element-with-an-optional-attribute/</link>
      <pubDate>Tue, 25 Oct 2011 20:38:52 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/10/25/scala-creating-an-xml-element-with-an-optional-attribute/</guid>
      <description>We have a lot of Xml in our application and one of the things that we need to do reasonably frequently in our test code is create elements which have optional attributes on them.
Our simple first approach looked like this:
def createElement(attribute: Option[String]) = if(attribute.isDefined) &amp;lt;p bar={attribute.get} /&amp;gt; else &amp;lt;p /&amp;gt;  That works but it always seemed like we should be able to do it in a simpler way.</description>
    </item>
    
    <item>
      <title>Scala: Replacing a trait with a fake one for testing</title>
      <link>https://mneedham.github.io/2011/09/25/scala-replacing-a-trait-with-a-fake-one-for-testing/</link>
      <pubDate>Sun, 25 Sep 2011 10:24:20 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/09/25/scala-replacing-a-trait-with-a-fake-one-for-testing/</guid>
      <description>We recently wanted to replace a trait mixed into one of our classes with a fake version to make it easier to test but forgot how exactly to do that!
The class is roughly like this:
trait Foo { def foo : String = &amp;quot;real foo&amp;quot; } class Mark extends Foo {}  We originally tried to replace it like this:
trait BrokenFakeFoo { def foo : String = &amp;quot;broken fake foo&amp;quot; } val m = new Mark with BrokenFakeFoo  error: overriding method foo in trait Foo of type =&amp;gt; String; method foo in trait BrokenFakeFoo of type =&amp;gt; String needs `override&#39; modifier val m = new Mark with BrokenFakeFoo  If m compiled it would have two versions of foo but it wouldn&amp;rsquo;t know which one to use, hence the error message.</description>
    </item>
    
    <item>
      <title>Scala: for comprehensions with Options</title>
      <link>https://mneedham.github.io/2011/09/15/scala-for-comprehensions-with-options/</link>
      <pubDate>Thu, 15 Sep 2011 22:21:14 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/09/15/scala-for-comprehensions-with-options/</guid>
      <description>I&amp;rsquo;ve generally avoided using for expressions in Scala because the keyword reminds me of for loops in Java/C# and I want to learn to program in a less imperative way.
After working with my colleague Mushtaq I realised that in some cases using for comprehensions can lead to much more readable code.
An interesting use case where this is the case is when we want to create an object from a bunch of parameters that may or may not be set.</description>
    </item>
    
    <item>
      <title>Scala: Do modifiers on functions really matter?</title>
      <link>https://mneedham.github.io/2011/08/13/scala-do-modifiers-on-functions-really-matter/</link>
      <pubDate>Sat, 13 Aug 2011 02:10:53 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/08/13/scala-do-modifiers-on-functions-really-matter/</guid>
      <description>A couple of colleagues and I were having an interesting discussion this afternoon about the visibility of functions which are mixed into an object from a trait.
The trait in question looks like this:
trait Formatting { def formatBytes(bytes: Long): Long = { math.round(bytes.toDouble / 1024) } }  And is mixed into various objects which need to display the size of a file in kB like this:
class SomeObject extends Formatting { }  By mixing that function into SomeObject any of the clients of SomeObject would now to be able to call that function and transform a bytes value of their own!</description>
    </item>
    
    <item>
      <title>Scala, WebDriver and the Page Object Pattern</title>
      <link>https://mneedham.github.io/2011/08/09/scala-webdriver-and-the-page-object-pattern/</link>
      <pubDate>Tue, 09 Aug 2011 00:54:23 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/08/09/scala-webdriver-and-the-page-object-pattern/</guid>
      <description>We&amp;rsquo;re using WebDriver on my project to automate our functional tests and as a result are using the Page Object pattern to encapsulate each page of the application in our tests.
We&amp;rsquo;ve been trying to work out how to effectively reuse code since some of the pages have parts of them which work exactly the same as another page.
For example we had a test similar to this&amp;hellip;
class FooPageTests extends Spec with ShouldMatchers with FooPageSteps { it(&amp;quot;is my dummy test&amp;quot;) { .</description>
    </item>
    
    <item>
      <title>Scala: Prettifying test builders with package object</title>
      <link>https://mneedham.github.io/2011/07/26/scala-prettifying-test-builders-with-package-object/</link>
      <pubDate>Tue, 26 Jul 2011 22:31:58 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/07/26/scala-prettifying-test-builders-with-package-object/</guid>
      <description>We have several different test builders in our code base which look roughly like this:
case class FooBuilder(bar : String, baz : String) { def build = new Foo(bar, baz) }  In our tests we originally used them like this:
class FooPageTest extends Specs with ShouldMatchers { it(&amp;quot;should let us load a foo&amp;quot;) { when(databaseHas(FooBuilder(bar = &amp;quot;Bar&amp;quot;, baz = &amp;quot;Bazz&amp;quot;))) // and so on... } }  This works well but we wanted our tests to only contain domain language and no implementation details.</description>
    </item>
    
    <item>
      <title>Scala: Making it easier to abstract code</title>
      <link>https://mneedham.github.io/2011/07/23/scala-making-it-easier-to-abstract-code/</link>
      <pubDate>Sat, 23 Jul 2011 12:05:05 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/07/23/scala-making-it-easier-to-abstract-code/</guid>
      <description>A couple of months ago I attended Michael Feathers&amp;rsquo; &amp;lsquo;Brutal Refactoring&amp;rsquo; workshop at XP 2011 where he opined that developers generally do the easiest thing when it comes to code bases.
More often than not this means adding to an existing method or existing class rather than finding the correct place to put the behaviour that they want to add.
Something interesting that I&amp;rsquo;ve noticed so far on the project I&amp;rsquo;m working on is that so far we haven&amp;rsquo;t been seeing the same trend.</description>
    </item>
    
    <item>
      <title>Scala: Companion Objects</title>
      <link>https://mneedham.github.io/2011/07/23/scala-companion-objects/</link>
      <pubDate>Sat, 23 Jul 2011 11:57:44 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/07/23/scala-companion-objects/</guid>
      <description>One of the language features available to us in Scala which I think is having a big impact in helping us to make our code base easier to follow is the companion object.
We&amp;rsquo;ve been using companion objects quite liberally in our code base to define factory methods for our classes.
As I mentioned in a previous post a lot of our objects are acting as wrappers around XML documents and we&amp;rsquo;ve been pushing some of the data extraction from the XML into companion objects so that our classes can take in non XML values.</description>
    </item>
    
    <item>
      <title>Scala: Rolling with implicit</title>
      <link>https://mneedham.github.io/2011/07/19/scala-rolling-with-implicit/</link>
      <pubDate>Tue, 19 Jul 2011 06:39:44 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/07/19/scala-rolling-with-implicit/</guid>
      <description>We&amp;rsquo;ve been coding in Scala on my project for around 6 weeks now and are getting to the stage where we&amp;rsquo;re probably becoming a big dangerous with our desire to try out some of the language features.
One that we&amp;rsquo;re trying out at the moment is the implicit key word which allows you to pass arguments to objects and methods without explicitly defining them in the parameter list.
The website we&amp;rsquo;re working on needs to be accessible in multiple languages and therefore we need to be able to translate some words before they get displayed on the page.</description>
    </item>
    
    <item>
      <title>Scala: An attempt to eradicate the if</title>
      <link>https://mneedham.github.io/2011/07/12/scala-an-attempt-to-eradicate-the-if/</link>
      <pubDate>Tue, 12 Jul 2011 22:50:40 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/07/12/scala-an-attempt-to-eradicate-the-if/</guid>
      <description>In a previous post I included a code sample where we were formatting a page range differently depending on whether the start page and end pages were the same.
The code looked like this:
trait PageAware { def startPage:String def endPage:String def pageRange = if(firstPage == lastPage) &amp;quot;page %s&amp;quot;.format(firstPage) else &amp;quot;pages %s-%s&amp;quot;.format(firstPage, lastPage) }  Looking at the if statement on the last line we were curious whether it would be possible to get rid of it and replace it with something else.</description>
    </item>
    
    <item>
      <title>Scala: Pattern matching a pair inside map/filter</title>
      <link>https://mneedham.github.io/2011/07/12/scala-pattern-matching-a-pair-inside-mapfilter/</link>
      <pubDate>Tue, 12 Jul 2011 22:42:49 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/07/12/scala-pattern-matching-a-pair-inside-mapfilter/</guid>
      <description>More than a few times recently we&amp;rsquo;ve wanted to use pattern matching on a collection of pairs/tuples and have run into trouble doing so.
It&amp;rsquo;s easy enough if you don&amp;rsquo;t try and pattern match:
&amp;gt; List((&amp;quot;Mark&amp;quot;, 4), (&amp;quot;Charles&amp;quot;, 5)).filter(pair =&amp;gt; pair._2 == 4) res6: List[(java.lang.String, Int)] = List((Mark,4))  But if we try to use pattern matching:
List((&amp;quot;Mark&amp;quot;, 4), (&amp;quot;Charles&amp;quot;, 5)).filter(case(name, number) =&amp;gt; number == 4)  We end up with this error:</description>
    </item>
    
    <item>
      <title>Scala: Traits galore</title>
      <link>https://mneedham.github.io/2011/07/09/scala-traits-galore/</link>
      <pubDate>Sat, 09 Jul 2011 19:54:05 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/07/09/scala-traits-galore/</guid>
      <description>We recently came across a problem where we had some logic that we wanted to be used by two classes.
Our original thought was to pull it up into an abstract class which ended up looking like this:
abstract class SomeArbitraryClass(root:xml.Node) { def unrelatedField1:String def unrelatedField2:String def startPage:String def endPage:String def pageRange = if(firstPage == lastPage) &amp;quot;page %s&amp;quot;.format(firstPage) else &amp;quot;pages %s-%s&amp;quot;.format(firstPage, lastPage) }  Writing a test link to scala test for the page logic helped us to see more clearly that the design was a bit awkward:</description>
    </item>
    
    <item>
      <title>Scala: Martin Odersky&#39;s Object-oriented meets functional: An exploration of Scala</title>
      <link>https://mneedham.github.io/2011/07/05/scala-martin-oderskys-object-oriented-meets-functional-an-exploration-of-scala/</link>
      <pubDate>Tue, 05 Jul 2011 05:02:28 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/07/05/scala-martin-oderskys-object-oriented-meets-functional-an-exploration-of-scala/</guid>
      <description>My colleague Charles and I attended Martin Odersky&amp;rsquo;s &amp;lsquo;Object-oriented meets functional: An exploration of Scala&amp;rsquo; two day Scala workshop hosted by Skills Matter at the end of last week.
It was run by Iulian Dragos who wrote his Phd thesis on how to improve the performance of the Scala compiler.
The course was a bit adapted from the original in that it came at Scala more from an application developer&amp;rsquo;s point of view rather than that of a language geek.</description>
    </item>
    
    <item>
      <title>Scala: Self type annotations and structured types</title>
      <link>https://mneedham.github.io/2011/06/27/scala-self-type-annotations-and-structured-types/</link>
      <pubDate>Mon, 27 Jun 2011 23:21:56 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/06/27/scala-self-type-annotations-and-structured-types/</guid>
      <description>A few days ago I tweeted that I didn&amp;rsquo;t really see the point in structured types in Scala&amp;hellip;
 Not sure I understand where you would use structural types in #scala instead of defining a method on a trait http://bit.ly/jgiW7b  &amp;hellip;but today my colleague Uday came up with a cool way of combining self type annotations with structured types inside a trait we defined.
We had some code duplicated across two classes which looked roughly like this:</description>
    </item>
    
    <item>
      <title>Scala: val, lazy val and def</title>
      <link>https://mneedham.github.io/2011/06/22/scala-val-lazy-val-and-def/</link>
      <pubDate>Wed, 22 Jun 2011 23:04:44 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/06/22/scala-val-lazy-val-and-def/</guid>
      <description>We have a variety of val, lazy val and def definitions across our code base but have been led to believe that idiomatic Scala would have us using lazy val as frequently as possible.
As far as I understand so far this is what the different things do:
 val evaluates as soon as you initialise the object and stores the result. lazy val evaluates the first time that it&#39;s accessed and stores the result.</description>
    </item>
    
    <item>
      <title>Scala/Mustache: Creating a comma separated list</title>
      <link>https://mneedham.github.io/2011/06/22/scalamustache-creating-a-comma-separated-list/</link>
      <pubDate>Wed, 22 Jun 2011 21:24:06 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/06/22/scalamustache-creating-a-comma-separated-list/</guid>
      <description>We&amp;rsquo;re using the Mustache templating engine on my project at the moment and one thing that we wanted to do was build a comma separated list.
Mustache is designed so that you pretty much can&amp;rsquo;t do any logic in the template which made it really difficult to do what we wanted.
It&amp;rsquo;s easy enough to get a comma after each item in a list with something like the following code:</description>
    </item>
    
    <item>
      <title>Scala: Setting a default value</title>
      <link>https://mneedham.github.io/2011/06/12/scala-setting-a-default-value/</link>
      <pubDate>Sun, 12 Jun 2011 16:03:30 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/06/12/scala-setting-a-default-value/</guid>
      <description>We wanted to try and generate a build label to use for the name of the artifacts archive that gets generated each time we run the build but wanted to default it to a hard coded value if the system property representing the build label wasn&amp;rsquo;t available.
In Ruby we would be able to do something like this:
buildLabel = ENV[&amp;quot;GO_PIPELINE_LABEL&amp;quot;] || &amp;quot;LOCAL&amp;quot;  There isn&amp;rsquo;t a function in Scala that does that so we initially ended up with this:</description>
    </item>
    
    <item>
      <title>Sbt: Rolling with continuous/incremental compilation and Jetty</title>
      <link>https://mneedham.github.io/2011/06/10/sbt-rolling-with-continuousincremental-compilation-and-jetty/</link>
      <pubDate>Fri, 10 Jun 2011 00:16:05 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/06/10/sbt-rolling-with-continuousincremental-compilation-and-jetty/</guid>
      <description>As I mentioned in an earlier post we&amp;rsquo;re using SBT on our project and one of it&amp;rsquo;s cool features is that it will listen to the source directory and then automatically recompile the code when it detects file changes.
We&amp;rsquo;ve also installed the sbt-jetty-embed plugin which allows us to create a war which has Jetty embedded so that we can keep our application containerless.
That plugin adds an action called &amp;lsquo;jetty&amp;rsquo; to sbt so we (foolishly in hindsight) thought that we would be able to launch the application in triggered execution mode by making use of a ~ in front of that:</description>
    </item>
    
    <item>
      <title>Sbt: Zipping files without their directory structure</title>
      <link>https://mneedham.github.io/2011/06/04/sbt-zipping-files-without-their-directory-structure/</link>
      <pubDate>Sat, 04 Jun 2011 17:24:16 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2011/06/04/sbt-zipping-files-without-their-directory-structure/</guid>
      <description>We&amp;rsquo;re using SBT on our project and Pat and I have been trying to work out how to zip together some artifacts so that they&amp;rsquo;re all available from the top level of the zip file i.e. we don&amp;rsquo;t want to copy the directory structure where the files come from.
I&amp;rsquo;ve been playing around with this in the Scala REPL which we can launch with our project&amp;rsquo;s dependencies loaded with the following command:</description>
    </item>
    
    <item>
      <title>Scala: Converting an input stream to a string</title>
      <link>https://mneedham.github.io/2009/10/26/scala-converting-an-input-stream-to-a-string/</link>
      <pubDate>Mon, 26 Oct 2009 06:32:24 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/10/26/scala-converting-an-input-stream-to-a-string/</guid>
      <description>I was playing around with Scala over the weekend and one thing that I wanted to do was get the data from a HTTP response as a string so that I could parse the xml returned.
The data source is fairly small so loading the stream into memory wasn&amp;rsquo;t a problem.
Carlos pointed me to a bit of Java code that did this and I converted it as literally as possible into Scala.</description>
    </item>
    
    <item>
      <title>Scala: Code Kata #2 - Karate Chop - Array Slicing Attempt</title>
      <link>https://mneedham.github.io/2009/10/13/scala-code-kata-2-karate-chop-array-slicing-attempt/</link>
      <pubDate>Tue, 13 Oct 2009 07:00:53 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/10/13/scala-code-kata-2-karate-chop-array-slicing-attempt/</guid>
      <description>In my continued attempts to learn a bit of Scala I&amp;rsquo;ve been trying out the 2nd of Dave Thomas&amp;rsquo; code katas - Karate Chop - while using an array slicing approach.
I&amp;rsquo;ve tried out the iterative approach to this problem in Java about a year ago and it ends up being quite verbose so I thought the array slicing one would be much more concise.
I didn&amp;rsquo;t drive any of the solutions I worked on from the tests - in fact I only got all the tests provided by Dave Thomas running right at the end which was probably a mistake in retrospect.</description>
    </item>
    
    <item>
      <title>Scala: 99 problems</title>
      <link>https://mneedham.github.io/2009/09/30/scala-99-problems/</link>
      <pubDate>Wed, 30 Sep 2009 23:39:16 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/09/30/scala-99-problems/</guid>
      <description>My colleague Liz Douglass and I have been playing around with Scala and Liz recently pointed out Phil Gold&amp;rsquo;s &amp;lsquo;Ninety Nine Scala Problems&amp;rsquo; which we&amp;rsquo;ve been working through.
One in particular which is quite interesting is number 7 where we need to flatten a nested list structure.
Therefore given this input:
flatten(List(List(1, 1), 2, List(3, List(5, 8))))  We would expect this output:
res0: List[Any] = List(1, 1, 2, 3, 5, 8)  I tried this out on my own using recursion but kept ending up creating a stack overflow by writing code that never terminated!</description>
    </item>
    
    <item>
      <title>Scala: The &#39;_=&#39; mixed identifier</title>
      <link>https://mneedham.github.io/2009/09/14/scala-the-_-mixed-identifier/</link>
      <pubDate>Mon, 14 Sep 2009 23:49:07 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/09/14/scala-the-_-mixed-identifier/</guid>
      <description>I&amp;rsquo;ve been playing around with Scala a bit and in particular following some of the code examples from Daniel Spiewak&amp;rsquo;s &amp;lsquo;Scala for Java Refugees&amp;rsquo; article on Traits and Types.
One thing that I got a bit confused about in one of the examples was the use of the &amp;lsquo;_&amp;rsquo; at the end of one of the function definitions:
class MyContainer[T] { private var obj:T = null def value = obj def value_=(v:T) = obj = v } val cont = new MyContainer[String] cont.</description>
    </item>
    
    <item>
      <title>Coding Dojo #22: Scala, lamdaj, Project Euler</title>
      <link>https://mneedham.github.io/2009/09/04/coding-dojo-22-scala-lamdaj-project-euler/</link>
      <pubDate>Fri, 04 Sep 2009 00:26:00 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/09/04/coding-dojo-22-scala-lamdaj-project-euler/</guid>
      <description>In our latest coding dojo we played around with Scala and lambdaj while attempting to solve some of the problems on the Project Euler website.
The Format We started off on two different machines with two of us having a look at solving the first Project Euler problem in Scala and the other two trying to solve it in Java while using the lambdaj library.
What did we learn?  Fabio and I worked on the Scala solution to the problem and we were pretty much playing around with different ways to aggregate all the values in the list: ~~~scala 1.</description>
    </item>
    
  </channel>
</rss>