<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xp2011 on Mark Needham</title>
    <link>http://mneedham.github.io/tag/xp2011/</link>
    <description>Recent content in Xp2011 on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 May 2011 09:44:09 +0000</lastBuildDate>
    
	<atom:link href="http://mneedham.github.io/tag/xp2011/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>XP 2011: How complex is software?</title>
      <link>http://mneedham.github.io/2011/05/19/xp-2011-how-complex-is-software/</link>
      <pubDate>Thu, 19 May 2011 09:44:09 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2011/05/19/xp-2011-how-complex-is-software/</guid>
      <description>The last session I attended at XP 2011 was a workshop run by John Mcfadyen where he introduced us to Dave Snowden&amp;rsquo;s Cynefin model, which is a model used to describe problems, situations and systems.
I&amp;rsquo;d come across the model previously and it had been all over my twitter stream a couple of weeks ago as a result of Dave Snowden giving a key note at the Lean Systems and Software conference.</description>
    </item>
    
    <item>
      <title>&#34;In what world does that make sense&#34;</title>
      <link>http://mneedham.github.io/2011/05/14/in-what-world-does-that-make-sense/</link>
      <pubDate>Sat, 14 May 2011 21:12:31 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2011/05/14/in-what-world-does-that-make-sense/</guid>
      <description>In her keynote at XP 2011 Esther Derby encouraged us to ask the question &amp;ldquo;in what world does that make sense?&amp;rdquo; whenever we encounter something which we consider to be stupid or ridiculous.
I didn&amp;rsquo;t think much of it at the time but my colleague Pat Kua has been asking me the question whenever I&amp;rsquo;ve been describing something that I find confusing to him.
After about the third time I noticed that its quite a nice tool for getting us to reflect on the systems and feedback loops that may be encouraging the behaviour witnessed.</description>
    </item>
    
    <item>
      <title>XP 2011: Esther Derby - Still no silver bullets</title>
      <link>http://mneedham.github.io/2011/05/13/xp-2011-esther-derby-still-no-silver-bullets/</link>
      <pubDate>Fri, 13 May 2011 12:26:37 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2011/05/13/xp-2011-esther-derby-still-no-silver-bullets/</guid>
      <description>The first keynote at XP 2011 was one given by Esther Derby titled &amp;lsquo;Still no silver bullets&amp;rsquo; where she talked about some of the reasons why agile adoption seems to work in the small but often fails in the large.
Esther quoted Donella Meadows, the author of &amp;lsquo;Thinking in Systems&amp;rsquo;, a few times which was an interesting coincidence for me as I&amp;rsquo;m currently reading her book.
One of the first quotes from that book was the following:  The original purpose of a hierarchy is always to help its&amp;rsquo; originating subsystems do their job better</description>
    </item>
    
    <item>
      <title>XP 2011: Michael Feathers - Brutal Refactoring</title>
      <link>http://mneedham.github.io/2011/05/11/xp-2011-michael-feathers-brutal-refactoring/</link>
      <pubDate>Wed, 11 May 2011 13:35:42 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2011/05/11/xp-2011-michael-feathers-brutal-refactoring/</guid>
      <description>The second session that I attended at XP 2011 was Michael Feathers&amp;rsquo; tutorial &amp;lsquo;Brutal Refactoring&amp;rsquo; where he talked through some of the things that he&amp;rsquo;s learned since he finished writing &amp;lsquo;Working Effectively With Legacy Code&amp;rsquo;.
I&amp;rsquo;ve found some of Michael&amp;rsquo;s recent blog posts about analysing the data in our code repositories quite interesting to read and part of this tutorial was based on the research he&amp;rsquo;s done in that area.</description>
    </item>
    
    <item>
      <title>XP 2011: J.B. Rainsberger - A Simple Approach to Modular Design</title>
      <link>http://mneedham.github.io/2011/05/11/xp-2011-j-b-rainsberger-a-simple-approach-to-modular-design/</link>
      <pubDate>Wed, 11 May 2011 12:11:46 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2011/05/11/xp-2011-j-b-rainsberger-a-simple-approach-to-modular-design/</guid>
      <description>After finishing my own session at XP 2011 I attended the second half of J.B. Rainsberger&amp;rsquo;s tutorial on modular design.
For most of the time that I was there he drove out the design for a point of sale system in Java while showing how architectural patterns can emerge in the code just by focusing on improving names and removing duplication.
The second half of the session was much more interesting to watch as this was when J.</description>
    </item>
    
  </channel>
</rss>