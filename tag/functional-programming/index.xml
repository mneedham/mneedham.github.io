<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional Programming on Mark Needham</title>
    <link>https://mneedham.github.io/tag/functional-programming/</link>
    <description>Recent content in Functional Programming on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Jun 2012 23:50:45 +0000</lastBuildDate>
    
	<atom:link href="https://mneedham.github.io/tag/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Functional Thinking: Separating concerns</title>
      <link>https://mneedham.github.io/2012/06/12/functional-thinking-separating-concerns/</link>
      <pubDate>Tue, 12 Jun 2012 23:50:45 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2012/06/12/functional-thinking-separating-concerns/</guid>
      <description>Over the weekend I was trying to port some of the neo4j import code for the ThoughtWorks graph I&amp;rsquo;ve been working on to make use of the REST Batch API and I came across an interesting example of imperative vs functional thinking.
I&amp;rsquo;m using the neography gem to populate the graph and to start with I was just creating a person node and then creating an index entry for it:</description>
    </item>
    
    <item>
      <title>Functional Programming: Handling the Options</title>
      <link>https://mneedham.github.io/2012/03/21/functional-programming-handling-the-options/</link>
      <pubDate>Wed, 21 Mar 2012 00:50:37 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2012/03/21/functional-programming-handling-the-options/</guid>
      <description>A couple of weeks ago Channing Walton tweeted the following:
 Every time you call get on an Option a kitten dies.  As Channing points out in the comments he was referring to unguarded calls to &amp;lsquo;get&amp;rsquo; which would lead to an exception if the Option was empty, therefore pretty much defeating the point of using an Option in the first place!
We&amp;rsquo;re using Dan Bodart&amp;rsquo;s totallylazy library on the application I&amp;rsquo;m currently working on and in fact were calling &amp;lsquo;get&amp;rsquo; on an Option so I wanted to see if we could get rid of it.</description>
    </item>
    
    <item>
      <title>Functional Programming: One function at a time</title>
      <link>https://mneedham.github.io/2012/03/19/functional-programming-one-function-at-a-time/</link>
      <pubDate>Mon, 19 Mar 2012 23:25:47 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2012/03/19/functional-programming-one-function-at-a-time/</guid>
      <description>As I mentioned in an earlier post I got a bit stuck working out all the diagonals in the 20x20 grid of Project Euler problem 11 and my colleague Uday ended up showing me how to do it.
I realised while watching him solve the problem that we&amp;rsquo;d been using quite different approaches to solving the problem and that his way worked way better than mine, at least in this context.</description>
    </item>
    
    <item>
      <title>Functional Programming: Shaping the data to fit a function</title>
      <link>https://mneedham.github.io/2012/03/13/functional-programming-shaping-the-data-to-fit-a-function/</link>
      <pubDate>Tue, 13 Mar 2012 22:55:10 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2012/03/13/functional-programming-shaping-the-data-to-fit-a-function/</guid>
      <description>As I mentioned in my last post I&amp;rsquo;ve been working on Project Euler problem 11 and one thing I noticed was that I was shaping the data around a windowed function since it seemed to fit the problem quite well.
Problem 11 is defined like so:
 In the 20x20 grid below, four numbers along a diagonal line have been marked in red. The product of these numbers is 26 63 78 14 = 1788696.</description>
    </item>
    
    <item>
      <title>Functional C#: Continuation Passing Style</title>
      <link>https://mneedham.github.io/2010/03/19/functional-c-continuation-passing-style/</link>
      <pubDate>Fri, 19 Mar 2010 07:48:51 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2010/03/19/functional-c-continuation-passing-style/</guid>
      <description>Partly inspired by my colleague Alex Scordellis&amp;rsquo; recent post about lambda passing style I spent some time trying out a continuation passing style style on some of the code in one of our controllers to see how different the code would look compared to its current top to bottom imperative style.
We had code similar to the following:
public ActionResult Submit(string id, FormCollection form) { var shoppingBasket = CreateShoppingBasketFrom(id, form); if (!</description>
    </item>
    
    <item>
      <title>Functional C#: Writing a &#39;partition&#39; function</title>
      <link>https://mneedham.github.io/2010/02/01/functional-c-writing-a-partition-function/</link>
      <pubDate>Mon, 01 Feb 2010 23:34:02 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2010/02/01/functional-c-writing-a-partition-function/</guid>
      <description>One of the more interesting higher order functions that I&amp;rsquo;ve come across while playing with F# is the partition function which is similar to the filter function except it returns the values which meet the predicate passed in as well as the ones which don&amp;rsquo;t.
I came across an interesting problem recently where we needed to do exactly this and had ended up taking a more imperative for each style approach to solve the problem because this function doesn&amp;rsquo;t exist in C# as far as I know.</description>
    </item>
    
    <item>
      <title>Book Club: Why noone uses functional languages (Philip Wadler)</title>
      <link>https://mneedham.github.io/2009/07/08/book-club-why-noone-uses-functional-languages-philip-wadler/</link>
      <pubDate>Wed, 08 Jul 2009 00:29:56 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/07/08/book-club-why-noone-uses-functional-languages-philip-wadler/</guid>
      <description>Our latest technical book club discussion was based around Philip Wadler&amp;rsquo;s paper &amp;lsquo;Why noone uses functional langauges&amp;rsquo; which he wrote in 1998. I came across this paper when reading some of the F# goals in the FAQs on the Microsoft website.
These are some of my thoughts and our discussion of the paper:
 One of the points suggested in the paper is that functional languages aren&#39;t used because of their lack of availability on machines but as Dave pointed out this doesn&#39;t really seem to be such a big problem these days - certainly for F# I&#39;ve found it relatively painless to get it setup and running and even for a language like Ruby people are happy to download and install it on their machines and it is also pretty much painless to do so.</description>
    </item>
    
    <item>
      <title>Functional Collection Parameters: A different way of thinking about collections</title>
      <link>https://mneedham.github.io/2009/06/18/functional-collection-parameters-a-different-way-of-thinking-about-collections/</link>
      <pubDate>Thu, 18 Jun 2009 18:31:59 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/06/18/functional-collection-parameters-a-different-way-of-thinking-about-collections/</guid>
      <description>One of the changes that I&amp;rsquo;ve noticed in my coding now compared to around 7 or 8 months ago is that whenever there&amp;rsquo;s some operations to be performed on a collection I am far more inclined to think of how to do those operations using a functional approach.
I&amp;rsquo;ve written previously about the ways I&amp;rsquo;ve been making use of functional collection parameters in my code but what I hadn&amp;rsquo;t really considered was that the way of thinking about the problem we want to solve is slightly different.</description>
    </item>
    
    <item>
      <title>Functional Collection Parameters: Handling the null collection</title>
      <link>https://mneedham.github.io/2009/06/16/functional-collection-parameters-handling-the-null-collection/</link>
      <pubDate>Tue, 16 Jun 2009 20:29:29 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/06/16/functional-collection-parameters-handling-the-null-collection/</guid>
      <description>One of the interesting cases where I&amp;rsquo;ve noticed we tend to avoid functional collection parameters in our code base is when there&amp;rsquo;s the possibility of the collection being null.
The code is on the boundary of our application&amp;rsquo;s interaction with another service so it is actually a valid scenario that we could receive a null collection.
When using extension methods, although we wouldn&amp;rsquo;t get a null pointer exception by calling one on a null collection, we would get a &amp;lsquo;source is null&amp;rsquo; exception when the expression is evaluated so we need to protect ourself against this.</description>
    </item>
    
    <item>
      <title>OO with a bit of functional mixed in</title>
      <link>https://mneedham.github.io/2009/04/25/oo-with-a-bit-of-functional-mixed-in/</link>
      <pubDate>Sat, 25 Apr 2009 11:14:12 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/04/25/oo-with-a-bit-of-functional-mixed-in/</guid>
      <description>From my experiences playing around with F# and doing a bit of functional C# I&amp;rsquo;m beginning to think that the combination of functional and object oriented programming actually results in code which I think is more expressive and easy to work with than code written only with an object oriented approach in mind.
I&amp;rsquo;m also finding it much more fun to write code this way!
In a recent post Dean Wampler questions whether the supremacy of object oriented programming is over before going on to suggest that the future is probably going to be a mix of functional programming and object oriented programming.</description>
    </item>
    
    <item>
      <title>C#: Refactoring to functional collection parameters</title>
      <link>https://mneedham.github.io/2009/02/03/c-refactoring-to-functional-collection-parameters/</link>
      <pubDate>Tue, 03 Feb 2009 07:18:40 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/02/03/c-refactoring-to-functional-collection-parameters/</guid>
      <description>I wrote about a month or so ago about the functional collection parameters now available in C# and certainly one of the most fun refactorings for me is trying to get code written using a for loop into a state where it is using one of these.
With a bit of help from my colleague James Crisp, these are some of the most common refactorings that I have come across so far.</description>
    </item>
    
    <item>
      <title>F# vs C# vs Java: Functional Collection Parameters</title>
      <link>https://mneedham.github.io/2009/01/19/f-vs-c-vs-java-functional-collection-parameters/</link>
      <pubDate>Mon, 19 Jan 2009 19:24:25 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/01/19/f-vs-c-vs-java-functional-collection-parameters/</guid>
      <description>I wrote a post about a month ago on using functional collection parameters in C# and over the weekend Fabio and I decided to try and contrast the way you would do this in Java, C# and then F# just for fun.
Map Map evaluates a high order function on all the elements in a collection and then returns a new collection containing the results of the function evaluation.
Given the numbers 1-5, return the square of each number</description>
    </item>
    
    <item>
      <title>F#: Partial Function Application with the Function Composition Operator</title>
      <link>https://mneedham.github.io/2009/01/12/f-partial-function-application-with-the-function-composition-operator/</link>
      <pubDate>Mon, 12 Jan 2009 22:22:43 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/01/12/f-partial-function-application-with-the-function-composition-operator/</guid>
      <description>In my continued reading of F# one of the ideas I&amp;rsquo;ve come across recently is that of partial function application.
This is a way of allowing us to combine different functions together and allows some quite powerful syntax to be written.
The term &amp;lsquo;currying&amp;rsquo; is perhaps a better known term for describing this although as I understand they are not exactly the same.
Currying is where we return a function that has been partially applied, in such a way that we can chain together a group of functions with a single argument.</description>
    </item>
    
  </channel>
</rss>