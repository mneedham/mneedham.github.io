<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modeling on Mark Needham</title>
    <link>https://mneedham.github.io/tag/modeling/</link>
    <description>Recent content in Modeling on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Oct 2014 07:11:50 +0000</lastBuildDate>
    
	<atom:link href="https://mneedham.github.io/tag/modeling/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Conceptual Model vs Graph Model</title>
      <link>https://mneedham.github.io/2014/10/06/conceptual-model-vs-graph-model/</link>
      <pubDate>Mon, 06 Oct 2014 07:11:50 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2014/10/06/conceptual-model-vs-graph-model/</guid>
      <description>We&#39;ve started running some sessions on graph modelling in London and during the first session it was pointed out that the process I&#39;d described was very similar to that when modelling for a relational database.
I thought I better do some reading on the way relational models are derived and I came across an excellent video by Joe Maguire titled &#39;Data Modelers Still Have Jobs: Adjusting For the NoSQL Environment&#39;</description>
    </item>
    
    <item>
      <title>Model to answer your questions rather than modelling reality</title>
      <link>https://mneedham.github.io/2013/08/22/model-to-answer-your-questions-rather-than-modelling-reality/</link>
      <pubDate>Thu, 22 Aug 2013 21:26:10 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2013/08/22/model-to-answer-your-questions-rather-than-modelling-reality/</guid>
      <description>On the recommendation of Ian Robinson I&#39;ve been reading the 2nd edition of William&#39;s Kent&#39;s &#39;Data and Reality&#39; and the author makes an interesting observation at the end of the first chapter which resonated with me:
 Once more: we are not modelling reality, but the way information about reality is processed, by people.  It reminds me of similar advice in Eric Evans&#39; Domain Driven Design and it&#39;s advice which I believe is helpful when designing a model in a graph database.</description>
    </item>
    
    <item>
      <title>Coding: Implicit vs Explicit modeling </title>
      <link>https://mneedham.github.io/2009/02/28/coding-implicit-vs-explicit-modeling/</link>
      <pubDate>Sat, 28 Feb 2009 09:50:45 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/02/28/coding-implicit-vs-explicit-modeling/</guid>
      <description>When it comes to object modeling there seem to be two distinct approaches that I have come across.
Implicit modeling The first approach is where we do what I like to think of as implicit modeling.
With this approach we would probably use less objects than in the explicit approach and we would have objects being populated as we moved through the work flow of our application.
I call it implicit modeling because we need to imply where we are based on the internal state of our objects - we can typically work this out by seeing what is and is not set to null.</description>
    </item>
    
  </channel>
</rss>