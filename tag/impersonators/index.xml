<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Impersonators on Mark Needham</title>
    <link>https://mneedham.github.io/tag/impersonators/</link>
    <description>Recent content in Impersonators on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Sep 2009 00:23:33 +0000</lastBuildDate>
    
	<atom:link href="https://mneedham.github.io/tag/impersonators/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Impersonators: Using them in showcases</title>
      <link>https://mneedham.github.io/2009/09/10/impersonators-using-them-in-showcases/</link>
      <pubDate>Thu, 10 Sep 2009 00:23:33 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/09/10/impersonators-using-them-in-showcases/</guid>
      <description>Towards the end of my colleague Julio Maia&amp;rsquo;s blog post about the impersonator pattern he suggests that the standalone environment that we can create through the use of impersonators can be quite useful for showcases and we actually had a recent occasion where we had to switch mid-showcase from using the integration environment to make use of an impersonator.
In this case part of the environment went down in the middle of the showcase so if we wanted to keep on going then that was our only option but in general the expectation of the business is that our showcases show them the functionality of the application end to end.</description>
    </item>
    
    <item>
      <title>Impersonators: Finding the enabling point</title>
      <link>https://mneedham.github.io/2009/08/19/impersonators-finding-the-enabling-point/</link>
      <pubDate>Wed, 19 Aug 2009 00:43:18 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/08/19/impersonators-finding-the-enabling-point/</guid>
      <description>One of the other interesting problems that we&amp;rsquo;ve come across while making use of different impersonators in our build process, and which Julio mentions at the end of his comment on Gil Zilberfeld&amp;rsquo;s blog post, is trying to work out where the correct place for the impersonator is.
Ideally we want to put the impersonator in a place where we can easily turn it on or off depending on whether we want to use the impersonator or the real end point.</description>
    </item>
    
    <item>
      <title>Impersonators: Why do we need them?</title>
      <link>https://mneedham.github.io/2009/08/16/impersonators-why-do-we-need-them/</link>
      <pubDate>Sun, 16 Aug 2009 22:11:25 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/08/16/impersonators-why-do-we-need-them/</guid>
      <description>I wrote previously about an impersonator we are using on my project which Martin Fowler has dubbed the &amp;lsquo;self initializing fake&amp;rsquo; and although I thought this was the only type of situation where we might use this approach, from discussing this with my colleague Julio Maia and from experiences on the project I&amp;rsquo;m working on I realise there are other advantages to this approach as well.
To deal with unstable/slow integration points This is the main reason that we use the self initializing fake and provides perhaps the most obvious reason why we might create an impersonator because we will remain in pain if we don&#39;t create one.</description>
    </item>
    
  </channel>
</rss>