<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oop on Mark Needham</title>
    <link>http://mneedham.github.io/tag/oop/</link>
    <description>Recent content in Oop on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 31 Dec 2009 16:08:25 +0000</lastBuildDate>
    
	<atom:link href="http://mneedham.github.io/tag/oop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OOP: Behavioural and Structural constraints</title>
      <link>http://mneedham.github.io/2009/12/31/oop-behavioural-and-structural-constraints/</link>
      <pubDate>Thu, 31 Dec 2009 16:08:25 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/31/oop-behavioural-and-structural-constraints/</guid>
      <description>A few months ago I wrote a post describing how we should test the behaviour of code rather than the implementation whereby we would write tests against the public API of an object rather than exposing other internal data of the object and testing against that directly.
While I still think this is a useful way of testing code I didn&amp;rsquo;t really have a good definition for what makes that a test of an object&amp;rsquo;s behaviour.</description>
    </item>
    
    <item>
      <title>Coding Dojo #18: Groovy Bowling Game</title>
      <link>http://mneedham.github.io/2009/06/26/coding-dojo-18-groovy-bowling-game/</link>
      <pubDate>Fri, 26 Jun 2009 18:15:23 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/26/coding-dojo-18-groovy-bowling-game/</guid>
      <description>This week&amp;rsquo;s dojo involved coding a familiar problem - the bowling game - in a different language, Groovy.
The code we wrote is available on bitbucket.
The Format Cam, Dean and I took turns pairing with each other with the code projected onto a TV. As there were only a few of us the discussion on where we were taking the code tended to included everyone rather than just the two at the keyboard.</description>
    </item>
    
    <item>
      <title>OO with a bit of functional mixed in</title>
      <link>http://mneedham.github.io/2009/04/25/oo-with-a-bit-of-functional-mixed-in/</link>
      <pubDate>Sat, 25 Apr 2009 11:14:12 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/25/oo-with-a-bit-of-functional-mixed-in/</guid>
      <description>From my experiences playing around with F# and doing a bit of functional C# I&amp;rsquo;m beginning to think that the combination of functional and object oriented programming actually results in code which I think is more expressive and easy to work with than code written only with an object oriented approach in mind.
I&amp;rsquo;m also finding it much more fun to write code this way!
In a recent post Dean Wampler questions whether the supremacy of object oriented programming is over before going on to suggest that the future is probably going to be a mix of functional programming and object oriented programming.</description>
    </item>
    
    <item>
      <title>OO: Reducing the cost of...lots of stuff!</title>
      <link>http://mneedham.github.io/2009/03/12/oo-reducing-the-cost-oflots-of-stuff/</link>
      <pubDate>Thu, 12 Mar 2009 04:04:22 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/12/oo-reducing-the-cost-oflots-of-stuff/</guid>
      <description>I&amp;rsquo;ve been working in the world of professional software development for a few years now and pretty much take it as a given that the best way to write code which is easy for other people to understand and work with is to write that code in an object oriented way.
Not everyone agrees with this approach of course and I&amp;rsquo;ve been told on occasions that I&amp;rsquo;m &amp;lsquo;over object orienting&amp;rsquo; (is that even a word?</description>
    </item>
    
    <item>
      <title>OO: Micro Types</title>
      <link>http://mneedham.github.io/2009/03/10/oo-micro-types/</link>
      <pubDate>Tue, 10 Mar 2009 22:40:57 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/10/oo-micro-types/</guid>
      <description>Micro or Tiny types present an approach to coding which seems to divide opinion in my experience, from those who think it&amp;rsquo;s a brilliant idea to those who believe it&amp;rsquo;s static typing gone mad.
I fall into the former group.
So what is it?
The idea is fairly simple - all primitives and strings in our code are wrapped by a class, meaning that we never pass primitives around.
In essence Rule #3 of Jeff Bay&amp;rsquo;s Object Calisthenics.</description>
    </item>
    
    <item>
      <title>OOP: What does an object&#39;s responsibility entail?</title>
      <link>http://mneedham.github.io/2009/02/09/oop-what-does-an-objects-responsibility-entail/</link>
      <pubDate>Mon, 09 Feb 2009 16:52:10 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/09/oop-what-does-an-objects-responsibility-entail/</guid>
      <description>One of the interesting discussions I&amp;rsquo;ve been having recently with some colleagues is around where the responsibility lies for describing the representation of an object when it is to be used in another bounded context - e.g. on the user interface or in a call to another system.
I believe that an object should be responsible for deciding how its data is used rather than having another object reach into it, retrieve its data and then decide what to do with it.</description>
    </item>
    
    <item>
      <title>Object Calisthenics: First thoughts</title>
      <link>http://mneedham.github.io/2008/11/06/object-calisthenics-first-thoughts/</link>
      <pubDate>Thu, 06 Nov 2008 21:30:26 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2008/11/06/object-calisthenics-first-thoughts/</guid>
      <description>We ran an Object Calisthenics variation of Coding Dojo on Wednesday night as part of ThoughtWorks Geek Night in Sydney.
Object Calisthenics is an idea suggest by Jeff Bay in The ThoughtWorks Anthology , and lists 9 rules to writing better Object Oriented code. For those who haven&amp;rsquo;t seen the book, the 9 rules are:
 Use only one level of indentation per method  Don&#39;t use the else keyword Wrap all primitives and strings Use only one dot per line Don&#39;t abbreviate Keep all entities small Don&#39;t use any classes with more than two instance variables Use first-class collections Don&#39;t use any getters/setters/properties  We decided to try and solve the Bowling Game Problem while applying these rules.</description>
    </item>
    
    <item>
      <title>Similarities between Domain Driven Design &amp; Object Oriented Programming</title>
      <link>http://mneedham.github.io/2008/09/20/similarities-between-domain-driven-design-object-oriented-programming/</link>
      <pubDate>Sat, 20 Sep 2008 13:12:25 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2008/09/20/similarities-between-domain-driven-design-object-oriented-programming/</guid>
      <description>At the Alt.NET UK Conference which I attended over the weekend it occurred to me while listening to some of the discussions on Domain Driven Design that a lot of the ideas in DDD are actually very similar to those being practiced in Object Oriented Programming and related best practices.
The similarities Anaemic Domain Model/Law of Demeter There was quite a bit of discussion in the session about anaemic domain models.</description>
    </item>
    
    <item>
      <title>My Software Development journey so far</title>
      <link>http://mneedham.github.io/2008/09/01/my-software-development-journey-so-far/</link>
      <pubDate>Mon, 01 Sep 2008 01:01:09 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2008/09/01/my-software-development-journey-so-far/</guid>
      <description>While reading some of the rough drafts of Apprenticeship Patterns online I started thinking about the stages I have gone through on my Software Development journey so far.
I have worked in the industry for just over 3 years; 1 year at Reed Business and 2 years at ThoughtWorks. Over that time my thoughts, opinions and ways of doing things have changed, and no doubt these will continue to evolve as I learn more and more.</description>
    </item>
    
    <item>
      <title>Encapsulation in build scripts using nant</title>
      <link>http://mneedham.github.io/2008/08/21/encapsulation-in-build-scripts-using-nant/</link>
      <pubDate>Thu, 21 Aug 2008 00:40:45 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2008/08/21/encapsulation-in-build-scripts-using-nant/</guid>
      <description>When writing build scripts it&amp;rsquo;s very easy for it to descend into complete Xml hell when you&amp;rsquo;re using a tool like nant.
I wondered previously whether it was possible to TDD build files and while this is difficult given the dependency model most build tools follow. That doesn&amp;rsquo;t mean we can&amp;rsquo;t apply other good design principles from the coding world however.
Encapsulation is one of the key principles of OOP and it can be applied in build files too.</description>
    </item>
    
    <item>
      <title>Null checks everywhere and airport security</title>
      <link>http://mneedham.github.io/2008/07/18/null-checks-everywhere-and-airport-security/</link>
      <pubDate>Fri, 18 Jul 2008 08:32:00 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2008/07/18/null-checks-everywhere-and-airport-security/</guid>
      <description>Having just flown half way across the world from Sydney to London I&amp;rsquo;ve been thinking about how airport security is done and noticed a somewhat interesting link to the use of null checks in code.
In Sydney and Dubai airports my baggage and I were scanned only onceÂ before I was able to get onto the plane. I wasn&amp;rsquo;t scanned again when I went to the departure gate nor when I got onto the aircraft.</description>
    </item>
    
    <item>
      <title>Inheritance and Delegation</title>
      <link>http://mneedham.github.io/2006/09/02/inheritance-and-delegation/</link>
      <pubDate>Sat, 02 Sep 2006 01:31:40 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2006/09/02/inheritance-and-delegation/</guid>
      <description>One of the major learning points this week at TWU has been understanding when it is appropriate to use inheritance and when delegation is the better choice.
I had heard stories about how inheritance could be misused but I didn&amp;rsquo;t think I would be stupid enough to fall straight into that trap! We were taught the concept using &amp;lsquo;Measurement&amp;rsquo; as the problem domain. So to translate the previous sentence into English: The aim was to design classes which could handle old school measurement types such as Inches, Feet, Yards, and so on.</description>
    </item>
    
  </channel>
</rss>