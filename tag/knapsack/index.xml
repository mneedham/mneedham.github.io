<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Knapsack on Mark Needham</title>
    <link>https://mneedham.github.io/tag/knapsack/</link>
    <description>Recent content in Knapsack on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Jan 2013 00:12:25 +0000</lastBuildDate>
    
	<atom:link href="https://mneedham.github.io/tag/knapsack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Knapsack Problem in Haskell</title>
      <link>https://mneedham.github.io/2013/01/09/knapsack-problem-in-haskell/</link>
      <pubDate>Wed, 09 Jan 2013 00:12:25 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2013/01/09/knapsack-problem-in-haskell/</guid>
      <description>I recently described two versions of the Knapsack problem written in Ruby and Python and one common thing is that I used a global cache to store the results of previous calculations.
From my experience of coding in Haskell it&#39;s not considered very idiomatic to write code like that and although I haven&#39;t actually tried it, potentially more tricky to achieve.
I thought it&#39;d be interesting to try and write the algorithm in Haskell with that constraint in mind and my first version looked like this:</description>
    </item>
    
    <item>
      <title>Knapsack Problem: Python vs Ruby</title>
      <link>https://mneedham.github.io/2013/01/07/knapsack-problem-python-vs-ruby/</link>
      <pubDate>Mon, 07 Jan 2013 00:47:34 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2013/01/07/knapsack-problem-python-vs-ruby/</guid>
      <description>The latest algorithm that we had to code in Algorithms 2 was the Knapsack problem which is as follows:
 The knapsack problem or rucksack problem is a problem in combinatorial optimization: Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.</description>
    </item>
    
  </channel>
</rss>