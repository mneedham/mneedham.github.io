<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lean on Mark Needham</title>
    <link>https://mneedham.github.io/tag/lean/</link>
    <description>Recent content in Lean on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Apr 2010 22:53:07 +0000</lastBuildDate>
    
	<atom:link href="https://mneedham.github.io/tag/lean/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Agile: Slimming down stories</title>
      <link>https://mneedham.github.io/2010/04/14/agile-slimming-down-stories/</link>
      <pubDate>Wed, 14 Apr 2010 22:53:07 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2010/04/14/agile-slimming-down-stories/</guid>
      <description>On the project I&amp;rsquo;m currently working on we have several stories around writing the code that does various different calculations based on user input and then shows the results on the screen.
The original assumption on these stories was that we would be looking up the data of the business rules from a local database. The data would be copied across from a central database into that one for this project.</description>
    </item>
    
    <item>
      <title>Shu Ha Ri harmful?</title>
      <link>https://mneedham.github.io/2010/02/26/shu-ha-ri-harmful/</link>
      <pubDate>Fri, 26 Feb 2010 23:53:31 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2010/02/26/shu-ha-ri-harmful/</guid>
      <description>I came across a blog post by Rachel Davies where she wonders whether the Shu-Ha-Ri approach to learning/teaching is actually harmful and I found Rachel&amp;rsquo;s thoughts around the teaching of principles and practices quite interesting.
 Quoting Jeff Sutherland:  Only when you have mastered the basic practices are you allowed to improvise. And the last and most important â€“ Before you have gained discipline, centering, and flexibility, you are a hazard to yourself and others.</description>
    </item>
    
    <item>
      <title>Set Based Concurrent Engineering: A simple example</title>
      <link>https://mneedham.github.io/2009/09/19/set-based-concurrent-engineering-a-simple-example/</link>
      <pubDate>Sat, 19 Sep 2009 02:24:11 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/09/19/set-based-concurrent-engineering-a-simple-example/</guid>
      <description>One of my favourite ideas that I came across while reading the Poppendieck&amp;rsquo;s Lean Software Development is set based concurrent engineering which encourages us to keep our options open with regards to the solution to a problem until we absolutely need to decide on an approach after which we probably can&amp;rsquo;t easily change that decision so we will most likely stick with it.
I like the idea but on the projects I&amp;rsquo;ve worked on we often seem to take a more point based approach - there will be some discussion up front on the potential solutions to a problem and eventually one of them will be considered to be the best solution and we go and implement that one.</description>
    </item>
    
    <item>
      <title>Lean: Big Picture over Local Optimisations</title>
      <link>https://mneedham.github.io/2009/04/14/lean-big-picture-over-local-optimisations/</link>
      <pubDate>Tue, 14 Apr 2009 22:10:13 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/04/14/lean-big-picture-over-local-optimisations/</guid>
      <description>I recently finished reading Lean Thinking and one of the things that was repeatedly emphasised is the need to look at the process as a whole rather than trying to optimise each part individually.
If we phrased this in a similar way to the Agile Manifesto it would probably read &amp;lsquo;Big Picture over Local Optimisations&amp;rsquo;.
The examples in Lean Thinking tend to be more manufacturing focused but I think this idea can certainly be applied in thinking about software projects too.</description>
    </item>
    
    <item>
      <title>QTB: Lean Times Require Lean Thinking</title>
      <link>https://mneedham.github.io/2009/03/25/qtb-lean-times-require-lean-thinking/</link>
      <pubDate>Wed, 25 Mar 2009 00:36:09 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/03/25/qtb-lean-times-require-lean-thinking/</guid>
      <description>I went to watch the latest ThoughtWorks Quarterly Technology Briefing on Tuesday, which was presented by my colleague Jason Yip and Paul Heaton, titled &amp;lsquo;Lean Times Require Lean Thinking&amp;lsquo;
I&amp;rsquo;ve been reading quite a bit of lean related material lately but I thought it would be interesting to hear about it directly from the perspective of two people who have been involved with applying the concepts in organisations.
What did I learn?</description>
    </item>
    
    <item>
      <title>Lean Thinking: Book Review</title>
      <link>https://mneedham.github.io/2009/03/21/lean-thinking-book-review/</link>
      <pubDate>Sat, 21 Mar 2009 10:36:52 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/03/21/lean-thinking-book-review/</guid>
      <description>The Book Lean Thinking by James P. Womack and Daniel T. Jones
The Review This is the latest book in my lean learning after The Toyota Way, Taiichi Ohno&amp;rsquo;s Workplace Management and Lean Software Development and seemed like the most logical one to read next as it came at lean from a slightly different angle.
I found this the most hard going of the books I&amp;rsquo;ve read on the subject so far.</description>
    </item>
    
    <item>
      <title>Lean Software Development: Book Review</title>
      <link>https://mneedham.github.io/2008/12/20/lean-software-development-book-review/</link>
      <pubDate>Sat, 20 Dec 2008 17:29:49 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2008/12/20/lean-software-development-book-review/</guid>
      <description>The Book Lean Software Development by Mary and Tom Poppendieck
The Review I&amp;rsquo;m keen to learn how the ideas from The Toyota Way can be applied to software development and as far as I know this is the first book which addressed this, hence the reason for me reading it.
What did I learn?  I found the idea of financial based decisions particularly interesting - I&#39;ve often had situations when developing software where there are trade offs to make and it would have been much easier to make them if we had a dollar value associated with each potential solution.</description>
    </item>
    
    <item>
      <title>Taiichi Ohno&#39;s Workplace Management: Book Review</title>
      <link>https://mneedham.github.io/2008/12/09/taiichi-ohnos-workplace-management-book-review/</link>
      <pubDate>Tue, 09 Dec 2008 00:14:48 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2008/12/09/taiichi-ohnos-workplace-management-book-review/</guid>
      <description>The Book Taiichi Ohno&amp;rsquo;s Workplace Management by Taiichi Ohno
The Review Having completed The Toyota Way a few weeks ago I was speaking with Jason about what books were good to read next - he recommended this one and The Toyota Way Fieldbook.
I struggled to see a connection to software development with a lot of what I read, but there were certainly words of wisdom that we can apply to continuously improve our ability to deliver projects.</description>
    </item>
    
    <item>
      <title>Dave Thomas on Managing Lean and Agile In Large Software Development</title>
      <link>https://mneedham.github.io/2008/12/05/dave-thomas-on-managing-lean-and-agile-in-large-software-development/</link>
      <pubDate>Fri, 05 Dec 2008 00:00:50 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2008/12/05/dave-thomas-on-managing-lean-and-agile-in-large-software-development/</guid>
      <description>No coding dojo update this week as Dave Thomas was in the ThoughtWorks Sydney office to talk about Managing Lean and Agile in Large Software Development.
It was actually a talk to the Geek Girls Sydney group but I sneaked in to hear his other talk after listening to the cloud computing one last week.
It was a much toned down presentation compared to the cloud computing one although still amusing in places.</description>
    </item>
    
    <item>
      <title>Agile/Lean: All or Nothing?</title>
      <link>https://mneedham.github.io/2008/11/26/agilelean-all-or-nothing/</link>
      <pubDate>Wed, 26 Nov 2008 06:29:06 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2008/11/26/agilelean-all-or-nothing/</guid>
      <description>While reading The Toyota Way one of the ideas which stood out for me was the constant mentioning of organisations which picked bits of The Toyota Way, implemented them, achieved some short term gains but then eventually these improvements and went back to the way they were before.
I noticed a similar theme coming out in the series of posts in the last week or so about the decline of agile.</description>
    </item>
    
    <item>
      <title>The Toyota Way: Book Review</title>
      <link>https://mneedham.github.io/2008/11/19/the-toyota-way-book-review/</link>
      <pubDate>Wed, 19 Nov 2008 06:53:08 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2008/11/19/the-toyota-way-book-review/</guid>
      <description>The Book The Toyota Way by Jeffrey Liker
The Review
I was initially very skeptical about the value of lean in software development but became intrigued as to its potential value after listening to Jason championing it. Since The Toyota Way is the book where many of the ideas originated from I thought it only made sense for this to be my first port of call to learn about lean.</description>
    </item>
    
  </channel>
</rss>