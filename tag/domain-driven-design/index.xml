<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Domain Driven Design on Mark Needham</title>
    <link>https://mneedham.github.io/tag/domain-driven-design/</link>
    <description>Recent content in Domain Driven Design on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 31 Mar 2012 09:06:14 +0000</lastBuildDate>
    
	<atom:link href="https://mneedham.github.io/tag/domain-driven-design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Micro Services: A simple example</title>
      <link>https://mneedham.github.io/2012/03/31/micro-services-a-simple-example/</link>
      <pubDate>Sat, 31 Mar 2012 09:06:14 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2012/03/31/micro-services-a-simple-example/</guid>
      <description>In our code base we had the concept of a &amp;lsquo;ProductSpeed&amp;rsquo; with two different constructors which initialised the object in different ways:
public class ProductSpeed { public ProductSpeed(String name) { ... } public ProductSpeed(String name, int order)) { } }  In the cases where the first constructor was used the order of the product was irrelevant.
When the second constructor was used we did care about it because we wanted to be able sort the products before showing them in a drop down list to the user.</description>
    </item>
    
    <item>
      <title>Strategic Design (Responsibility Traps) - Eric Evans</title>
      <link>https://mneedham.github.io/2010/01/18/strategic-design-responsibility-traps-eric-evans/</link>
      <pubDate>Mon, 18 Jan 2010 22:52:15 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2010/01/18/strategic-design-responsibility-traps-eric-evans/</guid>
      <description>Reading through some of Simon Harris&amp;rsquo; blog entries I came across his thoughts on a presentation Eric Evans did at QCon titled &amp;lsquo;Strategic Design - Responsibility Traps&amp;rsquo; which seems to cover a lot of the ground from the second half of Domain Driven Design and more.
In the presentation Evans make some really insightful comments and points out a lot of mistakes that I&amp;rsquo;ve made on projects. It certainly serves as a reminder to go back and read part 4 of the book again and really understand the material from that section.</description>
    </item>
    
    <item>
      <title>Value objects: Immutability and Equality</title>
      <link>https://mneedham.github.io/2009/10/23/value-objects-immutability-and-equality/</link>
      <pubDate>Fri, 23 Oct 2009 23:39:05 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/10/23/value-objects-immutability-and-equality/</guid>
      <description>A couple of weeks ago I was working on some code where I wanted to create an object composed of the attributes of several other objects.
The object that I wanted to construct was a read only object so it seemed to make sense to make it a value object. The object would be immutable and once created none of the attributes of the object would change.
This was my first attempt at writing the code for this object:</description>
    </item>
    
    <item>
      <title>Book Club: Unshackle your domain (Greg Young)</title>
      <link>https://mneedham.github.io/2009/08/29/book-club-unshackle-your-domain-greg-young/</link>
      <pubDate>Sat, 29 Aug 2009 09:54:39 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/08/29/book-club-unshackle-your-domain-greg-young/</guid>
      <description>In this week&amp;rsquo;s book club we continued with the idea of discussing videos, this week&amp;rsquo;s selection being Greg Young&amp;rsquo;s &amp;lsquo;Unshackle your Domain&amp;rsquo; presentation from QCon San Francisco in November 2008. He also did a version of this talk in the February European Alt.NET meeting.
In this presentation Greg talks about Command Query Separation at the architecture level and explicit state transitions amongst other things.
Jonathan Oliver has created a useful resource page of the material that&amp;rsquo;s been written about some of these ideas as well.</description>
    </item>
    
    <item>
      <title>Domain Driven Design: Anti Corruption Layer</title>
      <link>https://mneedham.github.io/2009/07/07/domain-driven-design-anti-corruption-layer/</link>
      <pubDate>Tue, 07 Jul 2009 09:05:57 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/07/07/domain-driven-design-anti-corruption-layer/</guid>
      <description>I previously wrote about some of the Domain Driven Design patterns we have noticed on my project and I think the pattern which ties all these together is the anti corruption layer.
The reason why you might use an anti corruption layer is to create a little padding between subsystems so that they do not leak into each other too much.
 Remember, an ANTICORRUPTION LAYER is a means of linking two BOUNDED CONTEXTS.</description>
    </item>
    
    <item>
      <title>Domain Driven Design: Conformist</title>
      <link>https://mneedham.github.io/2009/07/04/domain-driven-design-conformist/</link>
      <pubDate>Sat, 04 Jul 2009 10:17:31 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/07/04/domain-driven-design-conformist/</guid>
      <description>Something which constantly surprises me about Domain Driven Design is how there is a pattern described in the book for just about every possible situation you find yourself in when coding on projects.
A lot of these patterns appear in the &amp;lsquo;Strategic Design&amp;rsquo; section of the book and one which is very relevant for the project I&amp;rsquo;m currently working on is the &amp;lsquo;Conformist&amp;rsquo; pattern which is described like so:
 When two development teams have an upstream/downstream relationship in which the upstream has no motivation to provide for the downstream team&#39;s needs, the downstream team is helpless.</description>
    </item>
    
    <item>
      <title>DDD: Making implicit concepts explicit</title>
      <link>https://mneedham.github.io/2009/04/23/ddd-making-implicit-concepts-explicit/</link>
      <pubDate>Thu, 23 Apr 2009 12:36:25 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/04/23/ddd-making-implicit-concepts-explicit/</guid>
      <description>One of my favourite parts of the Domain Driven Design book is where Eric Evans talks about making implicit concepts in our domain model explicit.
The book describes this process like so:
 Many transformations of domain models and the corresponding code happen when developers recognize a concept that has been hinted at in discussion or present implicitly in the design, and they then represent it explicitly in the model with one or more objects or relationships.</description>
    </item>
    
    <item>
      <title>DDD: Only for complex projects?</title>
      <link>https://mneedham.github.io/2009/04/06/ddd-only-for-complex-projects/</link>
      <pubDate>Mon, 06 Apr 2009 19:21:55 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/04/06/ddd-only-for-complex-projects/</guid>
      <description>One of the things I find a bit confusing when it comes to Domain Driven Design is that some of the higher profile speakers/user group contributors on the subject have expressed the opinion that DDD is more suitable when we are dealing with complex projects.
I think this means complex in terms of the domain but I&amp;rsquo;ve certainly worked on some projects where we&amp;rsquo;ve been following certainly some of the ideas of DDD and have got some value out of doing so in domains which I wouldn&amp;rsquo;t say were particularly complex.</description>
    </item>
    
    <item>
      <title>DDD: Recognising relationships between bounded contexts</title>
      <link>https://mneedham.github.io/2009/03/30/ddd-recognising-relationships-between-bounded-contexts/</link>
      <pubDate>Mon, 30 Mar 2009 22:52:52 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/03/30/ddd-recognising-relationships-between-bounded-contexts/</guid>
      <description>One of the big takeaways for me from the Domain Driven Design track at the recent QCon London conference was that the organisational patterns in the second half of the book are probably more important than the actual patterns themselves.
There are various patterns used to describe the relationships between different bounded contexts:
 Shared Kernel - This is where two teams share some subset of the domain model. This shouldn&#39;t be changed without the other team being consulted.</description>
    </item>
    
    <item>
      <title>DDD: Repository pattern</title>
      <link>https://mneedham.github.io/2009/03/10/ddd-repository-not-only-for-databases/</link>
      <pubDate>Tue, 10 Mar 2009 10:31:27 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/03/10/ddd-repository-not-only-for-databases/</guid>
      <description>The Repository pattern from Domain Driven Design is one of the cleanest ways I have come across for separating our domain objects from their persistence mechanism.
Until recently every single implementation I had seen of this pattern involved directly using a database as the persistence mechanism with the repository acting as a wrapper around the Object Relational Mapper (Hibernate/NHibernate).
Now I consider there to be two parts to the repository pattern:</description>
    </item>
    
    <item>
      <title>DDD: Bounded Contexts</title>
      <link>https://mneedham.github.io/2009/03/07/ddd-bounded-contexts/</link>
      <pubDate>Sat, 07 Mar 2009 10:03:38 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/03/07/ddd-bounded-contexts/</guid>
      <description>I&amp;rsquo;ve been reading Casey Charlton&amp;rsquo;s excellent series of posts on Domain Driven Design recently and today came across his thoughts about which types of applications Domain Driven Design is suited to.
Towards the end of the post he talks about the fact that there is a lot of excellent ideas in Domain Driven Design even if you don&amp;rsquo;t have the chance to use all of them.
 ...there is a wealth of wisdom and experience encapsulated in Domain Driven Design – use what you think applies to your situation, and you will find your software becoming more flexible, more reactive to your audience, and easier to understand – just don’t expect miracles, and beware of over complicating your code for the sake of it – sometimes simpler really is better.</description>
    </item>
    
    <item>
      <title>Trade Offs: Some Thoughts</title>
      <link>https://mneedham.github.io/2009/03/02/trade-offs-some-thoughts/</link>
      <pubDate>Mon, 02 Mar 2009 23:01:11 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/03/02/trade-offs-some-thoughts/</guid>
      <description>As we know with software development with pretty much every decision we make or technology we choose there is a trade off that goes with making this choice as compared with choosing an alternative.
I first learnt this when working with Ade a couple of years ago and while I know it to be true, I had come to believe that some practices are just non-negotiable and we should look to apply them judiciously wherever possible.</description>
    </item>
    
    <item>
      <title>How does the user language fit in with the ubiquitous language?</title>
      <link>https://mneedham.github.io/2009/01/10/how-does-the-user-language-fit-in-with-the-ubiquitous-language/</link>
      <pubDate>Sat, 10 Jan 2009 15:38:01 +0000</pubDate>
      
      <guid>https://mneedham.github.io/2009/01/10/how-does-the-user-language-fit-in-with-the-ubiquitous-language/</guid>
      <description>We&amp;rsquo;ve been doing some work this week around trying to ensure that we have a ubiquitous language to describe aspects of the domain across the various different systems on my project.
It&amp;rsquo;s not easy as there are several different teams involved but one thing we realised while working on the language is that the language of the business is not the same as the language of the user.
Although this is the first time that I recall working on a project where the language of the user is different to the language of the domain I&amp;rsquo;m sure there must be other domains where this is the case as well.</description>
    </item>
    
  </channel>
</rss>