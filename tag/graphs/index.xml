<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphs on Mark Needham</title>
    <link>http://mneedham.github.io/tag/graphs/</link>
    <description>Recent content in Graphs on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jul 2013 00:37:41 +0000</lastBuildDate>
    
	<atom:link href="http://mneedham.github.io/tag/graphs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Graph Processing: Calculating betweenness centrality for an undirected graph using graphstream</title>
      <link>http://mneedham.github.io/2013/07/19/graph-processing-calculating-betweenness-centrality-for-an-undirected-graph-using-graphstream/</link>
      <pubDate>Fri, 19 Jul 2013 00:37:41 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2013/07/19/graph-processing-calculating-betweenness-centrality-for-an-undirected-graph-using-graphstream/</guid>
      <description>Since I now spend most of my time surrounded by graphs I thought it&#39;d be interesting to learn a bit more about graph processing, a topic my colleague Jim wrote about a couple of years ago.
I like to think of the types of queries you&#39;d do with a graph processing engine as being similar in style graph global queries where you take most of the nodes in a graph into account and do some sort of calculation.</description>
    </item>
    
    <item>
      <title>Bellman-Ford algorithm in Python</title>
      <link>http://mneedham.github.io/2013/01/18/bellman-ford-algorithm-in-python/</link>
      <pubDate>Fri, 18 Jan 2013 00:40:32 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2013/01/18/bellman-ford-algorithm-in-python/</guid>
      <description>The latest problem of the Algorithms 2 class required us to write an algorithm to calculate the shortest path between two nodes on a graph and one algorithm which allows us to do this is Bellman-Ford.
Bellman-Ford computes the single source shortest path which means that if we have a 5 vertex graph we&#39;d need to run it 5 times to find the shortest path for each vertex and then find the shortest paths of those shortest paths.</description>
    </item>
    
    <item>
      <title>gephi: Centring a graph around an individual node</title>
      <link>http://mneedham.github.io/2012/04/30/gephi-centring-a-graph-around-an-individual-node/</link>
      <pubDate>Mon, 30 Apr 2012 22:20:45 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2012/04/30/gephi-centring-a-graph-around-an-individual-node/</guid>
      <description>I spent some time recently playing around with gephi - an open source platform for creating visualisations of graphs - to get a bit more insight into the ThoughtWorks graph which I&amp;rsquo;ve created in neo4j.
I followed Max De Marxi&amp;rsquo;s blog post to create a GEFX (Graph Exchange XML Format) file to use in gephi although I later learned that you can import directly from neo4j into gephi which I haven&amp;rsquo;t tried yet.</description>
    </item>
    
  </channel>
</rss>