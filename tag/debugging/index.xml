<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Debugging on Mark Needham</title>
    <link>http://mneedham.github.io/tag/debugging/</link>
    <description>Recent content in Debugging on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Dec 2009 05:26:46 +0000</lastBuildDate>
    
	<atom:link href="http://mneedham.github.io/tag/debugging/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Debug It: Book Review</title>
      <link>http://mneedham.github.io/2009/12/24/debug-it-book-review/</link>
      <pubDate>Thu, 24 Dec 2009 05:26:46 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/24/debug-it-book-review/</guid>
      <description>David Agans&amp;rsquo; &amp;lsquo;Debugging&amp;rsquo; is the best debugging book that I&amp;rsquo;ve read so I was intrigued to see that there was another book being written on the subject.
Paul Butcher offered me a copy of the book to review so I was keen to see whether it was more like &amp;lsquo;Debugging&amp;rsquo; or &amp;lsquo;Release It&amp;rsquo; as Ted Neward suggests.
The Book Debug It by Paul Butcher
The Review Much like Krzysztof Kozmic I found that a lot of the ideas early on in the book were similar to what I&amp;rsquo;ve been taught by my ThoughtWorks colleagues over the last 3 1&amp;frasl;2 years.</description>
    </item>
    
    <item>
      <title>Debugging: Get to a stage where it works</title>
      <link>http://mneedham.github.io/2009/05/12/debugging-get-to-a-stage-where-it-works/</link>
      <pubDate>Tue, 12 May 2009 09:21:13 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/12/debugging-get-to-a-stage-where-it-works/</guid>
      <description>When debugging a problem I&amp;rsquo;ve learnt far too many times that where possible the most effective approach is to try and get the application back into a state where it does work and then analyse the changes that have resulted in it no longer working as expected.
About 7 or 8 years ago when I used to code PHP at school and university that pretty much was my default approach - I didn&amp;rsquo;t really know how to program well enough to work out how to fix something that was broken so I would always just revert back all the steps I&amp;rsquo;d done until it worked.</description>
    </item>
    
    <item>
      <title>Coding: Making the debugger redundant</title>
      <link>http://mneedham.github.io/2009/03/22/coding-making-the-debugger-redundant/</link>
      <pubDate>Sun, 22 Mar 2009 19:52:31 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/22/coding-making-the-debugger-redundant/</guid>
      <description>I recently wrote my dislike of the debugger and related to this, I spent some time last year watching some videos from JAOO 2007 on MSDN&amp;rsquo;s Channel 9. One of my favourites is an interview featuring Joe Armstrong and Eric Meijer where Joe Armstrong points out that when coding Erlang he never has to use a debugger because state is immutable.
In Erlang, once you set the value of a variable &amp;lsquo;x&amp;rsquo; it cannot be changed.</description>
    </item>
    
    <item>
      <title>Saff Squeeze: First Thoughts</title>
      <link>http://mneedham.github.io/2008/11/21/saff-squeeze-first-thoughts/</link>
      <pubDate>Fri, 21 Nov 2008 00:58:07 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2008/11/21/saff-squeeze-first-thoughts/</guid>
      <description>While practicing some coding by doing the Roman number conversion last weekend I came across an article by Kent Beck which talked of a method he uses to remove the need to use the debugger to narrow down problems.
He calls the method the &amp;lsquo;Saff Squeeze&amp;rsquo; and the basic idea as I understand it is to write the original failing test and then inline the pieces of code that it calls, adding assertions earlier on in the code until the actual point of failure is found.</description>
    </item>
    
    <item>
      <title>Debugging 3rd party libraries more effectively</title>
      <link>http://mneedham.github.io/2008/11/09/debugging-3rd-party-libraries-more-effectively/</link>
      <pubDate>Sun, 09 Nov 2008 21:55:17 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2008/11/09/debugging-3rd-party-libraries-more-effectively/</guid>
      <description>Debugging 3rd party library code quickly and effectively is one of the skills which most obviously separates Senior and Junior developers from my experience.
From observation over the last couple of years there are some patterns in the approaches which the best debuggers take.
Get more information Sometimes it&amp;rsquo;s difficult to understand exactly how to solve a problem without getting more information.
Verbose logging mode is available on the majority of libraries and provides the information showing how everything fits together which is normally enough information to work out how to solve the problem.</description>
    </item>
    
  </channel>
</rss>