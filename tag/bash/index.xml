<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on Mark Needham</title>
    <link>http://mneedham.github.io/tag/bash/</link>
    <description>Recent content in Bash on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Oct 2017 10:06:55 +0000</lastBuildDate>
    
	<atom:link href="http://mneedham.github.io/tag/bash/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes: Simple example of pod running</title>
      <link>http://mneedham.github.io/2017/10/21/kubernetes-simple-example-pod-running/</link>
      <pubDate>Sat, 21 Oct 2017 10:06:55 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2017/10/21/kubernetes-simple-example-pod-running/</guid>
      <description>I recently needed to create a Kubernetes pod that would &#39;just sit there&#39; while I used kube cp to copy some files to a persistent volume to which it was bound. I started out with this naive pod spec:
 pod_no_while.yaml kind: Pod apiVersion: v1 metadata: name: marks-dummy-pod spec: containers: - name: marks-dummy-pod image: ubuntu restartPolicy: Never  Let&#39;s apply that template:
$ kubectl apply -f pod_no_while.yaml pod &amp;quot;marks-dummy-pod&amp;quot; created   And let&#39;s check if we have any running pods: $ kubectl get pods No resources found, use --show-all to see completed objects.</description>
    </item>
    
    <item>
      <title>Shell: Create a comma separated string</title>
      <link>http://mneedham.github.io/2017/06/23/shell-create-comma-separated-string/</link>
      <pubDate>Fri, 23 Jun 2017 12:26:49 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2017/06/23/shell-create-comma-separated-string/</guid>
      <description>I recently needed to generate a string with comma separated values, based on iterating a range of numbers.  e.g. we should get the following output where n = 3 foo-0,foo-1,foo-2  I only had the shell available to me so I couldn&#39;t shell out into Python or Ruby for example. That means it&#39;s bash scripting time!
 If we want to iterate a range of numbers and print them out on the screen we can write the following code: n=3 for i in $(seq 0 $(($n &amp;gt; 0?</description>
    </item>
    
    <item>
      <title>Finding ways to use bash command line history shortcuts</title>
      <link>http://mneedham.github.io/2012/09/19/finding-ways-to-use-bash-command-line-history-shortcuts/</link>
      <pubDate>Wed, 19 Sep 2012 07:00:22 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2012/09/19/finding-ways-to-use-bash-command-line-history-shortcuts/</guid>
      <description>A couple of months ago I wrote about a bunch of command line history shortcuts that Phil had taught me and after recently coming across Peteris Krumins&amp;rsquo; bash history cheat sheet I thought it&amp;rsquo;d be interesting to find some real ways to use them.
A few weeks ago I wrote about a UTF-8 byte order mark (BOM) that I wanted to remove from a file I was working on and I realised this evening that there were some other files with the same problem.</description>
    </item>
    
    <item>
      <title>Bash: Reusing previous commands</title>
      <link>http://mneedham.github.io/2011/10/13/bash-reusing-previous-commands/</link>
      <pubDate>Thu, 13 Oct 2011 19:46:20 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2011/10/13/bash-reusing-previous-commands/</guid>
      <description>A lot of the time when I&amp;rsquo;m using the bash shell I want to re-use commands that I&amp;rsquo;ve previously entered and I&amp;rsquo;ve recently learnt some neat ways to do this from my colleagues Tom and Kief.
If we want to list the history of all the commands we&amp;rsquo;ve entered in a shell session then the following command does the trick:
&amp;gt; history ... 761 sudo port search pdfinfo 762 to_ipad andersen-phd-thesis.</description>
    </item>
    
  </channel>
</rss>