<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Micro Services 2 on Mark Needham</title>
    <link>http://mneedham.github.io/tag/micro-services-2/</link>
    <description>Recent content in Micro Services 2 on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Feb 2013 00:00:03 +0000</lastBuildDate>
    
	<atom:link href="http://mneedham.github.io/tag/micro-services-2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Micro Services: Where does the complexity go?</title>
      <link>http://mneedham.github.io/2013/02/28/micro-services-where-does-the-complexity-go/</link>
      <pubDate>Thu, 28 Feb 2013 00:00:03 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2013/02/28/micro-services-where-does-the-complexity-go/</guid>
      <description>For the past year every system that I&#39;ve worked on has been designed around a micro services architecture and while there are benefits with this approach there is an inherent complexity in software which has to go somewhere!
I thought it&#39;d be interesting to run through some of the new complexities that I&#39;ve noticed in what may well be an acknowledgement of the difficulty of designing distributed systems.
Interactions between components One of the advantages of having lots of small applications is that each one is conceptually easier to understand and we only need to keep the mental model of how that one application works when we&#39;re working on it.</description>
    </item>
    
    <item>
      <title>Micro Services: Readme files</title>
      <link>http://mneedham.github.io/2013/02/25/micro-services-readme-files/</link>
      <pubDate>Mon, 25 Feb 2013 23:58:51 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2013/02/25/micro-services-readme-files/</guid>
      <description>By my latest count I have around 15 different micro services/applications checked out on my machine which comprise the system that I&#39;m currently working on.
Most of these are Ruby related so it&#39;s easy to figure out how to start up a local copy because it&#39;s either bundle exec rails server if it&#39;s a rails application or bundle exec backup if it&#39;s a sinatra/rack application. The clojure applications follow a similar convention and we use rake to run any offline tasks.</description>
    </item>
    
    <item>
      <title>Micro Services: Plugging in 3rd party components</title>
      <link>http://mneedham.github.io/2012/12/04/micro-services-plugging-in-3rd-party-components/</link>
      <pubDate>Tue, 04 Dec 2012 23:38:39 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2012/12/04/micro-services-plugging-in-3rd-party-components/</guid>
      <description>Over the past few weeks I&#39;ve been involved in conversations with different clients around micro services and one thing about this architecture that seems quite popular is the ability to easily plug in 3rd party components.
In one case we were talking through the design of a system which would calculate and then apply price optimisations on products. The parts of the system we were discussing looked roughly like this:</description>
    </item>
    
  </channel>
</rss>