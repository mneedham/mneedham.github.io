<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2009s on Mark Needham</title>
    <link>http://mneedham.github.io/2009/</link>
    <description>Recent content in 2009s on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 31 Dec 2009 16:08:25 +0000</lastBuildDate>
    
	<atom:link href="http://mneedham.github.io/2009/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OOP: Behavioural and Structural constraints</title>
      <link>http://mneedham.github.io/2009/12/31/oop-behavioural-and-structural-constraints/</link>
      <pubDate>Thu, 31 Dec 2009 16:08:25 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/31/oop-behavioural-and-structural-constraints/</guid>
      <description>A few months ago I wrote a post describing how we should test the behaviour of code rather than the implementation whereby we would write tests against the public API of an object rather than exposing other internal data of the object and testing against that directly.
While I still think this is a useful way of testing code I didn&amp;rsquo;t really have a good definition for what makes that a test of an object&amp;rsquo;s behaviour.</description>
    </item>
    
    <item>
      <title>Roy Osherove&#39;s TDD Kata: My first attempt</title>
      <link>http://mneedham.github.io/2009/12/25/roy-osheroves-tdd-kata-my-first-attempt/</link>
      <pubDate>Fri, 25 Dec 2009 22:25:57 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/25/roy-osheroves-tdd-kata-my-first-attempt/</guid>
      <description>I recently came across Roy Osherove&amp;rsquo;s commentary on Corey Haines&amp;rsquo; attempt at Roy&amp;rsquo;s TDD Kata so I thought I&amp;rsquo;d try it out in C#.
Andrew Woodward has recorded his version of the kata where he avoids using the mouse for the whole exercise so I tried to avoid using the mouse as well and it was surprisingly difficult!
I&amp;rsquo;ve only done the first part of the exercise so far which is as follows:</description>
    </item>
    
    <item>
      <title>Debug It: Book Review</title>
      <link>http://mneedham.github.io/2009/12/24/debug-it-book-review/</link>
      <pubDate>Thu, 24 Dec 2009 05:26:46 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/24/debug-it-book-review/</guid>
      <description>David Agans&amp;rsquo; &amp;lsquo;Debugging&amp;rsquo; is the best debugging book that I&amp;rsquo;ve read so I was intrigued to see that there was another book being written on the subject.
Paul Butcher offered me a copy of the book to review so I was keen to see whether it was more like &amp;lsquo;Debugging&amp;rsquo; or &amp;lsquo;Release It&amp;rsquo; as Ted Neward suggests.
The Book Debug It by Paul Butcher
The Review Much like Krzysztof Kozmic I found that a lot of the ideas early on in the book were similar to what I&amp;rsquo;ve been taught by my ThoughtWorks colleagues over the last 3 1&amp;frasl;2 years.</description>
    </item>
    
    <item>
      <title>Duke Nukem Forever &amp; Reworking code</title>
      <link>http://mneedham.github.io/2009/12/23/duke-nukem-forever-reworking-code/</link>
      <pubDate>Wed, 23 Dec 2009 07:27:51 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/23/duke-nukem-forever-reworking-code/</guid>
      <description>Cosmin Stejerean linked to a really interesting article on wired.com which tells the story of how Duke Nukem failed over 12 years to ship their latest game, eventually giving up.
Phil has written a post about the article from the angle of his experience working with these types of companies and working out how to get something into production but as I read this article it seemed to have some relation to reworking code and why/how we approach this.</description>
    </item>
    
    <item>
      <title>One change at a time</title>
      <link>http://mneedham.github.io/2009/12/22/one-change-at-a-time/</link>
      <pubDate>Tue, 22 Dec 2009 06:01:04 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/22/one-change-at-a-time/</guid>
      <description>I&amp;rsquo;m reading through Paul Butcher&amp;rsquo;s &amp;lsquo;Debug It&amp;rsquo; book and one of his suggestions when trying to diagnose a problem in our code is to only change one thing at a time.
In a way this might seem fairly obvious but I&amp;rsquo;ve certainly fallen into the trap of making multiple changes at the same time in the misled belief that it&amp;rsquo;ll lead to the problem being solved more quickly.
When making changes to code Butcher has the following piece of advice which I quite like:  Once you see a change in behavior, undo whatever apparently caused it, and verify that the behavior retur ns to what it was before-hand.</description>
    </item>
    
    <item>
      <title>F#: Word Count using a Dictionary</title>
      <link>http://mneedham.github.io/2009/12/20/f-word-count-using-a-dictionary/</link>
      <pubDate>Sun, 20 Dec 2009 10:09:30 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/20/f-word-count-using-a-dictionary/</guid>
      <description>Having spent some time unsuccessfully trying to make my F# attempt at the word count problem work I decided to follow the lead of the other examples I&amp;rsquo;ve read and make use of a Dictionary to keep count of the words.
I originally thought that I might be having a problem with the downloading of the files and storing of those strings in memory so I tried to change that bit of code to be lazily evaluated:</description>
    </item>
    
    <item>
      <title>Book Club: Working Effectively With Legacy Code - Chapters 12 &amp; 13 (Michael Feathers)</title>
      <link>http://mneedham.github.io/2009/12/20/book-club-working-effectively-with-legacy-code-chapters-12-13-michael-feathers/</link>
      <pubDate>Sun, 20 Dec 2009 03:52:12 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/20/book-club-working-effectively-with-legacy-code-chapters-12-13-michael-feathers/</guid>
      <description>In the last Sydney book club that I attended before I moved back to the UK we discussed Chapters 12 and 13 of Michael Feathers&amp;rsquo; &amp;lsquo;Working Effectively With Legacy Code&amp;lsquo;
Liz has taken over the summarising of the book club now that I&amp;rsquo;m not there so if you want to keep on reading about the book club Liz&amp;rsquo;s blog is the place to go!
Chapter 12 - I Need to Make Many Changes in One Area.</description>
    </item>
    
    <item>
      <title>F#: The use keyword and using function</title>
      <link>http://mneedham.github.io/2009/12/19/f-the-use-keyword-and-using-function/</link>
      <pubDate>Sat, 19 Dec 2009 10:33:57 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/19/f-the-use-keyword-and-using-function/</guid>
      <description>While I was playing around with the little F# script that I wrote to try and solve the word count problem I noticed that in a couple of places I had used the &amp;lsquo;use&amp;rsquo; keyword when dealing with resources that needed to be released when they&amp;rsquo;d been used.
Using the &amp;lsquo;use&amp;rsquo; keyword means that the &amp;lsquo;Dispose&amp;rsquo; method will be called on the resource when it goes out of scope.
The two examples were &amp;lsquo;StreamWriter&amp;rsquo; and &amp;lsquo;StreamReader&amp;rsquo;:</description>
    </item>
    
    <item>
      <title>You and Your Research - Richard Hamming</title>
      <link>http://mneedham.github.io/2009/12/19/you-and-your-research-richard-hamming/</link>
      <pubDate>Sat, 19 Dec 2009 02:52:15 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/19/you-and-your-research-richard-hamming/</guid>
      <description>Another paper that I read on my Sydney to London flight was one titled &amp;lsquo;You and Your Research&amp;rsquo; by Richard Hamming.
It&amp;rsquo;s a transcript of a talk that Richard Hamming gave to Bellcore employees at the Morris Research and Engineering Centre in 1986.
The talk is aimed at computer science researchers and Hamming describes ways for them to do the best research that they can. I think several of the ideas in the talk relate to software development as well.</description>
    </item>
    
    <item>
      <title>Coding: An outside in observation</title>
      <link>http://mneedham.github.io/2009/12/19/coding-an-outside-in-observation/</link>
      <pubDate>Sat, 19 Dec 2009 00:55:19 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/19/coding-an-outside-in-observation/</guid>
      <description>I&amp;rsquo;ve been reading Michl Henning&amp;rsquo;s post on API design and one thing which he points out is that it&amp;rsquo;s important to drive the design of an API based on the way that it will be used by its clients:
 A great way to get usable APIs is to let the customer (namely, the caller) write the function signature, and to give that signature to a programmer to implement. This step alone eliminates at least half of poor APIs: too often, the implementers of APIs never use their own creations, with disastrous consequences for usability  This is similar to Michael Feathers&amp;rsquo; Golden Rule of API Design:</description>
    </item>
    
    <item>
      <title>F#: Word Count - A somewhat failed attempt</title>
      <link>http://mneedham.github.io/2009/12/18/f-word-count-a-somewhat-failed-attempt/</link>
      <pubDate>Fri, 18 Dec 2009 02:58:34 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/18/f-word-count-a-somewhat-failed-attempt/</guid>
      <description>I came across Zach Cox&amp;rsquo;s word count problem via Sam Aaron and Ola Bini&amp;rsquo;s twitter streams and I thought it&amp;rsquo;d be interesting to try it out in F# to see what the solution would be like.
The solution needs to count word frequencies from a selection of newsgroup articles.
I wanted to see if it was possible to write it in F# without using a map to keep track of how many of each word had been found.</description>
    </item>
    
    <item>
      <title>Coding: Naming</title>
      <link>http://mneedham.github.io/2009/12/16/coding-naming/</link>
      <pubDate>Wed, 16 Dec 2009 22:08:22 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/16/coding-naming/</guid>
      <description>Sarah Taraporewalla recently wrote an interesting post about the importance of words with respect to the way that we use them in our code and it reminded me of some conversations I&amp;rsquo;ve had with Dave Cameron about the importance of creating a shared understanding of the different types/objects in the systems that we build.
On a few projects that I&amp;rsquo;ve worked on where we didn&amp;rsquo;t have a common understanding of what different concepts in the domain should be I noticed that there was a reluctance to make changes to class names.</description>
    </item>
    
    <item>
      <title>The Computer Scientist as Toolsmith - Fred Brooks</title>
      <link>http://mneedham.github.io/2009/12/16/the-computer-scientist-as-toolsmith-fred-brooks/</link>
      <pubDate>Wed, 16 Dec 2009 06:15:14 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/16/the-computer-scientist-as-toolsmith-fred-brooks/</guid>
      <description>I&amp;rsquo;ve come across a couple of posts recently talking about the gender specificness of the term &amp;lsquo;Software Craftsman&amp;rsquo; and Victoria suggests that the term &amp;lsquo;Codesmith&amp;rsquo; would be a more appropriate name to use.
I&amp;rsquo;m not that bothered what the name is but I was reading the transcript of Fred Brooks&amp;rsquo; acceptance speech for winning the ACM Allen Newell Award in 1994 titled &amp;lsquo;The Computer Scientist as Toolsmith&amp;rsquo; which has some interesting ideas about what our role should be.</description>
    </item>
    
    <item>
      <title>Coding: The little details all add to our understanding</title>
      <link>http://mneedham.github.io/2009/12/15/coding-the-little-details-all-add-to-our-understanding/</link>
      <pubDate>Tue, 15 Dec 2009 08:09:05 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/15/coding-the-little-details-all-add-to-our-understanding/</guid>
      <description>I&amp;rsquo;ve been watching an interesting presentation by Scott Hanselmann titled &amp;lsquo;Information Overload and Managing the Flow&amp;rsquo; from OreDev where he covers various strategies to allow us to be more productive in the face of the huge amounts of information constantly threatening to overwhelm us.
One interesting suggestion he has around 37 minutes in is that when learning a new language it might be a good idea to contact someone who&amp;rsquo;s an expert in that language and get some framing knowledge on the type of stuff that&amp;rsquo;s worth learning and what we might not bother with.</description>
    </item>
    
    <item>
      <title>TDD: Only mock types you own</title>
      <link>http://mneedham.github.io/2009/12/13/tdd-only-mock-types-you-own/</link>
      <pubDate>Sun, 13 Dec 2009 21:47:04 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/13/tdd-only-mock-types-you-own/</guid>
      <description>Liz recently posted about mock objects and the original &amp;lsquo;mock roles, not objects&amp;rsquo; paper and one thing that stood out for me is the idea that we should only mock types that we own.
I think this is quite an important guideline to follow otherwise we can end up in a world of pain.
One area which seems particularly vulnerable to this type of thing is when it comes to testing code which interacts with Hibernate.</description>
    </item>
    
    <item>
      <title>Clojure: My first attempt at a macro</title>
      <link>http://mneedham.github.io/2009/12/12/clojure-my-first-attempt-at-a-macro/</link>
      <pubDate>Sat, 12 Dec 2009 03:53:37 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/12/clojure-my-first-attempt-at-a-macro/</guid>
      <description>I&amp;rsquo;m up to the chapter on using macros in Stuart Halloway&amp;rsquo;s &amp;lsquo;Programming Clojure&amp;rsquo; book and since I&amp;rsquo;ve never used a language which has macros in before I thought it&amp;rsquo;d be cool to write one.
In reality there&amp;rsquo;s no reason to create a macro to do what I want to do but I wanted to keep the example simple so I could try and understand exactly how macros work.
I want to create a macro which takes in one argument and then prints hello and the person&amp;rsquo;s name.</description>
    </item>
    
    <item>
      <title>Clojure: Forgetting the brackets</title>
      <link>http://mneedham.github.io/2009/12/12/clojure-forgetting-the-brackets/</link>
      <pubDate>Sat, 12 Dec 2009 03:51:19 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/12/clojure-forgetting-the-brackets/</guid>
      <description>I&amp;rsquo;ve been playing around with macros over the last few days and while writing a simple one forgot to include the brackets to make it evaluate correctly:
(defmacro say-hello [person] println &amp;quot;Hello&amp;quot; person)  This macro doesn&amp;rsquo;t even expand like I thought it would:
user=&amp;gt; (macroexpand-1 &#39;(say-hello blah)) blah  That seemed a bit strange to me but I eventually realised that I&amp;rsquo;d missed off the brackets around &amp;lsquo;println&amp;rsquo; and the arguments following it which would have resulted in &amp;lsquo;println&amp;rsquo; being evaluated with those arguments.</description>
    </item>
    
    <item>
      <title>TDD: Big leaps and small steps</title>
      <link>http://mneedham.github.io/2009/12/10/tdd-big-leaps-and-small-steps/</link>
      <pubDate>Thu, 10 Dec 2009 22:14:26 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/10/tdd-big-leaps-and-small-steps/</guid>
      <description>About a month ago or so Gary Bernhardt wrote a post showing how to get started with TDD and while the post is quite interesting, several comments on the post pointed out that he had jumped from iteratively solving the problem straight to the solution with his final step.
Something which I&amp;rsquo;ve noticed while solving algorithmic problems in couple of different functional programming languages is that the test driven approach doesn&amp;rsquo;t work so well for these types of problems.</description>
    </item>
    
    <item>
      <title>Haskell vs F#: Function composition</title>
      <link>http://mneedham.github.io/2009/12/09/haskell-vs-f-function-composition/</link>
      <pubDate>Wed, 09 Dec 2009 22:10:27 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/09/haskell-vs-f-function-composition/</guid>
      <description>I&amp;rsquo;m reading through John Hughes&amp;rsquo; &amp;lsquo;Why functional programming matters&amp;rsquo; paper and one thing I&amp;rsquo;ve come across which is a bit counter intuitive to me is the Haskell function composition operator.
I&amp;rsquo;ve written previously about F#&amp;rsquo;s function composition operator which is defined as follows:
let inline (&amp;gt;&amp;gt;) f g x = g(f x)  To write a function which doubled all the values in a list and then returned the odd values we&amp;rsquo;d do this:</description>
    </item>
    
    <item>
      <title>Clojure: when-let macro</title>
      <link>http://mneedham.github.io/2009/12/09/clojure-when-let-macro/</link>
      <pubDate>Wed, 09 Dec 2009 02:41:47 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/09/clojure-when-let-macro/</guid>
      <description>In my continued playing around with Clojure I came across the &amp;lsquo;when-let&amp;rsquo; macro.
&amp;lsquo;when-let&amp;rsquo; is used when we want to bind an expression to a symbol and only execute the body provided as the second argument to the macro if that symbol evaluates to true.
As I wrote previously, a value of &amp;lsquo;false&amp;rsquo; or &amp;lsquo;nil&amp;rsquo; would result in the second argument not being evaluated.
A simple example of using &amp;lsquo;when-let&amp;rsquo; would be:</description>
    </item>
    
    <item>
      <title>Our obsession with efficiency - Dan North</title>
      <link>http://mneedham.github.io/2009/12/07/our-obsession-with-efficiency-dan-north/</link>
      <pubDate>Mon, 07 Dec 2009 17:05:57 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/07/our-obsession-with-efficiency-dan-north/</guid>
      <description>Oredev have put some of the videos from the conference on Vimeo and one of my favourites is &amp;lsquo;Our obsession with efficiency&amp;rsquo; by my colleague Dan North.
The slides for the talk are available on SlideShare.
In this talk Dan leads from the following statement about efficiency:
 So here&#39;s the thing, I don&#39;t believe in efficiency. It&#39;s our obsession with efficiency that has got us into the current technology mess, and which has led almost directly to heavy waterfall processes.</description>
    </item>
    
    <item>
      <title>Clojure: Unit testing in the REPL</title>
      <link>http://mneedham.github.io/2009/12/06/clojure-unit-testing-in-the-repl/</link>
      <pubDate>Sun, 06 Dec 2009 03:28:05 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/06/clojure-unit-testing-in-the-repl/</guid>
      <description>One thing which I think is great about coding with F# is the quick feedback that we can get by defining and then testing out functions in the REPL.
We can do the same thing in Clojure but it&amp;rsquo;s even better because we can also define and run unit tests which I think is pretty neat.
Nurullah Akkaya has a good post which describes how to use clojure.test, a testing framework written by Stuart Sierra so I&amp;rsquo;ve been using that to define some tests cases for the little RSS feed parser that I&amp;rsquo;m writing.</description>
    </item>
    
    <item>
      <title>Book Club: Working Effectively With Legacy Code - Chapter 11 (Michael Feathers)</title>
      <link>http://mneedham.github.io/2009/12/03/book-club-working-effectively-with-legacy-code-chapter-11-michael-feathers/</link>
      <pubDate>Thu, 03 Dec 2009 16:27:29 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/03/book-club-working-effectively-with-legacy-code-chapter-11-michael-feathers/</guid>
      <description>In our latest technical book club we discussed chapter 11 - &amp;lsquo;I Need to Make a Change. What Methods Should I Test?&amp;rsquo; - of Michael Feathers&amp;rsquo; &amp;lsquo;Working Effectively With Legacy Code&amp;rsquo;.
In this chapter Feathers covers some techniques which allow us to work out which parts of the code we need to write tests around when we make changes.
These are some of my thoughts and our discussion of the chapter:</description>
    </item>
    
    <item>
      <title>Fundamentals of Object-Oriented Design in UML: Book Review</title>
      <link>http://mneedham.github.io/2009/12/01/fundamentals-of-object-oriented-design-in-uml-book-review/</link>
      <pubDate>Tue, 01 Dec 2009 23:26:38 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/12/01/fundamentals-of-object-oriented-design-in-uml-book-review/</guid>
      <description>One of my favourite recent blog posts is one written by Sammy Larbi on coupling and cohesion and while discussing it with Phil he suggested that I would probably like this book and in particular the chapter on connascence which I&amp;rsquo;ve previously written about.
The Book Fundamentals of Object-Oriented Design in UML by Meilir Page-Jones
The Review I really enjoyed reading this book and I think it&amp;rsquo;s one that I could come back and read again to gain something else from in the future.</description>
    </item>
    
    <item>
      <title>Clojure: Parsing an RSS feed</title>
      <link>http://mneedham.github.io/2009/11/30/clojure-parsing-an-rss-feed/</link>
      <pubDate>Mon, 30 Nov 2009 18:33:55 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/30/clojure-parsing-an-rss-feed/</guid>
      <description>I&amp;rsquo;ve been playing around with a little script in Clojure to parse the ThoughtWorks Blogs RSS feed and then create a tweet for each of them which contains a link to the blog post and the person&amp;rsquo;s Twitter ID if they have one.
It&amp;rsquo;s not finished yet but I&amp;rsquo;m finding the way that we parse documents like this in Clojure quite intriguing.
The xml to parse looks roughly like this:</description>
    </item>
    
    <item>
      <title>TDD: Testing delegation</title>
      <link>http://mneedham.github.io/2009/11/27/tdd-testing-delegation/</link>
      <pubDate>Fri, 27 Nov 2009 14:43:45 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/27/tdd-testing-delegation/</guid>
      <description>I recently came across an interesting blog post by Rod Hilton on unit testing and it reminded me of a couple of conversations Phil, Raph and I were having about the best way to test classes which delegate some responsibility to another class.
An example that we ran into recently was where we wrote some code which required one controller to delegate to another.
public class ControllerOne extends Controller { public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception { } }  public class ControllerTwo extends Controller { private final ControllerOne controllerOne; public ControllerTwo(ControllerOne controllerOne) { this.</description>
    </item>
    
    <item>
      <title>Clojure: The &#39;apply&#39; function</title>
      <link>http://mneedham.github.io/2009/11/25/clojure-the-apply-function/</link>
      <pubDate>Wed, 25 Nov 2009 11:59:11 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/25/clojure-the-apply-function/</guid>
      <description>In my continued playing around with Clojure I came across the &amp;lsquo;apply&amp;rsquo; function which is used when we want to call another function with a number of arguments but have actually been given a single argument which contains the argument list.
The example that I&amp;rsquo;ve been trying to understand is applying &amp;lsquo;str&amp;rsquo; to a collection of values.
I started off with the following:
(str [1 2 3]) =&amp;gt; &amp;quot;[1 2 3]&amp;quot;  This just returns the string representation of the vector that we passed it, but what we actually want is to get an output of &amp;ldquo;123&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Book Club: Working Effectively With Legacy Code - Chapter 10 (Michael Feathers)</title>
      <link>http://mneedham.github.io/2009/11/24/book-club-working-effectively-with-legacy-code-chapter-10-michael-feathers/</link>
      <pubDate>Tue, 24 Nov 2009 23:31:25 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/24/book-club-working-effectively-with-legacy-code-chapter-10-michael-feathers/</guid>
      <description>In our latest technical book club we discussed chapter 10 - &amp;lsquo;I Can&amp;rsquo;t Run This Method in a Test Harness&amp;rsquo; - of Michael Feather&amp;rsquo;s &amp;lsquo;Working Effectively With Legacy Code&amp;rsquo;.
In this chapter Feathers outlines some of the problems we might have getting methods under test and then suggests some ways to get around those problems.
These are some of my thoughts and our discussion of the chapter:
 I quite like the idea of pragmatic refactoring that Feathers suggests early on in the chapter: Ideally, it would be great to break it down into smaller classes, but we have to carefully consider whether we want to do that much refactoring right now.</description>
    </item>
    
    <item>
      <title>Writing a Java function in Clojure</title>
      <link>http://mneedham.github.io/2009/11/23/writing-a-java-function-in-clojure/</link>
      <pubDate>Mon, 23 Nov 2009 20:08:20 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/23/writing-a-java-function-in-clojure/</guid>
      <description>A function that we had to write in Java on a project that I worked on recently needed to indicate whether there was a gap in a series of data points or not.
If there were gaps at the beginning or end of the sequence then that was fine but gaps in the middle of the sequence were not.
null, 1, 2, 3 =&amp;gt; no gaps 1, 2, 3, null =&amp;gt; no gaps 1, null, 2, 3 =&amp;gt; gaps  The Java version looked a bit like this:</description>
    </item>
    
    <item>
      <title>Requirements: The story points focus</title>
      <link>http://mneedham.github.io/2009/11/23/requirements-the-story-points-focus/</link>
      <pubDate>Mon, 23 Nov 2009 11:46:52 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/23/requirements-the-story-points-focus/</guid>
      <description>Something which an agile approach on a project typically gives us is the ability to change requirements rapidly based on the different types of feedback we typically get over the course of the project.
One way that we can lose this advantage is by getting caught up by the number of story points being completed and using this as the measure of success.
The flexibility to change has an impact on the number of story points that may be completed in a given iteration - if we start doing some work on a story and then get feedback from the business while it is still in progress it&amp;rsquo;s possible that we will end up with more work to do than we had previously.</description>
    </item>
    
    <item>
      <title>Pair Programming/Helping/Working Collaboratively</title>
      <link>http://mneedham.github.io/2009/11/22/pair-programminghelpingworking-collaboratively/</link>
      <pubDate>Sun, 22 Nov 2009 16:43:24 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/22/pair-programminghelpingworking-collaboratively/</guid>
      <description>Dan North has been presenting his &amp;lsquo;Pimp my architecture&amp;rsquo; talk again at QCon San Francisco this week and after reading the hugely positive feedback on Twitter I decided to watch some of it again.
The idea of getting people to help each other rather than pair program is what stood out for me this time, something which Brian Guthrie also pointed out:
 &#34;We didn&#39;t do pairing, we did &#39;helping&#39;. You can&#39;t get alpha progs to &#39;pair&#39; but they&#39;ll tell you what they know.</description>
    </item>
    
    <item>
      <title>Clojure: Checking for a nil value in a collection</title>
      <link>http://mneedham.github.io/2009/11/21/clojure-checking-for-a-nil-value-in-a-collection/</link>
      <pubDate>Sat, 21 Nov 2009 22:11:22 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/21/clojure-checking-for-a-nil-value-in-a-collection/</guid>
      <description>Something which I wanted to do recently was write a function that would indicate whether a collection contained a nil value.
I initially incorrectly thought the &amp;lsquo;contains?&amp;rsquo; function was the one that I wanted:
(contains? &#39;(1 nil 2 3) nil) =&amp;gt; false  I thought it would work the same as the Java equivalent but that function actually checks whether a key exists in a collection rather than a value. It&amp;rsquo;s more useful when dealing with maps.</description>
    </item>
    
    <item>
      <title>Clojure: A few things I&#39;ve been tripping up on</title>
      <link>http://mneedham.github.io/2009/11/20/clojure-a-few-things-ive-been-tripping-up-on/</link>
      <pubDate>Fri, 20 Nov 2009 13:11:03 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/20/clojure-a-few-things-ive-been-tripping-up-on/</guid>
      <description>In my continued playing with Clojure I&amp;rsquo;m noticing a few things that I keep getting confused about.
The meaning of parentheses Much like Keith Bennett I&#39;m not used to parentheses playing such an important role in the way that an expression gets evaluated. As I understand it if an expression is enclosed in parentheses then that means it will be evaluated as a function. For example I spent quite a while trying to work out why the following code kept throwing a class cast exception: ~~~lisp (if (true) 1 0) ~~~ If you run that code in the REPL you&#39;ll get the following exception because &#39;true&#39; isn&#39;t a function and therefore can&#39;t be applied as such: ~~~text java.</description>
    </item>
    
    <item>
      <title>Two controllers, type conformance and the Liskov Substitution Principle </title>
      <link>http://mneedham.github.io/2009/11/19/two-controllers-type-conformance-and-the-liskov-substitution-principle/</link>
      <pubDate>Thu, 19 Nov 2009 00:08:39 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/19/two-controllers-type-conformance-and-the-liskov-substitution-principle/</guid>
      <description>An interesting object orientation related problem that Raph and I were looking at recently revolved around the design of two controllers in the application we&amp;rsquo;ve been working on.
The two controllers in question look roughly like this:
public class GenericController extends Controller { private final SomeFactory someFactory; public GenericController(SomeFactory someFactory); this.someFactory = someFactory; } public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception { // do some stuff but never use &#39;request&#39; or &#39;response&#39; } }  public class MoreSpecificController extends GenericController { private final SomeFactory someFactory; public MoreSpecificController(SomeFactory someFactory); super(someFactory); } public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception { .</description>
    </item>
    
    <item>
      <title>Book Club: Working Effectively With Legacy Code - Chapter 9 (Michael Feathers)</title>
      <link>http://mneedham.github.io/2009/11/18/book-club-working-effectively-with-legacy-code-chapter-9-michael-feathers/</link>
      <pubDate>Wed, 18 Nov 2009 17:25:32 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/18/book-club-working-effectively-with-legacy-code-chapter-9-michael-feathers/</guid>
      <description>In our latest technical book club we discussed chapter 9 - &amp;lsquo;I Can&amp;rsquo;t Get This Class Into A Test Harness&amp;rsquo; - of Michael Feather&amp;rsquo;s &amp;lsquo;Working Effectively With Legacy Code&amp;rsquo;.
This chapter goes through various problems that we might have getting a class under test and then suggests different techniques to get around those problems.
These are some of my thoughts and our discussion of the chapter:
 One approach that Feathers describes when dealing with constructors which take in a lot of values is to just pass in nulls for the parameters that we don&#39;t care about.</description>
    </item>
    
    <item>
      <title>The &#39;should&#39; word</title>
      <link>http://mneedham.github.io/2009/11/17/the-should-word/</link>
      <pubDate>Tue, 17 Nov 2009 23:52:42 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/17/the-should-word/</guid>
      <description>I&amp;rsquo;ve been reading Coders at Work recently and one of my favourite answers from the first chapter interview with Jamie Zawinski is the following:
 I think one thing that&#39;s really important is not to be afraid of your ignorance. If you don&#39;t understand how something works, ask someone who does. A lot of people are skittish about that. And that doesn&#39;t help anybody. Not knowing something doesn&#39;t mean you&#39;re dumb - it just means you don&#39;t know it yet.</description>
    </item>
    
    <item>
      <title>Clojure: A first look at recursive functions</title>
      <link>http://mneedham.github.io/2009/11/17/clojure-a-first-look-at-recursive-functions/</link>
      <pubDate>Tue, 17 Nov 2009 11:10:37 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/17/clojure-a-first-look-at-recursive-functions/</guid>
      <description>I&amp;rsquo;m working through Stuart Halloway&amp;rsquo;s &amp;lsquo;Programming Clojure&amp;rsquo; book and I just got to the section where it first mentions recursive functions.
It&amp;rsquo;s a simple function to countdown from a given number to zero and then return that sequence.
This was one of the examples from the book:
(defn countdown [result x] (if (zero? x) result (recur (conj result x) (dec x))))  That function could then be called like this:</description>
    </item>
    
    <item>
      <title>A reminder to talk to the rubber duck</title>
      <link>http://mneedham.github.io/2009/11/15/a-reminder-to-talk-to-the-rubber-duck/</link>
      <pubDate>Sun, 15 Nov 2009 21:06:42 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/15/a-reminder-to-talk-to-the-rubber-duck/</guid>
      <description>Alongside taking a break from it perhaps one of the most effective ways to solve a tricky problem is to describe it to someone else.
When pairing This typically isn&amp;rsquo;t a problem when pair programming although it can still happen if a pair stays together too long and both start making the same possibly incorrect assumptions when trying to solve a problem.
In this case it makes sense to call someone else over who can lend a fresh perspective to the problem.</description>
    </item>
    
    <item>
      <title>Mercurial: hg bisect</title>
      <link>http://mneedham.github.io/2009/11/14/mercurial-hg-bisec/</link>
      <pubDate>Sat, 14 Nov 2009 11:20:13 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/14/mercurial-hg-bisec/</guid>
      <description>We&amp;rsquo;ve been using Mercurial locally on the project I&amp;rsquo;ve been working on and Phil showed me a cool feature called &amp;lsquo;bisect&amp;rsquo; a couple of weeks ago which can be helpful for working out which revision we managed to break our code in.
It&amp;rsquo;s been ported across from Git and is included in Mercurial from version 1.0.0 rather than just being an extension.
From the bisect extension page:  Its behaviour is fairly simple: it takes a first revision known to be correct (i.</description>
    </item>
    
    <item>
      <title>TDD: Combining the when and then steps</title>
      <link>http://mneedham.github.io/2009/11/14/tdd-combining-the-when-and-then-steps/</link>
      <pubDate>Sat, 14 Nov 2009 00:17:57 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/14/tdd-combining-the-when-and-then-steps/</guid>
      <description>I&amp;rsquo;ve written before about my favoured approach of writing tests in such a way that they have clear &amp;lsquo;Given/When/Then&amp;rsquo; sections and something which I come across quite frequently is tests where the latter steps have been combined into one method call which takes care of both of these.
An example of this which I came across recently was roughly like this:
@Test public void shouldCalculatePercentageDifferences() { verifyPercentage(50, 100, 100); verifyPercentage(100, 100, 0); verifyPercentage(100, 50, -50); }  private void verifyPercentage(int originalValue, int newValue, int expectedValue) { assertEquals(expectedValue, new PercentageCalculator().</description>
    </item>
    
    <item>
      <title>Adapting our approach for the context</title>
      <link>http://mneedham.github.io/2009/11/13/adapting-our-approach-for-the-context/</link>
      <pubDate>Fri, 13 Nov 2009 06:34:00 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/13/adapting-our-approach-for-the-context/</guid>
      <description>Amongst the many posts written recently about unit testing one which I quite liked was written by fallenrogue where he describes how in different contexts/cultures a different approach is favoured which means a technique like TDD might not work so well.
cashto, the guy who wrote the original post, agrees with this in the comments on that post:
 Absolutely right. I write apps on mobile devices in C++. What works for me may not work well for someone who designs websites with RoR, and vice versa.</description>
    </item>
    
    <item>
      <title>Coding: Pushing the logic back</title>
      <link>http://mneedham.github.io/2009/11/11/coding-pushing-the-logic-back/</link>
      <pubDate>Wed, 11 Nov 2009 20:30:08 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/11/coding-pushing-the-logic-back/</guid>
      <description>I was reading a post on the law of demeter by Richard Hart recently and it reminded me that a lot of the refactorings that we typically do on code bases are about pushing the logic back into objects instead of exposing data and performing calculations elsewhere.
An example that I spotted where we did this recently was while building a &amp;lsquo;BusinessSummary&amp;rsquo; object whose state was based on the state of a collection of other objects.</description>
    </item>
    
    <item>
      <title>Legacy Code: Sensing</title>
      <link>http://mneedham.github.io/2009/11/10/legacy-code-sensing/</link>
      <pubDate>Tue, 10 Nov 2009 06:33:22 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/10/legacy-code-sensing/</guid>
      <description>In &amp;lsquo;Working Effectively With Legacy Code&amp;rsquo; Michael Feathers describes two reasons for wanting to break dependencies in our code - to allow separation and sensing.
The former describes the need to get a piece of code into a test harness while the latter describes the need to assert whether that piece of code is doing what we want it to.
On the projects I&amp;rsquo;ve worked on we&amp;rsquo;ve tended to run into problems with the latter more frequently and Matt and I actually ran into this problem when we were refactoring some code into a role based interface approach.</description>
    </item>
    
    <item>
      <title>Coding: The agent noun class</title>
      <link>http://mneedham.github.io/2009/11/08/coding-the-agent-noun-class/</link>
      <pubDate>Sun, 08 Nov 2009 20:44:18 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/08/coding-the-agent-noun-class/</guid>
      <description>I refer quite frequently to a post written by my colleague Peter Gillard Moss where he describes the agent noun code smell for class names.
An agent noun is defined by Wikipedia as:
 In linguistics, an agent noun (or nomen agentis) is a word that is derived from another word denoting an action, and that identifies an entity that does that action.  Some typical examples of this are classes which end in the name &amp;lsquo;Manager&amp;rsquo;, &amp;lsquo;Retriever&amp;rsquo;, &amp;lsquo;Helper&amp;rsquo; or even &amp;lsquo;Controller&amp;rsquo; as Carlos points out.</description>
    </item>
    
    <item>
      <title>Knowing when to persevere and when to change approach</title>
      <link>http://mneedham.github.io/2009/11/08/knowing-when-to-persevere-and-when-to-change-approach/</link>
      <pubDate>Sun, 08 Nov 2009 09:57:41 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/08/knowing-when-to-persevere-and-when-to-change-approach/</guid>
      <description>It strikes me that one of the most important skills to develop in software development is knowing when to keep going with an approach to a problem and when we should stop and try something else.
This situation doesn&amp;rsquo;t always happen because if we have two people available and realise before we start on the task that there is some doubt as to which solution is the most appropriate then we can adopt a set based approach whereby we try out multiple potential solutions in parallel.</description>
    </item>
    
    <item>
      <title>TDD: Useful when new on a project</title>
      <link>http://mneedham.github.io/2009/11/06/tdd-useful-when-new-on-a-project/</link>
      <pubDate>Fri, 06 Nov 2009 21:57:10 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/06/tdd-useful-when-new-on-a-project/</guid>
      <description>Something which I&amp;rsquo;ve noticed over the last few projects that I&amp;rsquo;ve worked on is that at the beginning when I don&amp;rsquo;t know very much at all about the code base, domain and so on is that pairing with someone to TDD something seems to make it significantly easier for me to follow what&amp;rsquo;s going on than other approaches I&amp;rsquo;ve seen.
I thought that it was probably because I&amp;rsquo;m more used to that approach than any other but in Michael Feathers&amp;rsquo; description of TDD in &amp;lsquo;Working Effectively With Legacy Code&amp;rsquo; he points out the following:</description>
    </item>
    
    <item>
      <title>Consistency in the code base</title>
      <link>http://mneedham.github.io/2009/11/04/consistency-in-the-code-base/</link>
      <pubDate>Wed, 04 Nov 2009 21:39:28 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/04/consistency-in-the-code-base/</guid>
      <description>I&amp;rsquo;ve had quite a few discussions with various different colleagues about coding consistency over the last year or so and Pat Kua and Frank Trindade have both written posts suggesting that we should look to have coding standards on projects in order to avoid the type of pain that having an inconsistent approach can lead to.
From what I&amp;rsquo;ve noticed there seem to be two reasons that we end up with inconsistent code on projects:</description>
    </item>
    
    <item>
      <title>Reading Code: Unity</title>
      <link>http://mneedham.github.io/2009/11/04/reading-code-unity/</link>
      <pubDate>Wed, 04 Nov 2009 01:22:56 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/04/reading-code-unity/</guid>
      <description>I spent a bit of time reading some of the Unity code base recently and I decided to try out a variation of Michael Feathers &amp;lsquo;Effect Sketching&amp;rsquo; which my colleague Dave Cameron showed me.
&amp;lsquo;Effect Sketching&amp;rsquo; is a technique Feathers describes in &amp;lsquo;Working Effectively With Legacy Code&amp;rsquo; and the idea is that we sketch a diagram showing the interactions between the fields and methods in a specific class while browsing through the code.</description>
    </item>
    
    <item>
      <title>Book Club: Working Effectively With Legacy Code - Chapter 8 (Michael Feathers)</title>
      <link>http://mneedham.github.io/2009/11/03/book-club-working-effectively-with-legacy-code-chapter-8-michael-feathers/</link>
      <pubDate>Tue, 03 Nov 2009 00:16:32 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/11/03/book-club-working-effectively-with-legacy-code-chapter-8-michael-feathers/</guid>
      <description>In our latest technical book club we discussed chapter 8 - &amp;lsquo;How do I add a feature?&amp;rsquo; - of Michael Feather&amp;rsquo;s &amp;lsquo;Working Effectively With Legacy Code&amp;rsquo;.
This chapter covers Test Driven Development and a technique I hadn&amp;rsquo;t come across before called Programming By Difference.
These are some of my thoughts and our discussion of the chapter:
 In the section on TDD Feathers mentions the copy/paste/refactor pattern which I wrote about a few days ago.</description>
    </item>
    
    <item>
      <title>Coding: Copy/Paste then refactor</title>
      <link>http://mneedham.github.io/2009/10/31/coding-copypaste-then-refactor/</link>
      <pubDate>Sat, 31 Oct 2009 17:54:31 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/31/coding-copypaste-then-refactor/</guid>
      <description>We&amp;rsquo;re currently reading Michael Feathers &amp;lsquo;Working Effectively With Legacy Code&amp;rsquo; in our technical book club and one interesting technique which he describes in the Test Driven Development section is copying and pasting some existing code, changing the appropriate part to make the test pass before refactoring to remove the duplication we just created.
I can&amp;rsquo;t remember coming across this approach previously but I found myself using it to solve a Scala problem last week.</description>
    </item>
    
    <item>
      <title>Coding: Invariant checking on dependency injected components</title>
      <link>http://mneedham.github.io/2009/10/31/coding-invariant-checking-on-dependency-injected-components/</link>
      <pubDate>Sat, 31 Oct 2009 03:00:40 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/31/coding-invariant-checking-on-dependency-injected-components/</guid>
      <description>I&amp;rsquo;ve written a couple of times previously about invariant checking in constructors and I had an interesting discussion with some colleagues recently around doing this type of defensive programming when the object in question has its dependencies injected by a container.
Quite often we would see code similar to this in a controller:
public class SomeController { public SomeController(Dependency1 valueOne, Dependency2 valueTwo) { AssertThat.isNotNull(valueOne); AssertThat.isNotNull(valueTwo); // and so on } }  Where &amp;lsquo;SomeController&amp;rsquo; would have &amp;lsquo;Dependency1&amp;rsquo; and &amp;lsquo;Dependency2&amp;rsquo; set up in a Spring configuration file in this example.</description>
    </item>
    
    <item>
      <title>Coding: Consistency when invariant checking</title>
      <link>http://mneedham.github.io/2009/10/29/coding-consistency-when-invariant-checking/</link>
      <pubDate>Thu, 29 Oct 2009 23:06:35 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/29/coding-consistency-when-invariant-checking/</guid>
      <description>I wrote a while ago about reading the ASP.NET MVC source code and noticing that it makes use of code inside its constructors to ensure that null values can&amp;rsquo;t be passed in and while I&amp;rsquo;m still not convinced this is the way to go I think if we do take this approach then we need to ensure we do so consistently.
Something which happens quite often is that you&amp;rsquo;ll come across code which makes use of defensive programming in one of its constructors like so:</description>
    </item>
    
    <item>
      <title>Coding: Connascence - Some examples</title>
      <link>http://mneedham.github.io/2009/10/28/coding-connascence-some-examples/</link>
      <pubDate>Wed, 28 Oct 2009 22:43:01 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/28/coding-connascence-some-examples/</guid>
      <description>I&amp;rsquo;ve been reading Meilir Page Jones&amp;rsquo; &amp;lsquo;Fundamentals of Object Oriented Design in UML&amp;rsquo; recently and one of the chapters that I found the most interesting is the one where he talks about &amp;lsquo;connascence&amp;rsquo;.
Connascence describes the relation between two different bits of code and two bits of code are said to be connascent if a change to one bit of code would require a change to the other bit of the code  or if some change to another piece of code would require both bits of code to change for our program to still be correct.</description>
    </item>
    
    <item>
      <title>Book Club: Working Effectively With Legacy Code - Chapters 6 &amp; 7 (Michael Feathers)</title>
      <link>http://mneedham.github.io/2009/10/26/book-club-working-effectively-with-legacy-code-chapters-6-7-michael-feathers/</link>
      <pubDate>Mon, 26 Oct 2009 23:10:45 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/26/book-club-working-effectively-with-legacy-code-chapters-6-7-michael-feathers/</guid>
      <description>In our latest technical book club we covered chapters 6 &amp;amp; 7 - &amp;lsquo;I Don&amp;rsquo;t Have Much Time And I Have To Change It&amp;rsquo; and &amp;lsquo;It Takes Forever To Make A Change&amp;rsquo; - of Michael Feathers&amp;rsquo; &amp;lsquo;Working Effectively With Legacy Code&amp;rsquo;.
The first chapter discusses various different techniques that we can use to add in new code to a legacy code base. These include:
 Sprout method - create a new method for our new functionality and make a call to it from existing code.</description>
    </item>
    
    <item>
      <title>Scala: Converting an input stream to a string</title>
      <link>http://mneedham.github.io/2009/10/26/scala-converting-an-input-stream-to-a-string/</link>
      <pubDate>Mon, 26 Oct 2009 06:32:24 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/26/scala-converting-an-input-stream-to-a-string/</guid>
      <description>I was playing around with Scala over the weekend and one thing that I wanted to do was get the data from a HTTP response as a string so that I could parse the xml returned.
The data source is fairly small so loading the stream into memory wasn&amp;rsquo;t a problem.
Carlos pointed me to a bit of Java code that did this and I converted it as literally as possible into Scala.</description>
    </item>
    
    <item>
      <title>Testing End Points: Integration tests vs Contract tests</title>
      <link>http://mneedham.github.io/2009/10/25/testing-integration-points-integration-tests-vs-contract-tests/</link>
      <pubDate>Sun, 25 Oct 2009 00:04:12 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/25/testing-integration-points-integration-tests-vs-contract-tests/</guid>
      <description>We recently changed the way that we test against our main integration point on the project I&amp;rsquo;ve been working on so that in our tests we retrieve the service object from our dependency injection container instead of &amp;lsquo;newing&amp;rsquo; one up.
Our tests therefore went from looking like this:
[Test] public void ShouldTestSomeService() { var someService = new SomeService(); // and so on }  To something more like this:
[Test] public void ShouldTestSomeService() { var someService = UnityFactory.</description>
    </item>
    
    <item>
      <title>Value objects: Immutability and Equality</title>
      <link>http://mneedham.github.io/2009/10/23/value-objects-immutability-and-equality/</link>
      <pubDate>Fri, 23 Oct 2009 23:39:05 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/23/value-objects-immutability-and-equality/</guid>
      <description>A couple of weeks ago I was working on some code where I wanted to create an object composed of the attributes of several other objects.
The object that I wanted to construct was a read only object so it seemed to make sense to make it a value object. The object would be immutable and once created none of the attributes of the object would change.
This was my first attempt at writing the code for this object:</description>
    </item>
    
    <item>
      <title>Coding: The primitive obsession</title>
      <link>http://mneedham.github.io/2009/10/23/coding-the-primitive-obsession/</link>
      <pubDate>Fri, 23 Oct 2009 00:08:10 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/23/coding-the-primitive-obsession/</guid>
      <description>I recently came across an interesting post by Naresh Jain where he details a discussion at the SDTConf 2009 about the code smells that hurt people the most.
Naresh describes the &amp;lsquo;primitive obsession&amp;rsquo; anti pattern as being the crux of poor design:
 I would argue that I’ve seen code which does not have much duplication but its very difficult to understand what’s going on. Hence I claim, “only if the code had better abstractions it would be a lot easier to understand and evolve the code”.</description>
    </item>
    
    <item>
      <title>The effect of adding new people to project teams</title>
      <link>http://mneedham.github.io/2009/10/21/the-effect-of-adding-new-people-to-project-teams/</link>
      <pubDate>Wed, 21 Oct 2009 18:06:47 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/21/the-effect-of-adding-new-people-to-project-teams/</guid>
      <description>I&amp;rsquo;ve read quite frequently about the challenges we will experience when adding new people onto teams, including Fred Brooks&amp;rsquo; &amp;lsquo;The Mythical Man Month&amp;rsquo;, but having seen quite a few new people join the project that I&amp;rsquo;ve been working on over the last few months I think there are actually some significant benefits they can provide.
I think the impact new people provide is particularly useful on a challenging project where they may be able to have a much more immediate impact.</description>
    </item>
    
    <item>
      <title>Book Club: Working Effectively With Legacy Code - Chapters 3,4 &amp; 5 (Michael Feathers)</title>
      <link>http://mneedham.github.io/2009/10/20/book-club-working-effectively-with-legacy-code-chapters-34-5-michael-feathers/</link>
      <pubDate>Tue, 20 Oct 2009 07:01:37 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/20/book-club-working-effectively-with-legacy-code-chapters-34-5-michael-feathers/</guid>
      <description>In our latest technical book club we discussed chapters 3,4 and 5 of Michael Feathers&amp;rsquo; &amp;lsquo;Working Effectively With Legacy Code&amp;rsquo; - &amp;lsquo;Sensing and Separation&amp;rsquo;, &amp;lsquo;The Seam Model&amp;rsquo; and &amp;lsquo;Tools&amp;rsquo;.
These are some of my thoughts from our discussion of these chapters:
 Feathers suggests two reasons why we break dependencies when trying to get tests in place - sensing and separation. The former involves the breaking of dependencies in order to get access to the values computed in our code and the latter is necessary so that we can get our code into a test harness to start with.</description>
    </item>
    
    <item>
      <title>Coding: Role based interfaces</title>
      <link>http://mneedham.github.io/2009/10/18/coding-role-based-interfaces/</link>
      <pubDate>Sun, 18 Oct 2009 20:33:39 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/18/coding-role-based-interfaces/</guid>
      <description>I&amp;rsquo;ve read a bit about role based interfaces but I&amp;rsquo;ve never really quite understood how the idea could be applied into our code - this week my colleague Matt Dunn has been teaching me.
We had a requirement to show some content on every page of the website we&amp;rsquo;re working on. The content would be slightly different depending on which business process you&amp;rsquo;re doing.
Our first solution made use of an already defined &amp;lsquo;BusinessType&amp;rsquo; property which allowed us to work out which content we needed to create.</description>
    </item>
    
    <item>
      <title>Treating Javascript as an integration point</title>
      <link>http://mneedham.github.io/2009/10/17/treating-javascript-as-an-integration-point/</link>
      <pubDate>Sat, 17 Oct 2009 09:16:12 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/17/treating-javascript-as-an-integration-point/</guid>
      <description>A couple of weeks ago I wrote a post about my software development journey over the last year and towards the end I described the difficulties we were having in making changes to some C# code while being sure that we hadn&amp;rsquo;t broken javascript functionality that also relied on that code.
We typically have code which looks like this:
public class SomeController { public ActionResult SomeControllerAction() { var someModel = new SomeModel { Property1 = &amp;quot;my Property&amp;quot; }; return new JsonResult { Data = someModel }; } } public class SomeModel { public string Property1 { get; set; } }  We would make use of this type of object in javascript code like so:</description>
    </item>
    
    <item>
      <title>Book Club: Working Effectively With Legacy Code - Chapters 1 &amp; 2 (Michael Feathers)</title>
      <link>http://mneedham.github.io/2009/10/14/book-club-working-effectively-with-legacy-code-chapters-1-2-michael-feathers/</link>
      <pubDate>Wed, 14 Oct 2009 23:21:39 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/14/book-club-working-effectively-with-legacy-code-chapters-1-2-michael-feathers/</guid>
      <description>We&amp;rsquo;ve decided to go back to reading a book in our technical book club after a few months of discussing different papers and the chosen book is Michael Feathers&amp;rsquo; &amp;lsquo;Working Effectively With Legacy Code&amp;rsquo;.
We started off by reading the first two chapters titled &amp;lsquo;Changing Software&amp;rsquo; and &amp;lsquo;Working with Feedback&amp;rsquo; and these are some of my thoughts and our discussion of the chapters:
 Early on Feathers talks about the need to change software in order to add features and fix bugs and while it is certainly necessary to make some changes to code in order to do this we discussed whether there is ever a time that we might look to keep the number of changes we&#39;re making to a minimum.</description>
    </item>
    
    <item>
      <title>Scala: Code Kata #2 - Karate Chop - Array Slicing Attempt</title>
      <link>http://mneedham.github.io/2009/10/13/scala-code-kata-2-karate-chop-array-slicing-attempt/</link>
      <pubDate>Tue, 13 Oct 2009 07:00:53 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/13/scala-code-kata-2-karate-chop-array-slicing-attempt/</guid>
      <description>In my continued attempts to learn a bit of Scala I&amp;rsquo;ve been trying out the 2nd of Dave Thomas&amp;rsquo; code katas - Karate Chop - while using an array slicing approach.
I&amp;rsquo;ve tried out the iterative approach to this problem in Java about a year ago and it ends up being quite verbose so I thought the array slicing one would be much more concise.
I didn&amp;rsquo;t drive any of the solutions I worked on from the tests - in fact I only got all the tests provided by Dave Thomas running right at the end which was probably a mistake in retrospect.</description>
    </item>
    
    <item>
      <title>DSLs: Violating the builder pattern</title>
      <link>http://mneedham.github.io/2009/10/12/dsls-violating-the-builder-pattern/</link>
      <pubDate>Mon, 12 Oct 2009 22:20:16 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/12/dsls-violating-the-builder-pattern/</guid>
      <description>I recently came across an interesting post by Dave Thomas where he discussed several domain specific languages (DSLs) he&amp;rsquo;s come across and suggests that a lot of them seem to be trying too hard to read like the english language instead of focusing on describing a vocabulary for their specific domain
Reading this post reminded me that I fell into this trap earlier in the year while doing some work to create a builder pattern in our code which didn&amp;rsquo;t need to make use of a &amp;lsquo;Build&amp;rsquo; method but instead would make use of C#&amp;rsquo;s implicit operator to automatically convert the builder to an object at the appropriate moment.</description>
    </item>
    
    <item>
      <title>Pair Programming: API exploration</title>
      <link>http://mneedham.github.io/2009/10/11/pair-programming-api-exploration/</link>
      <pubDate>Sun, 11 Oct 2009 14:49:21 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/11/pair-programming-api-exploration/</guid>
      <description>A colleague and I were working on some code a couple of weeks ago which mostly revolved around investigating the C# reflection API to work out which methods we needed to use.
My colleague was driving while we were doing this and our progress seemed very much based on intuition about the API rather than being gradual.
In fact it was quite similar to one of the situations in which Uncle Bob suggests TDD doesn&amp;rsquo;t work so well:</description>
    </item>
    
    <item>
      <title>TDD: Keeping assertions clear</title>
      <link>http://mneedham.github.io/2009/10/10/tdd-keeping-assertions-clear/</link>
      <pubDate>Sat, 10 Oct 2009 11:07:21 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/10/tdd-keeping-assertions-clear/</guid>
      <description>Something which I noticed was a problem with the first example test that I provided in my post about API readability and testability is that the assertion we are making is not that great.
[Test] public void ShouldConstructModelForSomeSituation() { Assert.AreEqual(DateTime.Today.ToDisplayFormat(), model.SomeDate()); }  It&amp;rsquo;s not really obvious what the expected result is supposed to be except that it should be the &amp;lsquo;DisplayFormat&amp;rsquo;. If that fails then we&amp;rsquo;ll need to navigate to the &amp;lsquo;ToDisplayFormat&amp;rsquo; method to work out what that method does.</description>
    </item>
    
    <item>
      <title>Coding: API readability/testability</title>
      <link>http://mneedham.github.io/2009/10/10/coding-api-readabilitytestability/</link>
      <pubDate>Sat, 10 Oct 2009 00:21:45 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/10/coding-api-readabilitytestability/</guid>
      <description>About a month ago or so I described how we did some work to ensure that we were calling a class the same way in our tests as in our production code and while I think that was a good choice in that situation we came across a similar problem this week where we weren&amp;rsquo;t so sure.
The piece of code in question was being used to create the view model for a page and one of the pieces of data that we wanted to show on this page was the date on which something would be valid which is currently today&amp;rsquo;s date.</description>
    </item>
    
    <item>
      <title>Software Development Apprenticeship: Some thoughts</title>
      <link>http://mneedham.github.io/2009/10/07/software-development-apprenticeship-some-thoughts/</link>
      <pubDate>Wed, 07 Oct 2009 20:32:38 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/07/software-development-apprenticeship-some-thoughts/</guid>
      <description>I recently came across a interview with Dave Hoover where he talks through the idea of working as an apprentice software developer and suggests some ways to do this more effectively.
I think the easiest thing to get wrong in software development is to over estimate our ability and there is even a study that proves that theory. Hoover refers to this as &amp;lsquo;having an accurate self assessment&amp;rsquo;.
If we work on the same project for a while then we&amp;rsquo;re going to get pretty good at navigating that code base and we&amp;rsquo;ll probably be able to solve any problem and add any piece of functionality fairly easily which only helps fuel the belief.</description>
    </item>
    
    <item>
      <title>Book Club: Integration tests are a scam (J.B. Rainsberger)</title>
      <link>http://mneedham.github.io/2009/10/06/book-club-integration-tests-are-a-scam-j-b-rainsberger/</link>
      <pubDate>Tue, 06 Oct 2009 23:37:52 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/06/book-club-integration-tests-are-a-scam-j-b-rainsberger/</guid>
      <description>In our latest book club we discussed J.B. Rainsberger&amp;rsquo;s presentation from Agile 2009 titled &amp;lsquo;Integration tests are a scam&amp;rsquo;.
These are some of my thoughts and our discussion of the video:
 While talking about how to write interaction tests he suggests that we should only be looking to create interfaces for Domain Driven Design services. If we find ourselves wanting to create interfaces for entities or value objects then we probably have a service wanting to get out.</description>
    </item>
    
    <item>
      <title>My Software Development journey: Year 3-4</title>
      <link>http://mneedham.github.io/2009/10/05/my-software-development-journey-year-3-4/</link>
      <pubDate>Mon, 05 Oct 2009 18:52:14 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/05/my-software-development-journey-year-3-4/</guid>
      <description>Just over a year ago I wrote a blog post about my software development journey up to that point and I thought it&amp;rsquo;d be interesting to write a new version for the 13 months or so since then to see what the main things I&amp;rsquo;ve learned are.
Functional programming I started playing around with F# about 11 months ago after becoming intrigued about this approach to programming following some conversations with my colleague Phil Calcado.</description>
    </item>
    
    <item>
      <title>Coding: Rules of thumb</title>
      <link>http://mneedham.github.io/2009/10/04/coding-rules-of-thumb/</link>
      <pubDate>Sun, 04 Oct 2009 16:59:29 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/04/coding-rules-of-thumb/</guid>
      <description>I recently came across a post by Ayende where he talks about the need for tests to justify themselves and describes his approach to testing which doesn&amp;rsquo;t involved TDDing all the code he writes.
While this approach clearly works well for Ayende I really like the following comment by Alex Simkin:
 Anyway, this post should be marked MA (Mature Audience Only), so younger programmers wont use excuse to not write unit tests because Ayende doesn&#39;t do it.</description>
    </item>
    
    <item>
      <title>Learn one thing a day</title>
      <link>http://mneedham.github.io/2009/10/03/learn-one-thing-a-day/</link>
      <pubDate>Sat, 03 Oct 2009 13:58:55 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/03/learn-one-thing-a-day/</guid>
      <description>I came across an interesting post about a month or so written by Chad Fowler on Tim Ferriss&amp;rsquo; blog where he suggested that a useful way of ensuring that we are always improving is to ask the question &amp;lsquo;Am I better than yesterday?&amp;rsquo; at the end of each day.
I really like this idea and I think it fits in quite nicely with the approach that I take which is to try and ensure that I learn one new thing each day.</description>
    </item>
    
    <item>
      <title>QTB: Agile Governance - Managing the Enterprise Issues</title>
      <link>http://mneedham.github.io/2009/10/01/qtb-agile-governance-managing-the-enterprise-issues/</link>
      <pubDate>Thu, 01 Oct 2009 23:10:36 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/10/01/qtb-agile-governance-managing-the-enterprise-issues/</guid>
      <description>I went to watch the latest ThoughtWorks Australia Quarterly Technology Briefing in Sydney on Wednesday where my colleague Lindy Stephens, Suncorp&amp;rsquo;s Josh Melville and Lonely Planet&amp;rsquo;s Nigel Dalton presented on &amp;lsquo;Agile Governance - Managing the Enterprise Issues&amp;rsquo;.
I was actually unsure of how interesting it would be to me as the title seemed a bit dull but it was actually quite entertaining and not at all what I expected.
These are some of the things I picked up from the presentation:</description>
    </item>
    
    <item>
      <title>Scala: 99 problems</title>
      <link>http://mneedham.github.io/2009/09/30/scala-99-problems/</link>
      <pubDate>Wed, 30 Sep 2009 23:39:16 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/30/scala-99-problems/</guid>
      <description>My colleague Liz Douglass and I have been playing around with Scala and Liz recently pointed out Phil Gold&amp;rsquo;s &amp;lsquo;Ninety Nine Scala Problems&amp;rsquo; which we&amp;rsquo;ve been working through.
One in particular which is quite interesting is number 7 where we need to flatten a nested list structure.
Therefore given this input:
flatten(List(List(1, 1), 2, List(3, List(5, 8))))  We would expect this output:
res0: List[Any] = List(1, 1, 2, 3, 5, 8)  I tried this out on my own using recursion but kept ending up creating a stack overflow by writing code that never terminated!</description>
    </item>
    
    <item>
      <title>Book Club: Design Sense (Michael Feathers)</title>
      <link>http://mneedham.github.io/2009/09/30/book-club-design-sense-michael-feathers/</link>
      <pubDate>Wed, 30 Sep 2009 00:42:29 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/30/book-club-design-sense-michael-feathers/</guid>
      <description>In our latest technical book club we discussed a presentation given at the Norwegian Developers Conference by Michael Feathers titled &amp;lsquo;Design Sense&amp;rsquo;.
In this presentation he presents quite a number of different ideas that he has learned from his experiences in software development over the years.
These are some of my thoughts and our discussion:
 The first part of the presentation talks about method size and Feathers observes that there seems to be a power law with relation to the size of methods in code bases - i.</description>
    </item>
    
    <item>
      <title>Learning from others/Learning yourself</title>
      <link>http://mneedham.github.io/2009/09/28/learning-from-otherslearning-yourself/</link>
      <pubDate>Mon, 28 Sep 2009 00:02:12 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/28/learning-from-otherslearning-yourself/</guid>
      <description>Something which has become quite apparent to me recently is that I learn things far more quickly if I try it out myself and make mistakes than if I just rely on someone else&amp;rsquo;s word for it but some more experienced colleagues seem able to use information explained to them fair more effectively and don&amp;rsquo;t necessarily need to go through this process.
While reading through the Dreyfus Model one of the ideas that is suggested is that once people reach the level of &amp;lsquo;Proficient&amp;rsquo; at any given skill then they are able to learn from the experiences of others without needing to experience something themselves.</description>
    </item>
    
    <item>
      <title>The Duct Tape Programmer: Some thoughts</title>
      <link>http://mneedham.github.io/2009/09/26/the-duct-tape-programmer-some-thoughts/</link>
      <pubDate>Sat, 26 Sep 2009 17:16:34 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/26/the-duct-tape-programmer-some-thoughts/</guid>
      <description>I just came across quite an insightful post by Jak Charlton titled &amp;lsquo;Ship it or Ship out&amp;rsquo; in which he talks about the importance of shipping the software we work on, referring to Joel&amp;rsquo;s recent post &amp;lsquo;The Duct Tape Programmer&amp;rsquo;.
Unit testing When I first read Joel&amp;rsquo;s post I didn&amp;rsquo;t really like it because it seems to downplay the role of unit testing when coding, something which I believe is quite important from my experience of software development so far.</description>
    </item>
    
    <item>
      <title>TDD: It makes you question what you&#39;re doing</title>
      <link>http://mneedham.github.io/2009/09/25/tdd-it-makes-you-question-what-youre-doing/</link>
      <pubDate>Fri, 25 Sep 2009 23:48:33 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/25/tdd-it-makes-you-question-what-youre-doing/</guid>
      <description>My colleague Matt Dunn and I have been putting a lot of tests around some code over the last few days so that we can safely make some changes around that area and having finally created our safety net we&amp;rsquo;ve moved onto adding in the new functionality.
We&amp;rsquo;re test driving the new bit of functionality whereas with the previous code only the code had been written with no unit tests and it&amp;rsquo;s been quite interesting seeing the contrast in the style of code which seems to come out from these differing styles.</description>
    </item>
    
    <item>
      <title>Book Club: Versioning your database (K. Scott Allen)</title>
      <link>http://mneedham.github.io/2009/09/24/book-club-versioning-your-database-k-scott-allen/</link>
      <pubDate>Thu, 24 Sep 2009 07:35:25 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/24/book-club-versioning-your-database-k-scott-allen/</guid>
      <description>In our latest technical book club we discussed a series of posts written by K. Scott Allen about getting your database under version control.
 Three rules for database work The baseline Change scripts Views, Stored Procedures and the like Branching and Merging  These are some of my thoughts and our discussion:
 We had an interesting discussion around when it&#39;s ok to go and change checked in change scripts - on previous projects I&#39;ve worked on we&#39;ve actually had the rule that once you&#39;ve checked in a change script to source control then you can no longer change it but instead need to add another change script that does what you want.</description>
    </item>
    
    <item>
      <title>TDD: Copying and pasting tests</title>
      <link>http://mneedham.github.io/2009/09/22/tdd-copying-and-pasting-tests/</link>
      <pubDate>Tue, 22 Sep 2009 23:39:56 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/22/tdd-copying-and-pasting-tests/</guid>
      <description>I&amp;rsquo;ve been re-reading a post my colleague Ian Cartwright wrote earlier this year about treating test code the same way as production code and one thing which stands out as something which I&amp;rsquo;m certainly guilty off is copying and pasting tests.
Ian lists the following problems with doing this:
 The first one is cut &amp; paste, for some reason when it comes to unit tests people suddenly start cutting and pasting all over the place.</description>
    </item>
    
    <item>
      <title>TDD: Tests that give us a false confidence of coverage</title>
      <link>http://mneedham.github.io/2009/09/21/tdd-tests-that-give-us-a-false-confidence-of-coverage/</link>
      <pubDate>Mon, 21 Sep 2009 22:49:49 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/21/tdd-tests-that-give-us-a-false-confidence-of-coverage/</guid>
      <description>During J.B. Rainsberger&amp;rsquo;s presentation at Agile 2009 titled &amp;lsquo;Integration tests are a scam&amp;rsquo; he suggests that having lots of integrationt tests covering our code can give us a false sense of confidence that we are testing our code and I think the same can happen with unit tests as well if we&amp;rsquo;re not careful how we write them.
It&amp;rsquo;s important to ensure that our unit tests are actually testing something useful otherwise the cost of writing and maintaining them will outweigh the benefits that we derive from doing so.</description>
    </item>
    
    <item>
      <title>TDD: Keeping test intent when using test builders</title>
      <link>http://mneedham.github.io/2009/09/20/tdd-keeping-test-intent-when-using-test-builders/</link>
      <pubDate>Sun, 20 Sep 2009 12:06:04 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/20/tdd-keeping-test-intent-when-using-test-builders/</guid>
      <description>While the test data builder pattern is quite a useful one for simplifying the creation of test data in our tests I think we need to be quite careful when using it that we don&amp;rsquo;t lose the intent of the test that we&amp;rsquo;re writing.
The main advantage that I see with this pattern is that by using it we can provide default values for properties of our objects which aren&amp;rsquo;t important for the bit of functionality that we&amp;rsquo;re currently testing but which need to be provided otherwise the test can&amp;rsquo;t actually be run.</description>
    </item>
    
    <item>
      <title>Set Based Concurrent Engineering: A simple example</title>
      <link>http://mneedham.github.io/2009/09/19/set-based-concurrent-engineering-a-simple-example/</link>
      <pubDate>Sat, 19 Sep 2009 02:24:11 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/19/set-based-concurrent-engineering-a-simple-example/</guid>
      <description>One of my favourite ideas that I came across while reading the Poppendieck&amp;rsquo;s Lean Software Development is set based concurrent engineering which encourages us to keep our options open with regards to the solution to a problem until we absolutely need to decide on an approach after which we probably can&amp;rsquo;t easily change that decision so we will most likely stick with it.
I like the idea but on the projects I&amp;rsquo;ve worked on we often seem to take a more point based approach - there will be some discussion up front on the potential solutions to a problem and eventually one of them will be considered to be the best solution and we go and implement that one.</description>
    </item>
    
    <item>
      <title>TDD: Testing with generic abstract classes</title>
      <link>http://mneedham.github.io/2009/09/18/tdd-testing-with-generic-abstract-classes/</link>
      <pubDate>Fri, 18 Sep 2009 00:40:09 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/18/tdd-testing-with-generic-abstract-classes/</guid>
      <description>In a post I wrote earlier in the week I described a dilemma we were having testing some code which made use of abstract classes and Perryn Fowler, Liz Keogh and Pat Maddox pointed out that a useful approach for this problem would be to make use of an abstract test class.
The idea here is that we create an equivalent hierarchy to our production code for our tests which in the example that I provided would mean that we have roughly the following setup:</description>
    </item>
    
    <item>
      <title>Coding: Watch out for mutable code</title>
      <link>http://mneedham.github.io/2009/09/16/coding-watch-out-for-mutable-code/</link>
      <pubDate>Wed, 16 Sep 2009 23:31:58 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/16/coding-watch-out-for-mutable-code/</guid>
      <description>I&amp;rsquo;ve been doing some more work recently on trying to reduce the number of fields in some of our classes and moving any logic related to calculations into the methods that use the logic but managed to break part of our application recently by doing that a bit too casually and not realising that the code I&amp;rsquo;d inlined was actually being mutated later on.
The code I&amp;rsquo;d refactored originally looked like this:</description>
    </item>
    
    <item>
      <title>Book Club: SOLID Principles (Uncle Bob Martin)</title>
      <link>http://mneedham.github.io/2009/09/16/book-club-solid-principles-uncle-bob-martin/</link>
      <pubDate>Wed, 16 Sep 2009 01:11:58 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/16/book-club-solid-principles-uncle-bob-martin/</guid>
      <description>In our latest technical book club we discussed Uncle Bob Martin&amp;rsquo;s presentation to the Norwegian Developers Conference on &amp;lsquo;SOLID Design&amp;rsquo;.
These principles of object oriented design are also written up on Uncle Bob&amp;rsquo;s website and are also in his book &amp;lsquo;Agile Principles, Patterns and Practices&amp;rsquo;.
I read most of the book a couple of years ago but I don&amp;rsquo;t always remember all of the principles when I&amp;rsquo;m coding so it was good to revisit them again.</description>
    </item>
    
    <item>
      <title>Scala: The &#39;_=&#39; mixed identifier</title>
      <link>http://mneedham.github.io/2009/09/14/scala-the-_-mixed-identifier/</link>
      <pubDate>Mon, 14 Sep 2009 23:49:07 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/14/scala-the-_-mixed-identifier/</guid>
      <description>I&amp;rsquo;ve been playing around with Scala a bit and in particular following some of the code examples from Daniel Spiewak&amp;rsquo;s &amp;lsquo;Scala for Java Refugees&amp;rsquo; article on Traits and Types.
One thing that I got a bit confused about in one of the examples was the use of the &amp;lsquo;_&amp;rsquo; at the end of one of the function definitions:
class MyContainer[T] { private var obj:T = null def value = obj def value_=(v:T) = obj = v } val cont = new MyContainer[String] cont.</description>
    </item>
    
    <item>
      <title>TDD: Testing sub classes</title>
      <link>http://mneedham.github.io/2009/09/13/tdd-testing-sub-classes/</link>
      <pubDate>Sun, 13 Sep 2009 22:21:22 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/13/tdd-testing-sub-classes/</guid>
      <description>We ran into another interesting testing dilemma while refactoring the view model code which I described in an earlier post to the point where we have an abstract class and three sub classes which means that we now have 3 classes which did the same thing 80% of the time.
As I mentioned in a post a couple of weeks ago one of the main refactorings that we did was to move some calls to dependency methods from the constructor and into properties so that those calls would only be made if necessary.</description>
    </item>
    
    <item>
      <title>Coding: An abstract class/ASP.NET MVC dilemma</title>
      <link>http://mneedham.github.io/2009/09/13/coding-an-abstract-classasp-net-mvc-dilemma/</link>
      <pubDate>Sun, 13 Sep 2009 00:19:42 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/13/coding-an-abstract-classasp-net-mvc-dilemma/</guid>
      <description>I previously described a refactoring that we have been working on to reduce the number of fields and delay calculations and the actual goal behind this refactoring was to get the code into shape so that we could add in the logic for a new business process that our application needed to handle.
The code in question defines view models being used by different partial views which are rendered depending on the business process that the user is currently executing.</description>
    </item>
    
    <item>
      <title>TDD: Test only constructors</title>
      <link>http://mneedham.github.io/2009/09/12/tdd-test-only-constructors/</link>
      <pubDate>Sat, 12 Sep 2009 00:35:12 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/12/tdd-test-only-constructors/</guid>
      <description>I wrote previously how we&amp;rsquo;d been doing some work to change the way that we get a &amp;lsquo;User&amp;rsquo; object into our system and one mistake that we made intially was to have another constructor on the &amp;lsquo;User&amp;rsquo; object which was being used in all our unit tests which involved the user in some way.
The original reason that this &amp;lsquo;test constructor&amp;rsquo; was created was to make it easier to construct a &amp;lsquo;fake user&amp;rsquo; which we were using in some of our functional tests but had ended up being used in unit tests as well.</description>
    </item>
    
    <item>
      <title>Impersonators: Using them in showcases</title>
      <link>http://mneedham.github.io/2009/09/10/impersonators-using-them-in-showcases/</link>
      <pubDate>Thu, 10 Sep 2009 00:23:33 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/10/impersonators-using-them-in-showcases/</guid>
      <description>Towards the end of my colleague Julio Maia&amp;rsquo;s blog post about the impersonator pattern he suggests that the standalone environment that we can create through the use of impersonators can be quite useful for showcases and we actually had a recent occasion where we had to switch mid-showcase from using the integration environment to make use of an impersonator.
In this case part of the environment went down in the middle of the showcase so if we wanted to keep on going then that was our only option but in general the expectation of the business is that our showcases show them the functionality of the application end to end.</description>
    </item>
    
    <item>
      <title>A reminder that sometimes it&#39;s best just to ask</title>
      <link>http://mneedham.github.io/2009/09/07/a-reminder-that-sometimes-its-best-just-to-ask/</link>
      <pubDate>Mon, 07 Sep 2009 22:27:57 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/07/a-reminder-that-sometimes-its-best-just-to-ask/</guid>
      <description>Recently my pair and I were trying to merge some changes into our code that we had just picked up fron updating from the trunk and realised that we weren&amp;rsquo;t actually sure how to resolve that merge since it seemed to conflict with what we&amp;rsquo;d been working on.
We hadn&amp;rsquo;t checked in for longer than we would have liked to due to a bit of a checkin pile up which had happened because the build on the CI server had been failing for a few hours due to a temporary problem we were having with an external dependency.</description>
    </item>
    
    <item>
      <title>Fiddler: Trying to work out how it all hooks together</title>
      <link>http://mneedham.github.io/2009/09/06/fiddler-trying-to-work-out-how-it-all-hooks-together/</link>
      <pubDate>Sun, 06 Sep 2009 23:25:42 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/06/fiddler-trying-to-work-out-how-it-all-hooks-together/</guid>
      <description>I mentioned previously that we&amp;rsquo;re making use of Fiddler quite a lot on my current project, mainly to check the traffic going to and from the service layer, and I&amp;rsquo;m quite curious how it actually works.
In particular I wanted to know:
 How we&#39;re able to route requests through Fiddler and then through the corporate proxy How proxy settings work differently for Firefox and Internet Explorer  As far as I&amp;rsquo;m aware the source code for Fiddler isn&amp;rsquo;t available so a colleague and I tracked the various proxy settings when Fiddler was turned on and off and also had a look at some registry settings.</description>
    </item>
    
    <item>
      <title>Coding: Checking invariants in a factory method</title>
      <link>http://mneedham.github.io/2009/09/06/coding-checking-invariants-in-a-factory-method/</link>
      <pubDate>Sun, 06 Sep 2009 00:46:01 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/06/coding-checking-invariants-in-a-factory-method/</guid>
      <description>Something which we discussed quite frequently when studying Domain Driven Design in our technical book club earlier this year was where the code which checked whether we had setup an object correctly should reside.
Shortly after that I suggested that I didn&amp;rsquo;t think it should go in the constructor of an object but that we should rely on objects to be good citizens and not pass in null values or the like to other objects.</description>
    </item>
    
    <item>
      <title>Book Club: Promiscuous Pairing &amp; Beginner&#39;s Mind (Arlo Belshee)</title>
      <link>http://mneedham.github.io/2009/09/05/book-club-promiscuous-pairing-beginners-mind-arlo-belkshee/</link>
      <pubDate>Sat, 05 Sep 2009 16:12:32 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/05/book-club-promiscuous-pairing-beginners-mind-arlo-belkshee/</guid>
      <description>In this weeks book club we discussed Arlo Belshee&amp;rsquo;s paper &amp;lsquo;Promiscuous Pairing and Beginner&amp;rsquo;s Mind&amp;rsquo; where he presents the idea of rotating pairs more frequently than we might usually, suggesting that the optimal rotation time is 90 minutes.
I remember coming across the idea of promiscuous pairing a couple of years ago but I hadn&amp;rsquo;t read the paper all the way through and so far haven&amp;rsquo;t worked on a team where we&amp;rsquo;ve really tried out his ideas.</description>
    </item>
    
    <item>
      <title>Coding Dojo #22: Scala, lamdaj, Project Euler</title>
      <link>http://mneedham.github.io/2009/09/04/coding-dojo-22-scala-lamdaj-project-euler/</link>
      <pubDate>Fri, 04 Sep 2009 00:26:00 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/04/coding-dojo-22-scala-lamdaj-project-euler/</guid>
      <description>In our latest coding dojo we played around with Scala and lambdaj while attempting to solve some of the problems on the Project Euler website.
The Format We started off on two different machines with two of us having a look at solving the first Project Euler problem in Scala and the other two trying to solve it in Java while using the lambdaj library.
What did we learn?  Fabio and I worked on the Scala solution to the problem and we were pretty much playing around with different ways to aggregate all the values in the list: ~~~scala 1.</description>
    </item>
    
    <item>
      <title>Coding: Reduce fields, delay calculations</title>
      <link>http://mneedham.github.io/2009/09/02/coding-reduce-fields-delay-calculations/</link>
      <pubDate>Wed, 02 Sep 2009 23:52:06 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/02/coding-reduce-fields-delay-calculations/</guid>
      <description>A pattern in code which I&amp;rsquo;ve noticed quite frequently lately is that of executing calculations in the constructor of an object and then storing the result in a field on the object.
From the small amount of experience I have playing around with functional languages I have come across the idea of lazy evaluation of functions quite frequently and I think it&amp;rsquo;s something that we can apply in object oriented languages as well.</description>
    </item>
    
    <item>
      <title>TDD: Test the behaviour rather than implementation</title>
      <link>http://mneedham.github.io/2009/09/02/tdd-test-the-behaviour-rather-than-implementation/</link>
      <pubDate>Wed, 02 Sep 2009 00:42:52 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/09/02/tdd-test-the-behaviour-rather-than-implementation/</guid>
      <description>I previously wrote about some duplicated code we&amp;rsquo;d taken the time to remove from our code base and one something else that we found when working with this code is that a lot of the tests around this code were testing the implementation/internal state of the object rather than testing the behaviour that they expected to see.
I find it makes more sense to test the behaviour since this is the way that the object will most likely be used in our production code.</description>
    </item>
    
    <item>
      <title>Coding: The guilty bystander</title>
      <link>http://mneedham.github.io/2009/08/30/coding-the-guilty-bystander/</link>
      <pubDate>Sun, 30 Aug 2009 20:07:50 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/30/coding-the-guilty-bystander/</guid>
      <description>While discussing the duplication in our code based which I described in an earlier post with some other colleagues earlier this week I realised that I had actually gone past this code a couple of times previously, seen that there was a problem with it but hadn&amp;rsquo;t taken any steps to fix it other than to make a mental note that I would fix it when I got the chance.</description>
    </item>
    
    <item>
      <title>Coding: Group the duplication, then remove it</title>
      <link>http://mneedham.github.io/2009/08/30/coding-group-the-duplication-then-remove-it/</link>
      <pubDate>Sun, 30 Aug 2009 13:13:50 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/30/coding-group-the-duplication-then-remove-it/</guid>
      <description>One of the most common activities for software developers is removing duplication from code and Dave recently showed me a technique which I hadn&amp;rsquo;t seen before for doing this more effectively - first group all the code into one place without removing any of the duplication and then remove the duplication when everything is in one place.
The code where we tried out this technique was being used to construct the model for the navigation at the top of the pages on the website we&amp;rsquo;re working on and before we grouped the duplication the code looked a bit like this:</description>
    </item>
    
    <item>
      <title>Book Club: Unshackle your domain (Greg Young)</title>
      <link>http://mneedham.github.io/2009/08/29/book-club-unshackle-your-domain-greg-young/</link>
      <pubDate>Sat, 29 Aug 2009 09:54:39 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/29/book-club-unshackle-your-domain-greg-young/</guid>
      <description>In this week&amp;rsquo;s book club we continued with the idea of discussing videos, this week&amp;rsquo;s selection being Greg Young&amp;rsquo;s &amp;lsquo;Unshackle your Domain&amp;rsquo; presentation from QCon San Francisco in November 2008. He also did a version of this talk in the February European Alt.NET meeting.
In this presentation Greg talks about Command Query Separation at the architecture level and explicit state transitions amongst other things.
Jonathan Oliver has created a useful resource page of the material that&amp;rsquo;s been written about some of these ideas as well.</description>
    </item>
    
    <item>
      <title>jQuery: $.post, &#39;jsonp&#39; and cross-domain requests</title>
      <link>http://mneedham.github.io/2009/08/27/jquery-post-jsonp-and-cross-domain-requests/</link>
      <pubDate>Thu, 27 Aug 2009 22:39:26 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/27/jquery-post-jsonp-and-cross-domain-requests/</guid>
      <description>We spent a bit of time yesterday looking through the jQuery code trying to work out why a cross domain request we were making using jQuery&amp;rsquo;s &amp;lsquo;$.post&amp;rsquo; function wasn&amp;rsquo;t working.
In hindsight perhaps it should have been obvious that you wouldn&amp;rsquo;t be able to do that but I didn&amp;rsquo;t completely understand how we were able to do cross domain requests were possible at all but we had some &amp;lsquo;$.getJson&amp;rsquo; &amp;lsquo;jsonp&amp;rsquo; function calls around our code base which were doing just that.</description>
    </item>
    
    <item>
      <title>Pair Programming: Observations on anti-patterns</title>
      <link>http://mneedham.github.io/2009/08/27/pair-programming-observations-on-anti-patterns/</link>
      <pubDate>Thu, 27 Aug 2009 00:02:50 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/27/pair-programming-observations-on-anti-patterns/</guid>
      <description>I&amp;rsquo;ve been pairing a bit more regularly recently after more sporadic pairing sessions over the last 9 or 10 months and I&amp;rsquo;ve noticed that I&amp;rsquo;ve picked up some habits which aren&amp;rsquo;t really that effective when pairing so I&amp;rsquo;m on a mission to sort that out.
Moving around the code too quickly One thing that I often forget is that when you&amp;rsquo;re driving you know exactly where you&amp;rsquo;re going with the mouse or keyboard just before you do it whereas the other person doesn&amp;rsquo;t know until you&amp;rsquo;ve done it.</description>
    </item>
    
    <item>
      <title>Coding: Coupling and Expressiveness</title>
      <link>http://mneedham.github.io/2009/08/25/coding-coupling-and-expressiveness/</link>
      <pubDate>Tue, 25 Aug 2009 22:42:55 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/25/coding-coupling-and-expressiveness/</guid>
      <description>We came across an interesting situation in our code base recently whereby two coding approaches which I consider important for writing maintainable code seemed to come into conflict with each other.
The code we were working on needed to retrieve some customer details from a backend system by making use of the current user&amp;rsquo;s &amp;lsquo;customerId&amp;rsquo; which we can retrieve from the &amp;lsquo;LoggedInUser&amp;rsquo;.
My initial thought was that since we only needed one property of the &amp;lsquo;LoggedInUser&amp;rsquo; we could just pass in the &amp;lsquo;customerId&amp;rsquo; instead of the &amp;lsquo;LoggedInUser&amp;rsquo;:</description>
    </item>
    
    <item>
      <title>Rock Scissors Paper: TDD as if you meant it</title>
      <link>http://mneedham.github.io/2009/08/24/rock-scissors-paper-tdd-as-if-you-meant-it/</link>
      <pubDate>Mon, 24 Aug 2009 22:11:26 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/24/rock-scissors-paper-tdd-as-if-you-meant-it/</guid>
      <description>I decided to spend a bit of time on Saturday having another go at writing Rock Scissors Paper while following Keith Braithwaite&amp;rsquo;s TDD as if you meant it exercise.
We previously did this exercise at a coding dojo but I wanted to see what happens when you code for a longer period of time with this exercise since we typically only code for maybe a couple of hours at a dojo.</description>
    </item>
    
    <item>
      <title>Book Club: What I&#39;ve learned about DDD since the book (Eric Evans)</title>
      <link>http://mneedham.github.io/2009/08/24/book-club-what-ive-learned-about-ddd-since-the-book-eric-evans/</link>
      <pubDate>Mon, 24 Aug 2009 18:20:33 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/24/book-club-what-ive-learned-about-ddd-since-the-book-eric-evans/</guid>
      <description>This week book club became video club as we discussed Eric Evans&amp;rsquo; QCon London presentation &amp;lsquo;What I&amp;rsquo;ve learned about DDD since the book&amp;rsquo;.
I was lucky enough to be able to attend this presentation live and we previously ran a book club where I briefly summarised what I&amp;rsquo;d learnt but this gave everyone else an opportunity to see it first hand.
There are some of my thoughts and our discussion of the presentation:</description>
    </item>
    
    <item>
      <title>Pair Programming: Keeping both people engaged</title>
      <link>http://mneedham.github.io/2009/08/24/pair-programming-keeping-both-people-engaged/</link>
      <pubDate>Mon, 24 Aug 2009 18:18:09 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/24/pair-programming-keeping-both-people-engaged/</guid>
      <description>I&amp;rsquo;ve written a few times previously about pair programming and how I think it&amp;rsquo;s one of the best practices I&amp;rsquo;ve seen used on agile teams but in order to ensure that we&amp;rsquo;re making the best use of this practice it&amp;rsquo;s important to ensure that both people are engaged.
It is often quite difficult to persuade people who aren&amp;rsquo;t used to extreme programming that having two people working at the same machine is actually beneficial and this task can be made even more difficult if one person is losing focus or interest and therefore isn&amp;rsquo;t actually adding much value in that pairing session.</description>
    </item>
    
    <item>
      <title>Learning: Thoughts on doing so more effectively</title>
      <link>http://mneedham.github.io/2009/08/24/learning-thoughts-on-doing-so-more-effectively/</link>
      <pubDate>Mon, 24 Aug 2009 18:15:19 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/24/learning-thoughts-on-doing-so-more-effectively/</guid>
      <description>One of the quite common sayings that I&amp;rsquo;ve come across when discussing student/teacher type situations is that it&amp;rsquo;s the teacher&amp;rsquo;s responsibility to present the material to the student in a way that they can understand and that if the student still doesn&amp;rsquo;t understand then the teacher hasn&amp;rsquo;t done their job properly.
I believe that this approach is also followed in the UK education system nowadays and while it makes sense in a way I don&amp;rsquo;t think it&amp;rsquo;s a particularly useful belief to have as a student since it seems to encourage you to be quite passive in the learning process.</description>
    </item>
    
    <item>
      <title>Coding: Unused code</title>
      <link>http://mneedham.github.io/2009/08/21/coding-unused-code/</link>
      <pubDate>Fri, 21 Aug 2009 08:56:02 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/21/coding-unused-code/</guid>
      <description>An interesting problem that we have come across a few times over the past 6 months is the dilemma about what to do when start work on a feature and get part way through it before it gets descoped from the current iteration, maybe to be picked up later on but maybe not.
The easiest, and there most common, approach is to just leave the code in the code base half complete and then hopefully return to it at some later stage.</description>
    </item>
    
    <item>
      <title>TDD: Asserting on test dependency code</title>
      <link>http://mneedham.github.io/2009/08/19/tdd-asserting-on-test-dependency-code/</link>
      <pubDate>Wed, 19 Aug 2009 23:19:45 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/19/tdd-asserting-on-test-dependency-code/</guid>
      <description>Something I&amp;rsquo;ve noticed a bit lately is tests which setup a load of dependencies for a test and then do assertions on that setup before getting on to calling the system under test.
The code tends to be similar to this:
public void ShouldHopefullyDoSomeAwesomeStuff() { // setup via expectations for dependency1 and dependency2 Assert.IsNotNull(dependency1.DependedOnMethod);	new SystemUnderTest(dependency1, dependency2).DoThatStuff(); // test assertions }  I&amp;rsquo;ve done this a fair few times myself and I used to believe that it actually made the test more valuable since we were ensuring that the dependencies were in a good state before we executed the test.</description>
    </item>
    
    <item>
      <title>Impersonators: Finding the enabling point</title>
      <link>http://mneedham.github.io/2009/08/19/impersonators-finding-the-enabling-point/</link>
      <pubDate>Wed, 19 Aug 2009 00:43:18 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/19/impersonators-finding-the-enabling-point/</guid>
      <description>One of the other interesting problems that we&amp;rsquo;ve come across while making use of different impersonators in our build process, and which Julio mentions at the end of his comment on Gil Zilberfeld&amp;rsquo;s blog post, is trying to work out where the correct place for the impersonator is.
Ideally we want to put the impersonator in a place where we can easily turn it on or off depending on whether we want to use the impersonator or the real end point.</description>
    </item>
    
    <item>
      <title>Pulling from github on Windows</title>
      <link>http://mneedham.github.io/2009/08/18/pulling-from-github-on-windows/</link>
      <pubDate>Tue, 18 Aug 2009 00:33:11 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/18/pulling-from-github-on-windows/</guid>
      <description>My colleague Dave Cameron has been telling me about his adventures playing around with Git Sharp (a C# port of the Java Git implementation jGit) so I thought I&amp;rsquo;d get a copy of the code and have a look as well.
I tend to check out all code bases from my host machine instead of virtual machine so I got the code all checked out on the Mac and accessed it via a shared folder on my VM.</description>
    </item>
    
    <item>
      <title>Law of Demeter: Some thoughts</title>
      <link>http://mneedham.github.io/2009/08/17/law-of-demeter-some-thoughts/</link>
      <pubDate>Mon, 17 Aug 2009 21:12:26 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/17/law-of-demeter-some-thoughts/</guid>
      <description>Phil Haack wrote a post a few weeks ago about the law of demeter and how it&amp;rsquo;s not just about reducing the number of dots that appear on one line.
This is a nice side effect of following the law of demeter but I often feel that the main benefit we get from following it is that code becomes easier to change since we haven&amp;rsquo;t exposed the state of an object all over the place.</description>
    </item>
    
    <item>
      <title>Impersonators: Why do we need them?</title>
      <link>http://mneedham.github.io/2009/08/16/impersonators-why-do-we-need-them/</link>
      <pubDate>Sun, 16 Aug 2009 22:11:25 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/16/impersonators-why-do-we-need-them/</guid>
      <description>I wrote previously about an impersonator we are using on my project which Martin Fowler has dubbed the &amp;lsquo;self initializing fake&amp;rsquo; and although I thought this was the only type of situation where we might use this approach, from discussing this with my colleague Julio Maia and from experiences on the project I&amp;rsquo;m working on I realise there are other advantages to this approach as well.
To deal with unstable/slow integration points This is the main reason that we use the self initializing fake and provides perhaps the most obvious reason why we might create an impersonator because we will remain in pain if we don&#39;t create one.</description>
    </item>
    
    <item>
      <title>Builders hanging off class vs Builders in same namespace</title>
      <link>http://mneedham.github.io/2009/08/15/builders-hanging-off-class-vs-builders-in-same-namespace/</link>
      <pubDate>Sat, 15 Aug 2009 10:53:49 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/15/builders-hanging-off-class-vs-builders-in-same-namespace/</guid>
      <description>I wrote a couple of months ago about an approach we&amp;rsquo;re using to help people find test data builders in our code base by hanging those builders off a class called &amp;lsquo;GetBuilderFor&amp;rsquo; and I think it&amp;rsquo;s worked reasonably well.
However, a couple of weeks ago my colleague Lu Ning suggested another way to achieve our goal of allowing people to find the builders easily.
The approach he suggested is to put all of the builders in the same namespace, for example &amp;lsquo;Builders&amp;rsquo;, so that if someone wants to find out if a builder already exists they can just type &amp;lsquo;Builders.</description>
    </item>
    
    <item>
      <title>Challenging projects and the five stages of grief</title>
      <link>http://mneedham.github.io/2009/08/13/challenging-projects-and-the-five-stages-of-grief/</link>
      <pubDate>Thu, 13 Aug 2009 17:20:08 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/13/challenging-projects-and-the-five-stages-of-grief/</guid>
      <description>One of the things that I&amp;rsquo;ve noticed over the past few years of working on software delivery projects is that the most challenging projects, the ones that most people hate working on, tend to last the longest yet teach you the most although maybe not immediately.
The problem is that a lot of the time we are in a state of frustration with all the things that are wrong about the project and therefore don&amp;rsquo;t focus on the things that we can do to make our situation better and improve the chances of the project to deliver.</description>
    </item>
    
    <item>
      <title>Zen Mind, Beginners Mind: Book Review</title>
      <link>http://mneedham.github.io/2009/08/12/zen-mind-beginners-mind-book-review/</link>
      <pubDate>Wed, 12 Aug 2009 09:06:53 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/12/zen-mind-beginners-mind-book-review/</guid>
      <description>The Book Zen Mind, Beginner&amp;rsquo;s Mind by Shunryu Suzuki
The Review I first came across the actual term beginner&amp;rsquo;s mind when reading through the &amp;lsquo;Wear The White Belt&amp;rsquo; chapter of Apprenticeship Patterns although it was often mentioned to me on one of the first projects I did at ThoughtWorks a couple of years ago that people liked teaching me things because I just took the information in pretty much without questioning.</description>
    </item>
    
    <item>
      <title>Dreyfus Model: More thoughts</title>
      <link>http://mneedham.github.io/2009/08/10/dreyfus-model-more-thoughts/</link>
      <pubDate>Mon, 10 Aug 2009 20:36:51 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/10/dreyfus-model-more-thoughts/</guid>
      <description>Since we discussed the Dreyfus Model in book club a few weeks ago I&amp;rsquo;ve noticed that I&amp;rsquo;m more aware of my own level of skill at different tasks and references to the model appear more frequent at least amongst my colleagues.
These are some of the things I&amp;rsquo;ve been thinking about:
How do we use the model? Alan Skorks has an interesting post where he discusses the role of the Dreyfus Model in helping to build software development expertise concluding that it doesn&amp;rsquo;t help very much in developing expertise within a team.</description>
    </item>
    
    <item>
      <title>Coding Dojo #21: TDD as if you meant it revisited</title>
      <link>http://mneedham.github.io/2009/08/08/coding-dojo-21-tdd-as-if-you-meant-it-revisited/</link>
      <pubDate>Sat, 08 Aug 2009 23:50:49 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/08/coding-dojo-21-tdd-as-if-you-meant-it-revisited/</guid>
      <description>In this weeks dojo we decided to revisit the &amp;ldquo;TDD as if you meant it&amp;rsquo; exercise originally invented by Keith Braithwaite for the Software Craftsmanship Conference but recently tried out at the Alt.NET UK Conference in London.
The idea was to write code for &amp;lsquo;tic tac toe&amp;rsquo; or &amp;lsquo;naughts and crosses&amp;rsquo; and we were following these requirements:
a game is over when all fields are taken a game is over when all fields in a column are taken by a player a game is over when all fields in a row are taken by a player a game is over when all fields in a diagonal are taken by a player a player can take a field if not already taken players take turns taking fields until the game is over  The code from Alt.</description>
    </item>
    
    <item>
      <title>Book Club: Object Role Stereotypes (Jeremy Miller)</title>
      <link>http://mneedham.github.io/2009/08/08/book-club-object-role-stereotypes-jeremy-miller/</link>
      <pubDate>Sat, 08 Aug 2009 00:49:12 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/08/book-club-object-role-stereotypes-jeremy-miller/</guid>
      <description>In last week&amp;rsquo;s book club we discussed an article written by Jeremy Miller for MSDN Magazine titled &amp;lsquo;Object Role Stereotypes&amp;rsquo; which discusses part of Rebecca Wirfs Brock&amp;rsquo;s book &amp;lsquo;Object Design&amp;rsquo;.
I&amp;rsquo;ve been trying to read Object Design for about a year since coming across the book while reading through the slides from JAOO Sydney 2008 but I&amp;rsquo;ve often found the reading to be quite abstract and have struggled to work out how to apply the ideas to the coding I do day to day.</description>
    </item>
    
    <item>
      <title>Bear Shaving</title>
      <link>http://mneedham.github.io/2009/08/06/bear-shaving/</link>
      <pubDate>Thu, 06 Aug 2009 18:58:00 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/06/bear-shaving/</guid>
      <description>I recently came across a blog post by Seth Godin where he coins the term &amp;lsquo;bear shaving&amp;rsquo; which is where we address the symptoms of a problem instead of addressing the problem.
The main example he gives is the idea of shaving a bear so that it can deal with the increased temperature caused by global warming instead of addressing the underlying problem which has led to this happening in the first place.</description>
    </item>
    
    <item>
      <title>Think a little, code a little</title>
      <link>http://mneedham.github.io/2009/08/05/think-a-little-code-a-little/</link>
      <pubDate>Wed, 05 Aug 2009 00:13:12 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/05/think-a-little-code-a-little/</guid>
      <description>I recently came across an interesting post by Frans Bauma entitled &amp;lsquo;Think first, doing is for later&amp;rsquo; which was linked to from Jeremy Miller&amp;rsquo;s blog entry about incremental delivery and continuous design.
Right now I find myself in favour of Jeremy&amp;rsquo;s approach which is more about writing some code and then getting some feedback on it and then writing some more code instead of spending a lot of time thinking before we write any code.</description>
    </item>
    
    <item>
      <title>Strong opinions, weakly held</title>
      <link>http://mneedham.github.io/2009/08/03/strong-opinions-weakly-held/</link>
      <pubDate>Mon, 03 Aug 2009 00:46:13 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/08/03/strong-opinions-weakly-held/</guid>
      <description>I find one of the most applicable mantras in software development is Bob Sutton&amp;rsquo;s idea that we should have strong opinions weakly held.
The idea as I understand it is that we shouldn&amp;rsquo;t sit on the fence but instead have an opinion that we research thoroughly and are prepared to back up. However, we shouldn&amp;rsquo;t become too attached to those opinions but instead be prepared to listen to alternative points of view and take those on where they prove more useful than our previous opinions.</description>
    </item>
    
    <item>
      <title>Coding Dojo #20: Groovy Sales Tax Problem</title>
      <link>http://mneedham.github.io/2009/07/31/coding-dojo-20-groovy-sales-tax-problem/</link>
      <pubDate>Fri, 31 Jul 2009 09:07:26 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/31/coding-dojo-20-groovy-sales-tax-problem/</guid>
      <description>Continuing with the Groovy theme, this week we worked on the ThoughtWorks code review tax problem which involved modeling different items that a customer could buy and the associated tax rules that different types of goods had.
The Format We had 3 people this week so most of the time we had all 3 of us involved in driving the code, which was projected onto the television screen again, while rotating every 10 minutes or so.</description>
    </item>
    
    <item>
      <title>Book Club: Hexagonal Architecture (Alistair Cockburn)</title>
      <link>http://mneedham.github.io/2009/07/30/book-club-hexagonal-architecture-alistair-cockburn/</link>
      <pubDate>Thu, 30 Jul 2009 00:59:18 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/30/book-club-hexagonal-architecture-alistair-cockburn/</guid>
      <description>In our latest book club we discussed Alistair Cockburn&amp;rsquo;s Hexagonal Architecture which I first heard about around a year ago and was another of Dave Cameron&amp;rsquo;s recommendations.
As I understand it, the article describes an architecture for our systems where the domain sits in the centre and other parts of the system depend on the domain while the domain doesn&amp;rsquo;t depend on anything concrete but is interacted with by various adapters.</description>
    </item>
    
    <item>
      <title>Reading Code: Rhino Mocks</title>
      <link>http://mneedham.github.io/2009/07/28/reading-code-rhino-mocks/</link>
      <pubDate>Tue, 28 Jul 2009 00:05:11 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/28/reading-code-rhino-mocks/</guid>
      <description>I spent a bit of time recently reading through some of the Rhino Mocks to get a basic understanding of how some features work under the hood.
As well as just getting some practice at reading unfamiliar code I also wanted to know the following:
 How does the &#39;VerifyAllExpectations&#39; extension method work? What&#39;s the difference between the &#39;GenerateMock&#39; and &#39;GenerateStub&#39; methods on MockRepository? How does the &#39;AssertWasNotCalled&#39; extension method actually work?</description>
    </item>
    
    <item>
      <title>F#: Playing around with asynchronous workflows</title>
      <link>http://mneedham.github.io/2009/07/26/f-playing-around-with-asynchronous-workflows/</link>
      <pubDate>Sun, 26 Jul 2009 23:45:14 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/26/f-playing-around-with-asynchronous-workflows/</guid>
      <description>I spent a bit of time over the weekend playing around with F# asynchronous workflows and seeing how they could be used to launch Firefox windows asynchronously for my FeedBurner graph creator.
Initially I decided to try out the &amp;lsquo;Async.RunWithContinuations&amp;rsquo; function which I recently read about on Matthew Podwysocki&amp;rsquo;s blog.
Matthew describes this as being a function which is useful for executing a single operation asynchronously and this worked out quite well for me as my application only has the ability to get one feed and then create a graph from its data.</description>
    </item>
    
    <item>
      <title>F#: Values, functions and DateTime</title>
      <link>http://mneedham.github.io/2009/07/25/f-values-functions-and-datetime/</link>
      <pubDate>Sat, 25 Jul 2009 14:10:45 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/25/f-values-functions-and-datetime/</guid>
      <description>One of the things I&amp;rsquo;ve noticed recently in my playing around with F# is that when we decide to wrap calls to the .NET DateTime methods there is a need to be quite careful that we are wrapping those calls with an F# function and not an F# value.
If we don&amp;rsquo;t do this then the DateTime method will only be evaluated once and then return the same value for every call which is probably not the behaviour we&amp;rsquo;re looking for.</description>
    </item>
    
    <item>
      <title>Cruise Agents: Reducing &#39;random&#39; build failures</title>
      <link>http://mneedham.github.io/2009/07/25/cruise-agents-reducing-random-build-failures/</link>
      <pubDate>Sat, 25 Jul 2009 11:28:38 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/25/cruise-agents-reducing-random-build-failures/</guid>
      <description>As I mentioned previously we&amp;rsquo;re making use of multiple cruise agents in our build to allow us to run our acceptance tests in parallel, therefore allowing a build which would be nearly 2 hours if run in sequence to be completed in around 10 minutes.
Early on with this approach we were getting a lot of failures in our builds which weren&amp;rsquo;t directly related to the code being changed and were more to do with the various dependencies we were making use of.</description>
    </item>
    
    <item>
      <title>Wrapping collections: Inheritance vs Composition</title>
      <link>http://mneedham.github.io/2009/07/24/wrapping-collections-inheritance-vs-composition/</link>
      <pubDate>Fri, 24 Jul 2009 01:07:23 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/24/wrapping-collections-inheritance-vs-composition/</guid>
      <description>I wrote previously about the differences between wrapping collections and just creating extension methods to make our use of collections in the code base more descriptive but I&amp;rsquo;ve noticed in code I&amp;rsquo;ve been reading recently that there appear to be two ways of wrapping the collection - using composition as I described previously but also extending the collection by using inheritance.
I was discussing this with Lu Ning recently and he pointed out that if what we have is actually a collection then it might make more sense to extend the collection with a custom class whereas if the collection is just an implementation detail of some other domain concept then it would be better to use composition.</description>
    </item>
    
    <item>
      <title>Good Lazy and Bad Lazy</title>
      <link>http://mneedham.github.io/2009/07/21/good-lazy-and-bad-lazy/</link>
      <pubDate>Tue, 21 Jul 2009 23:10:20 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/21/good-lazy-and-bad-lazy/</guid>
      <description>One of the things I remember picking up from reading The Pragmatic Programmer is that developers need to be lazy in order to find better ways to solve problems and I came across a post by Philipp Lensson from a few years ago where he also suggests good developers are lazy and dumb.
Something which I&amp;rsquo;ve come to realise more recently is that it&amp;rsquo;s not necessarily true that being lazy as a developer is always a good thing - it depends in what way you are being lazy because there are certainly good and bad ways in which you can express your laziness!</description>
    </item>
    
    <item>
      <title>Coding: Quick feedback</title>
      <link>http://mneedham.github.io/2009/07/20/coding-quick-feedback/</link>
      <pubDate>Mon, 20 Jul 2009 21:10:12 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/20/coding-quick-feedback/</guid>
      <description>One of the most important things to achieve if we are to get any sort of productivity when writing code is to find ways to get the quickest feedback possible.
My general default stance with respect to this has always been to TDD code although I&amp;rsquo;ve found when coding in F# that I&amp;rsquo;m not actually sure what the overall best way to get quick feedback is.
This is partly because I haven&amp;rsquo;t been able to find a way to run tests easily from inside Visual Studio but also partly because even when you do this the code for the whole project needs to be recompiled before the tests can be run which takes time.</description>
    </item>
    
    <item>
      <title>F#: Active patterns for parsing xml</title>
      <link>http://mneedham.github.io/2009/07/19/f-active-patterns-for-parsing-xml/</link>
      <pubDate>Sun, 19 Jul 2009 12:12:13 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/19/f-active-patterns-for-parsing-xml/</guid>
      <description>I decided to spend some time doing some refactoring on the FeedBurner application that I started working on last week and the first area I worked on was cleaning up the way that the xml we get from FeedBurner is parsed.
While playing around with the application from the command line I realised that it didn&amp;rsquo;t actually cover error conditions - such as passing in an invalid feed name - very well and I thought this would be a good opportunity to make use of an active pattern to handle this.</description>
    </item>
    
    <item>
      <title>Book Club: The Dreyfus Model (Stuart and Hubert Dreyfus)</title>
      <link>http://mneedham.github.io/2009/07/18/book-club-the-dreyfus-model-stuart-and-hubert-dreyfus/</link>
      <pubDate>Sat, 18 Jul 2009 10:40:30 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/18/book-club-the-dreyfus-model-stuart-and-hubert-dreyfus/</guid>
      <description>In our latest book club we discussed the Dreyfus Model, a paper written in 1980 by Stuart and Hubert Dreyfus.
I&amp;rsquo;ve become quite intrigued by the Dreyfus Model particularly since reading about its applicability to software development in Andy Hunt&amp;rsquo;s Pragmatic Learning and Thinking and after looking through Pat Kua&amp;rsquo;s presentation on &amp;lsquo;Climbing the Dreyfus Ladder of Agile Practices&amp;rsquo; I thought it&amp;rsquo;d be interesting to study the original paper.
These are some of my thoughts and our discussion of the paper:</description>
    </item>
    
    <item>
      <title>F#: Passing command line arguments to a script</title>
      <link>http://mneedham.github.io/2009/07/16/f-passing-command-line-arguments-to-a-script/</link>
      <pubDate>Thu, 16 Jul 2009 07:40:18 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/16/f-passing-command-line-arguments-to-a-script/</guid>
      <description>I&amp;rsquo;ve been doing a bit of refactoring of my FeedBurner application so that I can call it from the command line with the appropriate arguments and one of the problems I came across is working out how to pass arguments from the command line into an F# script.
With a compiled application we are able to make use of the &amp;lsquo;EntryPointAttribute&amp;rsquo; to get access to the arguments passed in:
[&amp;lt;EntryPointAttribute&amp;gt;] let main args = ShowFeedBurnerStats args 0  Sadly this doesn&amp;rsquo;t work with a script but it was pointed out on Hub FS that we can get access to all the command line arguments by using &amp;lsquo;Sys.</description>
    </item>
    
    <item>
      <title>Book Club: An agile approach to a legacy system (Chris Stevenson and Andy Pols)</title>
      <link>http://mneedham.github.io/2009/07/15/book-club-an-agile-approach-to-a-legacy-system-chris-stevenson-and-andy-pols/</link>
      <pubDate>Wed, 15 Jul 2009 00:53:45 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/15/book-club-an-agile-approach-to-a-legacy-system-chris-stevenson-and-andy-pols/</guid>
      <description>Our latest book club session was a discussion on a paper written by my colleague Chris Stevenson and Andy Pols titled &amp;lsquo;An Agile Approach to a Legacy System&amp;rsquo; which I think was written in 2004. This paper was suggested by Dave Cameron.
These are some of my thoughts and our discussion of the paper:
 The first thing that was quite interesting was that the authors pointed out that if you just try and rewrite a part of a legacy system you are actually just writing legacy code yourself - we weren&#39;t sure exactly what was meant by this since for me at least the definition of legacy code is &#39;code which we are scared to change [because it has no tests]&#39; but presumably the new code did have tests so it wasn&#39;t legacy in this sense.</description>
    </item>
    
    <item>
      <title>Test Doubles: My current approach</title>
      <link>http://mneedham.github.io/2009/07/14/test-doubles-my-current-approach/</link>
      <pubDate>Tue, 14 Jul 2009 13:23:52 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/14/test-doubles-my-current-approach/</guid>
      <description>My colleague Sarah Taraporewalla recently wrote about her thoughts on test doubles (to use Gerard Meszaros&amp;rsquo; language) and it got me thinking about the approach I generally take in this area.
Stub objects I use stubs mostly to control the output of depended on components of the system under test where we don&amp;rsquo;t want to verify those outputs.
Most of the time I make use of the mocking library&amp;rsquo;s ability to stub out method calls on these dependencies.</description>
    </item>
    
    <item>
      <title>F#: A day writing a Feedburner graph creator</title>
      <link>http://mneedham.github.io/2009/07/12/f-a-day-writing-a-feedburner-graph-creator/</link>
      <pubDate>Sun, 12 Jul 2009 17:14:13 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/12/f-a-day-writing-a-feedburner-graph-creator/</guid>
      <description>I&amp;rsquo;ve spent a bit of the day writing a little application to take the xml from my Feedburner RSS feed and create a graph showing the daily &amp;amp; weekly average subscribers.
What did I learn?  I decided that I wanted to parameterise the feedburner url so that I would be able to run the code for different time periods and against different feeds. In C# we&amp;rsquo;d probably make use of &amp;lsquo;string.</description>
    </item>
    
    <item>
      <title>F#: Wrapping .NET library calls</title>
      <link>http://mneedham.github.io/2009/07/12/f-wrapping-net-library-calls/</link>
      <pubDate>Sun, 12 Jul 2009 12:11:46 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/12/f-wrapping-net-library-calls/</guid>
      <description>I&amp;rsquo;ve been spending a bit of time writing some code to parse the xml of my Feedburner RSS feed and create a graph to show both the daily and weekly average subscribers which you can&amp;rsquo;t currently get from the Feedburner dashboard.
One thing which I found while doing this is that calls to the .NET base class library don&amp;rsquo;t seem to fit in that well with the way that you would typically compose functions together in F#.</description>
    </item>
    
    <item>
      <title>Continuous Integration: Community College Discussion</title>
      <link>http://mneedham.github.io/2009/07/11/continuous-integration-community-college-discussion/</link>
      <pubDate>Sat, 11 Jul 2009 14:13:48 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/11/continuous-integration-community-college-discussion/</guid>
      <description>We ran a session on Continuous Integration at the most recent Community College in the ThoughtWorks Sydney office.
It was roughly based around a CI Maturity Model which I recently came across although the intention was to find out what other teams were doing CI wise.
I became a bit more aware of how little I know about CI after listening to a Software Engineering Radio interview with my colleague Chris Read so I was keen to see how other teams are approaching this problem.</description>
    </item>
    
    <item>
      <title>F#: Downloading a file from behind a proxy</title>
      <link>http://mneedham.github.io/2009/07/11/f-downloading-a-file-from-behind-a-proxy/</link>
      <pubDate>Sat, 11 Jul 2009 03:20:25 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/11/f-downloading-a-file-from-behind-a-proxy/</guid>
      <description>I&amp;rsquo;ve been continuing working on a little script to parse Cruise build data and the latest task was to work out how to download my Google Graph API created image onto the local disk.
I&amp;rsquo;m using the WebClient class to do this and the code looks like this:
let DownloadGraph (fileLocation:string) (uri:System.Uri) = async { let webClient = new WebClient() webClient.DownloadFileAsync(uri, fileLocation)}  Sadly this doesn&amp;rsquo;t work when I run it from the client site where I have access to the build metrics as there is a corporate proxy sitting in the way.</description>
    </item>
    
    <item>
      <title>F#: Convert sequence to comma separated string</title>
      <link>http://mneedham.github.io/2009/07/09/f-convert-sequence-to-comma-separated-string/</link>
      <pubDate>Thu, 09 Jul 2009 22:32:55 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/09/f-convert-sequence-to-comma-separated-string/</guid>
      <description>I&amp;rsquo;ve been continuing playing around with parsing Cruise data as I mentioned yesterday with the goal today being to create a graph from the build data.
After recommendations from Dean Cornish and Sam Newman on Twitter I decided to give the Google Graph API a try to do this and realised that I would need to create a comma separated string listing all the build times to pass to the Google API.</description>
    </item>
    
    <item>
      <title>F#: Parsing Cruise build data</title>
      <link>http://mneedham.github.io/2009/07/08/f-parsing-cruise-build-data/</link>
      <pubDate>Wed, 08 Jul 2009 22:46:05 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/08/f-parsing-cruise-build-data/</guid>
      <description>I&amp;rsquo;ve been playing around a bit with the properties REST API that Cruise exposes to try and get together some build metrics and I decided it might be an interesting task to try and use F# for.
I&amp;rsquo;m making use of the &amp;lsquo;search&amp;rsquo; part of the API to return the metrics of all the builds run on a certain part of the pipeline and I then want to parse those results so that I can extract just the name of the agent that ran that build and the duration of that build.</description>
    </item>
    
    <item>
      <title>Book Club: Why noone uses functional languages (Philip Wadler)</title>
      <link>http://mneedham.github.io/2009/07/08/book-club-why-noone-uses-functional-languages-philip-wadler/</link>
      <pubDate>Wed, 08 Jul 2009 00:29:56 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/08/book-club-why-noone-uses-functional-languages-philip-wadler/</guid>
      <description>Our latest technical book club discussion was based around Philip Wadler&amp;rsquo;s paper &amp;lsquo;Why noone uses functional langauges&amp;rsquo; which he wrote in 1998. I came across this paper when reading some of the F# goals in the FAQs on the Microsoft website.
These are some of my thoughts and our discussion of the paper:
 One of the points suggested in the paper is that functional languages aren&#39;t used because of their lack of availability on machines but as Dave pointed out this doesn&#39;t really seem to be such a big problem these days - certainly for F# I&#39;ve found it relatively painless to get it setup and running and even for a language like Ruby people are happy to download and install it on their machines and it is also pretty much painless to do so.</description>
    </item>
    
    <item>
      <title>C#: Removing duplication in mapping code with partial classes</title>
      <link>http://mneedham.github.io/2009/07/07/c-removing-duplication-in-mapping-code-with-partial-classes/</link>
      <pubDate>Tue, 07 Jul 2009 18:11:36 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/07/c-removing-duplication-in-mapping-code-with-partial-classes/</guid>
      <description>One of the problems that we&amp;rsquo;ve come across while writing the mapping code for our anti corruption layer is that there is quite a lot of duplication of mapping similar types due to the fact that each service has different auto generated classes representing the same data structure.
We are making SOAP web service calls and generating classes to represent the requests and responses to those end points using SvcUtil. We then translate from those auto generated classes to our domain model using various mapper classes.</description>
    </item>
    
    <item>
      <title>Domain Driven Design: Anti Corruption Layer</title>
      <link>http://mneedham.github.io/2009/07/07/domain-driven-design-anti-corruption-layer/</link>
      <pubDate>Tue, 07 Jul 2009 09:05:57 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/07/domain-driven-design-anti-corruption-layer/</guid>
      <description>I previously wrote about some of the Domain Driven Design patterns we have noticed on my project and I think the pattern which ties all these together is the anti corruption layer.
The reason why you might use an anti corruption layer is to create a little padding between subsystems so that they do not leak into each other too much.
 Remember, an ANTICORRUPTION LAYER is a means of linking two BOUNDED CONTEXTS.</description>
    </item>
    
    <item>
      <title>Brownfield Application Development in .NET: Book Review</title>
      <link>http://mneedham.github.io/2009/07/06/brownfield-application-development-in-net-book-review/</link>
      <pubDate>Mon, 06 Jul 2009 00:43:40 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/06/brownfield-application-development-in-net-book-review/</guid>
      <description>The Book Brownfield Application Development in .NET by Kyle Baley and Donald Belcham
The Review I asked to be sent this book to review by Manning as I was quite intrigued to see how well it would complement Michael Feather&amp;rsquo;s Working Effectively with Legacy Code, the other book I&amp;rsquo;m aware of which covers approaches to dealing with non green field applications.
What did I learn?  The authors provide a brief description of the two different approaches to unit testing - state based and behaviour based - I&#39;m currently in favour of the latter approach and Martin Fowler has a well known article which covers pretty much anything you&#39;d want to know about this topic area.</description>
    </item>
    
    <item>
      <title>Domain Driven Design: Conformist</title>
      <link>http://mneedham.github.io/2009/07/04/domain-driven-design-conformist/</link>
      <pubDate>Sat, 04 Jul 2009 10:17:31 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/04/domain-driven-design-conformist/</guid>
      <description>Something which constantly surprises me about Domain Driven Design is how there is a pattern described in the book for just about every possible situation you find yourself in when coding on projects.
A lot of these patterns appear in the &amp;lsquo;Strategic Design&amp;rsquo; section of the book and one which is very relevant for the project I&amp;rsquo;m currently working on is the &amp;lsquo;Conformist&amp;rsquo; pattern which is described like so:
 When two development teams have an upstream/downstream relationship in which the upstream has no motivation to provide for the downstream team&#39;s needs, the downstream team is helpless.</description>
    </item>
    
    <item>
      <title>Coding Dojo #19: Groovy Traveling salesman variation </title>
      <link>http://mneedham.github.io/2009/07/04/coding-dojo-19-groovy-traveling-salesman-variation/</link>
      <pubDate>Sat, 04 Jul 2009 09:36:01 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/04/coding-dojo-19-groovy-traveling-salesman-variation/</guid>
      <description>Our latest coding dojo involved working on a variation of the traveling salesman problem in Groovy again.
The Format We had 8 people participating this week so we returned to the Randori format, rotating the pair at the keyboard every 7 minutes.
Give the number of people it might have actually been better to have a couple of machines and use the UberDojo format.
What We Learnt  The importance of just getting started stood out a lot for me in this dojo - there have been quite a few times when we&#39;ve met intending to do some coding and spent so long talking about coding that we didn&#39;t end up writing anything.</description>
    </item>
    
    <item>
      <title>F#: Pattern matching with the &#39;:?&#39; operator</title>
      <link>http://mneedham.github.io/2009/07/02/f-pattern-matching-with-the-operator/</link>
      <pubDate>Thu, 02 Jul 2009 23:10:19 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/02/f-pattern-matching-with-the-operator/</guid>
      <description>I&amp;rsquo;ve been doing a bit more reading of the Fake source code and one interesting thing which I came across which I hadn&amp;rsquo;t seen was an active pattern which was making use of the &amp;lsquo;:?&amp;rsquo; operator to match the input type against .NET types.
let (|File|Directory|) (fileSysInfo : FileSystemInfo) = match fileSysInfo with | :? FileInfo as file -&amp;gt; File (file.Name) | :? DirectoryInfo as dir -&amp;gt; Directory (dir.Name, seq { for x in dir.</description>
    </item>
    
    <item>
      <title>Book Club: Logging - Release It (Michael Nygaard)</title>
      <link>http://mneedham.github.io/2009/07/02/book-club-logging-release-it-michael-nygaard/</link>
      <pubDate>Thu, 02 Jul 2009 12:04:34 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/07/02/book-club-logging-release-it-michael-nygaard/</guid>
      <description>Our latest technical book club session was a discussion of the logging section in Michael Nygard&amp;rsquo;s Release It.
I recently listened to an interview with Michael Nygard on Software Engineering Radio so I was interested in reading more of his stuff and Cam suggested that the logging chapter would be an interesting one to look at as it&amp;rsquo;s often something which we don&amp;rsquo;t spend a lot of time thinking about on software development teams.</description>
    </item>
    
    <item>
      <title>F#: What I&#39;ve learnt so far</title>
      <link>http://mneedham.github.io/2009/06/30/f-what-ive-learnt-so-far/</link>
      <pubDate>Tue, 30 Jun 2009 23:09:35 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/30/f-what-ive-learnt-so-far/</guid>
      <description>I did a presentation of some of the stuff that I&amp;rsquo;ve learnt from playing around with F# over the last six months or so at the most recent Alt.NET Sydney meeting.
I&amp;rsquo;ve included the slides below but there was also some interesting discussion as well.
 One of the questions asked was around how you would deal with code on a real project with regards to structuring it and ensuring that it was maintainable.</description>
    </item>
    
    <item>
      <title>F#: Setting properties like named parameters</title>
      <link>http://mneedham.github.io/2009/06/29/f-setting-properties-like-named-parameters/</link>
      <pubDate>Mon, 29 Jun 2009 00:28:14 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/29/f-setting-properties-like-named-parameters/</guid>
      <description>One of the most frustrating things for me lately about interacting with C# libraries from F# has been setting up objects through the use of properties.
While I am against the use of setters to construct objects in the first place, that&amp;rsquo;s the way that a lot of libraries work so it&amp;rsquo;s a bit of a necessary evil!
In C# we would typically make use of the object initializer syntax to do this, but in F# I&amp;rsquo;ve been writing code like this to do the same thing:</description>
    </item>
    
    <item>
      <title>F#: More thoughts on the forward &amp; application operators</title>
      <link>http://mneedham.github.io/2009/06/27/f-more-thoughts-on-the-forward-application-operators/</link>
      <pubDate>Sat, 27 Jun 2009 22:55:02 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/27/f-more-thoughts-on-the-forward-application-operators/</guid>
      <description>I&amp;rsquo;ve been spending a bit of time reading through the Fake source code to try and understand how it works and one of the things which I quite like about it is the way the authors have made use of different F# operators to make expressions easier to read by reducing the number of brackets that need to be written and reordering the functions/values depending on the particular context.
One which I hadn&amp;rsquo;t seen before is the application operator which is the opposite of the forward operator which I have previously written about.</description>
    </item>
    
    <item>
      <title>Coding Dojo #18: Groovy Bowling Game</title>
      <link>http://mneedham.github.io/2009/06/26/coding-dojo-18-groovy-bowling-game/</link>
      <pubDate>Fri, 26 Jun 2009 18:15:23 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/26/coding-dojo-18-groovy-bowling-game/</guid>
      <description>This week&amp;rsquo;s dojo involved coding a familiar problem - the bowling game - in a different language, Groovy.
The code we wrote is available on bitbucket.
The Format Cam, Dean and I took turns pairing with each other with the code projected onto a TV. As there were only a few of us the discussion on where we were taking the code tended to included everyone rather than just the two at the keyboard.</description>
    </item>
    
    <item>
      <title>Safe refactoring: Removing object initializer, introducing builder</title>
      <link>http://mneedham.github.io/2009/06/26/safe-refactoring-removing-object-initializer-introducing-builder/</link>
      <pubDate>Fri, 26 Jun 2009 00:02:45 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/26/safe-refactoring-removing-object-initializer-introducing-builder/</guid>
      <description>I previously wrote about an approach we took to safely remove some duplication and I recently followed a similar mantra to replace an object initializer call which had around 40 properties being setup with a builder to try and make the code a bit easier to understand.
We did have tests checking the values being setup by the object initializer so I was already able to refactor with some degree of safety - it would probably have been possible to just create the builder and build the object from that and then delete the old code and replace it with the new but I&amp;rsquo;ve caused myself too many problems from doing that before that I decided to try a more incremental approach.</description>
    </item>
    
    <item>
      <title>QTB: Agile Adoption - How to stuff it up</title>
      <link>http://mneedham.github.io/2009/06/24/qtb-agile-adoption-how-to-stuff-it-up/</link>
      <pubDate>Wed, 24 Jun 2009 23:58:38 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/24/qtb-agile-adoption-how-to-stuff-it-up/</guid>
      <description>I attended the most recent ThoughtWorks Quarterly Technology briefing on Tuesday which was titled &amp;lsquo;Agile Adoption - How to stuff it up&amp;rsquo; and presented by my colleagues Andy Marks and Martin Fowler.
There seems to be quite a few books out at the moment about how to introduce a more agile approach into your organisation - I&amp;rsquo;ve been reading Lean-Agile Software Development and Becoming Agile and there is also a book called Scaling Lean and Agile Development - so I was intrigued to see whether the messages from this talk would be similar to those in these books.</description>
    </item>
    
    <item>
      <title>Using Fiddler with IIS</title>
      <link>http://mneedham.github.io/2009/06/24/using-fiddler-with-iis/</link>
      <pubDate>Wed, 24 Jun 2009 17:46:23 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/24/using-fiddler-with-iis/</guid>
      <description>We&amp;rsquo;ve been using Fiddler to debug the requests and responses sent via web services to a service layer our application interacts with and it works pretty well when you run the application using Cassini but by default won&amp;rsquo;t work when you run the website through IIS.
The key to this as one of my colleagues (who gives credit to Erik) showed me today is to ensure that IIS is running under the same user that Fiddler is running under which in our case is the &amp;lsquo;Administrator&amp;rsquo; account.</description>
    </item>
    
    <item>
      <title>Visual Studio/Resharper: Changing the order of arguments</title>
      <link>http://mneedham.github.io/2009/06/23/visual-studioresharper-changing-the-order-of-arguments/</link>
      <pubDate>Tue, 23 Jun 2009 19:31:37 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/23/visual-studioresharper-changing-the-order-of-arguments/</guid>
      <description>We&amp;rsquo;ve recently run into some places in our tests where the expectation and actual values passed into NUnit&amp;rsquo;s &amp;lsquo;Assert.AreEqual&amp;rsquo; are the wrong way round, therefore meaning that the error messages we get when tests fail are somewhat confusing!
Assert.AreEqual(theActualValue, &amp;quot;the expectation&amp;quot;);  We can change the arguments around using Resharper by using the key combination &amp;lsquo;Ctrl-Alt-Shift-ArrowKey&amp;rsquo; but you can only do this one line at a time which was a bit annoying as there were about 20 to change.</description>
    </item>
    
    <item>
      <title>F#: Continuation Passing Style</title>
      <link>http://mneedham.github.io/2009/06/22/f-continuation-passing-style/</link>
      <pubDate>Mon, 22 Jun 2009 23:39:07 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/22/f-continuation-passing-style/</guid>
      <description>I recently came across the idea of continuations while reading Real World Functional Programming and Wes Dyer has a blog post where he explains continuations in more detail and also talks about the idea of using a continuation passing style in languages which don&amp;rsquo;t support Call/CC (Call with Current continuation).
As I understand it we can achieve a continuation passing style of programming by passing in the bit of code that we went executed next (i.</description>
    </item>
    
    <item>
      <title>Seams: Some thoughts</title>
      <link>http://mneedham.github.io/2009/06/21/seams-some-thoughts/</link>
      <pubDate>Sun, 21 Jun 2009 17:21:22 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/21/seams-some-thoughts/</guid>
      <description>I pick up Michael Feathers&amp;rsquo; Working Effectively with Legacy Code book from time to time and one of my favourite parts of the book is the chapter where he talks about &amp;lsquo;Seams&amp;rsquo;.
To quote the book:
A seam is a place where you can alter behaviour in your program without editing in that place Seams in the book are generally discussed in terms of how we can get tests around legacy code which was written without easy testability in mind but I&amp;rsquo;ve noticed that the ideas behind seams seem to be more widely applicable than this.</description>
    </item>
    
    <item>
      <title>Book Club: The Readability of Tests - Growing Object Oriented Software (Steve Freeman/Nat Pryce)</title>
      <link>http://mneedham.github.io/2009/06/20/book-club-the-readability-of-tests-growing-object-oriented-software-steve-freemannat-pryce/</link>
      <pubDate>Sat, 20 Jun 2009 11:26:51 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/20/book-club-the-readability-of-tests-growing-object-oriented-software-steve-freemannat-pryce/</guid>
      <description>Our technical book club this week focused on &amp;lsquo;The Readability of Tests&amp;rsquo; chapter from Steve Freeman &amp;amp; Nat Pryce&amp;rsquo;s upcoming book &amp;lsquo;Growing Object Oriented Software, guide by tests&amp;rsquo;.
I&amp;rsquo;ve been reading through some of the other chapters online and I thought this would be an interesting chapter to talk about as people seem to have different opinions on how DRY tests should be, how we build test data, how we name tests and so on.</description>
    </item>
    
    <item>
      <title>Functional Collection Parameters: A different way of thinking about collections</title>
      <link>http://mneedham.github.io/2009/06/18/functional-collection-parameters-a-different-way-of-thinking-about-collections/</link>
      <pubDate>Thu, 18 Jun 2009 18:31:59 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/18/functional-collection-parameters-a-different-way-of-thinking-about-collections/</guid>
      <description>One of the changes that I&amp;rsquo;ve noticed in my coding now compared to around 7 or 8 months ago is that whenever there&amp;rsquo;s some operations to be performed on a collection I am far more inclined to think of how to do those operations using a functional approach.
I&amp;rsquo;ve written previously about the ways I&amp;rsquo;ve been making use of functional collection parameters in my code but what I hadn&amp;rsquo;t really considered was that the way of thinking about the problem we want to solve is slightly different.</description>
    </item>
    
    <item>
      <title>Book Club: Arguments and Results (James Noble)</title>
      <link>http://mneedham.github.io/2009/06/16/book-club-arguments-and-results-james-noble/</link>
      <pubDate>Tue, 16 Jun 2009 23:37:04 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/16/book-club-arguments-and-results-james-noble/</guid>
      <description>We restarted our book club again last week by reading James Noble&amp;rsquo;s Arguments and Results paper, a paper I came across from a Michael Feathers blog post a few months ago detailing 10 papers that every programmer should read.
We decided to try out the idea of reading papers/individual chapters from books as it allows us to vary the type of stuff we&amp;rsquo;re reading more frequently and is an approach which Obie seems to be having some success with.</description>
    </item>
    
    <item>
      <title>Functional Collection Parameters: Handling the null collection</title>
      <link>http://mneedham.github.io/2009/06/16/functional-collection-parameters-handling-the-null-collection/</link>
      <pubDate>Tue, 16 Jun 2009 20:29:29 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/16/functional-collection-parameters-handling-the-null-collection/</guid>
      <description>One of the interesting cases where I&amp;rsquo;ve noticed we tend to avoid functional collection parameters in our code base is when there&amp;rsquo;s the possibility of the collection being null.
The code is on the boundary of our application&amp;rsquo;s interaction with another service so it is actually a valid scenario that we could receive a null collection.
When using extension methods, although we wouldn&amp;rsquo;t get a null pointer exception by calling one on a null collection, we would get a &amp;lsquo;source is null&amp;rsquo; exception when the expression is evaluated so we need to protect ourself against this.</description>
    </item>
    
    <item>
      <title>C#/F#: Using .NET framework classes</title>
      <link>http://mneedham.github.io/2009/06/16/cf-using-net-framework-classes/</link>
      <pubDate>Tue, 16 Jun 2009 18:55:38 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/16/cf-using-net-framework-classes/</guid>
      <description>I was recently discussing F# with a couple of colleagues and one thing that came up is the slightly different ways that we might choose to interact with certain .NET framework classes compared to how we use those same classes in C# code.
One of those where I see potential for different use is the Dictionary class.
In C# code when we&amp;rsquo;re querying a dictionary to check that a value exists before we try to extract it we might typically do this:</description>
    </item>
    
    <item>
      <title>F#: Using C# extension methods</title>
      <link>http://mneedham.github.io/2009/06/15/f-using-c-extension-methods/</link>
      <pubDate>Mon, 15 Jun 2009 20:03:34 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/15/f-using-c-extension-methods/</guid>
      <description>An interesting thing I noticed about referencing C# libraries from F# is that you can&amp;rsquo;t access C# extension methods on generic open types in the same way that you would be able to if you were using the library from C# code.
I came across this problem when playing around with the Rhino Mocks framework in some F# code.
I wrote a simple test to see whether I could get an expectation to work correctly, without paying any regard for the fact that you can&amp;rsquo;t use all C# extension methods in the same way as you can from C# code!</description>
    </item>
    
    <item>
      <title>F#: Overlapping fields in record types</title>
      <link>http://mneedham.github.io/2009/06/14/f-overlapping-fields-in-record-types/</link>
      <pubDate>Sun, 14 Jun 2009 00:37:01 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/14/f-overlapping-fields-in-record-types/</guid>
      <description>A problem which has confused me for a while is how to create instances of record types whose fields overlap with another record defined further down in an F# file.
The most recently defined record seems to take precedence even if it has more fields than a record defined earlier and you don&amp;rsquo;t specify all of those fields in your record creation attempt.
For example, if I have the following two record types:</description>
    </item>
    
    <item>
      <title>Coding: Single Level of Abstraction Principle</title>
      <link>http://mneedham.github.io/2009/06/12/coding-single-level-of-abstraction-principle/</link>
      <pubDate>Fri, 12 Jun 2009 17:35:51 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/12/coding-single-level-of-abstraction-principle/</guid>
      <description>One of the other useful principles for writing readable code that I&amp;rsquo;ve come across in the last year or so is the Single Level of Abstraction Principle.
I first came across the idea of writing code at the same level of abstraction in Uncle Bob&amp;rsquo;s Clean Code although I only learnt about the actual term in Neal Ford&amp;rsquo;s The Productive Programmer.
As the name suggests the idea is that within a certain method we look to keep all the code at the same level of abstraction to help us read it more easily.</description>
    </item>
    
    <item>
      <title>Coding Dojo #17: Refactoring Cruise Control .NET</title>
      <link>http://mneedham.github.io/2009/06/12/coding-dojo-17-refactoring-cruise-control-net/</link>
      <pubDate>Fri, 12 Jun 2009 17:07:30 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/12/coding-dojo-17-refactoring-cruise-control-net/</guid>
      <description>After a couple of weeks of more experimental coding dojos this week we decided to get back to some pure coding with the session being focused around doing some refactoring of the continuous integration server Cruise Control .NET.
The overall intention of the refactoring we worked on is to try and introduce the concept of a &amp;lsquo;ChangeSet&amp;rsquo; into the code base to represent the revisions that come in from source control systems that CC.</description>
    </item>
    
    <item>
      <title>Coding: Keep method/variable names positive</title>
      <link>http://mneedham.github.io/2009/06/11/coding-keep-methodvariable-names-positive/</link>
      <pubDate>Thu, 11 Jun 2009 07:44:41 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/11/coding-keep-methodvariable-names-positive/</guid>
      <description>Something which I&amp;rsquo;ve come across a few times recently in code is method names which describe the negative aspect of something and for me at least these are very difficult to understand since I need to keep remembering that we are dealing with the negative and not the positive which I think is significantly easier to reason about.
A recent example of this which I came across was in some acceptance test code which among other things was asserting whether or not the policy number that had been created was in a valid format and returning the result of that assertion back to our Fitnesse fixture.</description>
    </item>
    
    <item>
      <title>F#: Useful for scripting</title>
      <link>http://mneedham.github.io/2009/06/09/f-useful-for-scripting/</link>
      <pubDate>Tue, 09 Jun 2009 23:29:15 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/09/f-useful-for-scripting/</guid>
      <description>We had the need to do a bit of scripting recently to change the names of the folders where we store our artifacts to signify which artifacts were created from our build&amp;rsquo;s production branch and which were generated from the main branch.
The problem we had was that we were ending up overwriting old artifacts from the main branch with the production branch&amp;rsquo;s artifacts so we wanted to fix this.</description>
    </item>
    
    <item>
      <title>Pair Programming: So you don&#39;t want to do it...</title>
      <link>http://mneedham.github.io/2009/06/08/pair-programming-so-you-dont-want-to-do-it/</link>
      <pubDate>Mon, 08 Jun 2009 17:05:46 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/08/pair-programming-so-you-dont-want-to-do-it/</guid>
      <description>I&amp;rsquo;ve worked on several software development teams over the last few years - some that pair programmed all the time and some that didn&amp;rsquo;t - and one of the key things that I&amp;rsquo;ve noticed is that the level of collaboration on these teams was significantly higher when pair programming was being done on a regular basis.
The following are some of the observations I have noticed in teams which don&amp;rsquo;t pair program frequently.</description>
    </item>
    
    <item>
      <title>Javascript: Using &#39;replace&#39; to make a link clickable</title>
      <link>http://mneedham.github.io/2009/06/08/javascript-using-replace-to-make-a-link-clickable/</link>
      <pubDate>Mon, 08 Jun 2009 11:57:39 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/08/javascript-using-replace-to-make-a-link-clickable/</guid>
      <description>I&amp;rsquo;ve been doing a bit more work on my twitter application over the weekend - this time taking the tweets that I&amp;rsquo;ve stored in CouchDB and displaying them on a web page.
One of the problems I had is that the text of the tweets is just plain text so if there is a link in a tweet then when I display it on a web page it isn&amp;rsquo;t clickable since it isn&amp;rsquo;t enclosed by the &amp;lsquo;&amp;#60;a href&amp;rdquo;&amp;hellip;&amp;rdquo;&amp;#62;&amp;#60;/a&amp;#62;&amp;rsquo; tag.</description>
    </item>
    
    <item>
      <title>F#: Explicit interface implementation</title>
      <link>http://mneedham.github.io/2009/06/07/f-explicit-interface-implementation/</link>
      <pubDate>Sun, 07 Jun 2009 08:19:01 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/07/f-explicit-interface-implementation/</guid>
      <description>I&amp;rsquo;ve been writing some code to map between CouchDB documents and F# objects and something which I re-learned while doing this is the way that interfaces work in F#.
In F# when you have a class which implements an interface that class makes use of explicit interface implementation.
This means that in order to access any members of the interface that the class implements you need to specifically refer to the interface by upcasting the value using the &amp;lsquo;:&amp;gt;&amp;rsquo; operator.</description>
    </item>
    
    <item>
      <title>Coding: Why do we extract method?</title>
      <link>http://mneedham.github.io/2009/06/04/coding-why-do-we-extract-method/</link>
      <pubDate>Thu, 04 Jun 2009 20:30:47 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/04/coding-why-do-we-extract-method/</guid>
      <description>Ever since I&amp;rsquo;ve read Uncle Bob&amp;rsquo;s Clean Code book my approach to coding has been all about the &amp;lsquo;extract method&amp;rsquo; refactoring - I pretty much look to extract method as much as I can until I get to the point where extracting another method would result in me just describing the language semantics in the method name.
One of the approaches that I&amp;rsquo;ve come across with regards to doing this refactoring is that it&amp;rsquo;s only used when there is duplication of code and we want to reduce that duplication so that it&amp;rsquo;s all in one place and then call that method from two places.</description>
    </item>
    
    <item>
      <title>Coding: Putting code where people can find it</title>
      <link>http://mneedham.github.io/2009/06/02/coding-putting-code-where-people-can-find-it/</link>
      <pubDate>Tue, 02 Jun 2009 23:35:31 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/02/coding-putting-code-where-people-can-find-it/</guid>
      <description>I&amp;rsquo;ve previously written about the builder pattern which I think is a very useful pattern for helping to setup data.
It allows us to setup custom data when we care about a specific piece of data in a test or just use default values if we&amp;rsquo;re not bothered about a piece of data but need it to be present for our test to execute successfully.
One problem that I noticed was that despite the fact we had builders for quite a number of the classes we were using in our tests, when new tests were being added test data was still being setup by directly using the classes instead of making use of the builders which had already done the hard work for you.</description>
    </item>
    
    <item>
      <title>F#: Tuples don&#39;t seem to express intent well</title>
      <link>http://mneedham.github.io/2009/06/02/f-tuples-dont-seem-to-express-intent-well/</link>
      <pubDate>Tue, 02 Jun 2009 22:01:52 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/02/f-tuples-dont-seem-to-express-intent-well/</guid>
      <description>Tuples are one of the data types that I learnt about at university but never actually got to use for anything until I started playing around with F# which has this type in the language.
A tuple describes an ordered group of values and in that sense is similar to a C# anonymous type except an anonymous type&amp;rsquo;s values are named whereas a tuple&amp;rsquo;s are not.
In F# we can create one by separating a sequence of values with a comma in a value assignment:</description>
    </item>
    
    <item>
      <title>VMware: Accessing host server</title>
      <link>http://mneedham.github.io/2009/06/02/vmware-accessing-host-server/</link>
      <pubDate>Tue, 02 Jun 2009 21:36:46 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/06/02/vmware-accessing-host-server/</guid>
      <description>I&amp;rsquo;ve been doing all my spare time .NET development from within VMWare for about the last year or so and now and then it&amp;rsquo;s quite useful to be able to access the host machine either to get some files from there or to access a server that&amp;rsquo;s running on the host.
The former problem is solved by going to &amp;lsquo;Virtual Machines -&amp;gt; Shared Folders&amp;rsquo; and clicking on the + button on the bottom left of the menu to add a folder that you want to share.</description>
    </item>
    
    <item>
      <title>CouchDB/Futon: &#39;_all_dbs&#39; call returns databases with leading &#39;c/&#39;</title>
      <link>http://mneedham.github.io/2009/05/31/couchdbfuton-_all_dbs-call-returns-databases-with-leading-c/</link>
      <pubDate>Sun, 31 May 2009 23:28:20 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/31/couchdbfuton-_all_dbs-call-returns-databases-with-leading-c/</guid>
      <description>As I mentioned in my previous post I&amp;rsquo;ve been playing around with CouchDB and one of the problems that I&amp;rsquo;ve been having is that although I can access my database through the REST API perfectly fine, whenever I went to the Futon page (&amp;lsquo;http://localhost:5984/_utils/&#39; in my case) to view my list of databases I was getting the following javascript error:
Database information could not be retrieved: missing  I thought I&amp;rsquo;d have a quick look with FireBug to see if I could work out what was going on and saw several requests being made to the following urls and resulting in 404s:</description>
    </item>
    
    <item>
      <title>SharpCouch: Use anonymous type to create JSON objects</title>
      <link>http://mneedham.github.io/2009/05/31/sharpcouch-use-anonymous-type-to-create-json-objects/</link>
      <pubDate>Sun, 31 May 2009 20:59:47 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/31/sharpcouch-use-anonymous-type-to-create-json-objects/</guid>
      <description>I&amp;rsquo;ve been playing around with CouchDB a bit today and in particular making use of SharpCouch, a library which acts as a wrapper around CouchDB calls. It is included in the CouchBrowse library which is recommended as a good starting point for interacting with CouchDB from C# code.
I decided to work out how the API worked with by writing an integration test to save a document to the database.</description>
    </item>
    
    <item>
      <title>F#: Testing asynchronous calls to MailBoxProcessor</title>
      <link>http://mneedham.github.io/2009/05/30/f-testing-asynchronous-calls-to-mailboxprocessor/</link>
      <pubDate>Sat, 30 May 2009 20:38:02 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/30/f-testing-asynchronous-calls-to-mailboxprocessor/</guid>
      <description>Continuing with my attempts to test some of the code in my twitter application I&amp;rsquo;ve been trying to work out how to test the Erlang style messaging which I set up to process tweets when I had captured them using the TweetSharp API.
The problem I had is that that processing is being done asynchronously so we can&amp;rsquo;t test it in our normal sequential way.
Chatting with Dave about this he suggested that what I really needed was a latch which could be triggered when the asynchronous behaviour had completed, thus informing the test that it could proceed.</description>
    </item>
    
    <item>
      <title>xUnit.NET: Running tests written in Visual Studio 2010</title>
      <link>http://mneedham.github.io/2009/05/30/xunitnet-running-tests-written-in-visual-studio-2010/</link>
      <pubDate>Sat, 30 May 2009 11:51:53 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/30/xunitnet-running-tests-written-in-visual-studio-2010/</guid>
      <description>I&amp;rsquo;ve been playing around with F# in Visual Studio 2010 after the Beta 1 release last Wednesday and in particular I&amp;rsquo;ve been writing some xUnit.NET tests around the twitter application I&amp;rsquo;ve been working on.
A problem I ran into when attempting to run my tests against &amp;lsquo;xunit.console.exe&amp;rsquo; is that xUnit.NET is linked to run against version 2.0 of the CLR and right now you can&amp;rsquo;t actually change the &amp;lsquo;targetframework&amp;rsquo; for a project compiled in Visual Studio 2010.</description>
    </item>
    
    <item>
      <title>Coding Dojo #16: Reading SUnit code</title>
      <link>http://mneedham.github.io/2009/05/29/coding-dojo-16-reading-sunit-code/</link>
      <pubDate>Fri, 29 May 2009 09:23:19 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/29/coding-dojo-16-reading-sunit-code/</guid>
      <description>Continuing on from last week&amp;rsquo;s look at Smalltalk, in our latest coding dojo we spent some time investigating the SUnit testing framework, how we would use it to write some tests and looking at how it actually works.
The Format We had 3 people for the dojo this week and the majority was spent looking at the code on a big screen and trying to understand between us what was going on.</description>
    </item>
    
    <item>
      <title>The 5 dysfunctions of teams in code</title>
      <link>http://mneedham.github.io/2009/05/28/the-5-dysfunctions-of-teams-in-code/</link>
      <pubDate>Thu, 28 May 2009 05:44:52 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/28/the-5-dysfunctions-of-teams-in-code/</guid>
      <description>I recently came across an interesting post by my colleague Pat Kua where he talks about how some patterns he&amp;rsquo;s noticed in code can be linked to Conway&amp;rsquo;s law which suggests that the structure of systems designed in organisations will mirror the communication structure of that organisation.
I recently read a book called &amp;lsquo;The Five Dysfunctions of Teams&amp;rsquo; which describe some behaviours in teams which aren&amp;rsquo;t working in an effective way.</description>
    </item>
    
    <item>
      <title>Pair Programming: Refactoring</title>
      <link>http://mneedham.github.io/2009/05/26/pair-programming-refactoring/</link>
      <pubDate>Tue, 26 May 2009 23:44:36 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/26/pair-programming-refactoring/</guid>
      <description>One area of development where I have sometimes wondered about the value that we can get from pair programming is when we&amp;rsquo;re spending time doing some major refactoring of our code base.
The reason I felt that pairing on big refactoring tasks might be difficult compared to when working on a story together is that with a story there tends to be a more defined goal and the business have defined that goal whereas with a refactoring task that goal is often less clear and people have much wider ranging differing opinions about the approach that should be taken.</description>
    </item>
    
    <item>
      <title>Refactoring: Removing duplication more safely</title>
      <link>http://mneedham.github.io/2009/05/26/refactoring-removing-duplication-more-safely/</link>
      <pubDate>Tue, 26 May 2009 13:20:01 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/26/refactoring-removing-duplication-more-safely/</guid>
      <description>One of the most important things that I&amp;rsquo;ve learnt from the coding dojo sessions that we&amp;rsquo;ve been running over the last six months is the importance of small step refactorings.
Granted we have been trying to take some of the practices to the extreme but the basic idea of trying to keep the tests green for as much time as well as keeping our code in a state where it still compiles (in a static language) is very useful no matter what code we&amp;rsquo;re working on.</description>
    </item>
    
    <item>
      <title>The value of a fresh mind</title>
      <link>http://mneedham.github.io/2009/05/26/the-value-of-a-fresh-mind/</link>
      <pubDate>Tue, 26 May 2009 00:51:41 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/26/the-value-of-a-fresh-mind/</guid>
      <description>I recently read a post by my colleague Sai Venkatakrishnan where he talks about some of the disadvantages of over working on a project and it reminded me of something I&amp;rsquo;ve noticed a lot recently - notably that after taking a break from solving a problem, either by looking at it again the next day or after lunch or any kind of break I end up solving it significantly more quickly than if I&amp;rsquo;d kept on trying to solve it without doing so.</description>
    </item>
    
    <item>
      <title>TDD: Making the test green quickly</title>
      <link>http://mneedham.github.io/2009/05/24/tdd-making-the-test-green-quickly/</link>
      <pubDate>Sun, 24 May 2009 23:43:28 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/24/tdd-making-the-test-green-quickly/</guid>
      <description>Although I pointed out some things that I disagreed with in Nick&amp;rsquo;s post about pair programming one thing that I really liked in that post was that he emphasised the importance of getting tests from red to green as quickly as possible.
 I remember the best programming sessions I’ve had was with Stacy Curl, now an ex-thoughtworker and whom I believe was also a chess player. He would always look to quickly make my tests pass, even if it was to just echo the output that my tests would sometimes expect.</description>
    </item>
    
    <item>
      <title>Real World Functional Programming: Book Review</title>
      <link>http://mneedham.github.io/2009/05/24/real-world-functional-programming-book-review/</link>
      <pubDate>Sun, 24 May 2009 19:25:07 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/24/real-world-functional-programming-book-review/</guid>
      <description>The Book Real World Functional Programming by Tomas Petricek with Jon Skeet (corresponding website)
The Review I decided to read this book after being somewhat inspired to learn more about functional programming after talking with Phil about his experiences learning Clojure. I&amp;rsquo;m currently working on a .NET project so it seemed to make sense that F# was the language I picked to learn.
What did I learn?  I&#39;ve worked with C# 3.</description>
    </item>
    
    <item>
      <title>Pair Programming: It&#39;s not about equal keyboard time</title>
      <link>http://mneedham.github.io/2009/05/23/its-not-about-equal-keyboard-time/</link>
      <pubDate>Sat, 23 May 2009 16:35:56 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/23/its-not-about-equal-keyboard-time/</guid>
      <description>My colleague Nick Carroll recently blogged some ideas about what to do if your pair is hogging the keyboard, suggesting using a timer which keeps track of how long each person has had at the keyboard as a useful way of ensuring that both people in the pair stay more engaged.
While I can see the thinking behind this I think it is addressing the wrong problem.
From my experience we don&amp;rsquo;t always want to be moving the keyboard between the two people quickly at all times - I have certainly seen times where it makes sense for one person to be spending more time at the keyboard than the other.</description>
    </item>
    
    <item>
      <title>Coding: Setters reduce trust</title>
      <link>http://mneedham.github.io/2009/05/23/coding-setters-reduce-trust/</link>
      <pubDate>Sat, 23 May 2009 15:37:34 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/23/coding-setters-reduce-trust/</guid>
      <description>I&amp;rsquo;ve written previously about my dislike of the way the object initialiser is misused in C# 3.0 and although I&amp;rsquo;ve also written about my preference for explicit modeling and the need for objects to act as good citizens I&amp;rsquo;ve never quite been able to articulate what it is I dislike so much about having setter methods on objects.
I&amp;rsquo;ve learnt from experience that it leads to a world of pain in our code by having the ability to setup an object after construction using setters and in a conversation with a colleague about this last week he suggested that the reason it&amp;rsquo;s such a bad practice to follow is that it makes us lose our trust in not only that object but in all the other objects in the application.</description>
    </item>
    
    <item>
      <title>Coding Dojo #15: Smalltalk</title>
      <link>http://mneedham.github.io/2009/05/21/coding-dojo-15-smalltalk/</link>
      <pubDate>Thu, 21 May 2009 19:05:26 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/21/coding-dojo-15-smalltalk/</guid>
      <description>We decided to play around with Smalltalk a bit in our latest coding dojo.
A lot of the ideas that I value the most in terms of writing software effectively seem to have originally come from the Smalltalk community and a colleague of mine has been reading Kent Beck&amp;rsquo;s TDD by Example book and was really keen to try out the language to see where Kent&amp;rsquo;s original ideas came from.</description>
    </item>
    
    <item>
      <title>Build: Using virtual machines to run it in parallel</title>
      <link>http://mneedham.github.io/2009/05/21/build-using-virtual-machines-to-run-it-in-parallel/</link>
      <pubDate>Thu, 21 May 2009 18:02:27 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/21/build-using-virtual-machines-to-run-it-in-parallel/</guid>
      <description>One of the things that we&amp;rsquo;ve been working on lately to improve the overall time that our full build takes to run is to split the acceptance tests into several small groups of tests so that we can run them in parallel.
We are using Cruise as our build server so the ability to have multiple agents running against different parts of the build at the same time comes built it.</description>
    </item>
    
    <item>
      <title>F#: Object expressions</title>
      <link>http://mneedham.github.io/2009/05/19/f-object-expressions/</link>
      <pubDate>Tue, 19 May 2009 01:38:31 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/19/f-object-expressions/</guid>
      <description>One of the things I miss a bit from the Java world is the ability to create anonymous inner classes which implement a certain interface.
We can&amp;rsquo;t do this in C# - you always need to define a named class - but in my latest playing around with F# I was quite pleased to learn that we do have this ability using a feature called object expressions.
These come in particularly useful when you are only making use of the implementation of an interface in one place in the code and therefore don&amp;rsquo;t want to expose this type to any other code.</description>
    </item>
    
    <item>
      <title>97 Things Every Software Architect Should Know: Book Review</title>
      <link>http://mneedham.github.io/2009/05/18/97-things-every-software-architect-should-know-book-review/</link>
      <pubDate>Mon, 18 May 2009 01:03:25 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/18/97-things-every-software-architect-should-know-book-review/</guid>
      <description>The Book 97 Things Every Software Architect Should Know by Richard Monson-Haefel
The Review My colleague Erik Doernenburg mentioned that he had written a couple of chapters in this book a while ago and there was a copy of the book in the ThoughtWorks office so I thought I&amp;rsquo;d take a look.
I&amp;rsquo;m far from being an architect but since their decisions affect what I do I was intrigued to see what they should be doing.</description>
    </item>
    
    <item>
      <title>Coding Dojo #14: Rock, Scissors, Paper - TDD as if you meant it </title>
      <link>http://mneedham.github.io/2009/05/15/coding-dojo-14-rock-scissors-paper-tdd-as-if-you-meant-it/</link>
      <pubDate>Fri, 15 May 2009 07:39:57 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/15/coding-dojo-14-rock-scissors-paper-tdd-as-if-you-meant-it/</guid>
      <description>We decided to have a second week of following Keith Braithwaite&amp;rsquo;s &amp;lsquo;TDD as if you meant it&amp;rsquo; exercise which he led at the Software Craftsmanship Conference.
Our attempt a fortnight ago was around implementing a Flash Message interceptor, to hook into the Spring framework but this week was focused more around modeling, the goal being to model a game of Rock, Paper, Scissors.
The code is available on our bitbucket repository.</description>
    </item>
    
    <item>
      <title>Mercurial: Pulling from behind a proxy</title>
      <link>http://mneedham.github.io/2009/05/13/mercurial-pulling-from-behind-a-proxy/</link>
      <pubDate>Wed, 13 May 2009 07:49:44 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/13/mercurial-pulling-from-behind-a-proxy/</guid>
      <description>I&amp;rsquo;ve been playing around with Mercurial and the mercurial hosting website bitbucket a bit this year and recently wanted to pull from a repository from behind a proxy server.
With a bit of help from the mercurial mailing list and the documentation this is how I was able to pull the repository for the Hambread project I&amp;rsquo;ve been doing a bit of work on:
~~~text
hg &amp;ndash;config http_proxy.host=ipOfYourProxyServer:portOfYourProxyServer &amp;ndash;config http_proxy.user=user &amp;ndash;config http_proxy.</description>
    </item>
    
    <item>
      <title>Debugging: Get to a stage where it works</title>
      <link>http://mneedham.github.io/2009/05/12/debugging-get-to-a-stage-where-it-works/</link>
      <pubDate>Tue, 12 May 2009 09:21:13 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/12/debugging-get-to-a-stage-where-it-works/</guid>
      <description>When debugging a problem I&amp;rsquo;ve learnt far too many times that where possible the most effective approach is to try and get the application back into a state where it does work and then analyse the changes that have resulted in it no longer working as expected.
About 7 or 8 years ago when I used to code PHP at school and university that pretty much was my default approach - I didn&amp;rsquo;t really know how to program well enough to work out how to fix something that was broken so I would always just revert back all the steps I&amp;rsquo;d done until it worked.</description>
    </item>
    
    <item>
      <title>Tackling the risk early on at a task level</title>
      <link>http://mneedham.github.io/2009/05/11/tackling-the-risk-early-on-at-a-task-level/</link>
      <pubDate>Mon, 11 May 2009 23:54:12 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/11/tackling-the-risk-early-on-at-a-task-level/</guid>
      <description>I wrote previously about the idea of tackling the risky tasks in a project early on - an idea that I learnt about when reading Alistair Cockburn&amp;rsquo;s Crystal Clear.
Towards the end of the post I wondered whether we could apply this idea at a story level whereby we would identify the potentially risky parts of a story and make sure that we addressed those risks before they became problematic to us.</description>
    </item>
    
    <item>
      <title>F#: Regular expressions/active patterns</title>
      <link>http://mneedham.github.io/2009/05/10/f-regular-expressionsactive-patterns/</link>
      <pubDate>Sun, 10 May 2009 08:58:48 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/10/f-regular-expressionsactive-patterns/</guid>
      <description>Josh has been teaching me how to do regular expressions in Javascript this week and intrigued as to how you would do this in F# I came across a couple of blog posts by Chris Smith talking about active patterns and regular expressions via active patterns.
As I understand them active patterns are not that much different to normal functions but we can make use of them as part of a let or match statement which we can&amp;rsquo;t do with a normal function.</description>
    </item>
    
    <item>
      <title>C#: Using virtual leads to confusion?</title>
      <link>http://mneedham.github.io/2009/05/06/c-using-virtual-leads-to-confusion/</link>
      <pubDate>Wed, 06 May 2009 19:30:50 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/06/c-using-virtual-leads-to-confusion/</guid>
      <description>A colleague and I were looking through some code that I worked on a couple of months ago where I had created a one level hierarchy using inheritance to represent the response status that we get back from a service call.
The code was along these lines:
public class ResponseStatus { public static readonly ResponseStatus TransactionSuccessful = new TransactionSuccessful(); public static readonly ResponseStatus UnrecoverableError = new UnrecoverableError(); public virtual bool RedirectToErrorPage { get { return true; } } } public class UnrecoverableError : ResponseStatus { } public class TransactionSuccessful : ResponseStatus { public override bool RedirectToErrorPage { get { return false; } } }  Looking at it now it does seem a bit over-engineered, but the main confusion with this code is that when you click through to the definition of &amp;lsquo;RedirectToError&amp;rsquo; it goes to the ResponseStatus version of that property and it&amp;rsquo;s not obvious that it is being overridden in a sub class, this being possible due to my use of the virtual key word.</description>
    </item>
    
    <item>
      <title>Adding humour to Tester/Developer collaboration</title>
      <link>http://mneedham.github.io/2009/05/04/adding-humour-to-testerdeveloper-collaboration/</link>
      <pubDate>Mon, 04 May 2009 23:43:03 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/04/adding-humour-to-testerdeveloper-collaboration/</guid>
      <description>Pat Kua has a recent post where he talks about the language used between testers and developers when talking about defects that testers come across when testing some functionality and while I would agree with him that the language used is important, I&amp;rsquo;ve always found that injecting some humour into the situation takes the edge off.
As Dahlia points out I think this is probably only possible if there is good rapport between the developers and testers on the team so perhaps this has been the case for the teams I&amp;rsquo;ve worked on.</description>
    </item>
    
    <item>
      <title>Pair Programming: When your pair steps away</title>
      <link>http://mneedham.github.io/2009/05/03/pair-programming-when-your-pair-steps-away/</link>
      <pubDate>Sun, 03 May 2009 19:08:27 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/03/pair-programming-when-your-pair-steps-away/</guid>
      <description>I&amp;rsquo;ve been having a bit of a discussion recently with some of my colleagues about what we should do when pair programming and one of the people in the pair has to step away to go and help someone else or to take part in an estimation session or whatever it happens to be.
If we&amp;rsquo;re pairing in an effective way then it should be possible for the person still at the computer to keep on going on the story/task that the pair were working on alone.</description>
    </item>
    
    <item>
      <title>F#: Stuff I get confused about</title>
      <link>http://mneedham.github.io/2009/05/02/f-stuff-i-get-confused-about/</link>
      <pubDate>Sat, 02 May 2009 14:38:36 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/02/f-stuff-i-get-confused-about/</guid>
      <description>Coming from the world of C# I&amp;rsquo;ve noticed that there are a couple of things that I sometimes get confused about when playing around with stuff in F# land.
Passing arguments to functions The way that we pass arguments to functions seems to be a fairly constant cause of confusion at the moment especially when doing that as part of a chain of other expressions where the use of brackets starts to become necessary.</description>
    </item>
    
    <item>
      <title>F#: Entry point of an application</title>
      <link>http://mneedham.github.io/2009/05/02/f-entry-point-of-an-application/</link>
      <pubDate>Sat, 02 May 2009 01:56:09 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/02/f-entry-point-of-an-application/</guid>
      <description>In an attempt to see whether or not the mailboxes I&amp;rsquo;ve been working on for my twitter application were actually processing messages on different threads I ran into the problem of defining the entry point of an F# application.
I thought it would be as simple as defining a function called &amp;lsquo;main&amp;rsquo; but I put this function into my code ran the executable and nothing happened!
Googling the problem a bit led me to believe that it is possible to do but that the function needs to be the last thing that happens in the compilation sequence of the project.</description>
    </item>
    
    <item>
      <title>F#: Erlang style messaging passing</title>
      <link>http://mneedham.github.io/2009/05/02/f-erlang-style-messaging-passing/</link>
      <pubDate>Sat, 02 May 2009 01:53:56 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/05/02/f-erlang-style-messaging-passing/</guid>
      <description>As I mentioned in my previous post about over loading methods in F# I&amp;rsquo;ve been trying to refactor my twitter application into a state where it can concurrently process twitter statuses while continuing to retrieve more of them from the twitter website.
I played around a bit with Erlang last year and one thing that I quite liked is the message passing between processes to allow operations to be performed concurrently.</description>
    </item>
    
    <item>
      <title>Coding Dojo #13: TDD as if you meant it</title>
      <link>http://mneedham.github.io/2009/04/30/coding-dojo-13-tdd-as-if-you-meant-it/</link>
      <pubDate>Thu, 30 Apr 2009 06:12:41 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/30/coding-dojo-13-tdd-as-if-you-meant-it/</guid>
      <description>We decided to follow Keith Braithwaite&amp;rsquo;s &amp;lsquo;TDD as if you meant it&amp;rsquo; exercise which he led at the Software Craftsmanship Conference and which I originally read about on Gojko Adzic&amp;rsquo;s blog.
We worked on implementing a Flash Message interceptor, to hook into the Spring framework, that one of my colleague&amp;rsquo;s has been working on - the idea is to show a flash method to the user, that message being stored in the session on a Post and then removed on a Get in the &amp;lsquo;Post-Redirect-Get&amp;rsquo; cycle.</description>
    </item>
    
    <item>
      <title>F#: Overloading functions/pattern matching</title>
      <link>http://mneedham.github.io/2009/04/28/f-overloading-functionspattern-matching/</link>
      <pubDate>Tue, 28 Apr 2009 23:43:22 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/28/f-overloading-functionspattern-matching/</guid>
      <description>While trying to refactor my twitter application into a state where I could use Erlang style message passing to process some requests asynchronously while still hitting twitter to get more messages I came across the problem of wanting to overload a method.
By default it seems that you can&amp;rsquo;t do method overloading in F# unless you make use of the OverloadID attribute which I learnt about from reading Scott Seely&amp;rsquo;s blog post:</description>
    </item>
    
    <item>
      <title>Coding: Weak/Strong APIs</title>
      <link>http://mneedham.github.io/2009/04/27/coding-weakstrong-apis/</link>
      <pubDate>Mon, 27 Apr 2009 20:30:52 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/27/coding-weakstrong-apis/</guid>
      <description>An interesting problem that I&amp;rsquo;ve come across a few times in the last couple of week centres around how strongly typed we should make the arguments to public methods on our objects.
There seem to be benefits and drawbacks with each approach so I&amp;rsquo;m not sure which approach is better - it possibly depends on the context.
When we have a strong API the idea is that we pass an object as the argument to a method on another object.</description>
    </item>
    
    <item>
      <title>F#: Not equal/Not operator</title>
      <link>http://mneedham.github.io/2009/04/25/f-not-equalnot-operator/</link>
      <pubDate>Sat, 25 Apr 2009 22:12:43 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/25/f-not-equalnot-operator/</guid>
      <description>While continuing playing with my F# twitter application I was trying to work out how to exclude the tweets that I posted from the list that gets displayed.
I actually originally had the logic the wrong way round so that it was only showing my tweets!
let excludeSelf (statuses:seq&amp;lt;TwitterStatus&amp;gt;) = statuses |&amp;gt; Seq.filter (fun eachStatus -&amp;gt; eachStatus.User.ScreenName.Equals(&amp;quot;markhneedham&amp;quot;))  Coming from the world of Java and C# &amp;lsquo;!&amp;rsquo; would be the operator to find the screen names that don&amp;rsquo;t match my own name.</description>
    </item>
    
    <item>
      <title>Writing unit tests can be fun</title>
      <link>http://mneedham.github.io/2009/04/25/writing-unit-tests-can-be-fun/</link>
      <pubDate>Sat, 25 Apr 2009 19:51:10 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/25/writing-unit-tests-can-be-fun/</guid>
      <description>I recently came across Pavel Brodzinski&amp;rsquo;s blog and while browsing through some of his most recent posts I came across one discussing when unit testing doesn&amp;rsquo;t work.
The majority of what Pavel says I&amp;rsquo;ve seen happen before on projects I&amp;rsquo;ve worked on but I disagree with his suggestion that writing unit tests is boring:
 6. Writing unit tests is boring. That’s not amusing or challenging algorithmic problem. That’s not cool hacking trick which you can show off with in front of your geeky friends.</description>
    </item>
    
    <item>
      <title>OO with a bit of functional mixed in</title>
      <link>http://mneedham.github.io/2009/04/25/oo-with-a-bit-of-functional-mixed-in/</link>
      <pubDate>Sat, 25 Apr 2009 11:14:12 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/25/oo-with-a-bit-of-functional-mixed-in/</guid>
      <description>From my experiences playing around with F# and doing a bit of functional C# I&amp;rsquo;m beginning to think that the combination of functional and object oriented programming actually results in code which I think is more expressive and easy to work with than code written only with an object oriented approach in mind.
I&amp;rsquo;m also finding it much more fun to write code this way!
In a recent post Dean Wampler questions whether the supremacy of object oriented programming is over before going on to suggest that the future is probably going to be a mix of functional programming and object oriented programming.</description>
    </item>
    
    <item>
      <title>Pimp my architecture - Dan North</title>
      <link>http://mneedham.github.io/2009/04/25/pimp-my-architecture-dan-north/</link>
      <pubDate>Sat, 25 Apr 2009 01:26:38 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/25/pimp-my-architecture-dan-north/</guid>
      <description>My colleague Dan North presented a version of a talk he first did at QCon London titled &amp;lsquo;Pimp my architecture&amp;rsquo; at the ThoughtWorks Sydney community college on Wednesday night. He&amp;rsquo;ll also be presenting it at JAOO in Sydney and Brisbane in a couple of weeks time.
The slides for the talk are here and it&amp;rsquo;s also available on InfoQ.
What did I learn?  I quite liked the way the talk was laid out - Dan laid out a series of problems that he&#39;s seen on some projects he&#39;s worked on and then showed on the next slide where he planned to take the architecture.</description>
    </item>
    
    <item>
      <title>DDD: Making implicit concepts explicit</title>
      <link>http://mneedham.github.io/2009/04/23/ddd-making-implicit-concepts-explicit/</link>
      <pubDate>Thu, 23 Apr 2009 12:36:25 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/23/ddd-making-implicit-concepts-explicit/</guid>
      <description>One of my favourite parts of the Domain Driven Design book is where Eric Evans talks about making implicit concepts in our domain model explicit.
The book describes this process like so:
 Many transformations of domain models and the corresponding code happen when developers recognize a concept that has been hinted at in discussion or present implicitly in the design, and they then represent it explicitly in the model with one or more objects or relationships.</description>
    </item>
    
    <item>
      <title>The Five Dysfunctions of a Team: Book Review</title>
      <link>http://mneedham.github.io/2009/04/22/the-five-dysfunctions-of-a-team-book-review/</link>
      <pubDate>Wed, 22 Apr 2009 06:50:43 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/22/the-five-dysfunctions-of-a-team-book-review/</guid>
      <description>The Book The Five Dysfunctions of a Team by Patrick Lencioni
The Review I heard about this book a while ago but I was intrigued to actually get a copy by Darren Cotterill, the Iteration Manager on the project I&amp;rsquo;m working on at the moment.
I was particularly interested in learning whether the ideas of agile and/or lean help to solve any of these dysfunctions.
What did I learn?  The book is split into two sections.</description>
    </item>
    
    <item>
      <title>Learning through teaching</title>
      <link>http://mneedham.github.io/2009/04/21/learning-through-teaching/</link>
      <pubDate>Tue, 21 Apr 2009 07:38:36 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/21/learning-through-teaching/</guid>
      <description>I&amp;rsquo;ve been watching one of the podcasts recorded from the Alt.NET Houston conference titled &amp;lsquo;Why blog and open source&amp;rsquo; and one of the interesting ideas that stood out amongst the opinions express is that people write about their experience in order to understand the topics better themselves.
I&amp;rsquo;ve found this to be a very valuable way of learning - in fact it&amp;rsquo;s probably more beneficial to the teacher than the student, somewhat ironically.</description>
    </item>
    
    <item>
      <title>Coding: Applying levels of abstraction</title>
      <link>http://mneedham.github.io/2009/04/19/coding-applying-levels-of-abstraction/</link>
      <pubDate>Sun, 19 Apr 2009 23:03:01 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/19/coding-applying-levels-of-abstraction/</guid>
      <description>One interesting situation that we often arrive at when writing code is working out when the best time to apply a level of abstraction is.
I think there is always a trade off to be made when it comes to creating abstractions - creating the abstraction adds to the complexity of the code we&amp;rsquo;re writing but it is often the case that creating it makes it easier for us to navigate the code base.</description>
    </item>
    
    <item>
      <title>I don&#39;t have time not to test!</title>
      <link>http://mneedham.github.io/2009/04/18/i-dont-have-time-not-to-test/</link>
      <pubDate>Sat, 18 Apr 2009 09:25:17 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/18/i-dont-have-time-not-to-test/</guid>
      <description>I recently read a blog post by Joshua Lockwood where he spoke of some people who claim they don&amp;rsquo;t have time to test.
Learning the TDD approach to writing code has been one of best things that I&amp;rsquo;ve learnt over the last few years - before I worked at ThoughtWorks I didn&amp;rsquo;t know how to do it and the only way I could verify whether something worked was to load up the application and manually check it.</description>
    </item>
    
    <item>
      <title>F#: Refactoring that little twitter application into objects</title>
      <link>http://mneedham.github.io/2009/04/18/f-refactoring-that-little-twitter-application-into-objects/</link>
      <pubDate>Sat, 18 Apr 2009 08:47:06 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/18/f-refactoring-that-little-twitter-application-into-objects/</guid>
      <description>I previously wrote about a little twitter application I&amp;rsquo;ve been writing to go through my twitter feed and find only the tweets with links it and while it works I realised that I was finding it quite difficult to add any additional functionality to it.
I&amp;rsquo;ve been following the examples in Real World Functional Programming which has encouraged an approach of creating functions to do everything that you want to do and then mixing them together.</description>
    </item>
    
    <item>
      <title>Coding Dojo #12: F#</title>
      <link>http://mneedham.github.io/2009/04/16/coding-dojo-12-f/</link>
      <pubDate>Thu, 16 Apr 2009 18:20:50 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/16/coding-dojo-12-f/</guid>
      <description>In our latest coding dojo we worked on trying to port some of the functionality of some C# 1.0 brain models, and in particular one around simulating chaos behaviour, that Dave worked on at university.
The Format This was more of an experimental dojo since everyone was fairly new to F# so we didn&amp;rsquo;t rotate the pair at the keyboard as frequently as possible.
What We Learnt  The aim of the session was to try and put some unit tests around the C# code and then try and replace that code with an F# version of it piece by piece.</description>
    </item>
    
    <item>
      <title>Lean: Big Picture over Local Optimisations</title>
      <link>http://mneedham.github.io/2009/04/14/lean-big-picture-over-local-optimisations/</link>
      <pubDate>Tue, 14 Apr 2009 22:10:13 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/14/lean-big-picture-over-local-optimisations/</guid>
      <description>I recently finished reading Lean Thinking and one of the things that was repeatedly emphasised is the need to look at the process as a whole rather than trying to optimise each part individually.
If we phrased this in a similar way to the Agile Manifesto it would probably read &amp;lsquo;Big Picture over Local Optimisations&amp;rsquo;.
The examples in Lean Thinking tend to be more manufacturing focused but I think this idea can certainly be applied in thinking about software projects too.</description>
    </item>
    
    <item>
      <title>F#: A day of writing a little twitter application</title>
      <link>http://mneedham.github.io/2009/04/13/f-a-day-of-writing-a-little-twitter-application/</link>
      <pubDate>Mon, 13 Apr 2009 22:09:37 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/13/f-a-day-of-writing-a-little-twitter-application/</guid>
      <description>I spent most of the bank holiday Monday here in Sydney writing a little application to scan through my twitter feed and find me just the tweets which have links in them since for me that&amp;rsquo;s where a lot of the value of twitter lies.
I&amp;rsquo;m sure someone has done this already but it seemed like a good opportunity to try and put a little of the F# that I&amp;rsquo;ve learned from reading Real World Functional Programming to use.</description>
    </item>
    
    <item>
      <title>TDD: Balancing DRYness and Readability</title>
      <link>http://mneedham.github.io/2009/04/13/tdd-balancing-dryness-and-readability/</link>
      <pubDate>Mon, 13 Apr 2009 00:47:00 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/13/tdd-balancing-dryness-and-readability/</guid>
      <description>I wrote previously about creating DRY tests and after some conversations with my colleagues recently about the balance between reducing duplication but maintaining readability I think I&amp;rsquo;ve found the compromise between the two that works best for me.
The underlying idea is that in any unit test I want to be aiming for a distinct 3 sections in the test - Given/When/Then, Arrange/Act/Assert or whatever your favourite description for those is.</description>
    </item>
    
    <item>
      <title>The Mythical Man Month: Book Review</title>
      <link>http://mneedham.github.io/2009/04/11/the-mythical-man-month-book-review/</link>
      <pubDate>Sat, 11 Apr 2009 12:33:03 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/11/the-mythical-man-month-book-review/</guid>
      <description>The Book The Mythical Man Month by Fred Brooks Junior
The Review Pretty much since I started working at ThoughtWorks 2 1&amp;frasl;2 years ago I&amp;rsquo;ve been told that this is a book I have to read and I&amp;rsquo;ve finally got around to doing so.
Maybe it&amp;rsquo;s not that surprising but my overriding thought about the book is that just about every mistake that we make in software development today is covered in this book!</description>
    </item>
    
    <item>
      <title>Pair Programming: The Code Fairy</title>
      <link>http://mneedham.github.io/2009/04/10/pair-programming-the-code-fairy/</link>
      <pubDate>Fri, 10 Apr 2009 19:28:18 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/10/pair-programming-the-code-fairy/</guid>
      <description>One of the hardest situations that comes up when pair programming is when you want to solve a problem in a certain way but you can&amp;rsquo;t persuade your pair that it&amp;rsquo;s the approach you should take.
The temptation in these situations is to wait until your pair isn&amp;rsquo;t around, maybe by staying late at the end of the day or coming in early the next day and then making the changes to the code that you wanted to make but didn&amp;rsquo;t when you were pairing with them.</description>
    </item>
    
    <item>
      <title>Coding: Passing booleans into methods</title>
      <link>http://mneedham.github.io/2009/04/08/coding-passing-booleans-into-methods/</link>
      <pubDate>Wed, 08 Apr 2009 05:43:43 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/08/coding-passing-booleans-into-methods/</guid>
      <description>In a post I wrote a couple of days ago about understanding the context of a piece of code before criticising it, one of the examples that I used of a time when it seems fine to break a rule was passing a boolean into a method to determine whether or not to show an editable version of a control on the page.
Chatting with Nick about this yesterday it became clear to me that I&amp;rsquo;ve missed one important reason why you&amp;rsquo;d not want to pass a boolean into a method.</description>
    </item>
    
    <item>
      <title>DDD: Only for complex projects?</title>
      <link>http://mneedham.github.io/2009/04/06/ddd-only-for-complex-projects/</link>
      <pubDate>Mon, 06 Apr 2009 19:21:55 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/06/ddd-only-for-complex-projects/</guid>
      <description>One of the things I find a bit confusing when it comes to Domain Driven Design is that some of the higher profile speakers/user group contributors on the subject have expressed the opinion that DDD is more suitable when we are dealing with complex projects.
I think this means complex in terms of the domain but I&amp;rsquo;ve certainly worked on some projects where we&amp;rsquo;ve been following certainly some of the ideas of DDD and have got some value out of doing so in domains which I wouldn&amp;rsquo;t say were particularly complex.</description>
    </item>
    
    <item>
      <title>Coding: It&#39;s all about the context</title>
      <link>http://mneedham.github.io/2009/04/05/coding-criticising-without-context/</link>
      <pubDate>Sun, 05 Apr 2009 19:45:56 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/05/coding-criticising-without-context/</guid>
      <description>I think one of the easiest things to do as a developer is to look at some code that you didn&amp;rsquo;t write and then start trashing it for all the supposed mistakes that the author has made that you wouldn&amp;rsquo;t have.
It&amp;rsquo;s certainly something I&amp;rsquo;ve been guilty of doing and probably will be again in the future.
Sometimes it&amp;rsquo;s justified but most of the time we lack the context for understanding why the code was written the way it was and therefore our criticism is not very useful to anyone.</description>
    </item>
    
    <item>
      <title>Functional C#: The hole in the middle pattern</title>
      <link>http://mneedham.github.io/2009/04/04/functional-c-the-hole-in-the-middle-pattern/</link>
      <pubDate>Sat, 04 Apr 2009 11:41:23 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/04/functional-c-the-hole-in-the-middle-pattern/</guid>
      <description>While reading Real World Functional Programming I came across an interesting pattern that I have noticed in some code bases recently which I liked but didn&amp;rsquo;t know had been given a name!
The hole in the middle pattern, coined by Brian Hurt, shows a cool way of using higher order functions in order to reuse code in cases where the code typically looks something like this:
public void SomeServiceCall() { var serviceClient = CreateServiceClient(); try { serviceClient.</description>
    </item>
    
    <item>
      <title>TDD: Testing mapping code</title>
      <link>http://mneedham.github.io/2009/04/02/tdd-testing-mapping-code/</link>
      <pubDate>Thu, 02 Apr 2009 23:11:12 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/04/02/tdd-testing-mapping-code/</guid>
      <description>I&amp;rsquo;ve previously written about some of the aspects of the mapping efforts that we&amp;rsquo;ve done on recent projects and what we&amp;rsquo;ve found from our testing (or lack of) around this type of code is that somewhere along the line you are going to have to check that you&amp;rsquo;re mapping these values correctly, be it in an automated test or just by manually checking that the correct values are being sent across our integration points and into other systems.</description>
    </item>
    
    <item>
      <title>Pair Programming: Slowly but surely</title>
      <link>http://mneedham.github.io/2009/03/31/pair-programming-slowly-but-surely/</link>
      <pubDate>Tue, 31 Mar 2009 23:15:28 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/31/pair-programming-slowly-but-surely/</guid>
      <description>I recently watched a video recorded by Uncle Bob at the Chicago Alt.NET meeting where amongst other things he talked about the importance of going slowly but surely when we&amp;rsquo;re developing code i.e. spending the time to get it right first time instead of rushing through and having to go back and fix our mistakes.
While pairing with a colleague recently it became clear to me that pair programming, when done well, drives you towards a state where you are being much more careful about the work being produced.</description>
    </item>
    
    <item>
      <title>DDD: Recognising relationships between bounded contexts</title>
      <link>http://mneedham.github.io/2009/03/30/ddd-recognising-relationships-between-bounded-contexts/</link>
      <pubDate>Mon, 30 Mar 2009 22:52:52 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/30/ddd-recognising-relationships-between-bounded-contexts/</guid>
      <description>One of the big takeaways for me from the Domain Driven Design track at the recent QCon London conference was that the organisational patterns in the second half of the book are probably more important than the actual patterns themselves.
There are various patterns used to describe the relationships between different bounded contexts:
 Shared Kernel - This is where two teams share some subset of the domain model. This shouldn&#39;t be changed without the other team being consulted.</description>
    </item>
    
    <item>
      <title>Pair Programming: From a Lean angle</title>
      <link>http://mneedham.github.io/2009/03/29/pair-programming-from-a-lean-angle/</link>
      <pubDate>Sun, 29 Mar 2009 16:54:05 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/29/pair-programming-from-a-lean-angle/</guid>
      <description>I recently watched a presentation about lean thinking and I started seeing parallels in a lot of what they were saying with the benefits that I believe we see in projects when the team pair programs.
Big Picture vs Local Optimisations One of the biggest arguments used against pair programming is that we get half as much work done because we have two people working on one computer.
Even if we ignore the immediate flaws in that argument I think this is a case of looking at individual productivity when in fact what we really care about is the team&amp;rsquo;s productivity i.</description>
    </item>
    
    <item>
      <title>F#: Forcing type to unit for Assert.ShouldThrow in XUnit.NET</title>
      <link>http://mneedham.github.io/2009/03/28/f-forcing-type-to-unit-for-assertshouldthrow-in-xunitnet/</link>
      <pubDate>Sat, 28 Mar 2009 02:35:27 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/28/f-forcing-type-to-unit-for-assertshouldthrow-in-xunitnet/</guid>
      <description>I&amp;rsquo;ve started playing around with F# again and decided to try and create some unit tests around the examples I&amp;rsquo;m following from Real World Functional Programming. After reading Matt Podwysocki&amp;rsquo;s blog post about XUnit.NET I decided that would probably be the best framework for me to use.
The example I&amp;rsquo;m writing tests around is:
let convertDataRow(str:string) = let cells = List.of_seq(str.Split([|&#39;,&#39;|])) match cells with | label::value::_ -&amp;gt; let numericValue = Int32.</description>
    </item>
    
    <item>
      <title>Coding: Isolate the data not just the endpoint</title>
      <link>http://mneedham.github.io/2009/03/25/coding-isolate-the-data-not-just-the-endpoint/</link>
      <pubDate>Wed, 25 Mar 2009 23:28:42 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/25/coding-isolate-the-data-not-just-the-endpoint/</guid>
      <description>One of the fairly standard ways of shielding our applications when integrating with other systems is to create a wrapper around it so that all interaction with it is in one place.
As I mentioned in a previous post we have been using the repository pattern to achieve this in our code.
One service which we needed to integrate lately provided data for populating data on drop downs on our UI so the service provided two pieces of data - a Value (which needed to be sent to another service when a certain option was selected) and a Label (which was the value for us to display on the screen).</description>
    </item>
    
    <item>
      <title>QTB: Lean Times Require Lean Thinking</title>
      <link>http://mneedham.github.io/2009/03/25/qtb-lean-times-require-lean-thinking/</link>
      <pubDate>Wed, 25 Mar 2009 00:36:09 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/25/qtb-lean-times-require-lean-thinking/</guid>
      <description>I went to watch the latest ThoughtWorks Quarterly Technology Briefing on Tuesday, which was presented by my colleague Jason Yip and Paul Heaton, titled &amp;lsquo;Lean Times Require Lean Thinking&amp;lsquo;
I&amp;rsquo;ve been reading quite a bit of lean related material lately but I thought it would be interesting to hear about it directly from the perspective of two people who have been involved with applying the concepts in organisations.
What did I learn?</description>
    </item>
    
    <item>
      <title>ASP.NET MVC: Pre-compiling views when using SafeEncodingCSharpCodeProvider</title>
      <link>http://mneedham.github.io/2009/03/24/aspnet-mvc-pre-compiling-views-when-using-safeencodingcsharpcodeprovider/</link>
      <pubDate>Tue, 24 Mar 2009 22:55:41 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/24/aspnet-mvc-pre-compiling-views-when-using-safeencodingcsharpcodeprovider/</guid>
      <description>We&amp;rsquo;ve been doing some work to get our views in ASP.NET MVC to be pre-compiled which allows us to see any errors in them at compilation rather than at run time.
It&amp;rsquo;s relatively simple to do. You just need to add the following code into your .csproj file anywhere below the  element:
&amp;lt;Target Name=&amp;quot;AfterBuild&amp;quot;&amp;gt; &amp;lt;AspNetCompiler VirtualPath=&amp;quot;/&amp;quot; PhysicalPath=&amp;quot;$(ProjectDir)\..\$(ProjectName)&amp;quot;/&amp;gt; &amp;lt;/Target&amp;gt;  where VirtualPath refers to the virtual path defined inside your project file and PhysicalPath is the path to the folder which contains the project with the views in.</description>
    </item>
    
    <item>
      <title>Coding: Making the debugger redundant</title>
      <link>http://mneedham.github.io/2009/03/22/coding-making-the-debugger-redundant/</link>
      <pubDate>Sun, 22 Mar 2009 19:52:31 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/22/coding-making-the-debugger-redundant/</guid>
      <description>I recently wrote my dislike of the debugger and related to this, I spent some time last year watching some videos from JAOO 2007 on MSDN&amp;rsquo;s Channel 9. One of my favourites is an interview featuring Joe Armstrong and Eric Meijer where Joe Armstrong points out that when coding Erlang he never has to use a debugger because state is immutable.
In Erlang, once you set the value of a variable &amp;lsquo;x&amp;rsquo; it cannot be changed.</description>
    </item>
    
    <item>
      <title>Lean Thinking: Book Review</title>
      <link>http://mneedham.github.io/2009/03/21/lean-thinking-book-review/</link>
      <pubDate>Sat, 21 Mar 2009 10:36:52 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/21/lean-thinking-book-review/</guid>
      <description>The Book Lean Thinking by James P. Womack and Daniel T. Jones
The Review This is the latest book in my lean learning after The Toyota Way, Taiichi Ohno&amp;rsquo;s Workplace Management and Lean Software Development and seemed like the most logical one to read next as it came at lean from a slightly different angle.
I found this the most hard going of the books I&amp;rsquo;ve read on the subject so far.</description>
    </item>
    
    <item>
      <title>Coding: Reassessing what the debugger is for</title>
      <link>http://mneedham.github.io/2009/03/20/coding-reassessing-what-the-debugger-is-for/</link>
      <pubDate>Fri, 20 Mar 2009 21:39:56 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/20/coding-reassessing-what-the-debugger-is-for/</guid>
      <description>When I first started programming in a &amp;lsquo;proper&amp;rsquo; IDE one of the things that I thought was really cool was the ability to debug through my code whenever something wasn&amp;rsquo;t working quite the way I expected it to.
Now the debugger is not a completely pointless tool - indeed there is sometimes no other easy way to work out what&amp;rsquo;s going wrong - but I think it now becomes the default problem solver whenever a bit of code is not working as we expect it to.</description>
    </item>
    
    <item>
      <title>Re-reading books</title>
      <link>http://mneedham.github.io/2009/03/19/re-reading-books/</link>
      <pubDate>Thu, 19 Mar 2009 10:49:30 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/19/re-reading-books/</guid>
      <description>An interesting thing that I&amp;rsquo;ve started to notice recently with regards to software development books is that I get a lot more from reading the book the second time compared to what I did reading the book the first time.
I&amp;rsquo;ve noticed this for several books, including The Pragmatic Programmer, Code Complete and Domain Driven Design, so my first thought was that perhaps I had read this books too early when I didn&amp;rsquo;t have the necessary context or experience to gain value from reading them.</description>
    </item>
    
    <item>
      <title>Coding: Make it obvious</title>
      <link>http://mneedham.github.io/2009/03/18/coding-make-it-obvious/</link>
      <pubDate>Wed, 18 Mar 2009 10:44:48 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/18/coding-make-it-obvious/</guid>
      <description>One of the lessons that I&amp;rsquo;ve learned the more projects I work on is that the most important thing to do when coding is to do so in a way that you make life easier for the next person who has to come across that code, be it yourself or one of your team mates.
I think the underlying idea is that we need to make things as obvious as possible.</description>
    </item>
    
    <item>
      <title>QCon London 2009: The Power of Value - Power Use of Value Objects in Domain Driven Design - Dan Bergh Johnsson</title>
      <link>http://mneedham.github.io/2009/03/15/qcon-london-2009-the-power-of-value-power-use-of-value-objects-in-domain-driven-design-dan-bergh-johnsson/</link>
      <pubDate>Sun, 15 Mar 2009 09:45:19 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/15/qcon-london-2009-the-power-of-value-power-use-of-value-objects-in-domain-driven-design-dan-bergh-johnsson/</guid>
      <description>The final Domain Driven Design talk I attended at QCon was by Dan Bergh Johnsson about the importance of value objects in our code.
I thought this session fitted in really well as a couple of the previous speakers had spoken of the under utilisation of value objects.
The slides for the presentation are here.
What did I learn?  Dan started the talk by outlining the goal for the presentation which was to &#39;show how power use of value objects can radically change design and code, hopefully for the better&#39;.</description>
    </item>
    
    <item>
      <title>QCon London 2009: Rebuilding guardian.co.uk with DDD - Phil Wills</title>
      <link>http://mneedham.github.io/2009/03/14/qcon-london-2009-rebuilding-guardiancouk-with-ddd-phil-wills/</link>
      <pubDate>Sat, 14 Mar 2009 14:23:43 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/14/qcon-london-2009-rebuilding-guardiancouk-with-ddd-phil-wills/</guid>
      <description>Talk #3 on the Domain Driven Design track at QCon was by Phil Wills about how the Guardian rebuilt their website using Domain Driven Design.
I&amp;rsquo;d heard a little bit about this beforehand from colleagues who had the chance to work on that project but it seemed like a good opportunity to hear a practical example and the lessons learned along the way.
There are no slides available for this one on the QCon website at the moment.</description>
    </item>
    
    <item>
      <title>QCon London 2009: DDD &amp; BDD - Dan North</title>
      <link>http://mneedham.github.io/2009/03/14/qcon-london-2009-ddd-bdd-dan-north/</link>
      <pubDate>Sat, 14 Mar 2009 01:28:04 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/14/qcon-london-2009-ddd-bdd-dan-north/</guid>
      <description>The second presentation in the Domain Driven Design track at QCon was titled &amp;lsquo;DDD &amp;amp; BDD&amp;rsquo; and was presented by my colleague Dan North - a late stand in for Greg Young who apparently injured himself playing ice hockey.
Eric did an interview with Greg at QCon San Francisco 2007 where Greg talks about some of his ideas and apparently there is an InfoQ video kicking around of Greg&amp;rsquo;s &amp;lsquo;Unshackle Your Domain&amp;rsquo; talk from QCon San Francisco 2008 which we were told to pester InfoQ to post on their website!</description>
    </item>
    
    <item>
      <title>QCon London 2009: What I&#39;ve learned about DDD since the book - Eric Evans</title>
      <link>http://mneedham.github.io/2009/03/13/qcon-london-2009-what-ive-learned-about-ddd-since-the-book-eric-evans/</link>
      <pubDate>Fri, 13 Mar 2009 20:56:07 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/13/qcon-london-2009-what-ive-learned-about-ddd-since-the-book-eric-evans/</guid>
      <description>I went to the QCon conference in London on Thursday, spending the majority of the day on Eric Evans&amp;rsquo; Domain Driven Design track.
The opening presentation was by Eric Evans, himself, and was titled &amp;lsquo;What I&amp;rsquo;ve learned about DDD since the book&amp;rsquo;.
 In the 5 years since the book was published, I&#39;ve practiced DDD on various client projects, and I&#39;ve continued to learn about what works, what doesn&#39;t work, and how to conceptualize and describe it all.</description>
    </item>
    
    <item>
      <title>OO: Reducing the cost of...lots of stuff!</title>
      <link>http://mneedham.github.io/2009/03/12/oo-reducing-the-cost-oflots-of-stuff/</link>
      <pubDate>Thu, 12 Mar 2009 04:04:22 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/12/oo-reducing-the-cost-oflots-of-stuff/</guid>
      <description>I&amp;rsquo;ve been working in the world of professional software development for a few years now and pretty much take it as a given that the best way to write code which is easy for other people to understand and work with is to write that code in an object oriented way.
Not everyone agrees with this approach of course and I&amp;rsquo;ve been told on occasions that I&amp;rsquo;m &amp;lsquo;over object orienting&amp;rsquo; (is that even a word?</description>
    </item>
    
    <item>
      <title>OO: Micro Types</title>
      <link>http://mneedham.github.io/2009/03/10/oo-micro-types/</link>
      <pubDate>Tue, 10 Mar 2009 22:40:57 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/10/oo-micro-types/</guid>
      <description>Micro or Tiny types present an approach to coding which seems to divide opinion in my experience, from those who think it&amp;rsquo;s a brilliant idea to those who believe it&amp;rsquo;s static typing gone mad.
I fall into the former group.
So what is it?
The idea is fairly simple - all primitives and strings in our code are wrapped by a class, meaning that we never pass primitives around.
In essence Rule #3 of Jeff Bay&amp;rsquo;s Object Calisthenics.</description>
    </item>
    
    <item>
      <title>DDD: Repository pattern</title>
      <link>http://mneedham.github.io/2009/03/10/ddd-repository-not-only-for-databases/</link>
      <pubDate>Tue, 10 Mar 2009 10:31:27 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/10/ddd-repository-not-only-for-databases/</guid>
      <description>The Repository pattern from Domain Driven Design is one of the cleanest ways I have come across for separating our domain objects from their persistence mechanism.
Until recently every single implementation I had seen of this pattern involved directly using a database as the persistence mechanism with the repository acting as a wrapper around the Object Relational Mapper (Hibernate/NHibernate).
Now I consider there to be two parts to the repository pattern:</description>
    </item>
    
    <item>
      <title>DDD: Bounded Contexts</title>
      <link>http://mneedham.github.io/2009/03/07/ddd-bounded-contexts/</link>
      <pubDate>Sat, 07 Mar 2009 10:03:38 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/07/ddd-bounded-contexts/</guid>
      <description>I&amp;rsquo;ve been reading Casey Charlton&amp;rsquo;s excellent series of posts on Domain Driven Design recently and today came across his thoughts about which types of applications Domain Driven Design is suited to.
Towards the end of the post he talks about the fact that there is a lot of excellent ideas in Domain Driven Design even if you don&amp;rsquo;t have the chance to use all of them.
 ...there is a wealth of wisdom and experience encapsulated in Domain Driven Design – use what you think applies to your situation, and you will find your software becoming more flexible, more reactive to your audience, and easier to understand – just don’t expect miracles, and beware of over complicating your code for the sake of it – sometimes simpler really is better.</description>
    </item>
    
    <item>
      <title>Coding Dojo #11: Javascript Isola</title>
      <link>http://mneedham.github.io/2009/03/06/coding-dojo-11-javascript-isola/</link>
      <pubDate>Fri, 06 Mar 2009 06:38:42 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/06/coding-dojo-11-javascript-isola/</guid>
      <description>In our latest coding dojo we attempted to code Isola in Javascript but instead of coding from the board inwards we decided to try and take the approach of coding from the cells outwards to keep it interesting.
My colleague brought in his copy of the game and it made it much easier to imagine how we should be modeling it by having the game in front of us.
The Format We used the Randori approach with four people participating for the whole session.</description>
    </item>
    
    <item>
      <title>Coding: Good Citizens</title>
      <link>http://mneedham.github.io/2009/03/04/coding-good-citizens/</link>
      <pubDate>Wed, 04 Mar 2009 23:58:48 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/04/coding-good-citizens/</guid>
      <description>I was recently reading Brad Cross&amp;rsquo; recent post about creating objects which are Good Citizens in code and he certainly nails one aspect of this with regards to ensuring that our objects are in a usable state post construction.
 In OO design, an object is considered to be a good citizen if it is in a fully composed and usable state post-construction. This means that once the constructor exits, the class is ready to use - without the need to call additional setters or init() methods.</description>
    </item>
    
    <item>
      <title>ASP.NET MVC: Reducing duplication for partial models</title>
      <link>http://mneedham.github.io/2009/03/03/aspnet-mvc-using-adaptors-for-partial-models/</link>
      <pubDate>Tue, 03 Mar 2009 23:55:36 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/03/aspnet-mvc-using-adaptors-for-partial-models/</guid>
      <description>One of the problems we can encounter when using partials throughout our views is how we should create the model needed for those partials.
The approach that we have been following is to have the partial/child model on the parent model and then just call the appropriate method where we create the partial.
e.g.
public class ParentModel { public string Property1 {get;set;} public ChildModel ChildModel { get;set; } } public class ChildModel { public string Property1 {get;set;} }  We have sometimes run into the problem where the data in the ChildModel is being populated from the ParentModel (due to it also being needed there) leading to data duplication.</description>
    </item>
    
    <item>
      <title>Trade Offs: Some Thoughts</title>
      <link>http://mneedham.github.io/2009/03/02/trade-offs-some-thoughts/</link>
      <pubDate>Mon, 02 Mar 2009 23:01:11 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/02/trade-offs-some-thoughts/</guid>
      <description>As we know with software development with pretty much every decision we make or technology we choose there is a trade off that goes with making this choice as compared with choosing an alternative.
I first learnt this when working with Ade a couple of years ago and while I know it to be true, I had come to believe that some practices are just non-negotiable and we should look to apply them judiciously wherever possible.</description>
    </item>
    
    <item>
      <title>NUnit: Tests with Context/Spec style assertions</title>
      <link>http://mneedham.github.io/2009/03/01/nunit-tests-with-contextspec-style-assertions/</link>
      <pubDate>Sun, 01 Mar 2009 16:43:46 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/03/01/nunit-tests-with-contextspec-style-assertions/</guid>
      <description>I recently started playing around with Scott Bellware&amp;rsquo;s Spec-Unit and Aaron&amp;rsquo;s Jensen&amp;rsquo;s MSpec, two frameworks which both provide a way of writing Context/Spec style tests/specifications.
What I particularly like about this approach to writing tests is that we can divide assertions into specific blocks and have them all evaluated even if an earlier one fails.
NUnit is our testing tool of choice at the moment and we wanted to try and find a way to test the mapping between the domain and service layers of the application.</description>
    </item>
    
    <item>
      <title>Coding: Implicit vs Explicit modeling </title>
      <link>http://mneedham.github.io/2009/02/28/coding-implicit-vs-explicit-modeling/</link>
      <pubDate>Sat, 28 Feb 2009 09:50:45 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/28/coding-implicit-vs-explicit-modeling/</guid>
      <description>When it comes to object modeling there seem to be two distinct approaches that I have come across.
Implicit modeling The first approach is where we do what I like to think of as implicit modeling.
With this approach we would probably use less objects than in the explicit approach and we would have objects being populated as we moved through the work flow of our application.
I call it implicit modeling because we need to imply where we are based on the internal state of our objects - we can typically work this out by seeing what is and is not set to null.</description>
    </item>
    
    <item>
      <title>Coding: Using &#39;ToString&#39;</title>
      <link>http://mneedham.github.io/2009/02/26/coding-using-tostring/</link>
      <pubDate>Thu, 26 Feb 2009 23:43:20 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/26/coding-using-tostring/</guid>
      <description>An interesting conversation I&amp;rsquo;ve had recently with some of my colleagues is around the use of the ToString method available on all objects created in Java or C#. It was also pointed out in the comments on my recent post about wrapping DateTimes in our code.
I think the original intention of this method was to create a string representation of an object, but its use has been overloaded by developers to the point where its expected use is as a mechanism for creating nice output when debugging the code or viewing unit test failures.</description>
    </item>
    
    <item>
      <title>C#: Wrapping DateTime</title>
      <link>http://mneedham.github.io/2009/02/25/c-wrapping-datetime/</link>
      <pubDate>Wed, 25 Feb 2009 23:12:57 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/25/c-wrapping-datetime/</guid>
      <description>I think it was Darren Hobbs who first introduced me to the idea of wrapping dates in our system to describe what that date actually means in our context, and after suffering the pain of passing some unwrapped dates around our code I think I can safely say that wrapping them is the way to go.
The culprit was a date of birth which was sometimes being created from user input and sometimes being retrieved from another system.</description>
    </item>
    
    <item>
      <title>C#: Wrapping collections vs Extension methods</title>
      <link>http://mneedham.github.io/2009/02/23/c-wrapping-collections-vs-extension-methods/</link>
      <pubDate>Mon, 23 Feb 2009 20:24:26 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/23/c-wrapping-collections-vs-extension-methods/</guid>
      <description>Another interesting thing I&amp;rsquo;ve noticed in C# world is that there seems to be a trend towards using extension methods as much as possible. One area where this is particularly prevalent is when working with collections.
From reading Object Calisthenics and working with Nick I have got used to wrapping collections and defining methods on the wrapped class for interacting with the underlying collection.
For example, given that we have a collection of Foos that we need to use in our system we might wrap that in an object Foos.</description>
    </item>
    
    <item>
      <title>C#: Implicit Operator</title>
      <link>http://mneedham.github.io/2009/02/22/c-implicit-operator/</link>
      <pubDate>Sun, 22 Feb 2009 22:20:22 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/22/c-implicit-operator/</guid>
      <description>Since it was pointed out in the comments on an earlier post I wrote about using the builder pattern how useful the implicit operator could be in this context we&amp;rsquo;ve been using it wherever it makes sense.
The main benefit that using this approach provides is that our test code becomes more expressive since we don&amp;rsquo;t need to explicitly call a method to complete the building of our object.
public class FooBuilder { private string bar = &amp;quot;defaultBar&amp;quot;; public FooBuilder Bar(string value) { bar = value; return this; } public static implicit operator Foo(FooBuilder builder) { return new Foo { Bar = builder.</description>
    </item>
    
    <item>
      <title>ASP.NET MVC: Driving partials by convention</title>
      <link>http://mneedham.github.io/2009/02/21/aspnet-mvc-driving-partials-by-convention/</link>
      <pubDate>Sat, 21 Feb 2009 10:39:49 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/21/aspnet-mvc-driving-partials-by-convention/</guid>
      <description>I like to have conventions in the code I write - I find it makes the code i write much cleaner which still providing flexibility.
One of the conventions that Jeremy Miller coined for working with ASP.NET MVC applications is that of using one model per controller method aka &amp;ldquo;The Thunderdome principle&amp;rdquo;. I think we can take this further by having one model per partial that we use inside our views.</description>
    </item>
    
    <item>
      <title>Coding Dojo #10: Isola III</title>
      <link>http://mneedham.github.io/2009/02/19/coding-dojo-10-isola-iii/</link>
      <pubDate>Thu, 19 Feb 2009 23:09:33 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/19/coding-dojo-10-isola-iii/</guid>
      <description>In our latest coding dojo we continued working on Isola with a focus on adding functionality following on from last week&amp;rsquo;s refactoring effort.
The Format We used the Randori approach with four people participating for the whole session.
What We Learnt  Our real aim for this session was to try and get the code into a state where we could reject an invalid move i.e. a move to a square that wasn&#39;t adjacent to the one the player was currently on.</description>
    </item>
    
    <item>
      <title>C#: Extension methods != Open classes</title>
      <link>http://mneedham.github.io/2009/02/19/c-extensions-methods-open-classes/</link>
      <pubDate>Thu, 19 Feb 2009 06:22:07 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/19/c-extensions-methods-open-classes/</guid>
      <description>When I first heard about extension methods in C# it sounded like a pretty cool idea but I wasn&amp;rsquo;t sure how they differed to the idea of open classes that I had seen when doing a bit of Ruby.
After a bit of a struggle recently to try and override some extension methods on HtmlHelper in ASP.NET MVC it&amp;rsquo;s clear to me that we don&amp;rsquo;t quite have the same power that open classes would provide.</description>
    </item>
    
    <item>
      <title>Collective Code Ownership: Some Thoughts</title>
      <link>http://mneedham.github.io/2009/02/17/collective-code-ownership-some-thoughts/</link>
      <pubDate>Tue, 17 Feb 2009 22:32:44 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/17/collective-code-ownership-some-thoughts/</guid>
      <description>Collective code ownership is one of the things we practice on projects using extreme programming and Mike Bria&amp;rsquo;s post on the subject makes me wonder if code ownership exists on more than one level.
Kent Beck&amp;rsquo;s definition of collective code ownership is that
 Anyone can change anything at anytime  Mike also gives an alternative definition which goes beyond that:
 From a more measurable POV, CoCO states that everyone on the team (developer-wise) must be able to describe the design of anything the team is working on in no more than 5 minutes.</description>
    </item>
    
    <item>
      <title>C#: Object Initializer and The Horse Shoe</title>
      <link>http://mneedham.github.io/2009/02/16/c-object-initializer-and-the-horse-shoe/</link>
      <pubDate>Mon, 16 Feb 2009 22:04:20 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/16/c-object-initializer-and-the-horse-shoe/</guid>
      <description>The object initializer syntax introduced in C# 3.0 makes it easier for us to initialise our objects in one statement but I think we need to remember that they are not named parameters and that there is still a place (a very good one actually) for creating objects from constructors or factory methods.
Unfortunately what I think the cleaner syntax does is encourage us to create objects with half the fields populated and half of them null by default.</description>
    </item>
    
    <item>
      <title>Encoding user entered data</title>
      <link>http://mneedham.github.io/2009/02/15/encoding-user-entered-data/</link>
      <pubDate>Sun, 15 Feb 2009 01:46:33 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/15/encoding-user-entered-data/</guid>
      <description>I previously wrote about protecting websites from cross site scripting in the ASP.NET MVC framework by encoding user input when we are going to display it in the browser.
We can either choose to encode data like this or we can encode it straight away when we get it.
There did not seem to be a consensus on the best approach in a discussion on the ASP.NET forums but we believe it is far better to encode the data when it is outgoing rather than incoming.</description>
    </item>
    
    <item>
      <title>Coding: Assertions in constructors</title>
      <link>http://mneedham.github.io/2009/02/14/coding-assertions-in-constructors/</link>
      <pubDate>Sat, 14 Feb 2009 01:32:10 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/14/coding-assertions-in-constructors/</guid>
      <description>While browsing through the ASP.NET MVC source I noticed that they use an interesting pattern on the constructors to ensure that an exception will be thrown if an object is not instantiated correctly.
public ControllerContext(HttpContextBase httpContext, RouteData routeData, ControllerBase controller) : base(httpContext, routeData) { if (controller == null) { throw new ArgumentNullException(&amp;quot;controller&amp;quot;); } Controller = controller; }  If you pass in a null Controller you shall go no further!</description>
    </item>
    
    <item>
      <title>Ferengi Programmer and the Dreyfus Model</title>
      <link>http://mneedham.github.io/2009/02/13/ferengi-programmer-and-the-dreyfus-model/</link>
      <pubDate>Fri, 13 Feb 2009 00:01:58 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/13/ferengi-programmer-and-the-dreyfus-model/</guid>
      <description>I&amp;rsquo;ve been reading Jeff Atwood&amp;rsquo;s post regarding Joel&amp;rsquo;s comments on the podcast about Uncle Bob&amp;rsquo;s SOLID principles and what struck me as I read through his dislike of having too many rules and guidelines is that there is a misunderstanding of how we should use these rules and I think at the heart of this understanding the Dreyfus Model might clear this up.
To briefly recap the different levels of the Dreyfus Model (you can read more about this in Pragmatic Thinking and Learning)</description>
    </item>
    
    <item>
      <title>ASP.NET MVC: Preventing XSS attacks</title>
      <link>http://mneedham.github.io/2009/02/12/aspnet-mvc-preventing-xss-attacks/</link>
      <pubDate>Thu, 12 Feb 2009 22:47:30 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/12/aspnet-mvc-preventing-xss-attacks/</guid>
      <description>XSS(Cross site scripting) attacks on websites seem to be quite popular these days but luckily if you&amp;rsquo;re working with the ASP.NET MVC framework Steve Sanderson has written a great post on how to protect yourself from this.
The solution Steve details works the opposite way to other solutions I have heard for this problem - we assume that everything that goes to the browser needs to be HTML encoded unless otherwise stated.</description>
    </item>
    
    <item>
      <title>Coding Dojo #9: Refactoring Isola</title>
      <link>http://mneedham.github.io/2009/02/12/coding-dojo-9-refactoring-isola/</link>
      <pubDate>Thu, 12 Feb 2009 21:46:23 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/12/coding-dojo-9-refactoring-isola/</guid>
      <description>Our latest coding dojo involved refactoring the code we wrote a couple of weeks ago for the board game Isola.
We started a repository on Bit Bucket to store our code from these sessions.
The Format We used the Randori approach again with four people participating for the whole session.
What We Learnt  Last time we had spent most of our time purely making the code functional so all the objects were completely mutable.</description>
    </item>
    
    <item>
      <title>C#: Properties vs Methods</title>
      <link>http://mneedham.github.io/2009/02/11/c-properties-vs-methods/</link>
      <pubDate>Wed, 11 Feb 2009 11:20:08 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/11/c-properties-vs-methods/</guid>
      <description>I was browsing through our tests today and noticed a test along these lines (simplified for example purposes):
[Test, ExpectedException(typeof(Exception))] public void ShouldThrowExceptionIfNoBarSet() { var bar = new Foo(null).Bar; }  public class Foo { private readonly string bar; public Foo(string bar) { this.bar = bar; } public string Bar { get { if (bar == null) { throw new Exception(&amp;quot;No bar&amp;quot;); } return bar; } } }  What I found strange here is that &amp;lsquo;bar&amp;rsquo; is never used and Resharper points out as much.</description>
    </item>
    
    <item>
      <title>Agile: Re-estimating cards</title>
      <link>http://mneedham.github.io/2009/02/11/agile-re-estimating-cards/</link>
      <pubDate>Wed, 11 Feb 2009 07:25:50 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/11/agile-re-estimating-cards/</guid>
      <description>Chris Johnston has another interesting post in which he writes about the practice of re-estimating cards after they have been completed.
I think this somewhat misses the point that the estimate is indeed supposed to be an estimate. It might turn out to be too optimistic or too pessimistic, the theory being that overall we will end up with a reasonable balance that will allow us to make a prediction on how much work we believe we can complete in a certain time period.</description>
    </item>
    
    <item>
      <title>Agile: What is it?</title>
      <link>http://mneedham.github.io/2009/02/09/agile-what-is-it/</link>
      <pubDate>Mon, 09 Feb 2009 17:06:02 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/09/agile-what-is-it/</guid>
      <description>My colleague Chris Johnston wrote recently about his experiences in agile software development, posing some questions that he has.
Specifically:
 Why comments are evil? Why design is evil? Why must you pair all the time? Why Agile principles become Agile rules?  Now I&amp;rsquo;m assuming that most (if not all) of Chris&amp;rsquo; experiences with agile have been at ThoughtWorks, in which case the mix of agile we use on our projects tends to be a combination of Scrum and Extreme Programming.</description>
    </item>
    
    <item>
      <title>OOP: What does an object&#39;s responsibility entail?</title>
      <link>http://mneedham.github.io/2009/02/09/oop-what-does-an-objects-responsibility-entail/</link>
      <pubDate>Mon, 09 Feb 2009 16:52:10 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/09/oop-what-does-an-objects-responsibility-entail/</guid>
      <description>One of the interesting discussions I&amp;rsquo;ve been having recently with some colleagues is around where the responsibility lies for describing the representation of an object when it is to be used in another bounded context - e.g. on the user interface or in a call to another system.
I believe that an object should be responsible for deciding how its data is used rather than having another object reach into it, retrieve its data and then decide what to do with it.</description>
    </item>
    
    <item>
      <title>Quality is what I work for</title>
      <link>http://mneedham.github.io/2009/02/09/quality-is-what-i-work-for/</link>
      <pubDate>Mon, 09 Feb 2009 16:51:14 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/09/quality-is-what-i-work-for/</guid>
      <description>I&amp;rsquo;ve been reading the transcript of Joel Spolsky/Jeff Atwood&amp;rsquo;s podcast discussion on TDD/Quality and related posts on the subject by Uncle Bob and Ron Jeffries and while I guess it&amp;rsquo;s fairly inevitable that I&amp;rsquo;m likely to side with the latter two, what I&amp;rsquo;ve realised is that I get the greatest enjoyment from my job when we are writing high quality software.
Certainly delivering value to customers in a timely manner is important but if we&amp;rsquo;re not producing something that we&amp;rsquo;re proud to have written then I think we&amp;rsquo;re doing ourselves and our customer a disservice.</description>
    </item>
    
    <item>
      <title>Refactoring: Comment it out vs small steps removal</title>
      <link>http://mneedham.github.io/2009/02/08/refactoring-comment-it-out-vs-small-steps-removal/</link>
      <pubDate>Sun, 08 Feb 2009 09:10:39 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/08/refactoring-comment-it-out-vs-small-steps-removal/</guid>
      <description>One refactoring I was doing last week was to try and remove the use of some getters/setters on one of our objects so that it was better encapsulated and all the behaviour related to it happened in one place.
The change involved introducing a constructor to initialise the object rather than doing so using the new object initialiser syntax and initalising it using the properties.
My initial approach was to find all the usages of these properties and then remove each usage one by one, running our suite of tests against the code after each change to ensure that nothing had broken as a result of the change.</description>
    </item>
    
    <item>
      <title>Agile: Why do we integrate early?</title>
      <link>http://mneedham.github.io/2009/02/06/agile-why-do-we-integrate-early/</link>
      <pubDate>Fri, 06 Feb 2009 16:47:26 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/06/agile-why-do-we-integrate-early/</guid>
      <description>One of the inevitabilities of most projects is that at some stage there is going to need be some sort of integration.
The likes of Alistair Cockburn in Crystal Clear and Andy Hunt/Dave Thomas in The Pragmatic Programmer talk of the need to do integration early rather than letting it wait until later, but why?
Get the pain out the way To some degree every time we try to integrate there is going to be some level of pain - for me it therefore makes sense that we take this pain early on when we have the chance to do something about it rather than leaving it until later and being surprised at the problems it causes.</description>
    </item>
    
    <item>
      <title>C#: Public fields vs automatic properties </title>
      <link>http://mneedham.github.io/2009/02/04/c-public-fields-vs-automatic-properties/</link>
      <pubDate>Wed, 04 Feb 2009 17:52:03 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/04/c-public-fields-vs-automatic-properties/</guid>
      <description>An interesting new feature in C# 3.0 is that of automatic properties on objects - this allows us to define a get/set property and the creation of the underlying field is taken care off for us.
We can therefore create a class like this:
public class Foo { public string Bar { get; set; } }  Now ignoring the fact that it&amp;rsquo;s terrible OO to write a class like that, one thing that we&amp;rsquo;ve been wondering is what&amp;rsquo;s the difference between doing the above and just creating a public field on Foo called Bar like so:</description>
    </item>
    
    <item>
      <title>Nant include task - namespace matters</title>
      <link>http://mneedham.github.io/2009/02/03/nant-include-task-namespace-matters/</link>
      <pubDate>Tue, 03 Feb 2009 10:43:56 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/03/nant-include-task-namespace-matters/</guid>
      <description>We&amp;rsquo;ve been trying to include some properties into our build file from a properties file today but no matter what we tried the properties were not being set.
We eventually realised that the build file has an XML Namespace set on the project element.
&amp;lt;project name=&amp;quot;...&amp;quot; xmlns=&amp;quot;http://nant.sf.net/schemas/nant.xsd&amp;quot;&amp;gt;  It turns out that if you want to include a properties file in your build file, like so:
&amp;lt;include buildfile=&amp;quot;properties.xml&amp;quot; /&amp;gt;  &amp;hellip;you need to put the namespace on the project attribute of that file as well, otherwise its properties don&amp;rsquo;t get picked up.</description>
    </item>
    
    <item>
      <title>C#: Refactoring to functional collection parameters</title>
      <link>http://mneedham.github.io/2009/02/03/c-refactoring-to-functional-collection-parameters/</link>
      <pubDate>Tue, 03 Feb 2009 07:18:40 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/02/03/c-refactoring-to-functional-collection-parameters/</guid>
      <description>I wrote about a month or so ago about the functional collection parameters now available in C# and certainly one of the most fun refactorings for me is trying to get code written using a for loop into a state where it is using one of these.
With a bit of help from my colleague James Crisp, these are some of the most common refactorings that I have come across so far.</description>
    </item>
    
    <item>
      <title>Coding Dojo #8: Isola</title>
      <link>http://mneedham.github.io/2009/01/30/coding-dojo-8-isola/</link>
      <pubDate>Fri, 30 Jan 2009 11:17:58 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/30/coding-dojo-8-isola/</guid>
      <description>Our latest coding dojo involved writing the board game Isola in Java.
The Format We used the Randori approach again with around 8 or 9 people participating for the majority of the session, our biggest turnout yet. I think the majority of people had the opportunity to drive a couple of times over the evening.
We had the pair driving at the front of the room and everyone else further back to stop the tendency of observers to whiteboard stuff.</description>
    </item>
    
    <item>
      <title>TDD: Test DRYness</title>
      <link>http://mneedham.github.io/2009/01/30/tdd-test-dryness/</link>
      <pubDate>Fri, 30 Jan 2009 11:16:27 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/30/tdd-test-dryness/</guid>
      <description>I had a discussion recently with Fabio about DRYness in our tests and how we don&amp;rsquo;t tend to adhere to this principal as often in test code as in production code.
I think certainly some of the reason for this is that we don&amp;rsquo;t take as much care of our test code as we do production code but for me at least some of it is down to the fact that if we make our tests too DRY then they become very difficult to read and perhaps more importantly, very difficult to debug when there is a failure.</description>
    </item>
    
    <item>
      <title>TDD: Design tests for failure</title>
      <link>http://mneedham.github.io/2009/01/28/tdd-design-tests-for-failure/</link>
      <pubDate>Wed, 28 Jan 2009 00:48:16 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/28/tdd-design-tests-for-failure/</guid>
      <description>As with most code, tests are read many more times than they are written and as the majority of the time the reason for reading them is to identify a test failure I think it makes sense that we should be designing our tests with failure in mind.
Several ideas come to mind when thinking about ways to write/design our tests so that when we do have to read them our task is made easier.</description>
    </item>
    
    <item>
      <title>Learning alone or Learning together</title>
      <link>http://mneedham.github.io/2009/01/25/learning-alone-or-learning-together/</link>
      <pubDate>Sun, 25 Jan 2009 23:00:39 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/25/learning-alone-or-learning-together/</guid>
      <description>One of the things that I have been curious about since we started running coding dojos is whether people learn more effectively alone or when learning as part of a group.
Not that I think they are mutually exclusive, I think a combination of both is probably the way to go depending on what it is we are trying to learn and the way that we&amp;rsquo;re trying to learn it.</description>
    </item>
    
    <item>
      <title>jQuery: Approaches to testing</title>
      <link>http://mneedham.github.io/2009/01/24/jquery-approaches-to-testing/</link>
      <pubDate>Sat, 24 Jan 2009 09:36:32 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/24/jquery-approaches-to-testing/</guid>
      <description>We&amp;rsquo;ve been doing a bit of work with jQuery and true to our TDD roots we&amp;rsquo;ve been trying to work out the best way to test drive our coding in this area.
There seem to be 3 main ways that you can go about doing this, regardless of the testing framework you choose to you. We are using screw-unit for our javascript testing.
Mock everything out The idea here is that we mock out all calls made to jQuery functions and then we assert that the expected calls were made in our test.</description>
    </item>
    
    <item>
      <title>Coding Dojo #7: Retlang/Hamcrest .NET attempt</title>
      <link>http://mneedham.github.io/2009/01/22/coding-dojo-7-retlanghamcrest-net-attempt/</link>
      <pubDate>Thu, 22 Jan 2009 23:02:15 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/22/coding-dojo-7-retlanghamcrest-net-attempt/</guid>
      <description>We ran a sort of coding dojo/playing around session which started with us looking at the .NET concurrency library, Retlang, and ended with an attempt to write Hamcrest style assertions in C#.
The Format We had the same setup as for our normal coding dojos with two people at the keyboard although we didn&#39;t rotate as aggressively as normal. What We Learnt  We started off having a look at a concurrency problem in Cruise Control .</description>
    </item>
    
    <item>
      <title>C#: Builder pattern still useful for test data</title>
      <link>http://mneedham.github.io/2009/01/21/c-builder-pattern-still-useful-for-test-data/</link>
      <pubDate>Wed, 21 Jan 2009 23:49:13 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/21/c-builder-pattern-still-useful-for-test-data/</guid>
      <description>I had thought that with the ability to use the new object initalizer syntax in C# 3.0 meant that the builder pattern was now no longer necessary but some recent refactoring efforts have made me believe otherwise.
My original thought was that the builder pattern was really useful for providing a nicely chained way of creating objects, but after a bit of discussion with some colleagues I have come across three different reasons why we might want to use the builder pattern to create test data:</description>
    </item>
    
    <item>
      <title>Coding: Contextual learning</title>
      <link>http://mneedham.github.io/2009/01/21/coding-contextual-learning/</link>
      <pubDate>Wed, 21 Jan 2009 06:42:22 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/21/coding-contextual-learning/</guid>
      <description>While reading my colleague&amp;rsquo;s notes on a brown bag session on pair programming she gave I was reminded of my belief that we learn much more effectively when we are learning in a practical environment.
The bit that interested me was this bit regarding onboarding:
 On board new team members to bring them up to speed on the overall goal and design, so you do not need to repeat basic details when you work with them on a story.</description>
    </item>
    
    <item>
      <title>Cruise: Pipelining for fast visual feedback</title>
      <link>http://mneedham.github.io/2009/01/19/cruise-pipelining-for-fast-visual-feedback/</link>
      <pubDate>Mon, 19 Jan 2009 21:38:20 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/19/cruise-pipelining-for-fast-visual-feedback/</guid>
      <description>One of the cool features in build servers like Cruise and Team City is the ability to create build pipelines.
I have done a bit of work using this feature in previous projects but the key driver for doing so there was to create a chain of producers/consumers (producing and consuming artifacts) eventually resulting in a manual step to put the application into a testing environment.
While this is certainly a good reason to create a build pipeline, a colleague pointed out an equally useful way of using this feature to split the build into separate steps pipelined together.</description>
    </item>
    
    <item>
      <title>F# vs C# vs Java: Functional Collection Parameters</title>
      <link>http://mneedham.github.io/2009/01/19/f-vs-c-vs-java-functional-collection-parameters/</link>
      <pubDate>Mon, 19 Jan 2009 19:24:25 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/19/f-vs-c-vs-java-functional-collection-parameters/</guid>
      <description>I wrote a post about a month ago on using functional collection parameters in C# and over the weekend Fabio and I decided to try and contrast the way you would do this in Java, C# and then F# just for fun.
Map Map evaluates a high order function on all the elements in a collection and then returns a new collection containing the results of the function evaluation.
Given the numbers 1-5, return the square of each number</description>
    </item>
    
    <item>
      <title>YAGNI: Some thoughts</title>
      <link>http://mneedham.github.io/2009/01/17/yagni-some-thoughts/</link>
      <pubDate>Sat, 17 Jan 2009 21:01:38 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/17/yagni-some-thoughts/</guid>
      <description>If you hang around a team practicing XP for long enough, one of the phrases you are bound to hear is YAGNI (You Ain&amp;rsquo;t Gonna Need It).
Although it can sometimes be used to ignore things we don&amp;rsquo;t want to focus on as Ian points out, in general the aim is to stop people from working on code that isn&amp;rsquo;t currently required.
So assuming our team isn&amp;rsquo;t being lazy and trying to avoid decisions that they don&amp;rsquo;t want to think about, why do we hear the YAGNI call and more importantly, perhaps, what happens when we don&amp;rsquo;t heed that call.</description>
    </item>
    
    <item>
      <title>The danger of commenting out code</title>
      <link>http://mneedham.github.io/2009/01/17/the-danger-of-commenting-out-code/</link>
      <pubDate>Sat, 17 Jan 2009 16:02:33 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/17/the-danger-of-commenting-out-code/</guid>
      <description>An idea which is considered common sense by most developers but which is not always adhered to is that of not commenting out code.
Code is nearly always under source control anyway so commenting out code which is not being used doesn&amp;rsquo;t really serve any positive purpose and it can have quite a few negative effects.
Clutter Ideally we should be able to read through the code without too much confusion - each method&amp;rsquo;s name being descriptive enough that we can work out what is going on.</description>
    </item>
    
    <item>
      <title>Coding Dojo #6: Web Driver</title>
      <link>http://mneedham.github.io/2009/01/15/coding-dojo-6-web-driver/</link>
      <pubDate>Thu, 15 Jan 2009 00:37:24 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/15/coding-dojo-6-web-driver/</guid>
      <description>We ran a sort of coding dojo/more playing around with web driver learning session this evening, coding some tests in Java driving Planet TW from the code.
The Format We had the same setup as for our normal coding dojos but only one person was driving at a time and the others were watching from around them offering tips on different approaches. I think only a couple of us drove during the session.</description>
    </item>
    
    <item>
      <title>F#: Partial Function Application with the Function Composition Operator</title>
      <link>http://mneedham.github.io/2009/01/12/f-partial-function-application-with-the-function-composition-operator/</link>
      <pubDate>Mon, 12 Jan 2009 22:22:43 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/12/f-partial-function-application-with-the-function-composition-operator/</guid>
      <description>In my continued reading of F# one of the ideas I&amp;rsquo;ve come across recently is that of partial function application.
This is a way of allowing us to combine different functions together and allows some quite powerful syntax to be written.
The term &amp;lsquo;currying&amp;rsquo; is perhaps a better known term for describing this although as I understand they are not exactly the same.
Currying is where we return a function that has been partially applied, in such a way that we can chain together a group of functions with a single argument.</description>
    </item>
    
    <item>
      <title>How does the user language fit in with the ubiquitous language?</title>
      <link>http://mneedham.github.io/2009/01/10/how-does-the-user-language-fit-in-with-the-ubiquitous-language/</link>
      <pubDate>Sat, 10 Jan 2009 15:38:01 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/10/how-does-the-user-language-fit-in-with-the-ubiquitous-language/</guid>
      <description>We&amp;rsquo;ve been doing some work this week around trying to ensure that we have a ubiquitous language to describe aspects of the domain across the various different systems on my project.
It&amp;rsquo;s not easy as there are several different teams involved but one thing we realised while working on the language is that the language of the business is not the same as the language of the user.
Although this is the first time that I recall working on a project where the language of the user is different to the language of the domain I&amp;rsquo;m sure there must be other domains where this is the case as well.</description>
    </item>
    
    <item>
      <title>Finding the value in fixing technical debt</title>
      <link>http://mneedham.github.io/2009/01/10/finding-the-value-in-fixing-technical-debt/</link>
      <pubDate>Sat, 10 Jan 2009 14:04:57 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/10/finding-the-value-in-fixing-technical-debt/</guid>
      <description>Technical debt is a term coined by Martin Fowler which we tend to use on our projects to describe a number of different situations on projects as Ian Cartwright points out in his post on the subject.
Ian covers it in more detail, but to summarise my understanding of what technical debt actually is:
 Technical debt is where we know that something we choose not to take care of now is going to affect us in the future.</description>
    </item>
    
    <item>
      <title>Coding Dojo #5: Uno</title>
      <link>http://mneedham.github.io/2009/01/08/coding-dojo-5-uno/</link>
      <pubDate>Thu, 08 Jan 2009 23:41:57 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/08/coding-dojo-5-uno/</guid>
      <description>We ran our 5th coding dojo on Thursday night, writing the card game Uno in Java. We didn&amp;rsquo;t all know the rules so this video explained it - surely a parody but you never know!
The Format We used the Randori approach again with 6 people participating for the majority of the session. Everyone paired with everyone else at least once and sometimes a couple of times.
We had the pair driving at the front of the room and everyone else further back to stop the tendency of observers to whiteboard stuff.</description>
    </item>
    
    <item>
      <title>Javascript Dates - Be aware of mutability</title>
      <link>http://mneedham.github.io/2009/01/07/javascript-dates-be-aware-of-mutability/</link>
      <pubDate>Wed, 07 Jan 2009 23:17:05 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/07/javascript-dates-be-aware-of-mutability/</guid>
      <description>It seems that much like in Java, dates in Javascript are mutable, meaning that it is possible to change a date after it has been created.
We had this painfully shown to us when using the datejs library to manipulate some dates.
The erroneous code was similar to this:
var jan312009 = new Date(2008, 1-1, 31); var oneMonthFromJan312009 = new Date(jan312009.add(1).month());  See the subtle error? Outputting these two values gives the following:</description>
    </item>
    
    <item>
      <title>Javascript: Add a month to a date</title>
      <link>http://mneedham.github.io/2009/01/07/javascript-add-a-month-to-a-date/</link>
      <pubDate>Wed, 07 Jan 2009 23:00:58 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/07/javascript-add-a-month-to-a-date/</guid>
      <description>We&amp;rsquo;ve been doing a bit of date manipulation in Javascript on my current project and one of the things that we wanted to do is add 1 month to a given date.
We can kind of achieve this using the standard date libraries but it doesn&amp;rsquo;t work for edge cases.
For example, say we want to add one month to January 31st 2009. We would expect one month from this date to be February 28th 2009:</description>
    </item>
    
    <item>
      <title>Outliers: Book Review</title>
      <link>http://mneedham.github.io/2009/01/06/outliers-book-review/</link>
      <pubDate>Tue, 06 Jan 2009 23:23:06 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/06/outliers-book-review/</guid>
      <description>The Book Outliers by Malcolm Gladwell
The Review I came across this book following recommendations by Jason Yip and Steven &amp;lsquo;Doc&amp;rsquo; List on Twitter.
I&amp;rsquo;ve previously read The Tipping Point and Blink and I like his easy going style so it was a no brainer that I was going to read this one.
I found that this book complimented Talent is Overrated quite nicely. Outliers covers how the story of how people became the best at what they do whereas Talent is Overrated focuses more on what you need to do if you want to become one of these people.</description>
    </item>
    
    <item>
      <title>jQuery datepicker IE6 positioning bug</title>
      <link>http://mneedham.github.io/2009/01/06/jquery-datepicker-ie6-positioning-bug/</link>
      <pubDate>Tue, 06 Jan 2009 21:57:06 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/06/jquery-datepicker-ie6-positioning-bug/</guid>
      <description>We&amp;rsquo;ve been using the jQuery datepicker on my current project and came across some strange behaviour with regards to the positioning of the calendar in IE6.
The calendar was always positioning itself right at the top of the screen instead of just below the textbox it was hooked up to but in Firefox it was working fine.
After a bit of exploration in the jQuery code (ui.datepicker.js) we worked out that the &amp;lsquo;document.</description>
    </item>
    
    <item>
      <title>F#: Forward Operator</title>
      <link>http://mneedham.github.io/2009/01/06/f-forward-operator/</link>
      <pubDate>Tue, 06 Jan 2009 00:19:52 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/06/f-forward-operator/</guid>
      <description>Continuing on my F# journey I came across a post by Ben Hall describing the approach he takes when learning a new programming language.
One of the approaches he describes is that of writing unit tests to help keep your learning on track. I&amp;rsquo;ve only been using the F# interactive console so far so I thought I&amp;rsquo;d give it a try.
After reading about the somewhat convoluted approach required to use NUnit or MBUnit to write F# unit tests I came across XUnit.</description>
    </item>
    
    <item>
      <title>Agile: When is a story done?</title>
      <link>http://mneedham.github.io/2009/01/04/agile-when-is-a-story-done/</link>
      <pubDate>Sun, 04 Jan 2009 22:17:08 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/04/agile-when-is-a-story-done/</guid>
      <description>I&amp;rsquo;ve worked on a few different agile projects and one of the things that hasn&amp;rsquo;t been completely consistent is when we consider a story to be &amp;lsquo;done&amp;rsquo;.
There seem to a few different approaches, each of which has its benefits and drawbacks.
Why do we care? We care about &#39;done&#39; for tracking the points we have achieved in an iteration and for knowing when we have added the value the story provides.</description>
    </item>
    
    <item>
      <title>F# Option Types</title>
      <link>http://mneedham.github.io/2009/01/02/f-option-types/</link>
      <pubDate>Fri, 02 Jan 2009 22:35:31 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/02/f-option-types/</guid>
      <description>I&amp;rsquo;ve been spending a bit of time working through the Real World Functional Programming book to learn a bit about F# and one of the cool features I came across today (while reading Chris Smith&amp;rsquo;s post on F# lists) is the Option type.
I first came across this idea a few months ago when discussing null handling strategies with a colleague who pointed out that you could get around this problem in Scala by using the Option class.</description>
    </item>
    
    <item>
      <title>2008: My Technical Review</title>
      <link>http://mneedham.github.io/2009/01/01/2008-my-technical-review/</link>
      <pubDate>Thu, 01 Jan 2009 09:28:23 +0000</pubDate>
      
      <guid>http://mneedham.github.io/2009/01/01/2008-my-technical-review/</guid>
      <description>Others in the blogosphere seem to be doing 2008 round ups around about now so I thought I&amp;rsquo;d jump in on the action.
Project Overview   I worked on 5 projects this year writing code in C# 2.0/3.0, Java and Ruby.  2 of the projects were writing client side code, 2 web applications and 1 writing services. The domains I worked in were investment banking, insurance and an industrial automation system  What did I learn in 2008?</description>
    </item>
    
  </channel>
</rss>