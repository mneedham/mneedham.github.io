+++
draft = false
date="2015-12-13 21:22:07"
title="Neo4j: Specific relationship vs Generic relationship + property"
tag=['neo4j']
category=['neo4j']
+++

<p>
For optimal traversal speed in Neo4j queries we should make our <strong>relationship types as specific as possible</strong>.
</p>


<p>
Let's take a look at an example from the '<a href="http://www.meetup.com/graphdb-london/events/226721630/">modelling a recommendations engine</a>' talk I <a href="https://skillsmatter.com/skillscasts/7298-modelling-a-recommendation-engine-a-worked-example">presented at Skillsmatter</a> a couple of weeks ago.
</p>


<p>
I needed to decided how to model the 'RSVP' relationship between a <cite>Member</cite> and an <cite>Event</cite>. A person can RSVP 'yes' or 'no' to an event and I'd like to capture both of these responses.
</p>


<p>i.e. we can choose between:</p>


<div>

<img src="http://www.markhneedham.com/blog/wp-content/uploads/2015/12/2015-12-13_20-39-05.png" alt="2015 12 13 20 39 05" title="2015-12-13_20-39-05.png" border="0" width="300" />
</div>

<p>and:</p>


<div>
<img src="http://www.markhneedham.com/blog/wp-content/uploads/2015/12/2015-12-13_20-39-54.png" alt="2015 12 13 20 39 54" title="2015-12-13_20-39-54.png" border="0" width="300" />
</div>

<p>
When deciding on a model we mainly need to think about the types of queries that we want to write. We shouldn't forget about updating the model but in my experience more time is spent querying graphs than updating them.
</p>


<p>
Let's take a look at each of those in turn:
</p>


<h3>What queries do we want to write?</h3>

<p>
The first query was going to use previous 'yes' RSVPs as an indicator of interest for future events. We're not interested in 'no' RSVPs for this query.
</p>


<p>
I started out with the generic RSVP relationship type with a 'response' property to distinguish between 'yes' and 'no':
</p>



~~~cypher

MATCH (member:Member {name: "Mark Needham"})
MATCH (futureEvent:Event) WHERE futureEvent.time >= timestamp()
MATCH (futureEvent)<-[:HOSTED_EVENT]-(group)

OPTIONAL MATCH (member)-[rsvp:RSVPD {response: "yes"}]->(pastEvent)<-[:HOSTED_EVENT]-(group)
WHERE pastEvent.time < timestamp()

RETURN group.name, futureEvent.name, COUNT(rsvp) AS previousEvents
ORDER BY  previousEvents DESC
~~~

<P>
This ran reasonably quickly but I was curious whether I could get the query to run any quicker by changing to the more specific model. Using the more specific relationship type our query reads:
</p>



~~~cypher

MATCH (member:Member {name: "Mark Needham"})
MATCH (futureEvent:Event) WHERE futureEvent.time >= timestamp()
MATCH (futureEvent)<-[:HOSTED_EVENT]-(group)

OPTIONAL MATCH (member)-[rsvp:RSVP_YES]->(pastEvent)<-[:HOSTED_EVENT]-(group)
WHERE pastEvent.time < timestamp()

RETURN group.name, 
       futureEvent.name, 
       COUNT(rsvp) AS previousEvents
ORDER BY  previousEvents DESC
~~~

<p>We can now <a href="http://neo4j.com/docs/stable/how-do-i-profile-a-query.html">profile our query</a> and compare the db hits of both solutions:</p>



~~~text

RSVPD {response: "yes"}
Cypher version: CYPHER 2.3, planner: COST. 688635 total db hits in 232 ms.

RSVP_YES
Cypher version: CYPHER 2.3, planner: COST. 559866 total db hits in 207 ms.
~~~

<p>
So we get a slight gain by using the more specific relationship type. The reason the db hits is lower is partly because we've removed the need to lookup the 'response' property on every 'RSVP' property and check that it matches 'yes'. We're also evaluating fewer relationships since we only look at positive RSVPs, negative ones are ignored.
</p>


<p>Our next query might be to capture all the RSVPs made by a member and list them alongside the events:</p>



~~~cypher

MATCH (member:Member {name: "Mark Needham"})-[rsvp:RSVPD]->(event)
WHERE event.time < timestamp()
RETURN event.name, event.time, rsvp.response
ORDER BY event.time DESC
~~~


~~~cypher

MATCH (member:Member {name: "Mark Needham"})-[rsvp:RSVP_YES|:RSVP_NO]->(event)
WHERE event.time < timestamp()
RETURN event.name, event.time, CASE TYPE(rsvp) WHEN "RSVP_YES" THEN "yes" ELSE "no" END AS response
ORDER BY event.time DESC
~~~

<p>
Again we see a marginal db hits win for the more specific relationship type:
</p>



~~~text

RSVPD {response: "yes"} / RSVPD {response: "no"}
Cypher version: CYPHER 2.3, planner: COST. 684 total db hits in 37 ms.

RSVP_YES / RSVP_NO
Cypher version: CYPHER 2.3, planner: COST. 541 total db hits in 24 ms.
~~~

<p>
However, the query is quite unwieldy and unless we store the response as a property on the relationship the code to return 'yes' or 'no' is a bit awkward. The more specific approach query would become even more painful to deal with if we introduced the 'waitlist' RSVP which we've chosen to exclude.
</p>


<h3>Will we need to update the relationship?</h3>

<p>
Yes! Users are able to change their RSVP up until the event happens so we need to be able to handle that.</p>
 

<p>Let's have a look at the queries we'd have to write to handle a change in RSVP using both models:</p>


<h4>Generic relationship type</h4>

~~~cypher

MATCH (event:Event {id: {event_id}})
MATCH (member:Member {id: {member_id}})
MERGE (member)-[rsvpRel:RSVPD {id: {rsvp_id}}]->(event)
ON CREATE SET rsvpRel.created = toint({mtime})
ON MATCH  SET rsvpRel.lastModified = toint({mtime})
SET rsvpRel.response = {response}
~~~

<h4>Specific relationship type</h4>


~~~cypher

MATCH (event:Event {id: {event_id}})
MATCH (member:Member {id: {member_id}})

FOREACH(ignoreMe IN CASE WHEN {response} = "yes" THEN [1] ELSE [] END |
  MERGE (member)-[rsvpYes:RSVP_YES {id: {rsvp_id}}]->(event)
  ON CREATE SET rsvpYes.created = toint({mtime})
  ON MATCH  SET rsvpYes.lastModified = toint({mtime})

  MERGE (member)-[oldRSVP:RSVP_NO]->(event)
  DELETE oldRSVP
)

FOREACH(ignoreMe IN CASE WHEN {response} = "no" THEN [1] ELSE [] END |
  MERGE (member)-[rsvpNo:RSVP_NO {id: {rsvp_id}}]->(event)
  ON CREATE SET rsvpNo.created = toint({mtime})
  ON MATCH  SET rsvpNo.lastModified = toint({mtime})

  MERGE (member)-[oldRSVP:RSVP_YES]->(event)
  DELETE oldRSVP
)
~~~

<p>As you can see, the code to update an RSVP is more complicated when using the specific relationship type due in part to Cypher not yet having first class support for conditionals.
</p>


<p>
In summary, for our meetup.com model we gain speed improvements by using more specific relationship types but at the expense of some more complicated read queries and a significantly more convoluted update query.
</p>


<p>
Depending on the cardinality of relationships in your model your mileage may vary but it's worth doing some profiling to compare all your options.
</p>

