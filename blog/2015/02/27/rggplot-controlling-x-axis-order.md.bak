+++
draft = false
date="2015-02-27 00:49:54"
title="R/ggplot: Controlling X axis order"
tag=['r-2', 'ggplot']
category=['R']
+++

<p>
As part of a talk I gave at the Neo4j London meetup earlier this week I wanted to show how you could build a simple chart showing the number of friends that different actors had using the ggplot library.
</p>


<p>I started out with the following code:</p>



~~~r

df = read.csv("/tmp/friends.csv")
top = df %>% head(20)

ggplot(aes(x = p.name, y = colleagues), data = top) + 
  geom_bar(fill = "dark blue", stat = "identity")
~~~

<p>The <a href="https://gist.github.com/mneedham/070d82a1e2aa031f42e6">friends CSV file is available as a gist</a> if you want to reproduce the chart. This is how the chart renders:</p>


<img src="http://www.markhneedham.com/blog/wp-content/uploads/2015/02/2015-02-27_00-41-08.png" alt="2015 02 27 00 41 08" title="2015-02-27_00-41-08.png" border="0" width="600" height="354" />

<p>
It's in a fairly arbitrary order when it would be quite cool if we could get the most popular people to show from left to right.
</p>


<p>
I had the people's names in the correct order in the data frame but annoyingly it was then sorting them into alphabetical order. Luckily I  came across the <a href="http://stackoverflow.com/questions/3253641/how-to-change-the-order-of-a-discrete-x-scale-in-ggplot">by using the <cite>scale_x_discrete</cite> function</a> which does exactly what I needed.
</p>


<p>If we pass in the list of names to that function we get the chart we desire:</p>



~~~r

ggplot(aes(x = p.name, y = colleagues), data = top) + 
  geom_bar(fill = "dark blue", stat = "identity") + 
  scale_x_discrete(limits= top$p.name)
~~~

<div>

<img src="http://www.markhneedham.com/blog/wp-content/uploads/2015/02/2015-02-27_00-45-01.png" alt="2015 02 27 00 45 01" title="2015-02-27_00-45-01.png" border="0" width="600" height="354" /></div>
