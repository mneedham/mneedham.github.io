+++
draft = false
date="2015-05-04 09:56:22"
title="Neo4j: LOAD CSV - java.io.InputStreamReader there's a field starting with a quote and whereas it ends that quote there seems  to be character in that field after that ending quote. That isn't supported."
tag=['neo4j', 'cypher']
category=['neo4j']
+++

<p>
I recently came across the <a href="http://www.dtic.upf.edu/~ocelma/MusicRecommendationDataset/lastfm-360K.html">last.fm dataset</a> via <a href="http://www.benfrederickson.com/distance-metrics/">Ben Frederickson's blog</a> and thought it'd be an interesting one to load into Neo4j and explore.
</p>


<p>
I started with a simple query to parse the CSV file and count the number of rows:
</p>



~~~cypher

LOAD CSV FROM "file:///Users/markneedham/projects/neo4j-recommendations/lastfm-dataset-360K/usersha1-artmbid-artname-plays.tsv" 
AS row FIELDTERMINATOR  "\t"
return COUNT(*)

At java.io.InputStreamReader@4d307fda:6484 there's a field starting with a quote and whereas it ends that quote there seems  to be character in that field after that ending quote. That isn't supported. This is what I read: 'weird al"'
~~~

<p>
This blows up because (as the message says) we've got a field which uses double quotes but then has other characters either side of the quotes.
</p>


<p>
A quick search through the file reveals one of the troublesome lines:
</p>



~~~bash

$ grep "\"weird" lastfm-dataset-360K/usersha1-artmbid-artname-plays.tsv  | head -n 1
0015371426d2cbef354b2f680340de38d0ebd2f0	7746d775-9550-4360-b8d5-c37bd448ce01	"weird al" yankovic	4099
~~~

<p>I ran a file containing only that line through <a href="http://csvlint.io/validation/55473958637376058f000000">CSV Lint</a> to see what it thought and indeed it is invalid:</p>


<div>

<img src="http://www.markhneedham.com/blog/wp-content/uploads/2015/05/2015-05-04_10-50-43.png" alt="2015 05 04 10 50 43" title="2015-05-04_10-50-43.png" border="0" width="597" height="130" />
</div>

<p>
Let's clean up our file to use single quotes instead of double quotes and try the query again:
</p>



~~~bash

$ tr "\"" "'" < lastfm-dataset-360K/usersha1-artmbid-artname-plays.tsv > lastfm-dataset-360K/clean.tsv
~~~


~~~cypher

LOAD CSV FROM "file:///Users/markneedham/projects/neo4j-recommendations/lastfm-dataset-360K/clean.tsv" as row FIELDTERMINATOR  "\t"
return COUNT(*)

17559530
~~~

<p>
And we're back in business! Interestingly Python's CSV reader chooses to strip out the double quotes rather than throw an exception:
</p>



~~~python

import csv
with open("smallWeird.tsv", "r") as file:
    reader = csv.reader(file, delimiter="\t")

    for row in reader:
        print row
~~~


~~~bash

$ python explore.py
['0015371426d2cbef354b2f680340de38d0ebd2f0', '7746d775-9550-4360-b8d5-c37bd448ce01', 'weird al yankovic', '4099']
~~~

<p>
I prefer LOAD CSV's approach but it's an interesting trade off I hadn't considred before.
</p>

