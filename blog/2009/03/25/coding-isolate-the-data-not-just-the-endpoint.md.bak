+++
draft = false
date="2009-03-25 23:28:42"
title="Coding: Isolate the data not just the endpoint"
tag=['coding', 'integration']
category=['Coding']
+++

One of the fairly standard ways of shielding our applications when integrating with other systems is to create a wrapper around it so that all interaction with it is in one place.

As I mentioned in a previous post <a href="http://www.markhneedham.com/blog/2009/03/10/ddd-repository-not-only-for-databases/">we have been using the repository pattern</a> to achieve this in our code. 

One service which we needed to integrate lately provided data for populating data on drop downs on our UI so the service provided two pieces of data - a Value (which needed to be sent to another service when a certain option was selected) and a Label (which was the value for us to display on the screen).

Our original approach was to pass both bits of the data through the system and we populated the dropdowns such that the value being passed back to the service would be the Value but the value shown to the user would be the Label.

The option part of the drop down list would therefore look like this:


~~~text

<select>
...
<option value="Value">Label</option>
</select>
~~~

With the data flowing through our application like so:

<img src="http://www.markhneedham.com/blog/wp-content/uploads/2009/03/isolatedata-before1.gif" alt="isolatedata_before.gif" border="0" width="487" height="502" />

Although this approach worked it made our code really complicated and we were actually passing Value around the code even though our application didn't care about it at all, only the service did.

A neat re-design idea a couple of my colleagues came up with to was to only pass the Label through the application and then just do a mapping in the Repository from the Label -> Value so we could send the correct value to the service.

The code then became much simpler:

<img src="http://www.markhneedham.com/blog/wp-content/uploads/2009/03/isolatedata-after1.gif" alt="isolatedata_after.gif" border="0" width="487" height="502" />

And we had isolated the bit of code that led to the complexity in the first place.

The lesson here for me is that it's not enough merely to isolate the endpoint, we also need to think about which data our application actually needs and only pass through the data we actually use.
