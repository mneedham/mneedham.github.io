+++
draft = false
date="2009-01-19 21:38:20"
title="Cruise: Pipelining for fast visual feedback"
tag=['agile', 'build']
category=['Build']
+++

One of the cool features in build servers like <a href="http://studios.thoughtworks.com/cruise-continuous-integration">Cruise</a> and <a href="http://www.jetbrains.com/teamcity/">Team City</a> is the ability to create build <a href="http://studios.thoughtworks.com/cruise-continuous-integration/deployment-pipelines">pipelines</a>.

I have done a bit of work using this feature in previous projects but the key driver for doing so there was to create a chain of producers/consumers (producing and consuming artifacts) eventually resulting in a manual step to put the application into a testing environment.

While this is certainly a good reason to create a build pipeline, <a href="http://twitter.com/davcamer">a colleague</a> pointed out an equally useful way of using this feature to split the build into separate steps pipelined together.

By doing this we get a nice graphical display from the cruise dashboard which allows us to see where the build is failing, therefore pointing out where we need to direct our focus.

<img src="http://www.markhneedham.com/blog/wp-content/uploads/2009/01/pipeline-activity-small.png" alt="pipeline_activity_small.png" border="0" width="324" height="273" />

One way to use the pipelines is to work out the distinct potential areas where you would want to signal that something needs to be investigated and then make each of these targets a separate build target.

For example we could set it up like so:

No dependency build => <br />
Services build  => <br />
End to End smoke test build => <br />
Full build 

<h3>Benefits of this approach</h3>

The benefit of this approach is that it helps to <strong>create more confidence in the build process</strong>.

When we have a long running build it is easy to get into a state where it is failing after 3/4 of the build has run and all we get is the red failed build to indicate something has gone wrong.  We can drill down to find out where the failure is but it's not as obvious.

The approach we have taken to checking in is that it is fine to do as long as the first stage of the build is green. This has worked reasonably well so far and failure further down stream has been fixed relatively quickly.

<h3>Things to watch for</h3>

We have setup the final step of the build to be a manual step due to the fact that it takes quite a long time to run and we've been unable to get a dedicated machine to run an agent on. Ideally we would have it running constantly on its own agent.

This isn't run as frequently as when we had it running automatically and I guess the danger is that we are <strong>pushing problems further down stream</strong> rather than catching them early. Hopefully this issue will be solved if we can get a dedicated agent running this build.

We're still looking for ways to improve our build process but this is what's currently working for reasonably well for us at the moment. It would be interesting to hear what others are doing.
