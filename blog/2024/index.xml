<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2024s on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/2024/</link>
    <description>Recent content in 2024s on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Feb 2024 00:44:37 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/2024/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clustering YouTube comments using Ollama Embeddings</title>
      <link>https://www.markhneedham.com/blog/2024/02/27/clustering-youtube-comments-ollama-embeddings-nomic/</link>
      <pubDate>Tue, 27 Feb 2024 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2024/02/27/clustering-youtube-comments-ollama-embeddings-nomic/</guid>
      <description>One of my favourite tools in the LLM space is Ollama and if you want to learn how to use it, there’s no better place than Matt Williams&amp;#39; YouTube channel. His videos get a lot of comments and they tend to contain a treasure trove of the things that people are thinking about and the questions that they have. Matt recently did a video about embeddings in Ollama and I thought it’d be fun to try to get a high-level overview of what’s happening in the comments section.</description>
    </item>
    
    <item>
      <title>python-youtube: Retrieving multiple pages using page token</title>
      <link>https://www.markhneedham.com/blog/2024/02/26/python-youtube-data-page-token/</link>
      <pubDate>Mon, 26 Feb 2024 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2024/02/26/python-youtube-data-page-token/</guid>
      <description>I’ve been playing around with the YouTube API to analyse comments on YouTube videos and needed to use pagination to get all the comments. In this blog post, we’ll learn how to do that.
But before we do anything, you’ll need to go to console.developers.google.com, create a project and enable YouTube Data API v3.
Figure 1. YouTube Data API Once you’ve done that, create an API key.
Figure 2. Creating an API key Create an environment variable that contains your API key:</description>
    </item>
    
    <item>
      <title>Using environment variables in ClickHouse queries</title>
      <link>https://www.markhneedham.com/blog/2024/02/23/clickhouse-environment-variables/</link>
      <pubDate>Fri, 23 Feb 2024 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2024/02/23/clickhouse-environment-variables/</guid>
      <description>For quite some time I’ve been wondering how to get access to an environment variable in a ClickHouse Local and finally today I have a solution, which we’ll explore in this blog post.
My reason for wanting to do this is so that I can pass through a ClickHouse Cloud password to use in a remoteSecure function call. I wanted to do this as part of a blog post I wrote showing how to do Hybrid Query Execution with ClickHouse.</description>
    </item>
    
    <item>
      <title>Render a CSV across multiple columns on the terminal/shell</title>
      <link>https://www.markhneedham.com/blog/2024/02/20/shell-render-csv-multiple-columns/</link>
      <pubDate>Tue, 20 Feb 2024 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2024/02/20/shell-render-csv-multiple-columns/</guid>
      <description>I was recently working with a CSV file that contained a bunch of words and I wanted to render them on the console so that you could see all of them at once without any scrolling. i.e. I wanted the rendering of the CSV file to wrap across columns.
I learned that we can do exactly this using the paste command, so let’s see how to do it.
Imagine we have the CSV file shown below:</description>
    </item>
    
    <item>
      <title>Qdrant/FastEmbed: Content discovery for my blog posts</title>
      <link>https://www.markhneedham.com/blog/2024/02/11/qdrant-fast-embed-content-discovery/</link>
      <pubDate>Sun, 11 Feb 2024 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2024/02/11/qdrant-fast-embed-content-discovery/</guid>
      <description>I was recently reading Simon Willison’s blog post about embedding algorithms in which he described how he’d used them to create a &amp;#39;related posts&amp;#39; section on his blog post. So, of course, I wanted to see whether I could do the same for my blog as well.
Note I’ve created a video showing how to do this on my YouTube channel, Learn Data with Mark, so if you prefer to consume content through that medium, I’ve embedded it below:</description>
    </item>
    
    <item>
      <title>LLaVA 1.5 vs. 1.6</title>
      <link>https://www.markhneedham.com/blog/2024/02/04/llava-large-multi-modal-model-v1.5-v1.6/</link>
      <pubDate>Sun, 04 Feb 2024 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2024/02/04/llava-large-multi-modal-model-v1.5-v1.6/</guid>
      <description>LLaVA (or Large Language and Vision Assistant), an open-source large multi-modal model, just released version 1.6. It claims to have improvements over version 1.5, which was released a few months ago:
Increasing the input image resolution to 4x more pixels. This allows it to grasp more visual details. It supports three aspect ratios, up to 672x672, 336x1344, 1344x336 resolution.
Better visual reasoning and OCR capability with an improved visual instruction tuning data mixture.</description>
    </item>
    
    <item>
      <title>Ollama is on PyPi</title>
      <link>https://www.markhneedham.com/blog/2024/01/28/ollama-now-on-pypi/</link>
      <pubDate>Sun, 28 Jan 2024 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2024/01/28/ollama-now-on-pypi/</guid>
      <description>This week Ollama released a Python/PyPi library to go with their awesome tool for running LLMs on your own machine. You still need to download and run Ollama, but after that you can do almost everything from the library. In this blog post, we’re going to take it for a spin.
I’ve created a video showing how to do this on my YouTube channel, Learn Data with Mark, so if you prefer to consume content through that medium, I’ve embedded it below:</description>
    </item>
    
    <item>
      <title>ClickHouse: Configure default output format</title>
      <link>https://www.markhneedham.com/blog/2024/01/19/clickhouse-configure-output-format/</link>
      <pubDate>Fri, 19 Jan 2024 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2024/01/19/clickhouse-configure-output-format/</guid>
      <description>When running queries with ClickHouse Local, the results are rendered back to the screen in a table format in blocks. This default format is called PrettyCompact and most of the time this works fine, but sometimes you can end up with multiple mini-tables. In this blog post, we’re going to learn how to change the default format so that all the results show in one table.
But first, let’s see how the problem manifests.</description>
    </item>
    
    <item>
      <title>An introduction to Retrieval Augmented Generation</title>
      <link>https://www.markhneedham.com/blog/2024/01/12/intro-to-retrieval-augmented-generation/</link>
      <pubDate>Fri, 12 Jan 2024 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2024/01/12/intro-to-retrieval-augmented-generation/</guid>
      <description>Retrieval Augmented Generation (RAG) is a technique used with Large Language Models (LLM) where you augment the prompt with data retrieved from a data store so that the LLM can generate a better answer to the question that is being asked. In this blog post, we’re going to learn the basics of RAG by creating a Question and Answer system on top of the 2023 Wimbledon Championships Wikipedia page.</description>
    </item>
    
    <item>
      <title>Pandas: Exclude columns using regex</title>
      <link>https://www.markhneedham.com/blog/2024/01/05/pandas-exclude-columns-regex/</link>
      <pubDate>Fri, 05 Jan 2024 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2024/01/05/pandas-exclude-columns-regex/</guid>
      <description>After a few months of using ClickHouse, I’ve got quite used to using the SELECT &amp;lt;expr&amp;gt; EXCEPT modifier, which lets you remove columns based on a regular expression. I wanted to do something similar when working with some data in Pandas and in this blog we’ll explore how to do that.
We’re gonna be working with a CSV file of UK energy and gas tariffs for one of the energy providers.</description>
    </item>
    
    <item>
      <title>ClickHouse: Float equality</title>
      <link>https://www.markhneedham.com/blog/2024/01/04/clickhouse-float-equality/</link>
      <pubDate>Thu, 04 Jan 2024 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2024/01/04/clickhouse-float-equality/</guid>
      <description>I’ve been playing around with NumPy data in ClickHouse this week and wanted to share what I learnt when checking for equality of float values. Let’s get going!
Creating arrays We’re going to use Python’s NumPy library to create 5 arrays containing 10 values each:
import numpy as np rng = np.random.default_rng(seed=42) rng.random(size=(5, 5)) Output array([[0.28138389, 0.29359376, 0.66191651, 0.55703215, 0.78389821], [0.66431354, 0.40638686, 0.81402038, 0.16697292, 0.02271207], [0.09004786, 0.72235935, 0.46187723, 0.16127178, 0.</description>
    </item>
    
    <item>
      <title>nvim: Unable to create directory for swap file - recovery impossible: permission denied</title>
      <link>https://www.markhneedham.com/blog/2024/01/03/nvim-swap-file-permission-denied/</link>
      <pubDate>Wed, 03 Jan 2024 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2024/01/03/nvim-swap-file-permission-denied/</guid>
      <description>I was playing around with neovim last week and despite installing it via Homebrew, ran into a weird permissions error. In this blog post, I’ll describe the problem I had and how to solve it.
I installed it like this:
brew install nvim And then tried to create a new file:
nvim foo.py Which resulted in the following error:
Output E303: Unable to create directory &amp;#34;/Users/markhneedham/.local/state/nvim&amp;#34; for swap file, recovery impossible: permission denied E303: Unable to open swap file for &amp;#34;foo.</description>
    </item>
    
    <item>
      <title>ClickHouse: How does a number have a set number of decimal places?</title>
      <link>https://www.markhneedham.com/blog/2024/01/02/clickhouse-set-number-decimal-places/</link>
      <pubDate>Tue, 02 Jan 2024 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2024/01/02/clickhouse-set-number-decimal-places/</guid>
      <description>I’ve been working with a dataset in ClickHouse where I compute currency values and I really struggled to figure out how to get numbers whose decimal part is divisible by 10 to have a fixed number of decimal places. If you want to do that too, hopefully, this blog post will help.
Let’s start by seeing what happens if we output the number 12.40
SELECT 12.40 AS number; Output ┌─number─┐ │ 12.</description>
    </item>
    
  </channel>
</rss>
