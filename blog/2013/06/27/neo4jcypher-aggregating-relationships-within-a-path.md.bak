+++
draft = false
date="2013-06-27 10:32:18"
title="neo4j/cypher: Aggregating relationships within a path"
tag=['neo4j', 'cypher']
category=['neo4j']
+++

<p>I recently came across an interesting use case of paths in a graph where we wanted to calculate the frequency of communication between two people by showing how frequently each emailed the other.</p>


<p>The model looked like this:</p>


<div align="center">
<img src="http://www.markhneedham.com/blog/wp-content/uploads/2013/06/emails.png" alt="Emails" title="emails.png" border="0" width="458" height="453" />
</div>

<p>which we can create with the following cypher statements:</p>



~~~cypher

CREATE (email1 { name: 'Email 1', title: 'Some stuff' })
CREATE (email2 { name: 'Email 2', title: "Absolutely irrelevant" })
CREATE (email3 { name: 'Email 3', title: "Something else" })
CREATE (person1 { name: 'Mark' })
CREATE (person2 { name: 'Jim' })
CREATE (person3 { name: 'Alistair' })
CREATE (person1)-[:SENT]->(email1)
CREATE (person2)-[:RECEIVED]->(email1)
CREATE (person3)-[:RECEIVED]->(email1)
CREATE (person1)-[:SENT]->(email2)
CREATE (person2)-[:RECEIVED]->(email2)
CREATE (person2)-[:SENT]->(email3)
CREATE (person1)-[:RECEIVED]->(email3)
~~~

<p>We want to return a list containing pairs of people and how many times they emailed each other, so in this case we want to return a table showing the following:</p>



~~~text

+-------------------------------------------+
| Person 1 | Person 2 | P1 -> P2 | P2 -> P1 |
|-------------------------------------------|
| Alistair | Mark     | 0        | 1        |
| Jim      | Mark     | 1        | 2        |
+-------------------------------------------+
~~~

<p>I started out with the following query which finds all the emails and then traverses out to find the sender and receiver and aggregates them together:</p>



~~~cypher

START email = node:node_auto_index('name:"Email 1" name:"Email 2" name: "Email 3"') 
MATCH sender-[:SENT]->email<-[:RECEIVED]-receiver 
RETURN sender.name, receiver.name, COUNT(email) AS count
~~~

<p>which returns the following:</p>



~~~text

==> +-------------------------------------+
==> | sender.name | receiver.name | count |
==> +-------------------------------------+
==> | "Mark"      | "Jim"         | 2     |
==> | "Jim"       | "Mark"        | 1     |
==> | "Mark"      | "Alistair"    | 1     |
==> +-------------------------------------+
~~~

<p>It gives us all the pairs that have sent emails to each other but doesn't group them together which is a bit annoying.</p>


<p>Having realised that it was quite difficult to get that grouping of people if I started from the emails I changed the query to start from people instead and then traverse in on the emails they'd written to each other:</p>



~~~cypher

START personA = node:node_auto_index('name:"Mark" name:"Jim" name:"Alistair"'), 
      personB = node:node_auto_index('name:"Mark" name:"Jim" name:"Alistair"') 
MATCH personA-[s:SENT]->email<-[r:RECEIVED]-personB 
WHERE personA <> personB 

WITH personA, personB, LENGTH(COLLECT(s)) AS AToB 
MATCH personB-[s?:SENT]->email<-[r:RECEIVED]-personA 
RETURN personA.name, personB.name, AToB, LENGTH(COLLECT(s)) AS BToA
~~~

<p>Here we start with our list of people and then find all the combinations where personA has sent an email that's been received by personB.</p>


<p>If we execute just the first half of that we can see the email sent/received combinations:</p>



~~~cypher

START personA = node:node_auto_index('name:"Mark" name:"Jim" name:"Alistair"'), 
      personB = node:node_auto_index('name:"Mark" name:"Jim" name:"Alistair"') 
MATCH personA-[s:SENT]->email<-[r:RECEIVED]-personB 
WHERE personA <> personB 
RETURN personA, personB, email
~~~


~~~text

==> +---------------------------------------------------------------------------------------------------------+
==> | personA              | personB                  | email                                                 |
==> +---------------------------------------------------------------------------------------------------------+
==> | Node[4]{name:"Mark"} | Node[5]{name:"Jim"}      | Node[1]{name:"Email 1",title:"Some stuff"}            |
==> | Node[4]{name:"Mark"} | Node[5]{name:"Jim"}      | Node[2]{name:"Email 2",title:"Absolutely irrelevant"} |
==> | Node[5]{name:"Jim"}  | Node[4]{name:"Mark"}     | Node[3]{name:"Email 3",title:"Something else"}        |
==> | Node[4]{name:"Mark"} | Node[6]{name:"Alistair"} | Node[1]{name:"Email 1",title:"Some stuff"}            |
==> +---------------------------------------------------------------------------------------------------------+
~~~

<p>In the second half of the query we find the inverse relationships but we also want to indicate if one person hasn't sent any emails to the other one (e.g. Alistair to Mark) which is why I brought in the optional 'SENT' relationship. If we run that we get the following:</p>



~~~text

==> +-------------------------------------------+
==> | personA.name | personB.name | AToB | BToA |
==> +-------------------------------------------+
==> | "Jim"        | "Mark"       | 1    | 2    |
==> | "Mark"       | "Alistair"   | 1    | 0    |
==> | "Mark"       | "Jim"        | 2    | 1    |
==> +-------------------------------------------+
~~~

<p>It's a bit better in that we've now got the emails sent by pairs of people on the same row but we still have duplication e.g. Jim/Mark and Mark/Jim show as separate rows even though they show the same information.</p>
 

<p>We also won't see a row if Person A hasn't sent an email to PersonB even if Person B has emailed Person A.</p>


<p>At this stage I was a bit stuck but <a href="https://twitter.com/maxdemarzi">Max</a> pointed out that we could use the <a href="http://docs.neo4j.org/chunked/milestone/query-match.html#match-all-shortest-paths">all shortest paths algorithm</a> to solve the problem.</p>


<p>We started out with the following query:</p>



~~~cypher

START personA = node:node_auto_index('name:"Mark" name:"Jim" name:"Alistair"'), 
      personB = node:node_auto_index('name:"Mark" name: "Jim" name: "Alistair"') 
WITH personA,personB 
MATCH p = AllShortestPaths(personA-[:SENT|RECEIVED*..2]-personB)
RETURN p
~~~

<p>which returns:</p>



~~~text

==> +------------------------------------------------------------------------------------------------------------------------------+
==> | p                                                                                                                            |
==> +------------------------------------------------------------------------------------------------------------------------------+
==> | [Node[4]{name:"Mark"}]                                                                                                       |
==> | [Node[4]{name:"Mark"},:SENT[0] {},Node[1]{name:"Email 1",title:"Some stuff"},:RECEIVED[1] {},Node[5]{name:"Jim"}]            |
==> | [Node[4]{name:"Mark"},:SENT[3] {},Node[2]{name:"Email 2",title:"Absolutely irrelevant"},:RECEIVED[4] {},Node[5]{name:"Jim"}] |
==> | [Node[4]{name:"Mark"},:RECEIVED[6] {},Node[3]{name:"Email 3",title:"Something else"},:SENT[5] {},Node[5]{name:"Jim"}]        |
==> | [Node[4]{name:"Mark"},:SENT[0] {},Node[1]{name:"Email 1",title:"Some stuff"},:RECEIVED[2] {},Node[6]{name:"Alistair"}]       |
==> | [Node[5]{name:"Jim"},:RECEIVED[1] {},Node[1]{name:"Email 1",title:"Some stuff"},:SENT[0] {},Node[4]{name:"Mark"}]            |
==> | [Node[5]{name:"Jim"},:RECEIVED[4] {},Node[2]{name:"Email 2",title:"Absolutely irrelevant"},:SENT[3] {},Node[4]{name:"Mark"}] |
==> | [Node[5]{name:"Jim"},:SENT[5] {},Node[3]{name:"Email 3",title:"Something else"},:RECEIVED[6] {},Node[4]{name:"Mark"}]        |
==> | [Node[5]{name:"Jim"}]                                                                                                        |
==> | [Node[5]{name:"Jim"},:RECEIVED[1] {},Node[1]{name:"Email 1",title:"Some stuff"},:RECEIVED[2] {},Node[6]{name:"Alistair"}]    |
==> | [Node[6]{name:"Alistair"},:RECEIVED[2] {},Node[1]{name:"Email 1",title:"Some stuff"},:SENT[0] {},Node[4]{name:"Mark"}]       |
==> | [Node[6]{name:"Alistair"},:RECEIVED[2] {},Node[1]{name:"Email 1",title:"Some stuff"},:RECEIVED[1] {},Node[5]{name:"Jim"}]    |
==> | [Node[6]{name:"Alistair"}]                                                                                                   |
==> +------------------------------------------------------------------------------------------------------------------------------+
~~~

<p>Since we're only really interested in the emails that people have sent to each other we'll narrow down the result set to only include those paths:</p>



~~~cypher

START personA = node:node_auto_index('name:"Mark" name:"Jim" name:"Alistair"'), 
      personB = node:node_auto_index('name:"Mark" name: "Jim" name: "Alistair"') 
WITH personA,personB 
MATCH p = AllShortestPaths(personA-[:SENT|RECEIVED*..2]-personB) 
WHERE ANY (x IN relationships(p) WHERE TYPE(x)= 'SENT') 
RETURN p
~~~


~~~text

==> +------------------------------------------------------------------------------------------------------------------------------+
==> | p                                                                                                                            |
==> +------------------------------------------------------------------------------------------------------------------------------+
==> | [Node[4]{name:"Mark"},:SENT[0] {},Node[1]{name:"Email 1",title:"Some stuff"},:RECEIVED[1] {},Node[5]{name:"Jim"}]            |
==> | [Node[4]{name:"Mark"},:SENT[3] {},Node[2]{name:"Email 2",title:"Absolutely irrelevant"},:RECEIVED[4] {},Node[5]{name:"Jim"}] |
==> | [Node[4]{name:"Mark"},:RECEIVED[6] {},Node[3]{name:"Email 3",title:"Something else"},:SENT[5] {},Node[5]{name:"Jim"}]        |
==> | [Node[4]{name:"Mark"},:SENT[0] {},Node[1]{name:"Email 1",title:"Some stuff"},:RECEIVED[2] {},Node[6]{name:"Alistair"}]       |
==> | [Node[5]{name:"Jim"},:RECEIVED[1] {},Node[1]{name:"Email 1",title:"Some stuff"},:SENT[0] {},Node[4]{name:"Mark"}]            |
==> | [Node[5]{name:"Jim"},:RECEIVED[4] {},Node[2]{name:"Email 2",title:"Absolutely irrelevant"},:SENT[3] {},Node[4]{name:"Mark"}] |
==> | [Node[5]{name:"Jim"},:SENT[5] {},Node[3]{name:"Email 3",title:"Something else"},:RECEIVED[6] {},Node[4]{name:"Mark"}]        |
==> | [Node[6]{name:"Alistair"},:RECEIVED[2] {},Node[1]{name:"Email 1",title:"Some stuff"},:SENT[0] {},Node[4]{name:"Mark"}]       |
==> +------------------------------------------------------------------------------------------------------------------------------+
~~~

<p>There's currently some duplication because we have paths going both ways between people included. e.g.</p>



~~~text

[Node[4]{name:"Mark"},:SENT[0] {},Node[1]{name:"Email 1",title:"Some stuff"},:RECEIVED[1] {},Node[5]{name:"Jim"}] 
~~~

<p>and:</p>



~~~text

[Node[5]{name:"Jim"},:RECEIVED[1] {},Node[1]{name:"Email 1",title:"Some stuff"},:SENT[0] {},Node[4]{name:"Mark"}]  
~~~

<p>refer to the same thing.</p>


<p>We'll filter by keeping the starting node which has a higher node id - we could use any property to do this comparison but id will do:</p>



~~~cypher

START personA = node:node_auto_index('name:"Mark" name:"Jim" name:"Alistair"'), 
      personB = node:node_auto_index('name:"Mark" name: "Jim" name: "Alistair"') 
WITH personA,personB 
MATCH p = AllShortestPaths(personA-[:SENT|RECEIVED*..2]-personB) 
WHERE ANY (x IN relationships(p) WHERE TYPE(x)= 'SENT') 
AND ID(head(nodes(p))) > ID(head((tail(tail(nodes(p)))))) 
RETURN p
~~~


~~~text

==> +------------------------------------------------------------------------------------------------------------------------------+
==> | p                                                                                                                            |
==> +------------------------------------------------------------------------------------------------------------------------------+
==> | [Node[5]{name:"Jim"},:RECEIVED[1] {},Node[1]{name:"Email 1",title:"Some stuff"},:SENT[0] {},Node[4]{name:"Mark"}]            |
==> | [Node[5]{name:"Jim"},:RECEIVED[4] {},Node[2]{name:"Email 2",title:"Absolutely irrelevant"},:SENT[3] {},Node[4]{name:"Mark"}] |
==> | [Node[5]{name:"Jim"},:SENT[5] {},Node[3]{name:"Email 3",title:"Something else"},:RECEIVED[6] {},Node[4]{name:"Mark"}]        |
==> | [Node[6]{name:"Alistair"},:RECEIVED[2] {},Node[1]{name:"Email 1",title:"Some stuff"},:SENT[0] {},Node[4]{name:"Mark"}]       |
==> +------------------------------------------------------------------------------------------------------------------------------+
~~~

<p>Now we just need to do a bit more manipulation of these paths and we have exactly what we need:</p>



~~~cypher

START personA = node:node_auto_index('name:"Mark" name:"Jim" name:"Alistair"'), 
      personB = node:node_auto_index('name:"Mark" name: "Jim" name: "Alistair"') 
WITH personA,personB 
MATCH p = AllShortestPaths(personA-[:SENT|RECEIVED*..2]-personB) 
WHERE ANY (x IN relationships(p) WHERE TYPE(x)= 'SENT') 
AND ID(head(nodes(p))) > ID(head((tail(tail(nodes(p)))))) 
RETURN HEAD(NODES(p)) AS personA, 
       HEAD((TAIL(TAIL(NODES(p))))) AS personB, 
       LENGTH(FILTER(y IN COLLECT(HEAD(RELS(p))): TYPE(y)= 'SENT')) as AToB,
       LENGTH(FILTER(y IN COLLECT(HEAD(TAIL(RELS(p)))): TYPE(y)= 'SENT')) as BToA
~~~

<p>What we've done here is count the number of 'SENT' relationships from person A's side of the path and then do the same for person B's side of the path.</p>


<p>There's currently no way to do slicing of a collection in cypher otherwise we wouldn't need those nested calls to TAIL!</p>


<p>We do however get the result we want:</p>



~~~text

==> +---------------------------------------------------------------+
==> | personA                  | personB              | AToB | BToA |
==> +---------------------------------------------------------------+
==> | Node[6]{name:"Alistair"} | Node[4]{name:"Mark"} | 0    | 1    |
==> | Node[5]{name:"Jim"}      | Node[4]{name:"Mark"} | 1    | 2    |
==> +---------------------------------------------------------------+
~~~

<p>I have no idea how well this query would perform for any significantly sized data set but it's an interesting query nonetheless.</p>

