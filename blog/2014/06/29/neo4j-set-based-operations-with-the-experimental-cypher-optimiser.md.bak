+++
draft = false
date="2014-06-29 08:45:34"
title="Neo4j: Set Based Operations with the experimental Cypher optimiser"
tag=['neo4j']
category=['neo4j']
+++

<p>A few months ago I wrote about <a href="http://www.markhneedham.com/blog/2014/02/20/neo4j-cypher-set-based-operations/">cypher queries which look for a missing relationship</a> and showed how you could optimise them by re-working the query slightly.</p>


<p>To refresh, we wanted to find all the people in the London office that I hadn't worked with given this model...</p>
 

<div>
<img src="http://www.markhneedham.com/blog/wp-content/uploads/2014/02/2014-02-18_17-04-01.png"></img>
</div>

<p>...and this initial query:</p>



~~~cypher

MATCH (p:Person {name: "me"})-[:MEMBER_OF]->(office {name: "London Office"})<-[:MEMBER_OF]-(colleague)
WHERE NOT (p-[:COLLEAGUES]->(colleague))
RETURN COUNT(colleague)
~~~

<p>This took on average 7.46 seconds to execute using <a href="https://github.com/mneedham/cypher-query-tuning">cypher-query-tuning</a> so we came up with the following version which took 150 ms on average:</p>



~~~cypher

MATCH (p:Person {name: "me"})-[:COLLEAGUES]->(colleague)
WITH p, COLLECT(colleague) as marksColleagues
MATCH (colleague)-[:MEMBER_OF]->(office {name: "London Office"})<-[:MEMBER_OF]-(p)
WHERE NOT (colleague IN marksColleagues)
RETURN COUNT(colleague)
~~~

<p>With the <a href="http://neo4j.com/blog/neo4j-2-1-graph-etl/">release of Neo4j 2.1</a> we can now make use of Ronja - the experimental Cypher optimiser - which performs much better for certain types of queries. I thought I'd give it a try against this one.</p>


<p>We can use the experimental optimiser by prefixing our query like so:</p>



~~~cypher

cypher 2.1.experimental MATCH (p:Person {name: "me"})-[:MEMBER_OF]->(office {name: "London Office"})<-[:MEMBER_OF]-(colleague)
WHERE NOT (p-[:COLLEAGUES]->(colleague))
RETURN COUNT(colleague)
~~~

<p>If we run that through the query tuner we get the following results:</p>



~~~bash

$ python set-based.py

cypher 2.1.experimental MATCH (p:Person {name: "me"})-[:MEMBER_OF]->(office {name: "London Office"})<-[:MEMBER_OF]-(colleague)
WHERE NOT (p-[:COLLEAGUES]->(colleague))
RETURN COUNT(colleague)
Min 0.719580888748 50% 0.723278999329 95% 0.741609430313 Max 0.743646144867


MATCH (p:Person {name: "me"})-[:COLLEAGUES]->(colleague)
WITH p, COLLECT(colleague) as marksColleagues
MATCH (colleague)-[:MEMBER_OF]->(office {name: "London Office"})<-[:MEMBER_OF]-(p)
WHERE NOT (colleague IN marksColleagues)
RETURN COUNT(colleague)
Min 0.706955909729 50% 0.715770959854 95% 0.731880950928 Max 0.733670949936
~~~

<p>As you can see there's not much in it - our original query now runs as quickly as the optimised one. Ronja #ftw!</p>


<p>Give it a try on your slow queries and see how it gets on. There'll certainly be some cases where it's slower but over time it should be faster for a reasonable chunk of queries.</p>

