<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xml on Mark Needham</title>
    <link>https://mneedham.github.io/blog/tag/xml/</link>
    <description>Recent content in Xml on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Sep 2011 23:42:11 +0000</lastBuildDate>
    
	<atom:link href="https://mneedham.github.io/blog/tag/xml/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Parsing XML from the unix terminal/shell</title>
      <link>https://mneedham.github.io/blog/2011/09/03/parsing-xml-from-the-unix-terminalshell/</link>
      <pubDate>Sat, 03 Sep 2011 23:42:11 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2011/09/03/parsing-xml-from-the-unix-terminalshell/</guid>
      <description>I spent a bit of time today trying to put together a quick script which would allow me to grab story numbers from the commits in our Git repository and then work out which functional areas those stories were in by querying mingle.
Therefore I wanted to make a curl request to the mingle and then pipe that result somewhere and run an xpath expression to get my element.
I didn&amp;rsquo;t want to have to write code in another script file and then reference that file from the shell and in my search to achieve that I came across XMLStarlet on stackoverflow.</description>
    </item>
    
    <item>
      <title>Querying Xml with LINQ - Don&#39;t forget the namespace</title>
      <link>https://mneedham.github.io/blog/2008/08/28/querying-xml-with-linq-dont-forget-the-namespace/</link>
      <pubDate>Thu, 28 Aug 2008 10:15:45 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/08/28/querying-xml-with-linq-dont-forget-the-namespace/</guid>
      <description>I&amp;rsquo;ve been working with a colleague on parsing a Visual Studio project file using LINQ to effectively create a DOM of the file.
The first thing we tried to do was get a list of all the references from the file. It seemed like a fairly easy problem to solve but for some reason nothing was getting returned:
XDocument projectFile = XDocument.Load(projectFilePath.Path); var references = from itemGroupElement in projectFile.Descendants(&amp;quot;ItemGroup&amp;quot;).First().Elements() select itemGroupElement.</description>
    </item>
    
  </channel>
</rss>