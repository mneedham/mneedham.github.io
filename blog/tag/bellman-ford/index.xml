<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bellman-ford on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/bellman-ford/</link>
    <description>Recent content in bellman-ford on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Jan 2013 19:14:08 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/tag/bellman-ford/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bellman-Ford algorithm in Python using vectorisation/numpy</title>
      <link>https://www.markhneedham.com/blog/2013/01/20/bellman-ford-algorithm-in-python-using-vectorisationnumpy/</link>
      <pubDate>Sun, 20 Jan 2013 19:14:08 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/01/20/bellman-ford-algorithm-in-python-using-vectorisationnumpy/</guid>
      <description>I recently wrote about an implementation of the Bellman Ford shortest path algorithm and concluded by saying that it took 27 seconds to calculate the shortest path in the graph for any node.
This seemed a bit slow and while browsing the Coursera forums I came across a suggestion that the algorithm would run much more quickly if we used vectorization with numpy rather than nested for loops.
Vectorisation refers to a problem solving approach where we make use of matrices operations which is what numpy allows us to do.</description>
    </item>
    
  </channel>
</rss>
