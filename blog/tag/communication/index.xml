<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Communication on Mark Needham</title>
    <link>https://mneedham.github.io/blog/tag/communication/</link>
    <description>Recent content in Communication on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jul 2013 16:18:38 +0000</lastBuildDate>
    
	<atom:link href="https://mneedham.github.io/blog/tag/communication/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Product Documentation: The receiver decides if it&#39;s successful</title>
      <link>https://mneedham.github.io/blog/2013/07/28/product-documentation-the-receiver-decides-if-its-successful/</link>
      <pubDate>Sun, 28 Jul 2013 16:18:38 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2013/07/28/product-documentation-the-receiver-decides-if-its-successful/</guid>
      <description>One of the things I remember being taught while growing up is that in an interaction where somebody is something to someone else it&#39;s their responsibility to do so in a way that the receiver can understand.
Even if you think you&#39;ve done a good job of explaining something, the receiver of the communication decides whether or not that&#39;s the case.
I&#39;d always assumed that this advice made most sense in the context of a one to one conversation but recently I&#39;ve realised that it also makes sense when thinking about product documentation.</description>
    </item>
    
    <item>
      <title>The ladder of inference</title>
      <link>https://mneedham.github.io/blog/2011/04/24/the-ladder-of-inference/</link>
      <pubDate>Sun, 24 Apr 2011 14:11:36 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2011/04/24/the-ladder-of-inference/</guid>
      <description>In Discussing the Undiscussable William Noonan describes the ladder of inference, a tool which can be used to help us achieve double loop learning with respect to our interactions with other people.
 Ladder of Inference helps people identify what information or facts are used as the basis for their reasoning process. It also helps people understand how they interpret that information and how they apply their interpretation to the issue or problem at hand.</description>
    </item>
    
    <item>
      <title>TWU: Fishbowl</title>
      <link>https://mneedham.github.io/blog/2011/03/15/twu-fishbowl/</link>
      <pubDate>Tue, 15 Mar 2011 01:11:37 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2011/03/15/twu-fishbowl/</guid>
      <description>As part of a session on ThoughtWorks values at ThoughtWorks Univesity we held a fishbowl to discuss the trade offs we often have to make between the values when confronted with real life situations.
 A fishbowl conversation is a form of dialog that can be used when discussing topics within large groups. Four to five chairs are arranged in an inner circle. This is the fishbowl. The remaining chairs are arranged outside the fishbowl.</description>
    </item>
    
    <item>
      <title>Use of language: Intuitive</title>
      <link>https://mneedham.github.io/blog/2011/03/13/use-of-language-intuitive/</link>
      <pubDate>Sun, 13 Mar 2011 13:39:54 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2011/03/13/use-of-language-intuitive/</guid>
      <description>Sumeet and I were recently discussing the difference between the use of Google Groups for internal communication compared to the Jive platform which we&amp;rsquo;re now moving to and I suggested that I found the former more intuitive to use.
Sumeet suggested that the word &amp;lsquo;intuitive&amp;rsquo; is quite overloaded and later pointed me to an article on the Moodle website which advocates the same thing:
 Intuitive is a word you should avoid in discussions of usability as its meaning is often confused.</description>
    </item>
    
    <item>
      <title>Pecha Kucha: My first attempt</title>
      <link>https://mneedham.github.io/blog/2011/02/26/pecha-kucha-my-first-attempt/</link>
      <pubDate>Sat, 26 Feb 2011 04:39:19 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2011/02/26/pecha-kucha-my-first-attempt/</guid>
      <description>The first time I came across the Pecha Kucha style of presenting was at the XP 2010 conference during the Agile Suitcase session where Pat Kua and some others talked about the practices, principles and values they most favoured.
I&amp;rsquo;ve never done one before but as part of the preparation work for ThoughtWorks University each of the trainers had to prepare one which we then presented to each other yesterday.</description>
    </item>
    
    <item>
      <title>Espoused theory, theory in action &amp; hypocrisy </title>
      <link>https://mneedham.github.io/blog/2011/02/23/espoused-theory-theory-in-action-hypocrisy/</link>
      <pubDate>Wed, 23 Feb 2011 01:34:47 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2011/02/23/espoused-theory-theory-in-action-hypocrisy/</guid>
      <description>Earlier in the year I wrote about Chris Argyris&amp;rsquo; espoused theory and theory in action and one of the interesting aspects to it which I hadn&amp;rsquo;t previously considered is how we treat people when their espoused theory and theory in action don&amp;rsquo;t match.
My tendency is to think that these people are hypocrites but Benjamin Mitchell pointed out in a conversation on twitter that it&amp;rsquo;s not really helpful to think that way:</description>
    </item>
    
    <item>
      <title>Communication: Listening</title>
      <link>https://mneedham.github.io/blog/2011/02/20/communication-listening/</link>
      <pubDate>Sun, 20 Feb 2011 18:43:24 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2011/02/20/communication-listening/</guid>
      <description>I realised a couple of weeks ago while pairing with a colleague that I&amp;rsquo;ve become quite bad at interrupting people while they&amp;rsquo;re speaking.
I did have an inkling that I&amp;rsquo;d let my ability to properly listen to someone drift a bit but I hadn&amp;rsquo;t seen any evidence until my colleague pointed it out.
Somewhat ironically I actually wrote a post about active listening when I first started working at ThoughtWorks in 2006 and reading back over the listening barriers that I listed I realise that there are a few that I tend to break:</description>
    </item>
    
    <item>
      <title>&#39;Why&#39; often unhelpful</title>
      <link>https://mneedham.github.io/blog/2011/02/03/why-often-unhelpful/</link>
      <pubDate>Thu, 03 Feb 2011 18:51:45 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2011/02/03/why-often-unhelpful/</guid>
      <description>Something which I&amp;rsquo;ve noticed recently in particular when interviewing people but also in some other situations is that frequently posing a question which begins with &amp;lsquo;why&amp;rsquo; results in quite a defensive response.
While discussing this with Priyank he pointed out that asking a question in this way can often be construed as a criticism of the idea being questioned.
Admittedly it is often the case that I&amp;rsquo;m questioning something which has been done differently than what I might have done but I&amp;rsquo;m still curious as to the reasoning behind it.</description>
    </item>
    
    <item>
      <title>While in India: Osmotic communication</title>
      <link>https://mneedham.github.io/blog/2011/01/24/while-in-india-osmotic-communication/</link>
      <pubDate>Mon, 24 Jan 2011 03:33:39 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2011/01/24/while-in-india-osmotic-communication/</guid>
      <description>One of the things that has been puzzling me during my time in India is the amount of time that is spent in meetings pushing information to people rather than them pulling it.
In previous projects that I&amp;rsquo;ve worked on a lot of the knowledge was moved between around as a result of osmotic communication
 Osmotic communication means that information flows into the background hearing of members of the team, so that they pick up relevant information as though by osmosis.</description>
    </item>
    
    <item>
      <title>Team Communication: Learning models</title>
      <link>https://mneedham.github.io/blog/2010/11/27/team-communication-learning-models/</link>
      <pubDate>Sat, 27 Nov 2010 10:50:27 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/11/27/team-communication-learning-models/</guid>
      <description>One of the problems I&amp;rsquo;ve noticed in several of the &amp;lsquo;agile&amp;rsquo; communication mechanisms (such as the standup or dev huddle) that we typically use on teams is that they focus almost entirely on verbal communication which only covers one of our learning styles - the auditory learning style.
The Learning Models The VAK learning style model describes a simple model covering the different learning styles that people have:
 Visual - seeing and reading.</description>
    </item>
    
    <item>
      <title>Communication: Logging levels</title>
      <link>https://mneedham.github.io/blog/2010/10/25/communication-logging-levels/</link>
      <pubDate>Mon, 25 Oct 2010 18:49:23 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/10/25/communication-logging-levels/</guid>
      <description>I think one of the most important skills to perfect when communicating with other people is to understand the level of detail that we need to be speaking at, something my colleague Ashwin Raghav refers to as our logging level.
We log various things in our code at varying logging levels ranging from &amp;lsquo;error&amp;rsquo; through &amp;lsquo;debug&amp;rsquo; to &amp;lsquo;warn&amp;rsquo;, and each of these is useful for understanding what our code is doing.</description>
    </item>
    
    <item>
      <title>Builders hanging off class vs Builders in same namespace</title>
      <link>https://mneedham.github.io/blog/2009/08/15/builders-hanging-off-class-vs-builders-in-same-namespace/</link>
      <pubDate>Sat, 15 Aug 2009 10:53:49 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/08/15/builders-hanging-off-class-vs-builders-in-same-namespace/</guid>
      <description>I wrote a couple of months ago about an approach we&amp;rsquo;re using to help people find test data builders in our code base by hanging those builders off a class called &amp;lsquo;GetBuilderFor&amp;rsquo; and I think it&amp;rsquo;s worked reasonably well.
However, a couple of weeks ago my colleague Lu Ning suggested another way to achieve our goal of allowing people to find the builders easily.
The approach he suggested is to put all of the builders in the same namespace, for example &amp;lsquo;Builders&amp;rsquo;, so that if someone wants to find out if a builder already exists they can just type &amp;lsquo;Builders.</description>
    </item>
    
    <item>
      <title>Coding: Putting code where people can find it</title>
      <link>https://mneedham.github.io/blog/2009/06/02/coding-putting-code-where-people-can-find-it/</link>
      <pubDate>Tue, 02 Jun 2009 23:35:31 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/06/02/coding-putting-code-where-people-can-find-it/</guid>
      <description>I&amp;rsquo;ve previously written about the builder pattern which I think is a very useful pattern for helping to setup data.
It allows us to setup custom data when we care about a specific piece of data in a test or just use default values if we&amp;rsquo;re not bothered about a piece of data but need it to be present for our test to execute successfully.
One problem that I noticed was that despite the fact we had builders for quite a number of the classes we were using in our tests, when new tests were being added test data was still being setup by directly using the classes instead of making use of the builders which had already done the hard work for you.</description>
    </item>
    
    <item>
      <title>Adding humour to Tester/Developer collaboration</title>
      <link>https://mneedham.github.io/blog/2009/05/04/adding-humour-to-testerdeveloper-collaboration/</link>
      <pubDate>Mon, 04 May 2009 23:43:03 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/05/04/adding-humour-to-testerdeveloper-collaboration/</guid>
      <description>Pat Kua has a recent post where he talks about the language used between testers and developers when talking about defects that testers come across when testing some functionality and while I would agree with him that the language used is important, I&amp;rsquo;ve always found that injecting some humour into the situation takes the edge off.
As Dahlia points out I think this is probably only possible if there is good rapport between the developers and testers on the team so perhaps this has been the case for the teams I&amp;rsquo;ve worked on.</description>
    </item>
    
    <item>
      <title>Team Productivity vs Individual Productivity</title>
      <link>https://mneedham.github.io/blog/2008/09/16/team-productivity-vs-individual-productivity/</link>
      <pubDate>Tue, 16 Sep 2008 16:41:43 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/09/16/team-productivity-vs-individual-productivity/</guid>
      <description>I&amp;rsquo;ve been reading Neal Ford&amp;rsquo;s The Productive Programmer (my review) which is a book all about improving your productivity as an individual developer.
It got me thinking that there are also ways that we can make teams more productive so that they are actually teams and not just a group of individuals who happen to work with each other.
I&amp;rsquo;ve had the opportunity of working under some great Tech Leads who have helped create an environment where teams can perform to their maximum.</description>
    </item>
    
    <item>
      <title>The Information Wall</title>
      <link>https://mneedham.github.io/blog/2008/08/20/the-information-wall/</link>
      <pubDate>Wed, 20 Aug 2008 00:22:27 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/08/20/the-information-wall/</guid>
      <description>Sometimes the simplest things can provide the greatest value to project teams. We often look for a technical solution to problems where something simpler would achieve the same aim.
The Information Wall is as its name may suggest a place where you can put information that people in the team need to know but which they have not (yet) committed to memory.
Examples of things that you could put on an information wall could be:  Wiki url SVN repository url Remote machine names &amp;amp; credentials Build server url Useful phone numbers Anything else that&amp;rsquo;s needed!</description>
    </item>
    
    <item>
      <title>Feedback: Positive Reinforcement/Change yourself first</title>
      <link>https://mneedham.github.io/blog/2008/02/12/feedback-positive-reinforcementchange-yourself-first/</link>
      <pubDate>Tue, 12 Feb 2008 00:01:58 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/02/12/feedback-positive-reinforcementchange-yourself-first/</guid>
      <description>One of the more interesting concepts used on the NLP course that I did last year was the idea of only giving positive feedback to people.
The thinking behind the theory (which I think comes from Robert Dilts, one of the early thinkers behind NLP) is that people know what they are doing wrong and already beat themselves up about it; therefore there is no point you mentioning it as well.</description>
    </item>
    
    <item>
      <title>Active listening</title>
      <link>https://mneedham.github.io/blog/2006/09/03/active-listening/</link>
      <pubDate>Sun, 03 Sep 2006 15:39:06 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2006/09/03/active-listening/</guid>
      <description>One of the first unusual (to me) things that I noticed from the trainers at ThoughtWorks University was that when they were listening to participants they would often ask questions and re-frame the participants&amp;rsquo; comments. Intrigued and impressed by this I spoke to one of the trainers and was told that they were engaging in &amp;lsquo;active listening&amp;rsquo;. Wikipedia defines the term as follows:   Active listening is an intent &amp;ldquo;listening for meaning&amp;rdquo; in which the listener checks with the speaker to see that a statement has been correctly heard and understood.</description>
    </item>
    
    <item>
      <title>Giving effective feedback</title>
      <link>https://mneedham.github.io/blog/2006/09/02/giving-effective-feedback/</link>
      <pubDate>Sat, 02 Sep 2006 03:07:45 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2006/09/02/giving-effective-feedback/</guid>
      <description>One of the most interesting things I have discovered since starting at ThoughtWorks earlier this month is the emphasis that is placed on giving feedback.
The first lesson we were taught about giving feedback was that it could be one of two types. Either it should Strengthen Confidence or Increase Effectiveness.
In Layman&amp;rsquo;s term that means that if you want to make a positive comment about somebody&amp;rsquo;s contribution then you should make reference to something specific that you believe they have done well so that they can continue doing it.</description>
    </item>
    
  </channel>
</rss>