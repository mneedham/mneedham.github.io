<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>coding on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/coding/</link>
    <description>Recent content in coding on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Jun 2015 17:23:10 +0000</lastBuildDate>
    
	<atom:link href="https://www.markhneedham.com/blog/tag/coding/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Coding: Explore and retreat</title>
      <link>https://www.markhneedham.com/blog/2015/06/17/coding-explore-and-retreat/</link>
      <pubDate>Wed, 17 Jun 2015 17:23:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/06/17/coding-explore-and-retreat/</guid>
      <description>When refactoring code or looking for the best way to integrate a new piece of functionality I generally favour a small steps/incremental approach but recent experiences have led me to believe that this isn&amp;#8217;t always the quickest approach.
 Sometimes it seems to make more sense to go on little discovery missions in the code, make some bigger steps and then if necessary retreat and revert our changes and apply the lessons learnt on our next discovery mission.</description>
    </item>
    
    <item>
      <title>Coding: Visualising a bitmap</title>
      <link>https://www.markhneedham.com/blog/2015/05/03/coding-visualising-a-bitmap/</link>
      <pubDate>Sun, 03 May 2015 00:19:51 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/05/03/coding-visualising-a-bitmap/</guid>
      <description>Over the last month or so I&amp;#8217;ve spent some time each day reading a new part of the Neo4j code base to get more familiar with it, and one of my favourite classes is the Bits class which does all things low level on the wire and to disk.
 In particular I like its toString method which returns a binary representation of the values that we&amp;#8217;re storing in bytes, ints and longs.</description>
    </item>
    
    <item>
      <title>Coding: Hack then revert</title>
      <link>https://www.markhneedham.com/blog/2013/08/19/coding-hack-then-revert/</link>
      <pubDate>Mon, 19 Aug 2013 23:13:04 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/08/19/coding-hack-then-revert/</guid>
      <description>For a long while my default approach when I came across a new code base that I wanted to change was to read all the code and try and understand how it all fitted together by sketching out flow of control diagrams.
 Only after I&amp;#8217;d done that would I start planning how I could make my changes.
 This works reasonably well but it&amp;#8217;s quite time consuming and a couple of years ago a former colleague (I can&amp;#8217;t remember who!</description>
    </item>
    
    <item>
      <title>Testing XML generation with vimdiff</title>
      <link>https://www.markhneedham.com/blog/2012/09/30/testing-xml-generation-with-vimdiff/</link>
      <pubDate>Sun, 30 Sep 2012 15:48:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/09/30/testing-xml-generation-with-vimdiff/</guid>
      <description>A couple of weeks ago I spent a bit of time writing a Ruby DSL to automate the setup of load balancers, firewall and NAT rules through the VCloud API.
 The VCloud API deals primarily in XML so the DSL is just a thin layer which creates the appropriate mark up.
 When we started out we configured everything manually through the web console and then exported the XML so the first thing that the DSL needed to do was create XML that matched what we already had.</description>
    </item>
    
    <item>
      <title>Performance: Caching per request</title>
      <link>https://www.markhneedham.com/blog/2012/04/30/performance-caching-per-request/</link>
      <pubDate>Mon, 30 Apr 2012 21:45:50 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/04/30/performance-caching-per-request/</guid>
      <description>A couple of years ago I wrote a post describing an approach my then colleague Christian Blunden used to help improve the performance of an application where you try to do expensive things less or find another way to do them.
 On the application I&amp;#8217;m currently working on we load reference data from an Oracle database into memory based on configurations provided by the user.
 There are multiple configurations and then multiple ways that those configurations can be priced so we have two nested for loops in which we load data and then perform calculations on it.</description>
    </item>
    
    <item>
      <title>Coding: Is there a name for everything?</title>
      <link>https://www.markhneedham.com/blog/2012/04/23/coding-is-there-a-name-for-everything/</link>
      <pubDate>Mon, 23 Apr 2012 00:20:57 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/04/23/coding-is-there-a-name-for-everything/</guid>
      <description>A month ago I wrote a post describing an approach my team has been taking to avoid premature abstractions whereby we leave code inline until we know enough about the domain to pull out meaningful classes or methods.
 Since I wrote that post we&amp;#8217;ve come across a couple of examples where there doesn&amp;#8217;t seem to be a name to describe a data structure.
 We are building a pricing engine where the input is a set of configurations and the output is a set of pricing rows associated with each configuration.</description>
    </item>
    
    <item>
      <title>Coding: Packaging by vertical slice</title>
      <link>https://www.markhneedham.com/blog/2012/02/20/coding-packaging-by-vertical-slice/</link>
      <pubDate>Mon, 20 Feb 2012 21:54:55 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/02/20/coding-packaging-by-vertical-slice/</guid>
      <description>On most of the applications I&amp;#8217;ve worked on we&amp;#8217;ve tended to organise/package classes by the function that they have or the layer that they fit in.
 A typical package structure might therefore end up looking like this:
   com.awesome.project
  common
  StringUtils
     controllers
  LocationController
  PricingController
     domain
  Address
  Cost</description>
    </item>
    
    <item>
      <title>Getting stuck and agile software teams</title>
      <link>https://www.markhneedham.com/blog/2011/10/20/getting-stuck-and-agile-software-teams/</link>
      <pubDate>Thu, 20 Oct 2011 22:09:31 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2011/10/20/getting-stuck-and-agile-software-teams/</guid>
      <description>I came across an interesting set of posts by Jeff Wofford where he talks about programmers getting stuck and it made me think that, despite its faults, agile software development does have some useful practices for stopping us getting stuck for too long.
 Many of the examples that Jeff describes sound like yak shaving to me which is part of what makes programming fun but doesn&amp;#8217;t always correlate to adding value to the product that you&amp;#8217;re building.</description>
    </item>
    
    <item>
      <title>Coding: The value in finding the generic abstraction</title>
      <link>https://www.markhneedham.com/blog/2011/08/31/coding-the-value-in-finding-the-generic-abstraction/</link>
      <pubDate>Wed, 31 Aug 2011 06:49:48 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2011/08/31/coding-the-value-in-finding-the-generic-abstraction/</guid>
      <description>I recently worked on adding the meta data section for each of the different document types that it serves which involved showing 15-20 pieces of data for each document type.
 There are around 4-5 document types and although the meta data for each document type is similar it&amp;#8217;s not exactly the same!
 When we got to the second document type it wasn&amp;#8217;t obvious where the abstraction was so we went for the copy/paste approach to see if it would be any easier to see the commonality if we put the two templates side by side.</description>
    </item>
    
    <item>
      <title>Coding: Light weight wrapper vs serialisation/deserialisation</title>
      <link>https://www.markhneedham.com/blog/2011/06/26/coding-light-weight-wrapper-vs-serialisationdeserialisation/</link>
      <pubDate>Sun, 26 Jun 2011 13:58:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2011/06/26/coding-light-weight-wrapper-vs-serialisationdeserialisation/</guid>
      <description>As I&amp;#8217;ve mentioned before, we&amp;#8217;re making use of a MarkLogic database on the project I&amp;#8217;m working on which means that we&amp;#8217;re getting quite big XML data structures coming into our application whenever we execute a query.
 The normal way that I&amp;#8217;ve seen for dealing with external systems would be to create an anti corruption layer where we initialise objects in our system with the required data from the external system.</description>
    </item>
    
    <item>
      <title>Coding: Reflection vs Action mode</title>
      <link>https://www.markhneedham.com/blog/2011/03/06/coding-reflection-vs-action-mode/</link>
      <pubDate>Sun, 06 Mar 2011 04:19:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2011/03/06/coding-reflection-vs-action-mode/</guid>
      <description>It recently struck me while preparing some ThoughtWorks University sessions that there appear to be two modes that I spend my time switching between while coding:
   Action mode - we&amp;#8217;re focused on getting things done, making things happen
  Reflective mode - we&amp;#8217;re a bit more detached and looking at things from a higher level
   I spent the majority of 2008 and 2009 in reflective mode on the systems I was working on which can be seen by scanning through a lot of the blog posts that I wrote during that time.</description>
    </item>
    
    <item>
      <title>Coding: Spike Driven Development</title>
      <link>https://www.markhneedham.com/blog/2011/01/19/coding-spike-driven-development/</link>
      <pubDate>Wed, 19 Jan 2011 17:46:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2011/01/19/coding-spike-driven-development/</guid>
      <description>While reading Dan North&amp;#8217;s second post about software craftsmanship I was able to resonate quite a lot with a point he made in the &#39;On value&#39; section:
  I&amp;#8217;m not going to mandate test-driving anything (which is a huge about-face from what I was saying a year ago), unless it will help. Copy-and-paste is fine too. (Before you go all shouty at me again, hold off until I blog about the benefits of copy-and-paste, as it appears in a couple of patterns I&amp;#8217;m calling Spike and Stabilize and Ginger Cake.</description>
    </item>
    
    <item>
      <title>Coding: Context independent code</title>
      <link>https://www.markhneedham.com/blog/2010/10/18/coding-context-independent-code/</link>
      <pubDate>Mon, 18 Oct 2010 15:52:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/18/coding-context-independent-code/</guid>
      <description>I&amp;#8217;ve been flicking through Growing Object Oriented Software Guided By Tests again and in Chapter 6 on Object Oriented Style I came across the part of the chapter which talks about writing context independent code which reminded me of some code I&amp;#8217;ve worked on recently.
 The authors suggest the following:
  A system is easier to change if its objects are context-independent; that is, if each object has no built-in knowledge about the system in which it executes</description>
    </item>
    
    <item>
      <title>Coding: Write the first one ugly</title>
      <link>https://www.markhneedham.com/blog/2010/10/03/coding-write-the-first-one-ugly/</link>
      <pubDate>Sun, 03 Oct 2010 05:03:44 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/03/coding-write-the-first-one-ugly/</guid>
      <description>I just came across a really cool blog post written a couple of months ago by Evan Light where he proposes that we &#39;http://evan.tiggerpalace.com/articles/2010/07/26/write-the-first-one-ugly/[write the first one ugly]&#39;:
  To overcome paralysis, for small chunks of code, it is often better to just write whatever comes to mind&amp;#8201;&amp;#8212;&amp;#8201;no matter how awful it may seem at the time. Give yourself permission to let the first version suck.
   I think this is a really good piece of advice and it seems along the same lines as a suggestion from Uncle Bob in Clean Code:</description>
    </item>
    
    <item>
      <title>Coding: Mutating parameters</title>
      <link>https://www.markhneedham.com/blog/2010/08/26/coding-mutating-parameters/</link>
      <pubDate>Thu, 26 Aug 2010 07:47:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/26/coding-mutating-parameters/</guid>
      <description>One of the earliest rules of thumb that I was taught by my colleagues is the idea that we should try and avoid mutating/changing values passed into a function as a parameter.
 The underlying reason as I understand it is that if you&amp;#8217;re just skimming through the code you wouldn&amp;#8217;t necessarily expect the values of incoming parameters to be different depending where in the function they&amp;#8217;re used.
 I think the most dangerous example of this is when we completely change the value of a parameter, like so:</description>
    </item>
    
    <item>
      <title>Coding: Using a library/rolling your own</title>
      <link>https://www.markhneedham.com/blog/2010/08/10/coding-using-a-libraryrolling-your-own/</link>
      <pubDate>Tue, 10 Aug 2010 17:25:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/10/coding-using-a-libraryrolling-your-own/</guid>
      <description>One of the things that I&amp;#8217;ve noticed as we&amp;#8217;ve started writing more client side code is that I&amp;#8217;m much more likely to look for a library which solves a problem than I would be with server side code.
 A requirement that we&amp;#8217;ve had on at least the last 3 or 4 projects I&amp;#8217;ve worked on is to do client side validation on the values entered into a form by the user.</description>
    </item>
    
    <item>
      <title>Coding: Tools/Techniques influence the way we work</title>
      <link>https://www.markhneedham.com/blog/2010/08/07/coding-toolstechniques-influence-the-way-we-work/</link>
      <pubDate>Sat, 07 Aug 2010 13:14:05 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/07/coding-toolstechniques-influence-the-way-we-work/</guid>
      <description>Dave Astels mentions in his BDD paper that the way we use language influences the way that we write code, quoting the Sapir-Whorf hypothesis
  &amp;#8220;there is a systematic relationship between the grammatical categories of the language a person speaks and how that person both understands the world and behaves in it.&amp;#8221;
   In a similar way, something which I didn&amp;#8217;t fully appreciate until the last project I worked on is how much the tools and techniques that you use can influence the way that you work.</description>
    </item>
    
    <item>
      <title>Technical Debt around release time</title>
      <link>https://www.markhneedham.com/blog/2010/07/25/technical-debt-around-release-time/</link>
      <pubDate>Sun, 25 Jul 2010 14:21:34 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/25/technical-debt-around-release-time/</guid>
      <description>One of the requirements that the ThoughtWorks University grads have been given on the internal project they&amp;#8217;re working on is to ensure that they leave the code base in a good state so that the next batch can potentially continue from where they left off.
 The application will be deployed on Thursday and this means that a lot of the time this week will be spent refactoring certain areas of the code base rather than only adding new functionality.</description>
    </item>
    
    <item>
      <title>Coding: Having the design influenced by the ORM</title>
      <link>https://www.markhneedham.com/blog/2010/07/02/coding-having-the-design-influenced-by-the-orm/</link>
      <pubDate>Fri, 02 Jul 2010 16:56:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/02/coding-having-the-design-influenced-by-the-orm/</guid>
      <description>I wrote a few weeks ago about incremental refactoring using a static factory method where we ended up with the following code:
 public class LookUpKey { private readonly string param1; private readonly string param2; private readonly string param3; public LookUpKey(string param1, string param2, string param3) { this.param1 = param1; this.param2 = param2; this.param3 = param3; } public static LookUpKey CreateFrom(UserData userData) { var param1 = GetParam1From(userData); var param2 = GetParam2From(userData); var param3 = GetParam3From(userData); return new LookUpKey(param1, param2, param3); } public string Param1Key { { get { return param1; } } } .</description>
    </item>
    
    <item>
      <title>Coding: Controlled Technical Debt</title>
      <link>https://www.markhneedham.com/blog/2010/06/20/coding-controlled-technical-debt/</link>
      <pubDate>Sun, 20 Jun 2010 22:37:32 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/20/coding-controlled-technical-debt/</guid>
      <description>A couple of months ago I wrote about an approach to stories that Christian has been encouraging on our project whereby we slim stories down to allow us to deliver the core functionality of the application as quickly as possible.
 In our case we had a requirement to setup a range of different parameters used to lookup reference data used in the different calculations that we have in our application.</description>
    </item>
    
    <item>
      <title>Incremental Refactoring: Create factory method</title>
      <link>https://www.markhneedham.com/blog/2010/06/17/incremental-refactoring-create-factory-method/</link>
      <pubDate>Thu, 17 Jun 2010 00:43:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/17/incremental-refactoring-create-factory-method/</guid>
      <description>Dermot and I spent a bit of time today refactoring some code where the logic had ended up in the wrong place.
 The code originally looked a bit like this:
 public class LookupService { public LookUp Find(UserData userData) { var param1 = GetParam1From(userData); var param2 = GetParam2From(userData); var param3 = GetParam3From(userData); var lookupKey = new LookUpKey(param1, param2, param3); return lookupRepository.Find(lookupKey); } }   public class LookUpKey { private readonly string param1; private readonly string param2; private readonly string param3; public LookUpKey(string param1, string param2, string param3) { this.</description>
    </item>
    
    <item>
      <title>The Refactoring Dilemma</title>
      <link>https://www.markhneedham.com/blog/2010/06/13/the-refactoring-dilemma/</link>
      <pubDate>Sun, 13 Jun 2010 13:37:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/13/the-refactoring-dilemma/</guid>
      <description>On several of the projects that I&amp;#8217;ve worked on over the last couple of years we&amp;#8217;ve seen the following situation evolve:
   The team starts coding the application.
  At some stage there is a breakthrough in understanding and a chance to really improve the code.
  However the deadline is tight and we wouldn&amp;#8217;t see a return within the time left if we refactored the code now</description>
    </item>
    
    <item>
      <title>Coding: Paying attention</title>
      <link>https://www.markhneedham.com/blog/2010/05/09/coding-paying-attention/</link>
      <pubDate>Sun, 09 May 2010 13:04:48 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/09/coding-paying-attention/</guid>
      <description>Jeremy Miller tweeted earlier in the week about the dangers of using an auto mocking container and how it can encourage sloppy design:
  That whole &#34;Auto Mocking Containers encourage sloppy design&#34; meme that I blew off last week? Seeing an example in our code.
   I haven&amp;#8217;t used an auto mocking container but it seems to me that although that type of tool might be useful for reducing the amount of code we have to write in our tests it also hides the actual problem that we have - an object has too many dependencies.</description>
    </item>
    
    <item>
      <title>Consistency in the code base and incremental refactoring</title>
      <link>https://www.markhneedham.com/blog/2010/05/05/consistency-in-the-code-base-and-incremental-refactoring/</link>
      <pubDate>Wed, 05 May 2010 22:34:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/05/consistency-in-the-code-base-and-incremental-refactoring/</guid>
      <description>I wrote a post a while ago about keeping consistency in the code base where I covered some of the reasons that you might want to rewrite parts of a code base and the potential impact of those changes but an interesting side to this discussion which I didn&amp;#8217;t cover that much but which seems to play a big role is the role of incremental refactoring.
 In our code base we recently realised that the naming of the fields in some parts of a form don&amp;#8217;t really make sense and I wanted to start naming new fields with the new naming style and then go back and change the existing ones incrementally when it was a good time to do so.</description>
    </item>
    
    <item>
      <title>Coding: Make the mutation obvious</title>
      <link>https://www.markhneedham.com/blog/2010/05/04/coding-make-the-mutation-obvious/</link>
      <pubDate>Tue, 04 May 2010 18:32:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/04/coding-make-the-mutation-obvious/</guid>
      <description>Although I&amp;#8217;m generally quite opposed to coding approaches whereby we mutate objects, sometimes the way a framework is designed seems to make this a preferable option.
 We came across a situation like this last week when we wanted to hydrate an object with data coming back from the browser.
 The signature of the action in question looked like this:
 public class SomeController { public ActionResult SomeAction(string id, UserData userData) { }   We were able to automatically bind most of the values onto &#39;UserData&#39; except for the &#39;id&#39; which was coming in from the URL.</description>
    </item>
    
    <item>
      <title>Coding: The Kestrel</title>
      <link>https://www.markhneedham.com/blog/2010/05/03/coding-the-kestrel/</link>
      <pubDate>Mon, 03 May 2010 00:28:04 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/03/coding-the-kestrel/</guid>
      <description>Reg Braithwaite has a cool series of posts where he covers the different combinators from Raymond Smullyan&amp;#8217;s &#39;To Mock a Mockingbird&#39; book and one of my favourites is the &#39;Kestrel&#39; or &#39;K Combinator&#39; which describes a function that returns a constant function.
 It&amp;#8217;s described like so:
 Kxy = x   The Kestrel function would take in 2 arguments and return the value of the first one. The second argument would probably be a function that takes in the first argument and then performs some side effects with that value.</description>
    </item>
    
    <item>
      <title>Coding: Generalising too early</title>
      <link>https://www.markhneedham.com/blog/2010/04/30/coding-generalising-too-early/</link>
      <pubDate>Fri, 30 Apr 2010 07:12:26 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/30/coding-generalising-too-early/</guid>
      <description>I&amp;#8217;ve previously written about the value of adding duplication to code before removing it and we had an interesting situation this week where we failed to do that and ended up generalising a piece of code too early to the point where it actually didn&amp;#8217;t solve the problem anymore.
 The problem we were trying to solve was around the validation of some dependent fields and to start with we had this requirement:</description>
    </item>
    
    <item>
      <title>Listening to your tests: An example</title>
      <link>https://www.markhneedham.com/blog/2010/04/27/listening-to-your-tests-an-example/</link>
      <pubDate>Tue, 27 Apr 2010 22:34:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/27/listening-to-your-tests-an-example/</guid>
      <description>I was recently reading a blog post by Esko Luontola where he talks about the direct and indirect effects of TDD and one particularly interesting point he makes is that driving our code with a TDD approach helps to amplify the problems caused by writing bad code.
  if the code is not maintainable, it will be hard to change. Also if the code is not testable, it will be hard to write tests for it.</description>
    </item>
    
    <item>
      <title>Coding: Another outside in example</title>
      <link>https://www.markhneedham.com/blog/2010/04/18/coding-another-outside-in-example/</link>
      <pubDate>Sun, 18 Apr 2010 22:46:46 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/18/coding-another-outside-in-example/</guid>
      <description>I&amp;#8217;ve written before about my thoughts on outside in development and we came across another example last week where we made our life difficult by not initially following this approach.
 The rough design of what we were working on looked like this:
   My pair and I were working on the code to do the calculations and we deliberately chose not to drive the functionality from the UI because the other pair were reworking all our validation code and we didn&amp;#8217;t want to step on each others toes.</description>
    </item>
    
    <item>
      <title>Coding: Maybe vs Null Object patterns</title>
      <link>https://www.markhneedham.com/blog/2010/04/10/coding-maybe-vs-null-object-patterns/</link>
      <pubDate>Sat, 10 Apr 2010 11:21:30 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/10/coding-maybe-vs-null-object-patterns/</guid>
      <description>On the project I&amp;#8217;m currently working on my colleague Christian Blunden has introduced a version of the Maybe type into the code base, a concept that originally derives from the world of functional programming.
 The code looks a bit like this:
 public interface Maybe&amp;lt;T&amp;gt; { bool HasValue(); T Value(); }   public class Some&amp;lt;T&amp;gt; : Maybe&amp;lt;T&amp;gt; { private readonly T t; public Some(T t) { this.t = t; } public bool HasValue() { return true; } public T Value() { return t; } }   public class None&amp;lt;T&amp;gt; : Maybe&amp;lt;T&amp;gt; { public bool HasValue() { return false; } public T Value() { throw new NotImplementedException(); } }   We would then use it in the code like this:</description>
    </item>
    
    <item>
      <title>Coding: FindOrCreateUser and similar methods</title>
      <link>https://www.markhneedham.com/blog/2010/04/09/coding-findorcreateuser-and-similar-methods/</link>
      <pubDate>Fri, 09 Apr 2010 07:09:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/09/coding-findorcreateuser-and-similar-methods/</guid>
      <description>One of the general guidelines that I like to follow when writing methods is trying to ensure that it&amp;#8217;s only doing one thing but on several recent projects I&amp;#8217;ve noticed us breaking this guideline and it feels like the right thing to do.
 The method in question typically takes in some user details, looks up that user in some data store and then returning it if there is an existing user and creating a new user if not.</description>
    </item>
    
    <item>
      <title>Coding: Shared libraries</title>
      <link>https://www.markhneedham.com/blog/2010/02/26/coding-shared-libraries/</link>
      <pubDate>Fri, 26 Feb 2010 00:36:50 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/26/coding-shared-libraries/</guid>
      <description>On a few projects that I&amp;#8217;ve worked on one of the things that we&amp;#8217;ve done is create a shared library of objects which can be used across several different projects and while at the time it seemed like a good idea, in hindsight I&amp;#8217;m not sure if it&amp;#8217;s an entirely successful strategy.
 I&amp;#8217;m quite a fan of not recreating effort which is generally the goal when trying to pull out common code and within one team this seems to be a good approach the majority of the time.</description>
    </item>
    
    <item>
      <title>Refactoring: Small steps to pull out responsibilities</title>
      <link>https://www.markhneedham.com/blog/2010/02/24/refactoring-small-steps-to-pull-out-responsibilities/</link>
      <pubDate>Wed, 24 Feb 2010 00:45:38 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/24/refactoring-small-steps-to-pull-out-responsibilities/</guid>
      <description>I wrote previously about how I&amp;#8217;ve been using effect sketches to identify responsibilities in objects so that I can pull them out into other objects and once I&amp;#8217;ve done this I often find that I can&amp;#8217;t see a small next step to take.
 At this stage in the past I&amp;#8217;ve often then stopped and left the refactoring until I have more time to complete it but this hasn&amp;#8217;t really worked and a lot of the time I end up only seeing the code change in my mind and not in the actual code.</description>
    </item>
    
    <item>
      <title>Coding: Effect sketches and the Mikado method</title>
      <link>https://www.markhneedham.com/blog/2010/02/23/coding-effect-sketches-and-the-mikado-method/</link>
      <pubDate>Tue, 23 Feb 2010 00:29:34 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/23/coding-effect-sketches-and-the-mikado-method/</guid>
      <description>I&amp;#8217;ve written previously about how useful I find effect sketches for helping me to understand how an object&amp;#8217;s methods and fields fit together and while drawing one a couple of weeks ago I noticed that it&amp;#8217;s actually quite useful for seeing which parts of the code will be the easiest to change.
 I was fairly sure one of the object&amp;#8217;s in our code base was doing too many things due to the fact that it had a lot of dependencies.</description>
    </item>
    
    <item>
      <title>Rules of Thumb: Don&#39;t use the session</title>
      <link>https://www.markhneedham.com/blog/2010/02/16/rules-of-thumb-dont-use-the-session/</link>
      <pubDate>Tue, 16 Feb 2010 23:19:09 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/16/rules-of-thumb-dont-use-the-session/</guid>
      <description>A while ago I wrote about some rules of thumb that I&amp;#8217;d been taught by my colleagues with respect to software development and I was reminded of one of them - don&amp;#8217;t put anything in the session - during a presentation my colleague Luca Grulla gave at our client on scaling applications by making use of the infrastructure of the web.
 The problem with putting state in the session is that it means that requests from a specific user have to be tied to a specific server i.</description>
    </item>
    
    <item>
      <title>Willed vs Forced designs</title>
      <link>https://www.markhneedham.com/blog/2010/02/08/willed-vs-forced-designs/</link>
      <pubDate>Mon, 08 Feb 2010 22:48:05 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/08/willed-vs-forced-designs/</guid>
      <description>I came across an interesting post that Roy Osherove wrote a few months ago where he talks about &#39;http://weblogs.asp.net/rosherove/archive/2009/11/12/test-driven-design-willed-vs-forced-designs.aspx[Willed vs Forced Designs]&#39; and some common arguments that people give for not using TypeMock on their projects.
 I&amp;#8217;m not really a fan of the TypeMock approach to dealing with dependencies in tests because it seems to avoid the fact that the code is probably bad in the first place if we have to resort to using some of the approaches it encourages.</description>
    </item>
    
    <item>
      <title>Coding: Wrapping/not wrapping 3rd party libraries and DSLs</title>
      <link>https://www.markhneedham.com/blog/2010/02/02/coding-wrappingnot-wrapping-3rd-party-libraries-and-dsls/</link>
      <pubDate>Tue, 02 Feb 2010 23:54:21 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/02/coding-wrappingnot-wrapping-3rd-party-libraries-and-dsls/</guid>
      <description>One of the things which Nat Pryce and Steve Freeman suggest in their book Growing Object Oriented Software guided by tests is the idea of wrapping any third party libraries that we use in our own code.
 We came across a situation where we did this and then later on I made the mistake of not following this advice.
 To start with my colleague David had created a DSL which kept all the calls to Selenium nicely wrapped inside one class.</description>
    </item>
    
    <item>
      <title>Coding: The collecting parameter pattern</title>
      <link>https://www.markhneedham.com/blog/2010/01/23/coding-the-collecting-parameter-pattern/</link>
      <pubDate>Sat, 23 Jan 2010 14:45:59 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/23/coding-the-collecting-parameter-pattern/</guid>
      <description>The collecting parameter pattern is one of my favourite ones when used well but I&amp;#8217;ve noticed recently that it can lead to quit misleading APIs as well.
 One way that we used it quite effectively was when getting objects to render themselves to a ViewData container which was then used to populate the view.
 public class Micro { private string micro; public Micro(string micro) { this.micro = micro; } public void renderTo(ViewData viewData) { viewData.</description>
    </item>
    
    <item>
      <title>Coding: Missing abstractions and LINQ</title>
      <link>https://www.markhneedham.com/blog/2010/01/17/coding-missing-abstractions-and-linq/</link>
      <pubDate>Sun, 17 Jan 2010 19:09:35 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/17/coding-missing-abstractions-and-linq/</guid>
      <description>Something which I&amp;#8217;ve noticed quite a lot on the projects that I&amp;#8217;ve worked on since C# 3.0 was released is that lists seem to be passed around code much more and have LINQ style filters and transformations performed on them while failing to describe the underlying abstraction explcitly in the code.
 As a result of this we quite frequently we end up with this code being in multiple places and since it&amp;#8217;s usually not very much code the repetition goes unnoticed more than other types of duplication might do.</description>
    </item>
    
    <item>
      <title>C#: A functional solution to a modeling problem</title>
      <link>https://www.markhneedham.com/blog/2010/01/15/c-a-functional-solutional-to-a-modeling-problem/</link>
      <pubDate>Fri, 15 Jan 2010 23:23:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/15/c-a-functional-solutional-to-a-modeling-problem/</guid>
      <description>We were working on some refactoring today where we pushed some logic back from a service and onto a domain object and I noticed that we were able to use functions quite effectively to reduce the amount of code we had to write while still describing differences in behaviour.
 The class we want to write needs to take in two integers which represent two different situations related to Foo. Depending upon whether we have &#39;Situation 1&#39;, &#39;Situation 2&#39; or both situations we will display the results slightly differently.</description>
    </item>
    
    <item>
      <title>C# Test Builder Pattern: My current thinking</title>
      <link>https://www.markhneedham.com/blog/2010/01/13/c-test-builder-pattern-my-current-thinking/</link>
      <pubDate>Wed, 13 Jan 2010 01:37:15 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/13/c-test-builder-pattern-my-current-thinking/</guid>
      <description>I&amp;#8217;ve written previously about the test builder pattern in C# and having noticed some different implementations of this pattern I thought it&amp;#8217;d be interesting to post my current thinking on how to use it.
 One thing I&amp;#8217;ve noticed is that we often end up just creating methods which effectively act as setters rather than easing the construction of an object.
 This seems to happen most commonly when the value we want to set is a boolean value.</description>
    </item>
    
    <item>
      <title>Coding: An outside in observation</title>
      <link>https://www.markhneedham.com/blog/2009/12/19/coding-an-outside-in-observation/</link>
      <pubDate>Sat, 19 Dec 2009 00:55:19 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/12/19/coding-an-outside-in-observation/</guid>
      <description>I&amp;#8217;ve been reading Michl Henning&amp;#8217;s post on API design and one thing which he points out is that it&amp;#8217;s important to drive the design of an API based on the way that it will be used by its clients:
  A great way to get usable APIs is to let the customer (namely, the caller) write the function signature, and to give that signature to a programmer to implement. This step alone eliminates at least half of poor APIs: too often, the implementers of APIs never use their own creations, with disastrous consequences for usability</description>
    </item>
    
    <item>
      <title>Coding: Naming</title>
      <link>https://www.markhneedham.com/blog/2009/12/16/coding-naming/</link>
      <pubDate>Wed, 16 Dec 2009 22:08:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/12/16/coding-naming/</guid>
      <description>Sarah Taraporewalla recently wrote an interesting post about the importance of words with respect to the way that we use them in our code and it reminded me of some conversations I&amp;#8217;ve had with Dave Cameron about the importance of creating a shared understanding of the different types/objects in the systems that we build.
 On a few projects that I&amp;#8217;ve worked on where we didn&amp;#8217;t have a common understanding of what different concepts in the domain should be I noticed that there was a reluctance to make changes to class names.</description>
    </item>
    
    <item>
      <title>Coding: The little details all add to our understanding</title>
      <link>https://www.markhneedham.com/blog/2009/12/15/coding-the-little-details-all-add-to-our-understanding/</link>
      <pubDate>Tue, 15 Dec 2009 08:09:05 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/12/15/coding-the-little-details-all-add-to-our-understanding/</guid>
      <description>I&amp;#8217;ve been watching an interesting presentation by Scott Hanselmann titled &#39;http://www.vimeo.com/7680468[Information Overload and Managing the Flow]&#39; from OreDev where he covers various strategies to allow us to be more productive in the face of the huge amounts of information constantly threatening to overwhelm us.
 One interesting suggestion he has around 37 minutes in is that when learning a new language it might be a good idea to contact someone who&amp;#8217;s an expert in that language and get some framing knowledge on the type of stuff that&amp;#8217;s worth learning and what we might not bother with.</description>
    </item>
    
    <item>
      <title>Two controllers, type conformance and the Liskov Substitution Principle </title>
      <link>https://www.markhneedham.com/blog/2009/11/19/two-controllers-type-conformance-and-the-liskov-substitution-principle/</link>
      <pubDate>Thu, 19 Nov 2009 00:08:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/11/19/two-controllers-type-conformance-and-the-liskov-substitution-principle/</guid>
      <description>An interesting object orientation related problem that Raph and I were looking at recently revolved around the design of two controllers in the application we&amp;#8217;ve been working on.
 The two controllers in question look roughly like this:
 public class GenericController extends Controller { private final SomeFactory someFactory; public GenericController(SomeFactory someFactory); this.someFactory = someFactory; } public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception { // do some stuff but never use &#39;request&#39; or &#39;response&#39; } }   public class MoreSpecificController extends GenericController { private final SomeFactory someFactory; public MoreSpecificController(SomeFactory someFactory); super(someFactory); } public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception { .</description>
    </item>
    
    <item>
      <title>Coding: Pushing the logic back</title>
      <link>https://www.markhneedham.com/blog/2009/11/11/coding-pushing-the-logic-back/</link>
      <pubDate>Wed, 11 Nov 2009 20:30:08 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/11/11/coding-pushing-the-logic-back/</guid>
      <description>I was reading a post on the law of demeter by Richard Hart recently and it reminded me that a lot of the refactorings that we typically do on code bases are about pushing the logic back into objects instead of exposing data and performing calculations elsewhere.
 An example that I spotted where we did this recently was while building a &#39;BusinessSummary&#39; object whose state was based on the state of a collection of other objects.</description>
    </item>
    
    <item>
      <title>Coding: The agent noun class</title>
      <link>https://www.markhneedham.com/blog/2009/11/08/coding-the-agent-noun-class/</link>
      <pubDate>Sun, 08 Nov 2009 20:44:18 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/11/08/coding-the-agent-noun-class/</guid>
      <description>I refer quite frequently to a post written by my colleague Peter Gillard Moss where he describes the agent noun code smell for class names.
 An agent noun is defined by Wikipedia as:
  In linguistics, an agent noun (or nomen agentis) is a word that is derived from another word denoting an action, and that identifies an entity that does that action.
   Some typical examples of this are classes which end in the name &#39;Manager&#39;, &#39;Retriever&#39;, &#39;Helper&#39; or even &#39;Controller&#39; as Carlos points out.</description>
    </item>
    
    <item>
      <title>Consistency in the code base</title>
      <link>https://www.markhneedham.com/blog/2009/11/04/consistency-in-the-code-base/</link>
      <pubDate>Wed, 04 Nov 2009 21:39:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/11/04/consistency-in-the-code-base/</guid>
      <description>I&amp;#8217;ve had quite a few discussions with various different colleagues about coding consistency over the last year or so and Pat Kuaand Frank Trindade have both written posts suggesting that we should look to have coding standards on projects in order to avoid the type of pain that having an inconsistent approach can lead to.
 From what I&amp;#8217;ve noticed there seem to be two reasons that we end up with inconsistent code on projects:</description>
    </item>
    
    <item>
      <title>Coding: Copy/Paste then refactor</title>
      <link>https://www.markhneedham.com/blog/2009/10/31/coding-copypaste-then-refactor/</link>
      <pubDate>Sat, 31 Oct 2009 17:54:31 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/10/31/coding-copypaste-then-refactor/</guid>
      <description>We&amp;#8217;re currently reading Michael Feathers &#39;http://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1256973419&amp;amp;sr=8-1[Working Effectively With Legacy Code]&#39; in our technical book club and one interesting technique which he describes in the Test Driven Development section is copying and pasting some existing code, changing the appropriate part to make the test pass before refactoring to remove the duplication we just created.
 I can&amp;#8217;t remember coming across this approach previously but I found myself using it to solve a Scala problem last week.</description>
    </item>
    
    <item>
      <title>Coding: Invariant checking on dependency injected components</title>
      <link>https://www.markhneedham.com/blog/2009/10/31/coding-invariant-checking-on-dependency-injected-components/</link>
      <pubDate>Sat, 31 Oct 2009 03:00:40 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/10/31/coding-invariant-checking-on-dependency-injected-components/</guid>
      <description>I&amp;#8217;ve written a couple of times previously about invariant checking in constructors and I had an interesting discussion with some colleagues recently around doing this type of defensive programming when the object in question has its dependencies injected by a container.
 Quite often we would see code similar to this in a controller:
 public class SomeController { public SomeController(Dependency1 valueOne, Dependency2 valueTwo) { AssertThat.isNotNull(valueOne); AssertThat.isNotNull(valueTwo); // and so on } }   Where &#39;SomeController&#39; would have &#39;Dependency1&#39; and &#39;Dependency2&#39; set up in a Spring configuration file in this example.</description>
    </item>
    
    <item>
      <title>Coding: Consistency when invariant checking</title>
      <link>https://www.markhneedham.com/blog/2009/10/29/coding-consistency-when-invariant-checking/</link>
      <pubDate>Thu, 29 Oct 2009 23:06:35 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/10/29/coding-consistency-when-invariant-checking/</guid>
      <description>I wrote a while ago about reading the ASP.NET MVC source code and noticing that it makes use of code inside its constructors to ensure that null values can&amp;#8217;t be passed in and while I&amp;#8217;m still not convinced this is the way to go I think if we do take this approach then we need to ensure we do so consistently.
 Something which happens quite often is that you&amp;#8217;ll come across code which makes use of defensive programming in one of its constructors like so:</description>
    </item>
    
    <item>
      <title>Coding: Connascence - Some examples</title>
      <link>https://www.markhneedham.com/blog/2009/10/28/coding-connascence-some-examples/</link>
      <pubDate>Wed, 28 Oct 2009 22:43:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/10/28/coding-connascence-some-examples/</guid>
      <description>I&amp;#8217;ve been reading Meilir Page Jones&#39; &#39;http://www.amazon.co.uk/Fundamentals-Object-oriented-Design-Object-Technology/dp/020169946X/ref=sr_1_3?ie=UTF8&amp;amp;s=books&amp;amp;qid=1256562881&amp;amp;sr=8-3[Fundamentals of Object Oriented Design in UML]&#39; recently and one of the chapters that I found the most interesting is the one where he talks about &#39;connascence&#39;.
 Connascence describes the relation between two different bits of code and two bits of code are said to be connascent if a change to one bit of code would require a change to the other bit of the code  or if some change to another piece of code would require both bits of code to change for our program to still be correct.</description>
    </item>
    
    <item>
      <title>Coding: The primitive obsession</title>
      <link>https://www.markhneedham.com/blog/2009/10/23/coding-the-primitive-obsession/</link>
      <pubDate>Fri, 23 Oct 2009 00:08:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/10/23/coding-the-primitive-obsession/</guid>
      <description>I recently came across an interesting post by Naresh Jain where he details a discussion at the SDTConf 2009 about the code smells that hurt people the most.
 Naresh describes the &#39;primitive obsession&#39; anti pattern as being the crux of poor design:
  I would argue that I&amp;#8217;ve seen code which does not have much duplication but its very difficult to understand what&amp;#8217;s going on. Hence I claim, &amp;#8220;only if the code had better abstractions it would be a lot easier to understand and evolve the code&amp;#8221;.</description>
    </item>
    
    <item>
      <title>Coding: Role based interfaces</title>
      <link>https://www.markhneedham.com/blog/2009/10/18/coding-role-based-interfaces/</link>
      <pubDate>Sun, 18 Oct 2009 20:33:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/10/18/coding-role-based-interfaces/</guid>
      <description>I&amp;#8217;ve read a bit about role based interfaces but I&amp;#8217;ve never really quite understood how the idea could be applied into our code - this week my colleague Matt Dunn has been teaching me.
 We had a requirement to show some content on every page of the website we&amp;#8217;re working on. The content would be slightly different depending on which business process you&amp;#8217;re doing.
 Our first solution made use of an already defined &#39;BusinessType&#39; property which allowed us to work out which content we needed to create.</description>
    </item>
    
    <item>
      <title>Coding: Watch out for mutable code</title>
      <link>https://www.markhneedham.com/blog/2009/09/16/coding-watch-out-for-mutable-code/</link>
      <pubDate>Wed, 16 Sep 2009 23:31:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/09/16/coding-watch-out-for-mutable-code/</guid>
      <description>I&amp;#8217;ve been doing some more work recently on trying to reduce the number of fields in some of our classes and moving any logic related to calculations into the methods that use the logic but managed to break part of our application recently by doing that a bit too casually and not realising that the code I&amp;#8217;d inlined was actually being mutated later on.
 The code I&amp;#8217;d refactored originally looked like this:</description>
    </item>
    
    <item>
      <title>Coding: An abstract class/ASP.NET MVC dilemma</title>
      <link>https://www.markhneedham.com/blog/2009/09/13/coding-an-abstract-classasp-net-mvc-dilemma/</link>
      <pubDate>Sun, 13 Sep 2009 00:19:42 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/09/13/coding-an-abstract-classasp-net-mvc-dilemma/</guid>
      <description>I previously described a refactoring that we have been working on to reduce the number of fields and delay calculations and the actual goal behind this refactoring was to get the code into shape so that we could add in the logic for a new business process that our application needed to handle.
 The code in question defines view models being used by different partial views which are rendered depending on the business process that the user is currently executing.</description>
    </item>
    
    <item>
      <title>Coding: Checking invariants in a factory method</title>
      <link>https://www.markhneedham.com/blog/2009/09/06/coding-checking-invariants-in-a-factory-method/</link>
      <pubDate>Sun, 06 Sep 2009 00:46:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/09/06/coding-checking-invariants-in-a-factory-method/</guid>
      <description>Something which we discussed quite frequently when studying Domain Driven Design in our technical book club earlier this year was where the code which checked whether we had setup an object correctly should reside.
 Shortly after that I suggested that I didn&amp;#8217;t think it should go in the constructor of an object but that we should rely on objects to be good citizens and not pass in null values or the like to other objects.</description>
    </item>
    
    <item>
      <title>Coding: Reduce fields, delay calculations</title>
      <link>https://www.markhneedham.com/blog/2009/09/02/coding-reduce-fields-delay-calculations/</link>
      <pubDate>Wed, 02 Sep 2009 23:52:06 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/09/02/coding-reduce-fields-delay-calculations/</guid>
      <description>A pattern in code which I&amp;#8217;ve noticed quite frequently lately is that of executing calculations in the constructor of an object and then storing the result in a field on the object.
 From the small amount of experience I have playing around with functional languages I have come across the idea of lazy evaluation of functions quite frequently and I think it&amp;#8217;s something that we can apply in object oriented languages as well.</description>
    </item>
    
    <item>
      <title>Coding: The guilty bystander</title>
      <link>https://www.markhneedham.com/blog/2009/08/30/coding-the-guilty-bystander/</link>
      <pubDate>Sun, 30 Aug 2009 20:07:50 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/08/30/coding-the-guilty-bystander/</guid>
      <description>While discussing the duplication in our code based which I described in an earlier post with some other colleagues earlier this week I realised that I had actually gone past this code a couple of times previously, seen that there was a problem with it but hadn&amp;#8217;t taken any steps to fix it other than to make a mental note that I would fix it when I got the chance.</description>
    </item>
    
    <item>
      <title>Coding: Group the duplication, then remove it</title>
      <link>https://www.markhneedham.com/blog/2009/08/30/coding-group-the-duplication-then-remove-it/</link>
      <pubDate>Sun, 30 Aug 2009 13:13:50 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/08/30/coding-group-the-duplication-then-remove-it/</guid>
      <description>One of the most common activities for software developers is removing duplication from code and Dave recently showed me a technique which I hadn&amp;#8217;t seen before for doing this more effectively - first group all the code into one place without removing any of the duplication and then remove the duplication when everything is in one place.
 The code where we tried out this technique was being used to construct the model for the navigation at the top of the pages on the website we&amp;#8217;re working on and before we grouped the duplication the code looked a bit like this:</description>
    </item>
    
    <item>
      <title>Coding: Unused code</title>
      <link>https://www.markhneedham.com/blog/2009/08/21/coding-unused-code/</link>
      <pubDate>Fri, 21 Aug 2009 08:56:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/08/21/coding-unused-code/</guid>
      <description>An interesting problem that we have come across a few times over the past 6 months is the dilemma about what to do when start work on a feature and get part way through it before it gets descoped from the current iteration, maybe to be picked up later on but maybe not.
 The easiest, and there most common, approach is to just leave the code in the code base half complete and then hopefully return to it at some later stage.</description>
    </item>
    
    <item>
      <title>Law of Demeter: Some thoughts</title>
      <link>https://www.markhneedham.com/blog/2009/08/17/law-of-demeter-some-thoughts/</link>
      <pubDate>Mon, 17 Aug 2009 21:12:26 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/08/17/law-of-demeter-some-thoughts/</guid>
      <description>Phil Haack wrote a post a few weeks ago about the law of demeter and how it&amp;#8217;s not just about reducing the number of dots that appear on one line.
 This is a nice side effect of following the law of demeter but I often feel that the main benefit we get from following it is that code becomes easier to change since we haven&amp;#8217;t exposed the state of an object all over the place.</description>
    </item>
    
    <item>
      <title>Builders hanging off class vs Builders in same namespace</title>
      <link>https://www.markhneedham.com/blog/2009/08/15/builders-hanging-off-class-vs-builders-in-same-namespace/</link>
      <pubDate>Sat, 15 Aug 2009 10:53:49 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/08/15/builders-hanging-off-class-vs-builders-in-same-namespace/</guid>
      <description>I wrote a couple of months ago about an approach we&amp;#8217;re using to help people find test data builders in our code base by hanging those builders off a class called &#39;GetBuilderFor&#39; and I think it&amp;#8217;s worked reasonably well.
 However, a couple of weeks ago my colleague Lu Ning suggested another way to achieve our goal of allowing people to find the builders easily.
 The approach he suggested is to put all of the builders in the same namespace, for example &#39;Builders&#39;, so that if someone wants to find out if a builder already exists they can just type &#39;Builders.</description>
    </item>
    
    <item>
      <title>Wrapping collections: Inheritance vs Composition</title>
      <link>https://www.markhneedham.com/blog/2009/07/24/wrapping-collections-inheritance-vs-composition/</link>
      <pubDate>Fri, 24 Jul 2009 01:07:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/07/24/wrapping-collections-inheritance-vs-composition/</guid>
      <description>I wrote previously about the differences between wrapping collections and just creating extension methods to make our use of collections in the code base more descriptive but I&amp;#8217;ve noticed in code I&amp;#8217;ve been reading recently that there appear to be two ways of wrapping the collection - using composition as I described previously but also extending the collection by using inheritance.
 I was discussing this with Lu Ning recently and he pointed out that if what we have is actually a collection then it might make more sense to extend the collection with a custom class whereas if the collection is just an implementation detail of some other domain concept then it would be better to use composition.</description>
    </item>
    
    <item>
      <title>Coding: Quick feedback</title>
      <link>https://www.markhneedham.com/blog/2009/07/20/coding-quick-feedback/</link>
      <pubDate>Mon, 20 Jul 2009 21:10:12 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/07/20/coding-quick-feedback/</guid>
      <description>One of the most important things to achieve if we are to get any sort of productivity when writing code is to find ways to get the quickest feedback possible.
 My general default stance with respect to this has always been to TDD code although I&amp;#8217;ve found when coding in F# that I&amp;#8217;m not actually sure what the overall best way to get quick feedback is.
 This is partly because I haven&amp;#8217;t been able to find a way to run tests easily from inside Visual Studio but also partly because even when you do this the code for the whole project needs to be recompiled before the tests can be run which takes time.</description>
    </item>
    
    <item>
      <title>Safe refactoring: Removing object initializer, introducing builder</title>
      <link>https://www.markhneedham.com/blog/2009/06/26/safe-refactoring-removing-object-initializer-introducing-builder/</link>
      <pubDate>Fri, 26 Jun 2009 00:02:45 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/26/safe-refactoring-removing-object-initializer-introducing-builder/</guid>
      <description>I previously wrote about an approach we took to safely remove some duplication and I recently followed a similar mantra to replace an object initializer call which had around 40 properties being setup with a builder to try and make the code a bit easier to understand.
 We did have tests checking the values being setup by the object initializer so I was already able to refactor with some degree of safety - it would probably have been possible to just create the builder and build the object from that and then delete the old code and replace it with the new but I&amp;#8217;ve caused myself too many problems from doing that before that I decided to try a more incremental approach.</description>
    </item>
    
    <item>
      <title>Seams: Some thoughts</title>
      <link>https://www.markhneedham.com/blog/2009/06/21/seams-some-thoughts/</link>
      <pubDate>Sun, 21 Jun 2009 17:21:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/21/seams-some-thoughts/</guid>
      <description>I pick up Michael Feathers&#39; Working Effectively with Legacy Code book from time to time and one of my favourite parts of the book is the chapter where he talks about &#39;Seams&#39;.
 To quote the book:
  A seam is a place where you can alter behaviour in your program without editing in that place
   Seams in the book are generally discussed in terms of how we can get tests around legacy code which was written without easy testability in mind but I&amp;#8217;ve noticed that the ideas behind seams seem to be more widely applicable than this.</description>
    </item>
    
    <item>
      <title>Coding: Single Level of Abstraction Principle</title>
      <link>https://www.markhneedham.com/blog/2009/06/12/coding-single-level-of-abstraction-principle/</link>
      <pubDate>Fri, 12 Jun 2009 17:35:51 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/12/coding-single-level-of-abstraction-principle/</guid>
      <description>One of the other useful principles for writing readable code that I&amp;#8217;ve come across in the last year or so is the Single Level of Abstraction Principle.
 I first came across the idea of writing code at the same level of abstraction in Uncle Bob&amp;#8217;s Clean Code although I only learnt about the actual term in Neal Ford&amp;#8217;s The Productive Programmer.
 As the name suggests the idea is that within a certain method we look to keep all the code at the same level of abstraction to help us read it more easily.</description>
    </item>
    
    <item>
      <title>Coding: Keep method/variable names positive</title>
      <link>https://www.markhneedham.com/blog/2009/06/11/coding-keep-methodvariable-names-positive/</link>
      <pubDate>Thu, 11 Jun 2009 07:44:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/11/coding-keep-methodvariable-names-positive/</guid>
      <description>Something which I&amp;#8217;ve come across a few times recently in code is method names which describe the negative aspect of something and for me at least these are very difficult to understand since I need to keep remembering that we are dealing with the negative and not the positive which I think is significantly easier to reason about.
 A recent example of this which I came across was in some acceptance test code which among other things was asserting whether or not the policy number that had been created was in a valid format and returning the result of that assertion back to our Fitnesse fixture.</description>
    </item>
    
    <item>
      <title>Coding: Why do we extract method?</title>
      <link>https://www.markhneedham.com/blog/2009/06/04/coding-why-do-we-extract-method/</link>
      <pubDate>Thu, 04 Jun 2009 20:30:47 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/04/coding-why-do-we-extract-method/</guid>
      <description>Ever since I&amp;#8217;ve read Uncle Bob&amp;#8217;s Clean Code book my approach to coding has been all about the &#39;http://c2.com/cgi/wiki?ExtractMethod[extract method]&#39; refactoring - I pretty much look to extract method as much as I can until I get to the point where extracting another method would result in me just describing the language semantics in the method name.
 One of the approaches that I&amp;#8217;ve come across with regards to doing this refactoring is that it&amp;#8217;s only used when there is duplication of code and we want to reduce that duplication so that it&amp;#8217;s all in one place and then call that method from two places.</description>
    </item>
    
    <item>
      <title>Coding: Putting code where people can find it</title>
      <link>https://www.markhneedham.com/blog/2009/06/02/coding-putting-code-where-people-can-find-it/</link>
      <pubDate>Tue, 02 Jun 2009 23:35:31 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/02/coding-putting-code-where-people-can-find-it/</guid>
      <description>I&amp;#8217;ve previously written about the builder pattern which I think is a very useful pattern for helping to setup data.
 It allows us to setup custom data when we care about a specific piece of data in a test or just use default values if we&amp;#8217;re not bothered about a piece of data but need it to be present for our test to execute successfully.
 One problem that I noticed was that despite the fact we had builders for quite a number of the classes we were using in our tests, when new tests were being added test data was still being setup by directly using the classes instead of making use of the builders which had already done the hard work for you.</description>
    </item>
    
    <item>
      <title>The 5 dysfunctions of teams in code</title>
      <link>https://www.markhneedham.com/blog/2009/05/28/the-5-dysfunctions-of-teams-in-code/</link>
      <pubDate>Thu, 28 May 2009 05:44:52 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/05/28/the-5-dysfunctions-of-teams-in-code/</guid>
      <description>I recently came across an interesting post by my colleague Pat Kua where he talks about how some patterns he&amp;#8217;s noticed in code can be linked to Conway&amp;#8217;s law which suggests that the structure of systems designed in organisations will mirror the communication structure of that organisation.
 I recently read a book called &#39;http://www.markhneedham.com/blog/2009/04/22/the-five-dysfunctions-of-a-team-book-review/[The Five Dysfunctions of Teams]&#39; which describe some behaviours in teams which aren&amp;#8217;t working in an effective way.</description>
    </item>
    
    <item>
      <title>Refactoring: Removing duplication more safely</title>
      <link>https://www.markhneedham.com/blog/2009/05/26/refactoring-removing-duplication-more-safely/</link>
      <pubDate>Tue, 26 May 2009 13:20:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/05/26/refactoring-removing-duplication-more-safely/</guid>
      <description>One of the most important things that I&amp;#8217;ve learnt from the coding dojo sessions that we&amp;#8217;ve been running over the last six months is the importance of small step refactorings.
 Granted we have been trying to take some of the practices to the extreme but the basic idea of trying to keep the tests green for as much time as well as keeping our code in a state where it still compiles (in a static language) is very useful no matter what code we&amp;#8217;re working on.</description>
    </item>
    
    <item>
      <title>Coding: Setters reduce trust</title>
      <link>https://www.markhneedham.com/blog/2009/05/23/coding-setters-reduce-trust/</link>
      <pubDate>Sat, 23 May 2009 15:37:34 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/05/23/coding-setters-reduce-trust/</guid>
      <description>I&amp;#8217;ve written previously about my dislike of the way the object initialiser is misused in C# 3.0 and although I&amp;#8217;ve also written about my preference for explicit modeling and the need for objects to act as good citizensI&amp;#8217;ve never quite been able to articulate what it is I dislike so much about having setter methods on objects.
 I&amp;#8217;ve learnt from experience that it leads to a world of pain in our code by having the ability to setup an object after construction using setters and in a conversation with a colleague about this last week he suggested that the reason it&amp;#8217;s such a bad practice to follow is that it makes us lose our trust in not only that object but in all the other objects in the application.</description>
    </item>
    
    <item>
      <title>Coding: Weak/Strong APIs</title>
      <link>https://www.markhneedham.com/blog/2009/04/27/coding-weakstrong-apis/</link>
      <pubDate>Mon, 27 Apr 2009 20:30:52 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/04/27/coding-weakstrong-apis/</guid>
      <description>An interesting problem that I&amp;#8217;ve come across a few times in the last couple of week centres around how strongly typed we should make the arguments to public methods on our objects.
 There seem to be benefits and drawbacks with each approach so I&amp;#8217;m not sure which approach is better - it possibly depends on the context.
 When we have a strong API the idea is that we pass an object as the argument to a method on another object.</description>
    </item>
    
    <item>
      <title>Coding: Applying levels of abstraction</title>
      <link>https://www.markhneedham.com/blog/2009/04/19/coding-applying-levels-of-abstraction/</link>
      <pubDate>Sun, 19 Apr 2009 23:03:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/04/19/coding-applying-levels-of-abstraction/</guid>
      <description>One interesting situation that we often arrive at when writing code is working out when the best time to apply a level of abstraction is.
 I think there is always a trade off to be made when it comes to creating abstractions - creating the abstraction adds to the complexity of the code we&amp;#8217;re writing but it is often the case that creating it makes it easier for us to navigate the code base.</description>
    </item>
    
    <item>
      <title>Coding: Passing booleans into methods</title>
      <link>https://www.markhneedham.com/blog/2009/04/08/coding-passing-booleans-into-methods/</link>
      <pubDate>Wed, 08 Apr 2009 05:43:43 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/04/08/coding-passing-booleans-into-methods/</guid>
      <description>In a post I wrote a couple of days ago about understanding the context of a piece of code before criticising it, one of the examples that I used of a time when it seems fine to break a rule was passing a boolean into a method to determine whether or not to show an editable version of a control on the page.
 Chatting with Nick about this yesterday it became clear to me that I&amp;#8217;ve missed one important reason why you&amp;#8217;d not want to pass a boolean into a method.</description>
    </item>
    
    <item>
      <title>Coding: It&#39;s all about the context</title>
      <link>https://www.markhneedham.com/blog/2009/04/05/coding-criticising-without-context/</link>
      <pubDate>Sun, 05 Apr 2009 19:45:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/04/05/coding-criticising-without-context/</guid>
      <description>I think one of the easiest things to do as a developer is to look at some code that you didn&amp;#8217;t write and then start trashing it for all the supposed mistakes that the author has made that you wouldn&amp;#8217;t have.
 It&amp;#8217;s certainly something I&amp;#8217;ve been guilty of doing and probably will be again in the future.
 Sometimes it&amp;#8217;s justified but most of the time we lack the context for understanding why the code was written the way it was and therefore our criticism is not very useful to anyone.</description>
    </item>
    
    <item>
      <title>Coding: Isolate the data not just the endpoint</title>
      <link>https://www.markhneedham.com/blog/2009/03/25/coding-isolate-the-data-not-just-the-endpoint/</link>
      <pubDate>Wed, 25 Mar 2009 23:28:42 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/03/25/coding-isolate-the-data-not-just-the-endpoint/</guid>
      <description>One of the fairly standard ways of shielding our applications when integrating with other systems is to create a wrapper around it so that all interaction with it is in one place.
 As I mentioned in a previous post we have been using the repository pattern to achieve this in our code.
 One service which we needed to integrate lately provided data for populating data on drop downs on our UI so the service provided two pieces of data - a Value (which needed to be sent to another service when a certain option was selected) and a Label (which was the value for us to display on the screen).</description>
    </item>
    
    <item>
      <title>Coding: Making the debugger redundant</title>
      <link>https://www.markhneedham.com/blog/2009/03/22/coding-making-the-debugger-redundant/</link>
      <pubDate>Sun, 22 Mar 2009 19:52:31 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/03/22/coding-making-the-debugger-redundant/</guid>
      <description>I recently wrote my dislike of the debugger and related to this, I spent some time last year watching some videos from JAOO 2007 on MSDN&amp;#8217;s Channel 9. One of my favourites is an interview featuring Joe Armstrong and Eric Meijer where Joe Armstrong points out that when coding Erlang he never has to use a debugger because state is immutable.
 In Erlang, once you set the value of a variable &#39;x&#39; it cannot be changed.</description>
    </item>
    
    <item>
      <title>Coding: Reassessing what the debugger is for</title>
      <link>https://www.markhneedham.com/blog/2009/03/20/coding-reassessing-what-the-debugger-is-for/</link>
      <pubDate>Fri, 20 Mar 2009 21:39:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/03/20/coding-reassessing-what-the-debugger-is-for/</guid>
      <description>When I first started programming in a &#39;proper&#39; IDE one of the things that I thought was really cool was the ability to debug through my code whenever something wasn&amp;#8217;t working quite the way I expected it to.
 Now the debugger is not a completely pointless tool - indeed there is sometimes no other easy way to work out what&amp;#8217;s going wrong - but I think it now becomes the default problem solver whenever a bit of code is not working as we expect it to.</description>
    </item>
    
    <item>
      <title>Coding: Make it obvious</title>
      <link>https://www.markhneedham.com/blog/2009/03/18/coding-make-it-obvious/</link>
      <pubDate>Wed, 18 Mar 2009 10:44:48 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/03/18/coding-make-it-obvious/</guid>
      <description>One of the lessons that I&amp;#8217;ve learned the more projects I work on is that the most important thing to do when coding is to do so in a way that you make life easier for the next person who has to come across that code, be it yourself or one of your team mates.
 I think the underlying idea is that we need to make things as obvious as possible.</description>
    </item>
    
    <item>
      <title>Coding: Good Citizens</title>
      <link>https://www.markhneedham.com/blog/2009/03/04/coding-good-citizens/</link>
      <pubDate>Wed, 04 Mar 2009 23:58:48 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/03/04/coding-good-citizens/</guid>
      <description>I was recently reading Brad Cross&#39; recent post about creating objects which are Good Citizens in code and he certainly nails one aspect of this with regards to ensuring that our objects are in a usable state post construction.
  In OO design, an object is considered to be a good citizen if it is in a fully composed and usable state post-construction. This means that once the constructor exits, the class is ready to use - without the need to call additional setters or init() methods.</description>
    </item>
    
    <item>
      <title>Coding: Implicit vs Explicit modeling </title>
      <link>https://www.markhneedham.com/blog/2009/02/28/coding-implicit-vs-explicit-modeling/</link>
      <pubDate>Sat, 28 Feb 2009 09:50:45 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/28/coding-implicit-vs-explicit-modeling/</guid>
      <description>When it comes to object modeling there seem to be two distinct approaches that I have come across.
 Implicit modeling The first approach is where we do what I like to think of as implicit modeling.
 With this approach we would probably use less objects than in the explicit approach and we would have objects being populated as we moved through the work flow of our application.
 I call it implicit modeling because we need to imply where we are based on the internal state of our objects - we can typically work this out by seeing what is and is not set to null.</description>
    </item>
    
    <item>
      <title>Coding: Using &#39;ToString&#39;</title>
      <link>https://www.markhneedham.com/blog/2009/02/26/coding-using-tostring/</link>
      <pubDate>Thu, 26 Feb 2009 23:43:20 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/26/coding-using-tostring/</guid>
      <description>An interesting conversation I&amp;#8217;ve had recently with some of my colleagues is around the use of the ToString method available on all objects created in Java or C#. It was also pointed out in the comments on my recent post about wrapping DateTimes in our code.
 I think the original intention of this method was to create a string representation of an object, but its use has been overloaded by developers to the point where its expected use is as a mechanism for creating nice output when debugging the code or viewing unit test failures.</description>
    </item>
    
    <item>
      <title>Collective Code Ownership: Some Thoughts</title>
      <link>https://www.markhneedham.com/blog/2009/02/17/collective-code-ownership-some-thoughts/</link>
      <pubDate>Tue, 17 Feb 2009 22:32:44 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/17/collective-code-ownership-some-thoughts/</guid>
      <description>Collective code ownership is one of the things we practice on projects using extreme programming and Mike Bria&amp;#8217;s post on the subject makes me wonder if code ownership exists on more than one level.
 Kent Beck&amp;#8217;s definition of collective code ownership is that
  Anyone can change anything at anytime
   Mike also gives an alternative definition which goes beyond that:
  From a more measurable POV, CoCO states that everyone on the team (developer-wise) must be able to describe the design of anything the team is working on in no more than 5 minutes.</description>
    </item>
    
    <item>
      <title>C#: Object Initializer and The Horse Shoe</title>
      <link>https://www.markhneedham.com/blog/2009/02/16/c-object-initializer-and-the-horse-shoe/</link>
      <pubDate>Mon, 16 Feb 2009 22:04:20 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/16/c-object-initializer-and-the-horse-shoe/</guid>
      <description>The object initializer syntax introduced in C# 3.0 makes it easier for us to initialise our objects in one statement but I think we need to remember that they are not named parameters and that there is still a place (a very good one actually) for creating objects from constructors or factory methods.
 Unfortunately what I think the cleaner syntax does is encourage us to create objects with half the fields populated and half of them null by default.</description>
    </item>
    
    <item>
      <title>Coding: Assertions in constructors</title>
      <link>https://www.markhneedham.com/blog/2009/02/14/coding-assertions-in-constructors/</link>
      <pubDate>Sat, 14 Feb 2009 01:32:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/14/coding-assertions-in-constructors/</guid>
      <description>While browsing through the ASP.NET MVC source I noticed that they use an interesting pattern on the constructors to ensure that an exception will be thrown if an object is not instantiated correctly.
 public ControllerContext(HttpContextBase httpContext, RouteData routeData, ControllerBase controller) : base(httpContext, routeData) { if (controller == null) { throw new ArgumentNullException(&#34;controller&#34;); } Controller = controller; }   If you pass in a null Controller you shall go no further!</description>
    </item>
    
    <item>
      <title>Refactoring: Comment it out vs small steps removal</title>
      <link>https://www.markhneedham.com/blog/2009/02/08/refactoring-comment-it-out-vs-small-steps-removal/</link>
      <pubDate>Sun, 08 Feb 2009 09:10:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/08/refactoring-comment-it-out-vs-small-steps-removal/</guid>
      <description>One refactoring I was doing last week was to try and remove the use of some getters/setters on one of our objects so that it was better encapsulated and all the behaviour related to it happened in one place.
 The change involved introducing a constructor to initialise the object rather than doing so using the new object initialiser syntax and initalising it using the properties.
 My initial approach was to find all the usages of these properties and then remove each usage one by one, running our suite of tests against the code after each change to ensure that nothing had broken as a result of the change.</description>
    </item>
    
    <item>
      <title>Coding: Contextual learning</title>
      <link>https://www.markhneedham.com/blog/2009/01/21/coding-contextual-learning/</link>
      <pubDate>Wed, 21 Jan 2009 06:42:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/01/21/coding-contextual-learning/</guid>
      <description>While reading my colleague&amp;#8217;s notes on a brown bag session on pair programming she gave I was reminded of my belief that we learn much more effectively when we are learning in a practical environment.
 The bit that interested me was this bit regarding onboarding:
  On board new team members to bring them up to speed on the overall goal and design, so you do not need to repeat basic details when you work with them on a story.</description>
    </item>
    
    <item>
      <title>YAGNI: Some thoughts</title>
      <link>https://www.markhneedham.com/blog/2009/01/17/yagni-some-thoughts/</link>
      <pubDate>Sat, 17 Jan 2009 21:01:38 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/01/17/yagni-some-thoughts/</guid>
      <description>If you hang around a team practicing XP for long enough, one of the phrases you are bound to hear is YAGNI (You Ain&amp;#8217;t Gonna Need It).
 Although it can sometimes be used to ignore things we don&amp;#8217;t want to focus on as Ian points out, in general the aim is to stop people from working on code that isn&amp;#8217;t currently required.
 So assuming our team isn&amp;#8217;t being lazy and trying to avoid decisions that they don&amp;#8217;t want to think about, why do we hear the YAGNI call and more importantly, perhaps, what happens when we don&amp;#8217;t heed that call.</description>
    </item>
    
    <item>
      <title>The danger of commenting out code</title>
      <link>https://www.markhneedham.com/blog/2009/01/17/the-danger-of-commenting-out-code/</link>
      <pubDate>Sat, 17 Jan 2009 16:02:33 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/01/17/the-danger-of-commenting-out-code/</guid>
      <description>An idea which is considered common sense by most developers but which is not always adhered to is that of not commenting out code.
 Code is nearly always under source control anyway so commenting out code which is not being used doesn&amp;#8217;t really serve any positive purpose and it can have quite a few negative effects.
 Clutter Ideally we should be able to read through the code without too much confusion - each method&amp;#8217;s name being descriptive enough that we can work out what is going on.</description>
    </item>
    
    <item>
      <title>C# lambdas: How much context should you need?</title>
      <link>https://www.markhneedham.com/blog/2008/12/27/c-lambdas-how-much-context-should-you-need/</link>
      <pubDate>Sat, 27 Dec 2008 23:15:31 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/12/27/c-lambdas-how-much-context-should-you-need/</guid>
      <description>I had an interesting discussion with a colleague last week about the names that we give to variables inside lambda expressions which got me thinking about the context that we should need to hold when reading code like this.
 The particular discussion was around an example like this:
 public class Foo { private String bar; private String baz; public Foo(String bar, String baz) { this.bar = bar; this.baz = baz; } public override string ToString() { return string.</description>
    </item>
    
    <item>
      <title>Code for positive data values not negative</title>
      <link>https://www.markhneedham.com/blog/2008/12/11/code-for-positive-data-values-not-negative/</link>
      <pubDate>Thu, 11 Dec 2008 06:48:42 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/12/11/code-for-positive-data-values-not-negative/</guid>
      <description>While reading Pat Kua&amp;#8217;s latest post about how coding a certain way can help you avoid certain classes of bugs I was reminded of a technique taught to me by a colleague with regards to writing functions/methods.
 The idea is that it is more effective to code for positive data values rather than trying to work out all the possible negative combinations, since there are likely to be cases which we hadn&amp;#8217;t considered if we do the latter.</description>
    </item>
    
    <item>
      <title>What are your personal practices?</title>
      <link>https://www.markhneedham.com/blog/2008/12/02/what-are-your-personal-practices/</link>
      <pubDate>Tue, 02 Dec 2008 21:18:54 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/12/02/what-are-your-personal-practices/</guid>
      <description>I&amp;#8217;ve been reviewing Apprenticeship Patterns over the last week or so and one of the cool ideas I came across is that of creating a Personal Practices Map.
 The idea is that you draw up a list of your 10 most important practices for coding and design and draw out any relationships between them.
 This is mine as of now:
   I wouldn&amp;#8217;t say I follow all of these all the time, but they are the practices that I try to follow whenever possible.</description>
    </item>
    
    <item>
      <title>Saff Squeeze: First Thoughts</title>
      <link>https://www.markhneedham.com/blog/2008/11/21/saff-squeeze-first-thoughts/</link>
      <pubDate>Fri, 21 Nov 2008 00:58:07 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/11/21/saff-squeeze-first-thoughts/</guid>
      <description>While practicing some coding by doing the Roman number conversion last weekend I came across an article by Kent Beck which talked of a method he uses to remove the need to use the debugger to narrow down problems.
 He calls the method the &#39;Saff Squeeze&#39; and the basic idea as I understand it is to write the original failing test and then inline the pieces of code that it calls, adding assertions earlier on in the code until the actual point of failure is found.</description>
    </item>
    
    <item>
      <title>If you use an &#39;if&#39; you deserve to suffer</title>
      <link>https://www.markhneedham.com/blog/2008/10/21/if-you-use-an-if-you-deserve-to-suffer/</link>
      <pubDate>Tue, 21 Oct 2008 07:19:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/10/21/if-you-use-an-if-you-deserve-to-suffer/</guid>
      <description>One of the things I dislike the most when coding is writing if statements. and while I don&amp;#8217;t believe that if should be completely abolished from our toolkit, I think the anti if campaign started about a year ago is going along the right lines.
 While there is certainly value in using an if statement as a guard block it usually feels that we have missed an abstraction if we are using it elsewhere.</description>
    </item>
    
    <item>
      <title>Java vs .NET: An Overview</title>
      <link>https://www.markhneedham.com/blog/2008/10/15/java-vs-net-an-overview/</link>
      <pubDate>Wed, 15 Oct 2008 00:09:05 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/10/15/java-vs-net-an-overview/</guid>
      <description>A couple of months ago my colleague Mark Thomas posted about working on a C# project after 10 years working in Java, and being someone who has worked on projects in both languages fairly consistently (3 Java projects, 2 .NET projects) over the last two years I thought it would be interesting to do a comparison between the two.
 The standard ThoughtWorks joke is that you just need to remember to capitalise the first letter of method names in C# and then you&amp;#8217;re good to go but I think there&amp;#8217;s more to it than that.</description>
    </item>
    
    <item>
      <title>Easily misused language features</title>
      <link>https://www.markhneedham.com/blog/2008/09/25/easily-misused-language-features/</link>
      <pubDate>Thu, 25 Sep 2008 23:18:09 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/09/25/easily-misused-language-features/</guid>
      <description>In the comments of my previous post about my bad experiences with Java&amp;#8217;s import static my colleague Carlos and several others pointed out that it is actually a useful feature when used properly.
 The code base where I initially came across the feature misused it quite severely but it got me thinking about other language features I have come across which can add great value when used effectively but lead to horrific problems when misused.</description>
    </item>
    
    <item>
      <title>If they were that rubbish...</title>
      <link>https://www.markhneedham.com/blog/2008/08/08/if-they-were-that-rubbish/</link>
      <pubDate>Fri, 08 Aug 2008 19:15:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/08/if-they-were-that-rubbish/</guid>
      <description>Jay Fields certainly seemed to make some waves in the blogosphere with his recent post about 50% of the people in business software development needing to find a new profession.
 As a consultant I often go onto projects where a significant amount of difficult to understand and often untested code is in place. At times it feels like the people who have written it really don&amp;#8217;t care about the quality of their work which can be very disheartening.</description>
    </item>
    
    <item>
      <title>Do IDEs encourage bad code?</title>
      <link>https://www.markhneedham.com/blog/2008/07/27/do-ides-encourage-bad-code/</link>
      <pubDate>Sun, 27 Jul 2008 11:43:30 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/07/27/do-ides-encourage-bad-code/</guid>
      <description>Although modern day IDEs (Eclipse, IntelliJ, Resharper etc) undoubtedly provide a lot of benefits when writing code, I am starting to wonder if the ease at which they make things possible actually encourages bad habits.
 Useful features such as creating and initialising member variables from the definition of a constructor are quickly nullified by the ease at which one is able to create getters/setters/properties for these same member variables. All hopes of encapsulation gone with a few clicks of the mouse.</description>
    </item>
    
    <item>
      <title>Pair Programming: The Non Driving Pair</title>
      <link>https://www.markhneedham.com/blog/2008/02/14/pair-programming-the-non-driving-pair/</link>
      <pubDate>Thu, 14 Feb 2008 01:27:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/02/14/pair-programming-the-non-driving-pair/</guid>
      <description>One of the intriguing aspects of pair programming for me is that of the non driving person in the pair&amp;#8201;&amp;#8212;&amp;#8201;what are they supposed to do?!
 Obviously there are fairly well known strategies for more interactive pairing, such as Ping Pong and Ball and Board (which is where one person controls the mouse and the other the keyboard), but neither of these strategies suggest what to do when you are not driving</description>
    </item>
    
    <item>
      <title>Pair Programming: Introduction</title>
      <link>https://www.markhneedham.com/blog/2008/02/10/pair-programming-introduction/</link>
      <pubDate>Sun, 10 Feb 2008 01:47:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/02/10/pair-programming-introduction/</guid>
      <description>I&amp;#8217;ve had the opportunity to have worked with many different people pair programming wise over the last year or so, and having seen it done in several different ways thought it would be interesting to work through some of my thoughts about this Extreme Programming (XP) originated practice.
 First of all it seems to me that pair programming is a technique that is used with a lot more frequency at ThoughtWorks than at any other IT organisation.</description>
    </item>
    
    <item>
      <title>Inheritance and Delegation</title>
      <link>https://www.markhneedham.com/blog/2006/09/02/inheritance-and-delegation/</link>
      <pubDate>Sat, 02 Sep 2006 01:31:40 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2006/09/02/inheritance-and-delegation/</guid>
      <description>One of the major learning points this week at TWU has been understanding when it is appropriate to use inheritance and when delegation is the better choice.
 I had heard stories about how inheritance could be misused but I didn&amp;#8217;t think I would be stupid enough to fall straight into that trap! We were taught the concept using &#39;Measurement&#39; as the problem domain. So to translate the previous sentence into English: The aim was to design classes which could handle old school measurement types such as Inches, Feet, Yards, and so on.</description>
    </item>
    
    <item>
      <title>First thoughts on Ruby...</title>
      <link>https://www.markhneedham.com/blog/2006/08/29/first-thoughts-on-ruby/</link>
      <pubDate>Tue, 29 Aug 2006 20:01:05 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2006/08/29/first-thoughts-on-ruby/</guid>
      <description>I&amp;#8217;ve heard a lot about Ruby on Rails over the last couple of years but I&amp;#8217;d never really been intrigued to get it set up on my machine and &#39;have a play&#39; with it so to speak.
 It turned out to be a relatively painless process and after following the instructions on the official site I had it all setup within about half an hour which was a record for me for getting a development environment setup.</description>
    </item>
    
  </channel>
</rss>