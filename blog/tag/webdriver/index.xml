<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>webdriver on Mark Needham</title>
    <link>http://localhost:8000/blog/tag/webdriver/</link>
    <description>Recent content in webdriver on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Dec 2011 23:19:31 +0000</lastBuildDate><atom:link href="http://localhost:8000/blog/tag/webdriver/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WebDriver: Getting it to play nicely with Xvfb</title>
      <link>http://localhost:8000/blog/2011/12/15/webdriver-getting-it-to-play-nicely-with-xvfb/</link>
      <pubDate>Thu, 15 Dec 2011 23:19:31 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2011/12/15/webdriver-getting-it-to-play-nicely-with-xvfb/</guid>
      <description>Another thing we’ve been doing with WebDriver is having it run with the FirefoxDriver while redirecting the display output into the Xvfb framebuffer so that we can run it on our continuous integration agents which don’t have a display attached.
The first thing we needed to do was set the environment property &amp;#39;webdriver.firefox.bin&amp;#39; to our own script which would point the display to Xvfb before starting Firefox:
import java.lang.System._ lazy val firefoxDriver: FirefoxDriver = { setProperty(&amp;#34;webdriver.</description>
    </item>
    
    <item>
      <title>WebDriver: Getting it to play nicely with jQuery ColorBox</title>
      <link>http://localhost:8000/blog/2011/12/13/webdriver-getting-it-to-play-nicely-with-jquery-colorbox/</link>
      <pubDate>Tue, 13 Dec 2011 23:31:02 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2011/12/13/webdriver-getting-it-to-play-nicely-with-jquery-colorbox/</guid>
      <description>As I mentioned in an earlier post about removing manual test scenarios we’ve been trying to automate some parts of our application where a user action leads to a jQuery ColorBox powered overlay appearing.
With this type of feature there tends to be some sort of animation which accompanies the overlay so we have to wait for an element inside the overlay to become visible on the screen before trying to do any assertions on the overlay.</description>
    </item>
    
    <item>
      <title>Scala, WebDriver and the Page Object Pattern</title>
      <link>http://localhost:8000/blog/2011/08/09/scala-webdriver-and-the-page-object-pattern/</link>
      <pubDate>Tue, 09 Aug 2011 00:54:23 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2011/08/09/scala-webdriver-and-the-page-object-pattern/</guid>
      <description>We’re using WebDriver on my project to automate our functional tests and as a result are using the Page Object pattern to encapsulate each page of the application in our tests.
We’ve been trying to work out how to effectively reuse code since some of the pages have parts of them which work exactly the same as another page.
For example we had a test similar to this…​
class FooPageTests extends Spec with ShouldMatchers with FooPageSteps { it(&amp;#34;is my dummy test&amp;#34;) { .</description>
    </item>
    
  </channel>
</rss>
