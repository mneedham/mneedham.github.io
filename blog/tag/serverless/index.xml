<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>serverless on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/serverless/</link>
    <description>Recent content in serverless on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Sep 2017 07:51:29 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/serverless/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Serverless: Building a mini producer/consumer data pipeline with AWS SNS</title>
      <link>https://markhneedham.com/blog/2017/09/30/serverless-building-mini-producerconsumer-data-pipeline-aws-sns/</link>
      <pubDate>Sat, 30 Sep 2017 07:51:29 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/09/30/serverless-building-mini-producerconsumer-data-pipeline-aws-sns/</guid>
      <description>service: marks-blog frameworkVersion: &amp;#34;&amp;gt;=1.2.0 &amp;lt;2.0.0&amp;#34; provider: name: aws runtime: python3.6 timeout: 180 iamRoleStatements: - Effect: &amp;#39;Allow&amp;#39; Action: - &amp;#34;sns:Publish&amp;#34; Resource: - ${self:custom.BlogTopic} custom: BlogTopic: Fn::Join: - &amp;#34;:&amp;#34; - - arn - aws - sns - Ref: AWS::Region - Ref: AWS::AccountId - marks-blog-topic functions: message-consumer: name: MessageConsumer handler: handler.consumer events: - sns: topicName: marks-blog-topic displayName: Topic to process events message-producer: name: MessageProducer handler: handler.producer events: - schedule: rate(1 day) import boto3 import json import datetime from datetime import timezone def producer(event, context): sns = boto3.</description>
    </item>
    
    <item>
      <title>Serverless: S3 - S3BucketPermissions - Action does not apply to any resource(s) in statement</title>
      <link>https://markhneedham.com/blog/2017/09/29/serverless-s3-s3bucketpermissions-action-does-not-apply-to-any-resources-in-statement/</link>
      <pubDate>Fri, 29 Sep 2017 06:09:58 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/09/29/serverless-s3-s3bucketpermissions-action-does-not-apply-to-any-resources-in-statement/</guid>
      <description>const AWS = require(&amp;#34;aws-sdk&amp;#34;); let regionParams = { &amp;#39;region&amp;#39;: &amp;#39;us-east-1&amp;#39; } let s3 = new AWS.S3(regionParams); let s3BucketName = &amp;#34;marks-blog-bucket&amp;#34;; console.log(&amp;#34;Creating bucket: &amp;#34; + s3BucketName); let bucketParams = { Bucket: s3BucketName, ACL: &amp;#34;public-read&amp;#34; }; s3.createBucket(bucketParams).promise() .then(console.log) .catch(console.error); var putObjectParams = { Body: &amp;#34;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Hello blog!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#34;, Bucket: s3BucketName, Key: &amp;#34;blog.html&amp;#34; }; s3.putObject(putObjectParams).promise() .then(console.log) .catch(console.error); $ curl --head --silent https://s3.amazonaws.com/marks-blog-bucket/blog.html HTTP/1.1 403 Forbidden x-amz-request-id: 512FE36798C0BE4D x-amz-id-2: O1ELGMJ0jjs11WCrNiVNF2z2ssRgtO4+M4H2QQB5025HjIpC54VId0eKZryYeBYN8Pvb8GsolTQ= Content-Type: application/xml Transfer-Encoding: chunked Date: Fri, 29 Sep 2017 05:42:03 GMT Server: AmazonS3 service: marks-blog frameworkVersion: &amp;#34;&amp;gt;=1.</description>
    </item>
    
    <item>
      <title>Serverless: AWS HTTP Gateway - 502 Bad Gateway</title>
      <link>https://markhneedham.com/blog/2017/08/11/serverless-aws-http-gateway-502-bad-gateway/</link>
      <pubDate>Fri, 11 Aug 2017 16:01:50 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/08/11/serverless-aws-http-gateway-502-bad-gateway/</guid>
      <description>service: http-gateway frameworkVersion: &amp;#34;&amp;gt;=1.2.0 &amp;lt;2.0.0&amp;#34; provider: name: aws runtime: python3.6 timeout: 180 functions: no-op: name: NoOp handler: handler.noop events: - http: POST noOp def noop(event, context): return &amp;#34;hello&amp;#34; $ serverless deploy Serverless: Packaging service... Serverless: Excluding development dependencies... Serverless: Uploading CloudFormation file to S3... Serverless: Uploading artifacts... Serverless: Uploading service .zip file to S3 (179 B)... Serverless: Validating template... Serverless: Updating Stack... Serverless: Checking Stack update progress... .............. Serverless: Stack update finished.</description>
    </item>
    
    <item>
      <title>Serverless: Python - virtualenv - { &#34;errorMessage&#34;: &#34;Unable to import module &#39;handler&#39;&#34; }</title>
      <link>https://markhneedham.com/blog/2017/08/06/serverless-python-virtualenv-errormessage-unable-import-module-handler/</link>
      <pubDate>Sun, 06 Aug 2017 19:03:30 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/08/06/serverless-python-virtualenv-errormessage-unable-import-module-handler/</guid>
      <description>$ npm install serverless $ virtualenv -p python3 a $ . a/bin/activate service: python-starter-template frameworkVersion: &amp;#34;&amp;gt;=1.2.0 &amp;lt;2.0.0&amp;#34; provider: name: aws runtime: python3.6 timeout: 180 functions: starter-function: name: Starter handler: handler.starter import requests def starter(event, context): print(&amp;#34;event:&amp;#34;, event, &amp;#34;context:&amp;#34;, context) r = requests.get(&amp;#34;http://www.google.com&amp;#34;) print(r.status_code) $ pip install requests $ ./node_modules/serverless/bin/serverless invoke local --function starter-function event: {} context: &amp;lt;__main__.FakeLambdaContext object at 0x10bea9a20&amp;gt; 200 null $ ./node_modules/serverless/bin/serverless deploy Serverless: Packaging service... Serverless: Excluding development dependencies.</description>
    </item>
    
  </channel>
</rss>