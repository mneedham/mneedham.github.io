<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lambda on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/lambda/</link>
    <description>Recent content in lambda on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Apr 2017 23:49:45 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/tag/lambda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS Lambda: Programmatically scheduling a CloudWatchEvent</title>
      <link>https://www.markhneedham.com/blog/2017/04/05/aws-lambda-programatically-scheduling-a-cloudwatchevent/</link>
      <pubDate>Wed, 05 Apr 2017 23:49:45 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/04/05/aws-lambda-programatically-scheduling-a-cloudwatchevent/</guid>
      <description>I recently wrote a blog post showing how to create a Python &amp;#39;Hello World&amp;#39; AWS lambda function and manually invoke it, but what I really wanted to do was have it run automatically every hour.
To achieve that in AWS Lambda land we need to create a CloudWatch Event. The documentation describes them as follows:
Using simple rules that you can quickly set up, you can match events and route them to one or more target functions or streams.</description>
    </item>
    
    <item>
      <title>AWS Lambda: Encrypted environment variables</title>
      <link>https://www.markhneedham.com/blog/2017/04/03/aws-lambda-encrypted-environment-variables/</link>
      <pubDate>Mon, 03 Apr 2017 05:49:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/04/03/aws-lambda-encrypted-environment-variables/</guid>
      <description>Continuing on from my post showing how to create a &amp;#39;Hello World&amp;#39; AWS lambda function I wanted to pass encrypted environment variables to my function.
The following function takes in both an encrypted and unencrypted variable and prints them out.
Donâ€™t print out encrypted variables in a real function, this is just so we can see the example working!
import boto3 import os from base64 import b64decode def lambda_handler(event, context): encrypted = os.</description>
    </item>
    
    <item>
      <title>C#&#39;s Lambda ForEach: Only on Lists?</title>
      <link>https://www.markhneedham.com/blog/2008/12/15/cs-lamba-foreach-only-on-lists/</link>
      <pubDate>Mon, 15 Dec 2008 23:52:17 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/12/15/cs-lamba-foreach-only-on-lists/</guid>
      <description>One of my favourite things introduced into C# recently is the new ForEach method which can be applied to (apparently only!) lists.
Last week we had a situation where we wanted to make use of the ForEach method on an IDictionary which we were using to store a collection of Selenium clients.
IDictionary&amp;lt;string, ISelenium&amp;gt; seleniumClients = new Dictionary&amp;lt;string, ISelenium&amp;gt;(); We wanted to write a piece of code to exit all of the clients when our tests had completed.</description>
    </item>
    
    <item>
      <title>Lambda in C#: Conciseness v Readability</title>
      <link>https://www.markhneedham.com/blog/2008/11/24/c-new-language-features-conciseness-v-readability/</link>
      <pubDate>Mon, 24 Nov 2008 23:41:36 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/11/24/c-new-language-features-conciseness-v-readability/</guid>
      <description>One of the things I really disliked when I first came across C# 3.0 code was lambda functions.
At the time I remember speaking to my Tech Lead and expressing the opinion that they were making the code harder to understand and were valuing conciseness over readability.
After a week of reading about the new C# features and understanding how they worked the code was now more readable to me and a lot of the boiler plate code that I had come to expect was no longer necessary.</description>
    </item>
    
  </channel>
</rss>
