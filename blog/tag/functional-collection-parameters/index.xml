<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>functional-collection-parameters on Mark Needham</title>
    <link>http://localhost:8000/blog/tag/functional-collection-parameters/</link>
    <description>Recent content in functional-collection-parameters on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Jun 2009 18:31:59 +0000</lastBuildDate><atom:link href="http://localhost:8000/blog/tag/functional-collection-parameters/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Functional Collection Parameters: A different way of thinking about collections</title>
      <link>http://localhost:8000/blog/2009/06/18/functional-collection-parameters-a-different-way-of-thinking-about-collections/</link>
      <pubDate>Thu, 18 Jun 2009 18:31:59 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2009/06/18/functional-collection-parameters-a-different-way-of-thinking-about-collections/</guid>
      <description>One of the changes that I’ve noticed in my coding now compared to around 7 or 8 months ago is that whenever there’s some operations to be performed on a collection I am far more inclined to think of how to do those operations using a functional approach.
I’ve written previously about the ways I’ve been making use of functional collection parameters in my code but what I hadn’t really considered was that the way of thinking about the problem we want to solve is slightly different.</description>
    </item>
    
    <item>
      <title>Functional Collection Parameters: Handling the null collection</title>
      <link>http://localhost:8000/blog/2009/06/16/functional-collection-parameters-handling-the-null-collection/</link>
      <pubDate>Tue, 16 Jun 2009 20:29:29 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2009/06/16/functional-collection-parameters-handling-the-null-collection/</guid>
      <description>One of the interesting cases where I’ve noticed we tend to avoid functional collection parameters in our code base is when there’s the possibility of the collection being null.
The code is on the boundary of our application’s interaction with another service so it is actually a valid scenario that we could receive a null collection.
When using extension methods, although we wouldn’t get a null pointer exception by calling one on a null collection, we would get a &amp;#39;source is null&amp;#39; exception when the expression is evaluated so we need to protect ourself against this.</description>
    </item>
    
  </channel>
</rss>
