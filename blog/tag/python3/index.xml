<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python3 on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/python3/</link>
    <description>Recent content in python3 on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Dec 2017 17:23:14 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/python3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python: Combinations of values on and off</title>
      <link>https://markhneedham.com/blog/2017/12/03/python-combinations-values-off/</link>
      <pubDate>Sun, 03 Dec 2017 17:23:14 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/12/03/python-combinations-values-off/</guid>
      <description>0 0 1 0 1 0 1 0 0 1 1 0 1 0 1 0 1 1 1 1 1 &amp;gt;&amp;gt;&amp;gt; &amp;#34;{0:0b}&amp;#34;.format(1).zfill(3) &amp;#39;001&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#34;{0:0b}&amp;#34;.format(5).zfill(3) &amp;#39;101&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#34;{0:0b}&amp;#34;.format(6).zfill(3) &amp;#39;110&amp;#39; &amp;gt;&amp;gt;&amp;gt; [int(x) for x in list(&amp;#34;{0:0b}&amp;#34;.format(1).zfill(3))] [0, 0, 1] def combinations_on_off(num_classifiers): return [[int(x) for x in list(&amp;#34;{0:0b}&amp;#34;.format(i).zfill(num_classifiers))] for i in range(1, 2 ** num_classifiers)] &amp;gt;&amp;gt;&amp;gt; for combination in combinations_on_off(3): print(combination) [0, 0, 1] [0, 1, 0] [0, 1, 1] [1, 0, 0] [1, 0, 1] [1, 1, 0] [1, 1, 1] &amp;gt;&amp;gt;&amp;gt; for combination in combinations_on_off(4): print(combination) [0, 0, 0, 1] [0, 0, 1, 0] [0, 0, 1, 1] [0, 1, 0, 0] [0, 1, 0, 1] [0, 1, 1, 0] [0, 1, 1, 1] [1, 0, 0, 0] [1, 0, 0, 1] [1, 0, 1, 0] [1, 0, 1, 1] [1, 1, 0, 0] [1, 1, 0, 1] [1, 1, 1, 0] [1, 1, 1, 1] </description>
    </item>
    
    <item>
      <title>Python 3: TypeError: unsupported format string passed to numpy.ndarray.__format__</title>
      <link>https://markhneedham.com/blog/2017/11/19/python-3-typeerror-unsupported-format-string-passed-to-numpy-ndarray-__format__/</link>
      <pubDate>Sun, 19 Nov 2017 07:16:56 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/11/19/python-3-typeerror-unsupported-format-string-passed-to-numpy-ndarray-__format__/</guid>
      <description>Iteration Training set observations Testing set observations --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &amp;lt;ipython-input-28-007cbab507e3&amp;gt; in &amp;lt;module&amp;gt;() 6 print(&amp;#39;{} {:^61} {}&amp;#39;.format(&amp;#39;Iteration&amp;#39;, &amp;#39;Training set observations&amp;#39;, &amp;#39;Testing set observations&amp;#39;)) 7 for iteration, data in enumerate(kf, start=1): ----&amp;gt; 8 print(&amp;#39;{0:^9} {1} {2:^25}&amp;#39;.format(iteration, data[0], data[1])) TypeError: unsupported format string passed to numpy.ndarray.__format__ &amp;gt;&amp;gt;&amp;gt; import numpy as np &amp;gt;&amp;gt;&amp;gt; &amp;#34;{:9}&amp;#34;.format(np.array([1,2,3])) Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; TypeError: unsupported format string passed to numpy.</description>
    </item>
    
    <item>
      <title>Python 3: Create sparklines using matplotlib</title>
      <link>https://markhneedham.com/blog/2017/09/23/python-3-create-sparklines-using-matplotlib/</link>
      <pubDate>Sat, 23 Sep 2017 06:51:56 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/09/23/python-3-create-sparklines-using-matplotlib/</guid>
      <description>import matplotlib matplotlib.use(&amp;#34;Agg&amp;#34;) import matplotlib.pyplot as plt import base64 from io import BytesIO def sparkline(data, figsize=(4, 0.25), **kwags): &amp;#34;&amp;#34;&amp;#34; Returns a HTML image tag containing a base64 encoded sparkline style plot &amp;#34;&amp;#34;&amp;#34; data = list(data) fig, ax = plt.subplots(1, 1, figsize=figsize, **kwags) ax.plot(data) for k,v in ax.spines.items(): v.set_visible(False) ax.set_xticks([]) ax.set_yticks([]) plt.plot(len(data) - 1, data[len(data) - 1], &amp;#39;r.&amp;#39;) ax.fill_between(range(len(data)), data, len(data)*[min(data)], alpha=0.1) img = BytesIO() plt.savefig(img, transparent=True, bbox_inches=&amp;#39;tight&amp;#39;) img.seek(0) plt.close() return base64.</description>
    </item>
    
  </channel>
</rss>