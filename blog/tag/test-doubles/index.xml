<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>test-doubles on Mark Needham</title>
    <link>http://localhost:8000/blog/tag/test-doubles/</link>
    <description>Recent content in test-doubles on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Jul 2009 13:23:52 +0000</lastBuildDate><atom:link href="http://localhost:8000/blog/tag/test-doubles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Test Doubles: My current approach</title>
      <link>http://localhost:8000/blog/2009/07/14/test-doubles-my-current-approach/</link>
      <pubDate>Tue, 14 Jul 2009 13:23:52 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2009/07/14/test-doubles-my-current-approach/</guid>
      <description>My colleague Sarah Taraporewalla recently wrote about her thoughts on test doubles (to use Gerard Meszaros&amp;#39; language) and it got me thinking about the approach I generally take in this area.
Stub objects I use stubs mostly to control the output of depended on components of the system under test where we don’t want to verify those outputs.
Most of the time I make use of the mocking library’s ability to stub out method calls on these dependencies.</description>
    </item>
    
  </channel>
</rss>
