<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/golang/</link>
    <description>Recent content in golang on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Jan 2017 05:57:11 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/tag/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go: Multi-threaded writing to a CSV file</title>
      <link>https://www.markhneedham.com/blog/2017/01/31/go-multi-threaded-writing-csv-file/</link>
      <pubDate>Tue, 31 Jan 2017 05:57:11 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/01/31/go-multi-threaded-writing-csv-file/</guid>
      <description>As part of a Go script I’ve been working on I wanted to write to a CSV file from multiple Go routines, but realised that the built in CSV Writer isn’t thread safe.
My first attempt at writing to the CSV file looked like this:
package main import ( &amp;#34;encoding/csv&amp;#34; &amp;#34;os&amp;#34; &amp;#34;log&amp;#34; &amp;#34;strconv&amp;#34; ) func main() { csvFile, err := os.Create(&amp;#34;/tmp/foo.csv&amp;#34;) if err != nil { log.Panic(err) } w := csv.</description>
    </item>
    
    <item>
      <title>Go vs Python: Parsing a JSON response from a HTTP API</title>
      <link>https://www.markhneedham.com/blog/2017/01/21/go-vs-python-parsing-a-json-response-from-a-http-api/</link>
      <pubDate>Sat, 21 Jan 2017 10:49:46 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/01/21/go-vs-python-parsing-a-json-response-from-a-http-api/</guid>
      <description>As part of a recommendations with Neo4j talk that I’ve presented a few times over the last year I have a set of scripts that download some data from the meetup.com API.
They’re all written in Python but I thought it’d be a fun exercise to see what they’d look like in Go. My eventual goal is to try and parallelise the API calls.
This is the Python version of the script:</description>
    </item>
    
    <item>
      <title>Go: First attempt at channels</title>
      <link>https://www.markhneedham.com/blog/2016/12/24/go-first-attempt-at-channels/</link>
      <pubDate>Sat, 24 Dec 2016 10:45:42 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/12/24/go-first-attempt-at-channels/</guid>
      <description>In a previous blog post I mentioned that I wanted to extract blips from The ThoughtWorks Radar into a CSV file and I thought this would be a good mini project for me to practice using Go.
In particular I wanted to try using channels and this seemed like a good chance to do that.
&amp;lt;/p&amp;gt; I watched a talk by Rob Pike on designing concurrent applications where he uses the following definition of concurrency:&amp;lt;/p&amp;gt;</description>
    </item>
    
    <item>
      <title>Go: cannot execute binary file: Exec format error</title>
      <link>https://www.markhneedham.com/blog/2016/12/23/go-cannot-execute-binary-file-exec-format-error/</link>
      <pubDate>Fri, 23 Dec 2016 18:24:12 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/12/23/go-cannot-execute-binary-file-exec-format-error/</guid>
      <description>In an earlier blog post I mentioned that I’d been building an internal application to learn a bit of Go and I wanted to deploy it to AWS.
Since the application was only going to live for a couple of days I didn’t want to spend a long time build up anything fancy so my plan was just to build the executable, SSH it to my AWS instance, and then run it.</description>
    </item>
    
    <item>
      <title>Go: Templating with the Gin Web Framework</title>
      <link>https://www.markhneedham.com/blog/2016/12/23/go-templating-with-the-gin-web-framework/</link>
      <pubDate>Fri, 23 Dec 2016 14:30:09 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/12/23/go-templating-with-the-gin-web-framework/</guid>
      <description>I spent a bit of time over the last week building a little internal web application using Go and the Gin Web Framework and it took me a while to get the hang of the templating language so I thought I’d write up some examples.
Before we get started, I’ve got my GOPATH set to the following path:
$ echo $GOPATH /Users/markneedham/projects/gocode And the project containing the examples sits inside the src directory:</description>
    </item>
    
  </channel>
</rss>
