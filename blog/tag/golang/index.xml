<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/golang/</link>
    <description>Recent content in golang on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Jan 2017 05:57:11 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go: Multi-threaded writing to a CSV file</title>
      <link>https://markhneedham.com/blog/2017/01/31/go-multi-threaded-writing-csv-file/</link>
      <pubDate>Tue, 31 Jan 2017 05:57:11 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/01/31/go-multi-threaded-writing-csv-file/</guid>
      <description>As part of a Go script I&amp;rsquo;ve been working on I wanted to write to a CSV file from multiple Go routines, but realised that the built in CSV Writer isn&amp;rsquo;t thread safe.
My first attempt at writing to the CSV file looked like this:
package main import ( &amp;#34;encoding/csv&amp;#34; &amp;#34;os&amp;#34; &amp;#34;log&amp;#34; &amp;#34;strconv&amp;#34; ) func main() { csvFile, err := os.Create(&amp;#34;/tmp/foo.csv&amp;#34;) if err != nil { log.Panic(err) } w := csv.</description>
    </item>
    
    <item>
      <title>Go vs Python: Parsing a JSON response from a HTTP API</title>
      <link>https://markhneedham.com/blog/2017/01/21/go-vs-python-parsing-a-json-response-from-a-http-api/</link>
      <pubDate>Sat, 21 Jan 2017 10:49:46 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/01/21/go-vs-python-parsing-a-json-response-from-a-http-api/</guid>
      <description>As part of a recommendations with Neo4j talkthat I&amp;rsquo;ve presented a few times over the last year I have a set of scripts that download some data from the meetup.com API.
They&amp;rsquo;re all written in Python but I thought it&amp;rsquo;d be a fun exercise to see what they&amp;rsquo;d look like in Go. My eventual goal is to try and parallelise the API calls.
This is the Python version of the script:</description>
    </item>
    
    <item>
      <title>Go: First attempt at channels</title>
      <link>https://markhneedham.com/blog/2016/12/24/go-first-attempt-at-channels/</link>
      <pubDate>Sat, 24 Dec 2016 10:45:42 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2016/12/24/go-first-attempt-at-channels/</guid>
      <description>We&amp;rsquo;ll create two channels:
package scrape import ( &amp;#34;github.com/PuerkitoBio/goquery&amp;#34; &amp;#34;os&amp;#34; &amp;#34;bufio&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;io&amp;#34; ) func checkError(err error) { if err != nil { fmt.Println(err) log.Fatal(err) } } type Blip struct { Link string Title string } func (blip Blip) Download() File { parts := strings.Split(blip.Link, &amp;#34;/&amp;#34;) fileName := &amp;#34;rawData/items/&amp;#34; + parts[len(parts) - 1] if _, err := os.Stat(fileName); os.IsNotExist(err) { resp, err := http.Get(&amp;#34;http://www.thoughtworks.com&amp;#34; + blip.Link) checkError(err) body := resp.</description>
    </item>
    
    <item>
      <title>Go: cannot execute binary file: Exec format error</title>
      <link>https://markhneedham.com/blog/2016/12/23/go-cannot-execute-binary-file-exec-format-error/</link>
      <pubDate>Fri, 23 Dec 2016 18:24:12 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2016/12/23/go-cannot-execute-binary-file-exec-format-error/</guid>
      <description>$ go build $ scp myapp ubuntu@aws... $ ssh ubuntu@aws... $ ./myapp -bash: ./myapp: cannot execute binary file: Exec format error env GOOS=linux GOARCH=amd64 GOARM=7 go build </description>
    </item>
    
    <item>
      <title>Go: Templating with the Gin Web Framework</title>
      <link>https://markhneedham.com/blog/2016/12/23/go-templating-with-the-gin-web-framework/</link>
      <pubDate>Fri, 23 Dec 2016 14:30:09 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2016/12/23/go-templating-with-the-gin-web-framework/</guid>
      <description>$ echo $GOPATH /Users/markneedham/projects/gocode $ pwd /Users/markneedham/projects/gocode/src/github.com/mneedham/golang-gin-templating-demo $ go get gopkg.in/gin-gonic/gin.v1 $ ls -lh $GOPATH/src/gopkg.in total 0 drwxr-xr-x 3 markneedham staff 102B 23 Dec 10:55 gin-gonic package main import ( &amp;#34;github.com/gin-gonic/gin&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { router := gin.Default() router.LoadHTMLGlob(&amp;#34;templates/*&amp;#34;) // our handlers will go here  router.Run(&amp;#34;0.0.0.0:9090&amp;#34;) } $ ls -lh total 8 -rw-r--r-- 1 markneedham staff 570B 23 Dec 13:34 demo.go drwxr-xr-x 4 markneedham staff 136B 23 Dec 13:34 templates router.</description>
    </item>
    
  </channel>
</rss>