<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aspnet on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/aspnet/</link>
    <description>Recent content in aspnet on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Mar 2009 22:55:41 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/aspnet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ASP.NET MVC: Reducing duplication for partial models</title>
      <link>https://markhneedham.com/blog/2009/03/03/aspnet-mvc-using-adaptors-for-partial-models/</link>
      <pubDate>Tue, 03 Mar 2009 23:55:36 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/03/03/aspnet-mvc-using-adaptors-for-partial-models/</guid>
      <description>One of the problems we can encounter when using partialsthroughout our views is how we should create the model needed for those partials.
The approach that we have been following is to have the partial/child model on the parent model and then just call the appropriate method where we create the partial.
e.g.
public class ParentModel { public string Property1 {get;set;} public ChildModel ChildModel { get;set; } } public class ChildModel { public string Property1 {get;set;} } We have sometimes run into the problem where the data in the ChildModel is being populated from the ParentModel (due to it also being needed there) leading to data duplication.</description>
    </item>
    
    <item>
      <title>ASP.NET MVC: Preventing XSS attacks</title>
      <link>https://markhneedham.com/blog/2009/02/12/aspnet-mvc-preventing-xss-attacks/</link>
      <pubDate>Thu, 12 Feb 2009 22:47:30 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/02/12/aspnet-mvc-preventing-xss-attacks/</guid>
      <description>XSS(Cross site scripting) attacks on websites seem to be quite popular these days but luckily if you&amp;rsquo;re working with the ASP.NET MVC framework Steve Sanderson has written a great post on how to protect yourself from this.
The solution Steve details works the opposite way to other solutions I have heard for this problem - we assume that everything that goes to the browser needs to be HTML encoded unless otherwise stated.</description>
    </item>
    
    <item>
      <title>Oxite: Some Thoughts</title>
      <link>https://markhneedham.com/blog/2008/12/31/oxite-some-thoughts/</link>
      <pubDate>Wed, 31 Dec 2008 01:26:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/12/31/oxite-some-thoughts/</guid>
      <description>The recently released Oxitecode base has taken a bitofahammeringin the blogosphere for a variety of reasons - the general feeling being that it doesn&amp;rsquo;t really serve as a particularly good example of an ASP.NET MVC application.
I was intrigued to read the code though - you can always learn something by doing so and reading code is one of the ares that I want to improve in.
So in a style similar to that of a Technical Retrospectivethese are my thoughts.</description>
    </item>
    
    <item>
      <title>Html.RadioButton setting all values to selected value workaround</title>
      <link>https://markhneedham.com/blog/2008/11/28/htmlradiobutton-setting-all-values-to-selected-value-workaround/</link>
      <pubDate>Fri, 28 Nov 2008 21:32:28 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/11/28/htmlradiobutton-setting-all-values-to-selected-value-workaround/</guid>
      <description>While working with the Html.RadioButton() UI helper for ASP.NET MVC we came across an interesting problem whereby when you submitted the form, all the values for that particular group of radio buttons was set to the value of the one that was selected.
For example, given a form like this:
&amp;lt;%= Html.RadioButton(&amp;#34;option1&amp;#34;, true) %&amp;gt;Yes &amp;lt;%= Html.RadioButton(&amp;#34;option2&amp;#34;, false)%&amp;gt;No When we first load the page, this is the HTML it generated:
&amp;lt;input type=&amp;#34;radio&amp;#34; name=&amp;#34;option1&amp;#34; value=&amp;#34;true&amp;#34; /&amp;gt;Yes &amp;lt;input type=&amp;#34;radio&amp;#34; name=&amp;#34;option1&amp;#34; value=&amp;#34;false&amp;#34; /&amp;gt;No When we post the form having selected the &amp;lsquo;Yes&amp;rsquo; option for example, this is what the HTML looks like now:</description>
    </item>
    
    <item>
      <title>Debugging ASP.NET MVC source code</title>
      <link>https://markhneedham.com/blog/2008/11/19/debugging-aspnet-mvc-source-code/</link>
      <pubDate>Wed, 19 Nov 2008 21:30:19 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/11/19/debugging-aspnet-mvc-source-code/</guid>
      <description>We&amp;rsquo;ve been doing some work with the ASP.NET MVC framework this week and one of the things we wanted to be able to do is to debug through the source code to see how it works.
Our initial idea was to bin deploy the ASP.NET MVC assemblieswith the corresponding pdbs. Unfortunately this didn&amp;rsquo;t work and we got a conflict with the assemblies deployed in the GAC:
Compiler Error Message: CS0433: The type &amp;#39;System.</description>
    </item>
    
  </channel>
</rss>