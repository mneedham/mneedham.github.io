<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>coding-dojo on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/coding-dojo/</link>
    <description>Recent content in coding-dojo on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Sep 2009 00:26:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.markhneedham.com/blog/tag/coding-dojo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Coding Dojo #22: Scala, lamdaj, Project Euler</title>
      <link>https://www.markhneedham.com/blog/2009/09/04/coding-dojo-22-scala-lamdaj-project-euler/</link>
      <pubDate>Fri, 04 Sep 2009 00:26:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/09/04/coding-dojo-22-scala-lamdaj-project-euler/</guid>
      <description>In our latest coding dojo we played around with Scala and lambdaj while attempting to solve some of the problems on the Project Euler website.
 The Format We started off on two different machines with two of us having a look at solving the first Project Euler problem in Scala and the other two trying to solve it in Java while using the lambdaj library.
   What did we learn?</description>
    </item>
    
    <item>
      <title>Coding Dojo #21: TDD as if you meant it revisited</title>
      <link>https://www.markhneedham.com/blog/2009/08/08/coding-dojo-21-tdd-as-if-you-meant-it-revisited/</link>
      <pubDate>Sat, 08 Aug 2009 23:50:49 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/08/08/coding-dojo-21-tdd-as-if-you-meant-it-revisited/</guid>
      <description>In this weeks dojo we decided to revisit the &#34;TDD as if you meant it&#39; exercise originally invented by Keith Braithwaite for the Software Craftsmanship Conference but recently tried out at the Alt.NET UK Conference in London.
 The idea was to write code for &#39;tic tac toe&#39; or &#39;naughts and crosses&#39; and we were following these requirements:
   a game is over when all fields are taken</description>
    </item>
    
    <item>
      <title>Coding Dojo #20: Groovy Sales Tax Problem</title>
      <link>https://www.markhneedham.com/blog/2009/07/31/coding-dojo-20-groovy-sales-tax-problem/</link>
      <pubDate>Fri, 31 Jul 2009 09:07:26 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/07/31/coding-dojo-20-groovy-sales-tax-problem/</guid>
      <description>Continuing with the Groovy theme, this week we worked on the ThoughtWorks code review tax problem which involved modeling different items that a customer could buy and the associated tax rules that different types of goods had.
 The Format We had 3 people this week so most of the time we had all 3 of us involved in driving the code, which was projected onto the television screen again, while rotating every 10 minutes or so.</description>
    </item>
    
    <item>
      <title>Coding Dojo #19: Groovy Traveling salesman variation </title>
      <link>https://www.markhneedham.com/blog/2009/07/04/coding-dojo-19-groovy-traveling-salesman-variation/</link>
      <pubDate>Sat, 04 Jul 2009 09:36:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/07/04/coding-dojo-19-groovy-traveling-salesman-variation/</guid>
      <description>Our latest coding dojo involved working on a variation of the traveling salesman problem in Groovy again.
 The Format We had 8 people participating this week so we returned to the Randori format, rotating the pair at the keyboard every 7 minutes.
 Give the number of people it might have actually been better to have a couple of machines and use the UberDojo format.
   What We Learnt   The importance of just getting started stood out a lot for me in this dojo - there have been quite a few times when we&amp;#8217;ve met intending to do some coding and spent so long talking about coding that we didn&amp;#8217;t end up writing anything.</description>
    </item>
    
    <item>
      <title>Coding Dojo #18: Groovy Bowling Game</title>
      <link>https://www.markhneedham.com/blog/2009/06/26/coding-dojo-18-groovy-bowling-game/</link>
      <pubDate>Fri, 26 Jun 2009 18:15:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/26/coding-dojo-18-groovy-bowling-game/</guid>
      <description>This week&amp;#8217;s dojo involved coding a familiar problem - the bowling game - in a different language, Groovy.
 The code we wrote is available on bitbucket.
 The Format Cam, Dean and I took turns pairing with each other with the code projected onto a TV. As there were only a few of us the discussion on where we were taking the code tended to included everyone rather than just the two at the keyboard.</description>
    </item>
    
    <item>
      <title>Coding Dojo #17: Refactoring Cruise Control .NET</title>
      <link>https://www.markhneedham.com/blog/2009/06/12/coding-dojo-17-refactoring-cruise-control-net/</link>
      <pubDate>Fri, 12 Jun 2009 17:07:30 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/12/coding-dojo-17-refactoring-cruise-control-net/</guid>
      <description>After a couple of weeks of more experimental coding dojos this week we decided to get back to some pure coding with the session being focused around doing some refactoring of the continuous integration server Cruise Control .NET.
 The overall intention of the refactoring we worked on is to try and introduce the concept of a &#39;ChangeSet&#39; into the code base to represent the revisions that come in from source control systems that CC.</description>
    </item>
    
    <item>
      <title>Coding Dojo #16: Reading SUnit code</title>
      <link>https://www.markhneedham.com/blog/2009/05/29/coding-dojo-16-reading-sunit-code/</link>
      <pubDate>Fri, 29 May 2009 09:23:19 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/05/29/coding-dojo-16-reading-sunit-code/</guid>
      <description>Continuing on from last week&amp;#8217;s look at Smalltalk, in our latest coding dojo we spent some time investigating the SUnit testing framework, how we would use it to write some tests and looking at how it actually works.
 The Format We had 3 people for the dojo this week and the majority was spent looking at the code on a big screen and trying to understand between us what was going on.</description>
    </item>
    
    <item>
      <title>Coding Dojo #15: Smalltalk</title>
      <link>https://www.markhneedham.com/blog/2009/05/21/coding-dojo-15-smalltalk/</link>
      <pubDate>Thu, 21 May 2009 19:05:26 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/05/21/coding-dojo-15-smalltalk/</guid>
      <description>We decided to play around with Smalltalk a bit in our latest coding dojo.
 A lot of the ideas that I value the most in terms of writing software effectively seem to have originally come from the Smalltalk community and a colleague of mine has been reading Kent Beck&amp;#8217;s TDD by Example book and was really keen to try out the language to see where Kent&amp;#8217;s original ideas came from.</description>
    </item>
    
    <item>
      <title>Coding Dojo #14: Rock, Scissors, Paper - TDD as if you meant it </title>
      <link>https://www.markhneedham.com/blog/2009/05/15/coding-dojo-14-rock-scissors-paper-tdd-as-if-you-meant-it/</link>
      <pubDate>Fri, 15 May 2009 07:39:57 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/05/15/coding-dojo-14-rock-scissors-paper-tdd-as-if-you-meant-it/</guid>
      <description>We decided to have a second week of following Keith Braithwaite&amp;#8217;s &#39;http://www.parlezuml.com/softwarecraftsmanship/sessions/tdd_as_if_you_meant_it.htm[TDD as if you meant it]&#39; exercise which he led at the Software Craftsmanship Conference.
 Our attempt a fortnight ago was around implementing a Flash Message interceptor, to hook into the Spring framework but this week was focused more around modeling, the goal being to model a game of Rock, Paper, Scissors.
 The code is available on our bitbucket repository.</description>
    </item>
    
    <item>
      <title>Coding Dojo #13: TDD as if you meant it</title>
      <link>https://www.markhneedham.com/blog/2009/04/30/coding-dojo-13-tdd-as-if-you-meant-it/</link>
      <pubDate>Thu, 30 Apr 2009 06:12:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/04/30/coding-dojo-13-tdd-as-if-you-meant-it/</guid>
      <description>We decided to follow Keith Braithwaite&amp;#8217;s &#39;http://www.parlezuml.com/softwarecraftsmanship/sessions/tdd_as_if_you_meant_it.htm[TDD as if you meant it]&#39; exercise which he led at the Software Craftsmanship Conference and which I originally read about on Gojko Adzic&amp;#8217;s blog.
 We worked on implementing a Flash Message interceptor, to hook into the Spring framework, that one of my colleague&amp;#8217;s has been working on - the idea is to show a flash method to the user, that message being stored in the session on a Post and then removed on a Get in the &#39;http://en.</description>
    </item>
    
    <item>
      <title>Coding Dojo #12: F#</title>
      <link>https://www.markhneedham.com/blog/2009/04/16/coding-dojo-12-f/</link>
      <pubDate>Thu, 16 Apr 2009 18:20:50 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/04/16/coding-dojo-12-f/</guid>
      <description>In our latest coding dojo we worked on trying to port some of the functionality of some C# 1.0 brain models, and in particular one around simulating chaos behaviour, that Dave worked on at university.
 The Format This was more of an experimental dojo since everyone was fairly new to F# so we didn&amp;#8217;t rotate the pair at the keyboard as frequently as possible.
   What We Learnt   The aim of the session was to try and put some unit tests around the C# code and then try and replace that code with an F# version of it piece by piece.</description>
    </item>
    
    <item>
      <title>Coding Dojo #11: Javascript Isola</title>
      <link>https://www.markhneedham.com/blog/2009/03/06/coding-dojo-11-javascript-isola/</link>
      <pubDate>Fri, 06 Mar 2009 06:38:42 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/03/06/coding-dojo-11-javascript-isola/</guid>
      <description>In our latest coding dojo we attempted to code Isola in Javascript but instead of coding from the board inwards we decided to try and take the approach of coding from the cells outwards to keep it interesting.
 My colleague brought in his copy of the game and it made it much easier to imagine how we should be modeling it by having the game in front of us.</description>
    </item>
    
    <item>
      <title>Coding Dojo #10: Isola III</title>
      <link>https://www.markhneedham.com/blog/2009/02/19/coding-dojo-10-isola-iii/</link>
      <pubDate>Thu, 19 Feb 2009 23:09:33 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/19/coding-dojo-10-isola-iii/</guid>
      <description>In our latest coding dojo we continued working on Isola with a focus on adding functionality following on from last week&amp;#8217;s refactoring effort.
 The Format We used the Randori approach with four people participating for the whole session.
   What We Learnt   Our real aim for this session was to try and get the code into a state where we could reject an invalid move i.</description>
    </item>
    
    <item>
      <title>Coding Dojo #9: Refactoring Isola</title>
      <link>https://www.markhneedham.com/blog/2009/02/12/coding-dojo-9-refactoring-isola/</link>
      <pubDate>Thu, 12 Feb 2009 21:46:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/12/coding-dojo-9-refactoring-isola/</guid>
      <description>Our latest coding dojo involved refactoring the code we wrote a couple of weeks ago for the board game Isola.
 We started a repository on Bit Bucket to store our code from these sessions.
 The Format We used the Randori approach again with four people participating for the whole session.
   What We Learnt   Last time we had spent most of our time purely making the code functional so all the objects were completely mutable.</description>
    </item>
    
    <item>
      <title>Coding Dojo #8: Isola</title>
      <link>https://www.markhneedham.com/blog/2009/01/30/coding-dojo-8-isola/</link>
      <pubDate>Fri, 30 Jan 2009 11:17:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/01/30/coding-dojo-8-isola/</guid>
      <description>Our latest coding dojo involved writing the board game Isola in Java.
 The Format We used the Randori approach again with around 8 or 9 people participating for the majority of the session, our biggest turnout yet. I think the majority of people had the opportunity to drive a couple of times over the evening.
 We had the pair driving at the front of the room and everyone else further back to stop the tendency of observers to whiteboard stuff.</description>
    </item>
    
    <item>
      <title>Coding Dojo #7: Retlang/Hamcrest .NET attempt</title>
      <link>https://www.markhneedham.com/blog/2009/01/22/coding-dojo-7-retlanghamcrest-net-attempt/</link>
      <pubDate>Thu, 22 Jan 2009 23:02:15 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/01/22/coding-dojo-7-retlanghamcrest-net-attempt/</guid>
      <description>We ran a sort of coding dojo/playing around session which started with us looking at the .NET concurrency library, Retlang, and ended with an attempt to write Hamcrest style assertions in C#.
 The Format We had the same setup as for our normal coding dojos with two people at the keyboard although we didn&amp;#8217;t rotate as aggressively as normal.
   What We Learnt   We started off having a look at a concurrency problem in Cruise Control .</description>
    </item>
    
    <item>
      <title>Coding Dojo #6: Web Driver</title>
      <link>https://www.markhneedham.com/blog/2009/01/15/coding-dojo-6-web-driver/</link>
      <pubDate>Thu, 15 Jan 2009 00:37:24 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/01/15/coding-dojo-6-web-driver/</guid>
      <description>We ran a sort of coding dojo/more playing around with web driver learning session this evening, coding some tests in Java driving Planet TW from the code.
 The Format We had the same setup as for our normal coding dojos but only one person was driving at a time and the others were watching from around them offering tips on different approaches. I think only a couple of us drove during the session.</description>
    </item>
    
    <item>
      <title>Coding Dojo #5: Uno</title>
      <link>https://www.markhneedham.com/blog/2009/01/08/coding-dojo-5-uno/</link>
      <pubDate>Thu, 08 Jan 2009 23:41:57 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/01/08/coding-dojo-5-uno/</guid>
      <description>We ran our 5th coding dojo on Thursday night, writing the card game Uno in Java. We didn&amp;#8217;t all know the rules so this video explained it - surely a parody but you never know!
 The Format We used the Randori approach again with 6 people participating for the majority of the session. Everyone paired with everyone else at least once and sometimes a couple of times.
 We had the pair driving at the front of the room and everyone else further back to stop the tendency of observers to whiteboard stuff.</description>
    </item>
    
    <item>
      <title>Coding Dojo #4: Roman Numerals</title>
      <link>https://www.markhneedham.com/blog/2008/11/30/coding-dojo-4-roman-numerals/</link>
      <pubDate>Sun, 30 Nov 2008 17:58:27 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/11/30/coding-dojo-4-roman-numerals/</guid>
      <description>We ran our 4th coding dojo on Thursday night, attempting to solve the Roman Numerals problem from the TDD Problems website.
 The Format We ran with the Randori approach again with between 4-6 participants taking part. We coded for about an hour and a half.
 The pair coding were sat at the front of the room this time in an attempt to keep the focus on the code, a problem identified last week.</description>
    </item>
    
    <item>
      <title>Coding Dojo #3: Krypton Factor</title>
      <link>https://www.markhneedham.com/blog/2008/11/22/coding-dojo-3-krypton-factor/</link>
      <pubDate>Sat, 22 Nov 2008 11:00:03 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/11/22/coding-dojo-3-krypton-factor/</guid>
      <description>We ran our 3rd coding dojo on Thursday night, attempting to solve the Krypton Factor problem from the Online Judge website.
 The Format We ran with the Randori approach again, exactly the same as last week but this time we only had 4 participants for the majority of the coding session.
   What We Learnt   We still ended up spending a large percentage of the time drawing out the problem on the whiteboard and not coding.</description>
    </item>
    
    <item>
      <title>Coding Dojo #2: Bowling Game &amp; Object Calisthenics Continued</title>
      <link>https://www.markhneedham.com/blog/2008/11/13/coding-dojo-2-bowling-game-object-calisthenics-continued/</link>
      <pubDate>Thu, 13 Nov 2008 22:39:07 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/11/13/coding-dojo-2-bowling-game-object-calisthenics-continued/</guid>
      <description>We ran another Coding Dojo on Wednesday night as part of ThoughtWorks Geek Night where we continued working on the Bowling Game problem from last week, keeping the Object Calisthenics approach broadly in mind but not sticking to it as strictly.
 The Format This time we followed the Randori approach, with a projector beaming the code onto the wall, 2 people pairing on the problem and everyone else watching.</description>
    </item>
    
    <item>
      <title>Object Calisthenics: First thoughts</title>
      <link>https://www.markhneedham.com/blog/2008/11/06/object-calisthenics-first-thoughts/</link>
      <pubDate>Thu, 06 Nov 2008 21:30:26 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/11/06/object-calisthenics-first-thoughts/</guid>
      <description>We ran an Object Calisthenics variation of Coding Dojo on Wednesday night as part of ThoughtWorks Geek Night in Sydney.
 Object Calisthenics is an idea suggest by Jeff Bay in The ThoughtWorks Anthology , and lists 9 rules to writing better Object Oriented code. For those who haven&amp;#8217;t seen the book, the 9 rules are:
  Use only one level of indentation per method
  Don&amp;#8217;t use the else keyword</description>
    </item>
    
  </channel>
</rss>