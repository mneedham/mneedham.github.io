<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>puppet on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/puppet/</link>
    <description>Recent content in puppet on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Apr 2013 13:40:28 +0000</lastBuildDate>
    
	<atom:link href="https://www.markhneedham.com/blog/tag/puppet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Puppet: Package Versions - To pin or not to pin</title>
      <link>https://www.markhneedham.com/blog/2013/04/27/puppet-package-versions-to-pin-or-not-to-pin/</link>
      <pubDate>Sat, 27 Apr 2013 13:40:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/04/27/puppet-package-versions-to-pin-or-not-to-pin/</guid>
      <description>Over the last year or so I&amp;#8217;ve spent quite a bit of time working with puppet and one of the things that we had to decide when installing packages was whether or not to specify a particular version.
 On the first project I worked on we didn&amp;#8217;t bother and just let the package manager chose the most recent version.
 Therefore if we were installing nginx the puppet code would read like this:</description>
    </item>
    
    <item>
      <title>Puppet Debt</title>
      <link>https://www.markhneedham.com/blog/2013/04/16/puppet-debt/</link>
      <pubDate>Tue, 16 Apr 2013 20:57:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/04/16/puppet-debt/</guid>
      <description>I&amp;#8217;ve been playing around with a puppet configuration to run a neo4j server on an Ubuntu VM and one thing that has been quite tricky is getting the Sun/Oracle Java JDK to install repeatably.
 I adapted Julian&amp;#8217;s Java module which uses OAB-Java and although it was certainly working cleanly at one stage I somehow ended up with it not working because of failed dependencies:
 [2013-04-12 07:03:10] Notice: /Stage[main]/Java/Exec[install OAB repo]/returns: [x] Installing Java build requirements Ofailed [2013-04-12 07:03:10] Notice: /Stage[main]/Java/Exec[install OAB repo]/returns: ^[[m^O [i] Showing the last 5 lines from the logfile (/root/oab-java.</description>
    </item>
    
    <item>
      <title>puppetdb: Failed to submit &#39;replace catalog&#39; command for client to PuppetDB at puppetmaster:8081: [500 Server Error]</title>
      <link>https://www.markhneedham.com/blog/2012/08/16/puppetdb-failed-to-submit-replace-catalog-command-for-client-to-puppetdb-at-puppetmaster8081-500-server-error/</link>
      <pubDate>Thu, 16 Aug 2012 23:31:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/08/16/puppetdb-failed-to-submit-replace-catalog-command-for-client-to-puppetdb-at-puppetmaster8081-500-server-error/</guid>
      <description>I&amp;#8217;m still getting used to the idea of following the logs when working out what&amp;#8217;s going wrong with distributed systems but it worked well when trying to work out why our puppet client which was throwing this error when we ran &#39;puppet agent -tdv&#39;:
 err: Could not retrieve catalog from remote server: Error 400 on SERVER: Failed to submit &#39;replace catalog&#39; command for client to PuppetDB at puppetmaster:8081: [500 Server Error]   We were seeing the same error in /var/log/syslog on the puppet master and a quick look at the process list didn&amp;#8217;t show that the puppet master or puppetdb services were under a particularly heavy load.</description>
    </item>
    
    <item>
      <title>Puppet: Keeping the discipline</title>
      <link>https://www.markhneedham.com/blog/2012/07/29/puppet-keeping-the-discipline/</link>
      <pubDate>Sun, 29 Jul 2012 21:53:03 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/07/29/puppet-keeping-the-discipline/</guid>
      <description>For the last 5 weeks or so I&amp;#8217;ve been working with puppet every day to automate the configuration of various nodes in our stack and my most interesting observation so far is that you really need to keep your discipline when doing this type of work.
 We can keep that discipline in three main ways when developing modules.
 Running from scratch Configuring various bits of software seems to follow the 80/20 rule and we get very close to having each thing working quite quickly but then end up spending a disproportionate amount of time tweaking the last little bits.</description>
    </item>
    
  </channel>
</rss>