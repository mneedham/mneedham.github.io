<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nhibernate on Mark Needham</title>
    <link>http://markhneedham.com/blog/tag/nhibernate/</link>
    <description>Recent content in Nhibernate on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Jun 2010 06:45:11 +0000</lastBuildDate>
    
	<atom:link href="http://markhneedham.com/blog/tag/nhibernate/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NHibernate 2nd level cache: Doing it wrong?</title>
      <link>http://markhneedham.com/blog/2010/06/29/nhibernate-2nd-level-cache-doing-it-wrong/</link>
      <pubDate>Tue, 29 Jun 2010 06:45:11 +0000</pubDate>
      
      <guid>http://markhneedham.com/blog/2010/06/29/nhibernate-2nd-level-cache-doing-it-wrong/</guid>
      <description>I wrote a couple of weeks ago about how we&amp;rsquo;d been trying to make use of the NHibernate 2nd level cache and we were able to cache our data by following the various posts that I listed.
Unfortunately when we ran some performance tests we found that the performance of the application was significantly worse than when we just wrote our own &amp;lsquo;cache&amp;rsquo; - an object which had a dictionary containing the reference data items we&amp;rsquo;d previously tried to lookup and the appropriate values.</description>
    </item>
    
    <item>
      <title>Fluent NHibernate and the 2nd level cache</title>
      <link>http://markhneedham.com/blog/2010/06/16/fluent-nhibernate-and-the-2nd-level-cache/</link>
      <pubDate>Wed, 16 Jun 2010 00:07:43 +0000</pubDate>
      
      <guid>http://markhneedham.com/blog/2010/06/16/fluent-nhibernate-and-the-2nd-level-cache/</guid>
      <description>We&amp;rsquo;ve been trying to cache some objects using NHibernate&amp;rsquo;s second level cache which always proves to be a trickier task than I remember it being the previous time!
We&amp;rsquo;re storing some reference data in the database and then using LINQ to NHibernate to query for the specific row that we want based on some user entered criteria.
We can cache that query by calling &amp;lsquo;SetCacheable&amp;rsquo; on the &amp;lsquo;QueryOptions&amp;rsquo; property of our query:</description>
    </item>
    
    <item>
      <title>Fluent NHibernate: Seeing the mapping files generated</title>
      <link>http://markhneedham.com/blog/2010/06/15/fluent-nhibernate-seeing-the-mapping-files-generated/</link>
      <pubDate>Tue, 15 Jun 2010 23:15:30 +0000</pubDate>
      
      <guid>http://markhneedham.com/blog/2010/06/15/fluent-nhibernate-seeing-the-mapping-files-generated/</guid>
      <description>We&amp;rsquo;ve been fiddling around with Fluent NHibernate a bit over the last couple of days and one of the things that we wanted to do was output the NHibernate mapping files being generated so we could see if they were as expected.
I couldn&amp;rsquo;t figure out how to do it but thanks to the help of James Gregory, Andrew Bullock and Matthew Erbs on twitter this is the code that you need in order to do that:</description>
    </item>
    
  </channel>
</rss>