<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bitwise on Mark Needham</title>
    <link>http://markhneedham.com/blog/tag/bitwise/</link>
    <description>Recent content in Bitwise on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Dec 2012 13:14:42 +0000</lastBuildDate>
    
	<atom:link href="http://markhneedham.com/blog/tag/bitwise/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bitwise operations in Ruby and Haskell</title>
      <link>http://markhneedham.com/blog/2012/12/31/bitwise-operations-in-ruby-and-haskell/</link>
      <pubDate>Mon, 31 Dec 2012 13:14:42 +0000</pubDate>
      
      <guid>http://markhneedham.com/blog/2012/12/31/bitwise-operations-in-ruby-and-haskell/</guid>
      <description>Part of one of the most recent problems in the Algorithms 2 course required us to find the &#39;neighbours&#39; of binary values.
In this case a neighbour is described as being any other binary value which has an equivalent value or differs in 1 or 2 bits.
e.g. the neighbours of &#39;10000&#39; would be &#39;00000&#39;, &#39;00001&#39;, &#39;00010&#39;, &#39;00100&#39;, &#39;&#39;01000&#39;, &#39;10001&#39;, &#39;10010&#39;, &#39;10011&#39;, &#39;10100&#39;, &#39;10101&#39;, &#39;10110&#39;, &#39;11000&#39;, &#39;11001&#39;, &#39;11010&#39; and &#39;11100&#39;~~~ I initially treated &#39;10000&#39; as an array of 1s and 0s and wrote a function to recursively come up with the above combinations before it was pointed out to me that it&#39;d be much easier to use bit wise logic instead.</description>
    </item>
    
  </channel>
</rss>