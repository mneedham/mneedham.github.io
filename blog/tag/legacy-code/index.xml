<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>legacy-code on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/legacy-code/</link>
    <description>Recent content in legacy-code on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Nov 2009 06:33:22 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/legacy-code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Legacy Code: Sensing</title>
      <link>https://markhneedham.com/blog/2009/11/10/legacy-code-sensing/</link>
      <pubDate>Tue, 10 Nov 2009 06:33:22 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/11/10/legacy-code-sensing/</guid>
      <description>In &#39;http://www.amazon.com/gp/product/0131177052?ie=UTF8&amp;amp;tag=marneesblo-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0131177052[Working Effectively With Legacy Code]&#39; Michael Feathers describes two reasons for wanting to break dependencies in our code - to allow separation and sensing.
 The former describes the need to get a piece of code into a test harness while the latter describes the need to assert whether that piece of code is doing what we want it to.
 On the projects I&amp;#8217;ve worked on we&amp;#8217;ve tended to run into problems with the latter more frequently and Matt and I actually ran into this problem when we were refactoring some code into a role based interface approach.</description>
    </item>
    
    <item>
      <title>Book Club: An agile approach to a legacy system (Chris Stevenson and Andy Pols)</title>
      <link>https://markhneedham.com/blog/2009/07/15/book-club-an-agile-approach-to-a-legacy-system-chris-stevenson-and-andy-pols/</link>
      <pubDate>Wed, 15 Jul 2009 00:53:45 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/07/15/book-club-an-agile-approach-to-a-legacy-system-chris-stevenson-and-andy-pols/</guid>
      <description>Our latest book club session was a discussion on a paper written by my colleague Chris Stevenson and Andy Pols titled &#39;http://www.skizz.biz/whitepapers/an-agile-approach-to-a-legacy-system.pdf[An Agile Approach to a Legacy System]&#39; which I think was written in 2004. This paper was suggested by Dave Cameron.
 These are some of my thoughts and our discussion of the paper:
   The first thing that was quite interesting was that the authors pointed out that if you just try and rewrite a part of a legacy system you are actually just writing legacy code yourself - we weren&amp;#8217;t sure exactly what was meant by this since for me at least the definition of legacy code is &#39;code which we are scared to change [because it has no tests]&#39; but presumably the new code did have tests so it wasn&amp;#8217;t legacy in this sense.</description>
    </item>
    
  </channel>
</rss>