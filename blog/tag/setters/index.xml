<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>setters on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/setters/</link>
    <description>Recent content in setters on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 May 2009 15:37:34 +0000</lastBuildDate>
    
	<atom:link href="https://www.markhneedham.com/blog/tag/setters/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Coding: Setters reduce trust</title>
      <link>https://www.markhneedham.com/blog/2009/05/23/coding-setters-reduce-trust/</link>
      <pubDate>Sat, 23 May 2009 15:37:34 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/05/23/coding-setters-reduce-trust/</guid>
      <description>I&amp;#8217;ve written previously about my dislike of the way the object initialiser is misused in C# 3.0 and although I&amp;#8217;ve also written about my preference for explicit modeling and the need for objects to act as good citizensI&amp;#8217;ve never quite been able to articulate what it is I dislike so much about having setter methods on objects.
 I&amp;#8217;ve learnt from experience that it leads to a world of pain in our code by having the ability to setup an object after construction using setters and in a conversation with a colleague about this last week he suggested that the reason it&amp;#8217;s such a bad practice to follow is that it makes us lose our trust in not only that object but in all the other objects in the application.</description>
    </item>
    
  </channel>
</rss>