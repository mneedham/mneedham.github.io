<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>configuration on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/configuration/</link>
    <description>Recent content in configuration on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Sep 2008 03:54:25 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/tag/configuration/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configurable Builds: One configuration file per machine</title>
      <link>https://www.markhneedham.com/blog/2008/09/13/configurable-builds-one-configuration-file-per-machine/</link>
      <pubDate>Sat, 13 Sep 2008 03:54:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/09/13/configurable-builds-one-configuration-file-per-machine/</guid>
      <description>I’ve covered some of the ways that I’ve seen for making builds configurable in previous posts:
One configuration file per environment
One configuration file per user
Overriding properties
One which I haven’t covered which my colleagues Gil Peeters and Jim Barritt have pointed out is having a build with one configuration file for each machine.
Again the setup is fairly similar to one configuration per user or environment. Using Nant we would have the following near the top of the build file:</description>
    </item>
    
    <item>
      <title>Configurable Builds: Overriding properties</title>
      <link>https://www.markhneedham.com/blog/2008/09/02/configurable-builds-overriding-properties/</link>
      <pubDate>Tue, 02 Sep 2008 14:49:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/09/02/configurable-builds-overriding-properties/</guid>
      <description>Sometimes when configuring our build for flexibility we don’t need to spend the time required to create one build configuration per user or one build configuration per environment.
In these cases we can just override properties when we call Nant from the command line.
One recent example where I made use of this was where we had one configuration file with properties in but wanted to override a couple of them when we ran the continuous integration build.</description>
    </item>
    
    <item>
      <title>Configurable Builds: One configuration file per user</title>
      <link>https://www.markhneedham.com/blog/2008/09/02/configurable-builds-one-configuration-file-per-user/</link>
      <pubDate>Tue, 02 Sep 2008 13:53:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/09/02/configurable-builds-one-configuration-file-per-user/</guid>
      <description>Following on from my first post about making builds configurable, the second way of doing this that I have seen is to have one configuration build file per user.
This approach is more useful where there are different configurations needed on each developer machine. For example, if the databases being used for development are on a remote server then each developer machine would be assigned a database with a different name.</description>
    </item>
    
    <item>
      <title>Configurable Builds: One configuration file per environment</title>
      <link>https://www.markhneedham.com/blog/2008/09/02/configurable-builds-one-configuration-file-per-environment/</link>
      <pubDate>Tue, 02 Sep 2008 01:50:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/09/02/configurable-builds-one-configuration-file-per-environment/</guid>
      <description>One of the most important things when coding build files is to try and make them as configurable as possible.
At the very least on an agile project there will be a need for two different configurations - one for developer machines and one for continuous integration.
On my last two .NET projects we have setup our Nant build to take in a parameter which indicates which build configuration should be used.</description>
    </item>
    
  </channel>
</rss>
