<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leadership on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/leadership/</link>
    <description>Recent content in leadership on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Feb 2012 01:31:09 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/leadership/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tech Leads &amp; The Progress Principle</title>
      <link>https://markhneedham.com/blog/2012/02/18/tech-leads-the-progress-principle/</link>
      <pubDate>Sat, 18 Feb 2012 01:31:09 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/02/18/tech-leads-the-progress-principle/</guid>
      <description>I&amp;rsquo;ve been reading The Progress Principleon and off for the last couple of months and one of my favourite quotes from the book is the following:
While a tech lead might not like to be referred to as a manager I think part of the role does involve helping developers to make progressand the best ones I&amp;rsquo;ve worked with seem to do that instinctively.
They&amp;rsquo;re able to see when someone has got very stuck with what they&amp;rsquo;re doing and can then work out whether they just need to provide some advice on how they can move forward or if that&amp;rsquo;s not working they can come and work together on the problem.</description>
    </item>
    
    <item>
      <title>Leadership and software teams: Some thoughts</title>
      <link>https://markhneedham.com/blog/2010/06/22/leadership-and-software-teams-some-thoughts/</link>
      <pubDate>Tue, 22 Jun 2010 22:51:10 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/06/22/leadership-and-software-teams-some-thoughts/</guid>
      <description>Roy Osherove wrote a post about a month ago describing the different maturity levels of software teamsand the strategies that he uses when leading each of these which I found quite interesting.
He describes the following states of maturity for a team:
Later on in the article he goes on to describe the best approach as a leader of each of these types of team:
My experience over the last few years is that a lot of tech leads seem to start off with the assumption that their team is a chaotic one and that they need to make every decision if a project is going to be successful.</description>
    </item>
    
  </channel>
</rss>