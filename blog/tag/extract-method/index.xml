<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Extract Method on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/extract-method/</link>
    <description>Recent content in Extract Method on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Jun 2009 20:30:47 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/extract-method/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Coding: Why do we extract method?</title>
      <link>https://markhneedham.com/blog/2009/06/04/coding-why-do-we-extract-method/</link>
      <pubDate>Thu, 04 Jun 2009 20:30:47 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/06/04/coding-why-do-we-extract-method/</guid>
      <description>Ever since I&amp;rsquo;ve read Uncle Bob&amp;rsquo;s Clean Code book my approach to coding has been all about the &amp;lsquo;extract method&amp;rsquo; refactoring - I pretty much look to extract method as much as I can until I get to the point where extracting another method would result in me just describing the language semantics in the method name.
One of the approaches that I&amp;rsquo;ve come across with regards to doing this refactoring is that it&amp;rsquo;s only used when there is duplication of code and we want to reduce that duplication so that it&amp;rsquo;s all in one place and then call that method from two places.</description>
    </item>
    
  </channel>
</rss>