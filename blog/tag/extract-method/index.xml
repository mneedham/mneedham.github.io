<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>extract-method on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/extract-method/</link>
    <description>Recent content in extract-method on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Jun 2009 20:30:47 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/tag/extract-method/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Coding: Why do we extract method?</title>
      <link>https://www.markhneedham.com/blog/2009/06/04/coding-why-do-we-extract-method/</link>
      <pubDate>Thu, 04 Jun 2009 20:30:47 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/04/coding-why-do-we-extract-method/</guid>
      <description>Ever since I’ve read Uncle Bob’s Clean Code book my approach to coding has been all about the &amp;#39;extract method&amp;#39; refactoring - I pretty much look to extract method as much as I can until I get to the point where extracting another method would result in me just describing the language semantics in the method name.
One of the approaches that I’ve come across with regards to doing this refactoring is that it’s only used when there is duplication of code and we want to reduce that duplication so that it’s all in one place and then call that method from two places.</description>
    </item>
    
  </channel>
</rss>
