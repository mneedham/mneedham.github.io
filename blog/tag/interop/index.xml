<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Interop on Mark Needham</title>
    <link>http://markhneedham.com/blog/tag/interop/</link>
    <description>Recent content in Interop on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Mar 2013 20:21:10 +0000</lastBuildDate>
    
	<atom:link href="http://markhneedham.com/blog/tag/interop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>clojure/Java Interop: The doto macro</title>
      <link>http://markhneedham.com/blog/2013/03/17/clojurejava-interop-the-doto-macro/</link>
      <pubDate>Sun, 17 Mar 2013 20:21:10 +0000</pubDate>
      
      <guid>http://markhneedham.com/blog/2013/03/17/clojurejava-interop-the-doto-macro/</guid>
      <description>I recently wrote about some code I&#39;ve been playing with to import neo4j spatial data and while looking to simplify the code I came across the doto macro.
The doto macro allows us to chain method calls on an initial object and then returns the resulting object. e.g.
(doto (new java.util.HashMap) (.put &amp;quot;a&amp;quot; 1) (.put &amp;quot;b&amp;quot; 2)) -&amp;gt; {a=1, b=2}  In our case this comes in quite useful in the function used to create a stadium node which initially reads like this:~~~ ~~~lisp (defn create-stadium-node [db line] (let [stadium-node (.</description>
    </item>
    
  </channel>
</rss>