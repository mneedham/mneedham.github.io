<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>matplotlib on Mark Needham</title>
    <link>http://localhost:8000/blog/tag/matplotlib/</link>
    <description>Recent content in matplotlib on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Dec 2018 21:09:00 +0000</lastBuildDate><atom:link href="http://localhost:8000/blog/tag/matplotlib/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python: Pandas - DataFrame plotting ignoring figure</title>
      <link>http://localhost:8000/blog/2018/12/25/python-pandas-dataframe-plot-figure/</link>
      <pubDate>Tue, 25 Dec 2018 21:09:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2018/12/25/python-pandas-dataframe-plot-figure/</guid>
      <description>In my continued use of matplotlib I wanted to change the size of the chart I was plotting and struggled a bit to start with. We’ll use the same DataFrame as before:
df = pd.DataFrame({ &amp;#34;name&amp;#34;: [&amp;#34;Mark&amp;#34;, &amp;#34;Arya&amp;#34;, &amp;#34;Praveena&amp;#34;], &amp;#34;age&amp;#34;: [34, 1, 31] }) df In my last blog post I showed how we can create a bar chart by executing the following code:
df.plot.bar(x=&amp;#34;name&amp;#34;) plt.tight_layout() plt.show() plt.close() But how do we make it bigger?</description>
    </item>
    
    <item>
      <title>Pandas: Create matplotlib plot with x-axis label not index</title>
      <link>http://localhost:8000/blog/2018/12/21/pandas-plot-x-axis-index/</link>
      <pubDate>Fri, 21 Dec 2018 16:57:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2018/12/21/pandas-plot-x-axis-index/</guid>
      <description>I’ve been using matplotlib a bit recently, and wanted to share a lesson I learnt about choosing the label of the x-axis. Let’s first import the libraries we’ll use in this post:
import pandas as pd import matplotlib.pyplot as plt And now we’ll create a DataFrame of values that we want to chart:
df = pd.DataFrame({ &amp;#34;name&amp;#34;: [&amp;#34;Mark&amp;#34;, &amp;#34;Arya&amp;#34;, &amp;#34;Praveena&amp;#34;], &amp;#34;age&amp;#34;: [34, 1, 31] }) df This is what our DataFrame looks like:</description>
    </item>
    
    <item>
      <title>matplotlib - Create a histogram/bar chart for ratings/full numbers</title>
      <link>http://localhost:8000/blog/2018/09/24/matplotlib-histogram-bar-chart-ratings-full-values/</link>
      <pubDate>Mon, 24 Sep 2018 07:55:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2018/09/24/matplotlib-histogram-bar-chart-ratings-full-values/</guid>
      <description>In my continued work with matplotlib I wanted to plot a histogram (or bar chart) for a bunch of star ratings to see how they were distributed.
Before we do anything let’s import matplotlib as well as pandas:
import random import pandas as pd import matplotlib matplotlib.use(&amp;#39;TkAgg&amp;#39;) import matplotlib.pyplot as plt plt.style.use(&amp;#39;fivethirtyeight&amp;#39;) Next we’ll create an array of randomly chosen star ratings between 1 and 5:
stars = pd.Series([random.randint(1, 5) for _ in range(0, 100)]) We want to plot a histogram showing the proportion for each rating.</description>
    </item>
    
    <item>
      <title>matplotlib - MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.</title>
      <link>http://localhost:8000/blog/2018/09/18/matplotlib-matplotlib-deprecation-adding-axes/</link>
      <pubDate>Tue, 18 Sep 2018 07:56:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2018/09/18/matplotlib-matplotlib-deprecation-adding-axes/</guid>
      <description>In my last post I showed how to remove axes legends from a matplotlib chart, and while writing the post I actually had the change the code I used as my initial approach is now deprecated.
As in the previous post, we’ll first import pandas and matplotlib:
import pandas as pd import matplotlib matplotlib.use(&amp;#39;TkAgg&amp;#39;) import matplotlib.pyplot as plt plt.style.use(&amp;#39;fivethirtyeight&amp;#39;) And we’ll still use this DataFrame:
df = pd.DataFrame({&amp;#34;label&amp;#34;: [&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;, &amp;#34;D&amp;#34;], &amp;#34;count&amp;#34;: [12, 19, 5, 10]}) My initial approach to remove all legends was this:</description>
    </item>
    
    <item>
      <title>matplotlib - Remove axis legend</title>
      <link>http://localhost:8000/blog/2018/09/18/matplotlib-remove-axis-legend/</link>
      <pubDate>Tue, 18 Sep 2018 07:55:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2018/09/18/matplotlib-remove-axis-legend/</guid>
      <description>I’ve been working with matplotlib a bit recently, and I wanted to remove all axis legends from my chart. It took me a bit longer than I expected to figure it out so I thought I’d write it up.
Before we do anything let’s import matplotlib as well as pandas, since we’re going to plot data from a pandas DataFrame.
import pandas as pd import matplotlib matplotlib.use(&amp;#39;TkAgg&amp;#39;) import matplotlib.pyplot as plt plt.</description>
    </item>
    
    <item>
      <title>Python via virtualenv on Mac OS X: RuntimeError: Python is not installed as a framework.</title>
      <link>http://localhost:8000/blog/2018/05/04/python-runtime-error-osx-matplotlib-not-installed-as-framework-mac/</link>
      <pubDate>Fri, 04 May 2018 22:03:08 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2018/05/04/python-runtime-error-osx-matplotlib-not-installed-as-framework-mac/</guid>
      <description>I’ve previously written a couple of blog posts about my troubles getting matplotlib to play nicely and I run into a slightly different variant today while following Sidath Asiri’s Hello World in TensorFlow tutorial.
When I ran the script using a version of Python installed via virtualenv I got the following exception:
Traceback (most recent call last): File &amp;#34;iris.py&amp;#34;, line 4, in &amp;lt;module&amp;gt; from matplotlib import pyplot as plt File &amp;#34;/Users/markneedham/projects/tensorflow-playground/a/lib/python3.</description>
    </item>
    
    <item>
      <title>Python 3: Create sparklines using matplotlib</title>
      <link>http://localhost:8000/blog/2017/09/23/python-3-create-sparklines-using-matplotlib/</link>
      <pubDate>Sat, 23 Sep 2017 06:51:56 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2017/09/23/python-3-create-sparklines-using-matplotlib/</guid>
      <description>I recently wanted to create sparklines to show how some values were changing over time. In addition, I wanted to generate them as images on the server rather than introducing a JavaScript library.
Chris Seymour’s excellent gist which shows how to create sparklines inside a Pandas dataframe got me most of the way there, but I had to tweak his code a bit to get it to play nicely with Python 3.</description>
    </item>
    
    <item>
      <title>Python: matplotlib, seaborn, virtualenv - Python is not installed as a framework</title>
      <link>http://localhost:8000/blog/2016/08/14/python-matplotlibseabornvirtualenv-python-is-not-installed-as-a-framework/</link>
      <pubDate>Sun, 14 Aug 2016 18:56:35 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2016/08/14/python-matplotlibseabornvirtualenv-python-is-not-installed-as-a-framework/</guid>
      <description>Over the weekend I was following The Marketing Technologist’s content based recommender tutorial but ran into the following exception when trying to import the seaborn library:
$ python 5_content_based_recommender/run.py Traceback (most recent call last): File &amp;#34;5_content_based_recommender/run.py&amp;#34;, line 14, in &amp;lt;module&amp;gt; import seaborn as sns File &amp;#34;/Users/markneedham/projects/themarketingtechnologist/tmt/lib/python2.7/site-packages/seaborn/__init__.py&amp;#34;, line 6, in &amp;lt;module&amp;gt; from .rcmod import * File &amp;#34;/Users/markneedham/projects/themarketingtechnologist/tmt/lib/python2.7/site-packages/seaborn/rcmod.py&amp;#34;, line 8, in &amp;lt;module&amp;gt; from . import palettes, _orig_rc_params File &amp;#34;/Users/markneedham/projects/themarketingtechnologist/tmt/lib/python2.7/site-packages/seaborn/palettes.py&amp;#34;, line 12, in &amp;lt;module&amp;gt; from .</description>
    </item>
    
    <item>
      <title>Python: matplotlib hangs and shows nothing (Mac OS X)</title>
      <link>http://localhost:8000/blog/2015/03/26/python-matplotlib-hangs-and-shows-nothing-mac-os-x/</link>
      <pubDate>Thu, 26 Mar 2015 00:02:54 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2015/03/26/python-matplotlib-hangs-and-shows-nothing-mac-os-x/</guid>
      <description>I’ve been playing around with some of the matplotlib demos recently and discovered that simply copying one of the examples didn’t actually work for me.
I was following the bar chart example and had the following code:
import numpy as np import matplotlib.pyplot as plt N = 5 ind = np.arange(N) fig, ax = plt.subplots() menMeans = (20, 35, 30, 35, 27) menStd = (2, 3, 4, 1, 2) width = 0.</description>
    </item>
    
  </channel>
</rss>
