<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>currying on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/currying/</link>
    <description>Recent content in currying on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Jan 2009 22:22:43 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/currying/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>F#: Partial Function Application with the Function Composition Operator</title>
      <link>https://markhneedham.com/blog/2009/01/12/f-partial-function-application-with-the-function-composition-operator/</link>
      <pubDate>Mon, 12 Jan 2009 22:22:43 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/01/12/f-partial-function-application-with-the-function-composition-operator/</guid>
      <description>In my continued reading of F# one of the ideas I&amp;#8217;ve come across recently is that of partial function application.
 This is a way of allowing us to combine different functions together and allows some quite powerful syntax to be written.
 The term &#39;currying&#39; is perhaps a better known term for describing this although as I understand they are not exactly the same.
 Currying is where we return a function that has been partially applied, in such a way that we can chain together a group of functions with a single argument.</description>
    </item>
    
  </channel>
</rss>