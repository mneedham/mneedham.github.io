<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redpanda on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/redpanda/</link>
    <description>Recent content in redpanda on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Jul 2023 04:44:37 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/tag/redpanda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redpanda: Configure pruning/retention of data</title>
      <link>https://www.markhneedham.com/blog/2023/07/18/redpanda-prune-retention/</link>
      <pubDate>Tue, 18 Jul 2023 04:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2023/07/18/redpanda-prune-retention/</guid>
      <description>I wanted to test how Apache Pinot deals with data being truncated from the underlying stream from which it’s consuming, so I’ve been trying to work out how to prune data in Redpanda. In this blog post, I’ll share what I’ve learnt so far.
We’re going to spin up a Redpanda cluster using the following Docker Compose file:
docker-compose.yml version: &amp;#39;3.7&amp;#39; services: redpanda: container_name: &amp;#34;redpanda-pruning&amp;#34; image: docker.redpanda.com/vectorized/redpanda:v22.2.2 command: - redpanda start - --smp 1 - --overprovisioned - --node-id 0 - --kafka-addr PLAINTEXT://0.</description>
    </item>
    
    <item>
      <title>Redpanda: Viewing consumer group offsets from __consumer_offsets</title>
      <link>https://www.markhneedham.com/blog/2023/07/12/redpanda-consumer-group-offsets/</link>
      <pubDate>Wed, 12 Jul 2023 04:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2023/07/12/redpanda-consumer-group-offsets/</guid>
      <description>Redpanda supports consumer groups, which are sets of consumers that cooperate to consume data from topics. The consumers in a group are assigned a partition and they keep track of the last consumed offset in the __consumer_offsets topic. I wanted to see how many messages had been consumed by a consumer group and that’s what we’ll explore in this post.
My first thought was to query the __consumer_offsets topic using rpk topic consume.</description>
    </item>
    
  </channel>
</rss>
