<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ksql on Mark Needham</title>
    <link>http://localhost:8000/blog/tag/ksql/</link>
    <description>Recent content in ksql on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 May 2019 12:46:00 +0000</lastBuildDate><atom:link href="http://localhost:8000/blog/tag/ksql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Processing Neo4j Transaction Events with KSQL and Kafka Streams</title>
      <link>http://localhost:8000/blog/2019/05/23/processing-neo4j-transaction-events-ksql-kafka-streams/</link>
      <pubDate>Thu, 23 May 2019 12:46:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2019/05/23/processing-neo4j-transaction-events-ksql-kafka-streams/</guid>
      <description>The Neo4j Streams Library lets users send transaction events to a Kafka topic, and in this post we’re going to learn how to explore these events using the KSQL streaming SQL Engine.
All the infrastructure used in this post can be launched locally from Docker compose, using the following command:
git clone git@github.com:mneedham/ksql-kafka-neo4j-streams.git &amp;amp;&amp;amp; cd ksql-kafka-neo4j-streams docker-compose-up Running this command will create four containers:
Starting zookeeper-blog ... Starting broker-blog .</description>
    </item>
    
    <item>
      <title>KSQL: Create Stream - extraneous input &#39;properties&#39;</title>
      <link>http://localhost:8000/blog/2019/05/20/kql-create-stream-extraneous-input/</link>
      <pubDate>Mon, 20 May 2019 11:43:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2019/05/20/kql-create-stream-extraneous-input/</guid>
      <description>In my continued playing with the KSQL streaming engine for Kafka, I came across another interesting error while trying to put a stream on top of a topic generated by the Neo4j Streams Library.
We’ll simplify the events being posted on the topic for this blog post, so this is what the events on the topic look like:
{ &amp;#34;id&amp;#34;:&amp;#34;ABCDEFGHI&amp;#34;, &amp;#34;properties&amp;#34;: { &amp;#34;name&amp;#34;:&amp;#34;Mark&amp;#34;, &amp;#34;location&amp;#34;:&amp;#34;London&amp;#34; } } We then create a stream on that topic:</description>
    </item>
    
    <item>
      <title>KSQL: Create Stream - Failed to prepare statement: name is null</title>
      <link>http://localhost:8000/blog/2019/05/19/ksql-create-stream-failed-to-prepare-statement-name-is-null/</link>
      <pubDate>Sun, 19 May 2019 19:21:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2019/05/19/ksql-create-stream-failed-to-prepare-statement-name-is-null/</guid>
      <description>I’ve been playing with KSQL over the weekend and ran into a basic error message that took me a little while to solve.
I was trying to create a stream over a topic dummy1, which is the simplest possible thing you can do with KSQL. The events posted to dummy1 are JSON messages containing only an id key. Below is an example of a message posted to the topic:</description>
    </item>
    
  </channel>
</rss>
