<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ruby-ldap on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/ruby-ldap/</link>
    <description>Recent content in ruby-ldap on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Oct 2008 20:12:49 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/ruby-ldap/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Calling shell script from ruby script</title>
      <link>https://markhneedham.com/blog/2008/10/06/calling-shell-script-from-ruby-script/</link>
      <pubDate>Mon, 06 Oct 2008 20:12:49 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/10/06/calling-shell-script-from-ruby-script/</guid>
      <description>Damana and I previously posted about our experiences with different Ruby LDAP solutions.
 Having settled on Ruby-LDAP (although having read Ola and Steven&amp;#8217;s comments we will now look at ruby-net-ldap) we then needed to put together the setup, installation and teardown into a ruby script file.
 A quick bit of Googling revealed that we could use the Kernel.exec method to do this.
 For example, you could put the following in a ruby script file and it would execute and show you the current directory listing:</description>
    </item>
    
    <item>
      <title>Ruby LDAP Options</title>
      <link>https://markhneedham.com/blog/2008/10/05/ruby-ldap-options/</link>
      <pubDate>Sun, 05 Oct 2008 16:29:32 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/10/05/ruby-ldap-options/</guid>
      <description>As I mentioned in an earlier post a colleague and I spent a few days looking at how to connect to an OpenDS LDAP server using Ruby.
 We ended up analysing four different solutions for solving the problem.
 Active LDAP This approach involved using the Active LDAP Ruby which &#34;provides an object oriented interface to LDAP. It maps LDAP entries to Ruby objects with LDAP attribute accessors based on your LDAP server&amp;#8217;s schema and each object&amp;#8217;s objectClasses&#34;</description>
    </item>
    
  </channel>
</rss>