<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/kubernetes/</link>
    <description>Recent content in kubernetes on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Nov 2017 12:44:37 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/tag/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes: Copy a dataset to a StatefulSet&#39;s PersistentVolume</title>
      <link>https://www.markhneedham.com/blog/2017/11/18/kubernetes-copy-a-dataset-to-a-statefulsets-persistentvolume/</link>
      <pubDate>Sat, 18 Nov 2017 12:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/11/18/kubernetes-copy-a-dataset-to-a-statefulsets-persistentvolume/</guid>
      <description>In this post we’ll learn how to copy an existing dataset to the PersistentVolumes used by a Neo4j cluster running on Kubernetes.
Neo4j Clusters on Kubernetes This posts assumes that we’re familiar with deploying Neo4j on Kubernetes. I wrote an article on the Neo4j blog explaining this in more detail.
The StatefulSet we create for our core servers require persistent storage, achieved via the PersistentVolumeClaim (PVC) primitive. A Neo4j cluster containing 3 core servers would have the following PVCs:</description>
    </item>
    
    <item>
      <title>Kubernetes 1.8: Using Cronjobs to take Neo4j backups</title>
      <link>https://www.markhneedham.com/blog/2017/11/17/kubernetes-1-8-using-cronjobs-take-neo4j-backups/</link>
      <pubDate>Fri, 17 Nov 2017 18:10:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/11/17/kubernetes-1-8-using-cronjobs-take-neo4j-backups/</guid>
      <description>With the release of Kubernetes 1.8 Cronjobs have graduated to beta, which means we can now more easily run Neo4j backup jobs against Kubernetes clusters.
Before we learn how to write a Cronjob let’s first create a local Kubernetes cluster and deploy Neo4j.
Spinup Kubernetes &amp;amp; Helm minikube start --memory 8192 helm init &amp;amp;&amp;amp; kubectl rollout status -w deployment/tiller-deploy --namespace=kube-system Deploy a Neo4j cluster helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/ helm install incubator/neo4j --name neo-helm --wait --set authEnabled=false,core.</description>
    </item>
    
    <item>
      <title>Kubernetes: Simple example of pod running</title>
      <link>https://www.markhneedham.com/blog/2017/10/21/kubernetes-simple-example-pod-running/</link>
      <pubDate>Sat, 21 Oct 2017 10:06:55 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/10/21/kubernetes-simple-example-pod-running/</guid>
      <description>I recently needed to create a Kubernetes pod that would &amp;#39;just sit there&amp;#39; while I used kube cp to copy some files to a persistent volume to which it was bound.
I started out with this naive pod spec:
pod_no_while.yaml
kind: Pod apiVersion: v1 metadata: name: marks-dummy-pod spec: containers: - name: marks-dummy-pod image: ubuntu restartPolicy: Never Let’s apply that template:
$ kubectl apply -f pod_no_while.yaml pod &amp;#34;marks-dummy-pod&amp;#34; created And let’s check if we have any running pods:</description>
    </item>
    
    <item>
      <title>Kubernetes: Which node is a pod on?</title>
      <link>https://www.markhneedham.com/blog/2017/06/14/kubernetes-node-pod/</link>
      <pubDate>Wed, 14 Jun 2017 08:49:06 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/06/14/kubernetes-node-pod/</guid>
      <description>When running Kubernetes on a cloud provider, rather than locally using minikube, it’s useful to know which node a pod is running on.
The normal command to list pods doesn’t contain this information:
$ kubectl get pod NAME READY STATUS RESTARTS AGE neo4j-core-0 1/1 Running 0 6m neo4j-core-1 1/1 Running 0 6m neo4j-core-2 1/1 Running 0 2m I spent a while searching for a command that I could use before I came across Ta-Ching Chen’s blog post while looking for something else.</description>
    </item>
    
    <item>
      <title>Kubernetes: Simulating a network partition</title>
      <link>https://www.markhneedham.com/blog/2016/12/04/kubernetes-simulating-a-network-partition/</link>
      <pubDate>Sun, 04 Dec 2016 12:37:49 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/12/04/kubernetes-simulating-a-network-partition/</guid>
      <description>A couple of weeks ago I wrote a post explaining how to create a Neo4j causal cluster using Kubernetes and ... the I wanted to work out how to simulate a network partition which would put the leader on the minority side and force an election.
We’ve done this on our internal tooling on AWS using the https://en.wikipedia.org/wiki/Iptables command but unfortunately that isn’t available in my container, which only has the utilities provided by BusyBox.</description>
    </item>
    
    <item>
      <title>Kubernetes: Spinning up a Neo4j 3.1 Causal Cluster</title>
      <link>https://www.markhneedham.com/blog/2016/11/25/kubernetes-spinning-up-a-neo4j-3-1-causal-cluster/</link>
      <pubDate>Fri, 25 Nov 2016 16:55:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/11/25/kubernetes-spinning-up-a-neo4j-3-1-causal-cluster/</guid>
      <description>A couple of weeks ago I wrote a blog post explaining how I’d created a Neo4j causal cluster using docker containers directly and for my next pet project I wanted to use Kubernetes as an orchestration layer so that I could declaratively change the number of servers in my cluster.
I’d never used Kubernetes before but I saw a presentation showing how to use it to create an Elastic cluster at the GDG Cloud meetup a couple of months ago.</description>
    </item>
    
    <item>
      <title>Kubernetes: Writing hostname to a file</title>
      <link>https://www.markhneedham.com/blog/2016/11/22/kubernetes-writing-hostname-to-a-file/</link>
      <pubDate>Tue, 22 Nov 2016 19:56:31 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/11/22/kubernetes-writing-hostname-to-a-file/</guid>
      <description>Over the weekend I spent a bit of time playing around with Kubernetes and to get the hang of the technology I set myself the task of writing the hostname of the machine to a file.
I’m using the excellent minikube tool to create a local Kubernetes cluster for my experiments so the first step is to spin that up:
$ minikube start Starting local Kubernetes cluster... Kubectl is now configured to use the cluster.</description>
    </item>
    
  </channel>
</rss>
