<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>build on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/build/</link>
    <description>Recent content in build on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Jan 2010 00:13:30 +0000</lastBuildDate>
    
	<atom:link href="https://www.markhneedham.com/blog/tag/build/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nant: Populating templates</title>
      <link>https://www.markhneedham.com/blog/2010/01/16/nant-populating-templates/</link>
      <pubDate>Sat, 16 Jan 2010 00:13:30 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/16/nant-populating-templates/</guid>
      <description>One of the common tasks that we need to do on every project I&amp;#8217;ve worked on is ensure that we can create a web.config file for the different environments that we need to deploy our application to.
 Nant has quite a neat task called &#39;http://nant.sourceforge.net/release/0.85-rc3/help/filters/expandproperties.html[expandproperties]&#39; which allows us to do this quite easily.
 In our build file we would have the following:
 build-file.build
 &amp;lt;property name =&#34;configFile&#34; value=&#34;</description>
    </item>
    
    <item>
      <title>Build: Using virtual machines to run it in parallel</title>
      <link>https://www.markhneedham.com/blog/2009/05/21/build-using-virtual-machines-to-run-it-in-parallel/</link>
      <pubDate>Thu, 21 May 2009 18:02:27 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/05/21/build-using-virtual-machines-to-run-it-in-parallel/</guid>
      <description>One of the things that we&amp;#8217;ve been working on lately to improve the overall time that our full build takes to run is to split the acceptance tests into several small groups of tests so that we can run them in parallel.
 We are using Cruise as our build server so the ability to have multiple agents running against different parts of the build at the same time comes built it.</description>
    </item>
    
    <item>
      <title>Nant include task - namespace matters</title>
      <link>https://www.markhneedham.com/blog/2009/02/03/nant-include-task-namespace-matters/</link>
      <pubDate>Tue, 03 Feb 2009 10:43:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/03/nant-include-task-namespace-matters/</guid>
      <description>We&amp;#8217;ve been trying to include some properties into our build file from a properties file today but no matter what we tried the properties were not being set.
 We eventually realised that the build file has an XML Namespace set on the project element.
 &amp;lt;project name=&#34;...&#34; xmlns=&#34;http://nant.sf.net/schemas/nant.xsd&#34;&amp;gt;   It turns out that if you want to include a properties file in your build file, like so:
 &amp;lt;include buildfile=&#34;</description>
    </item>
    
    <item>
      <title>Cruise: Pipelining for fast visual feedback</title>
      <link>https://www.markhneedham.com/blog/2009/01/19/cruise-pipelining-for-fast-visual-feedback/</link>
      <pubDate>Mon, 19 Jan 2009 21:38:20 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/01/19/cruise-pipelining-for-fast-visual-feedback/</guid>
      <description>One of the cool features in build servers like Cruise and Team City is the ability to create build pipelines.
 I have done a bit of work using this feature in previous projects but the key driver for doing so there was to create a chain of producers/consumers (producing and consuming artifacts) eventually resulting in a manual step to put the application into a testing environment.
 While this is certainly a good reason to create a build pipeline, a colleague pointed out an equally useful way of using this feature to split the build into separate steps pipelined together.</description>
    </item>
    
    <item>
      <title>Build: Red/Green for local build</title>
      <link>https://www.markhneedham.com/blog/2008/11/15/build-redgreen-for-local-build/</link>
      <pubDate>Sat, 15 Nov 2008 08:26:21 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/11/15/build-redgreen-for-local-build/</guid>
      <description>One thing I&amp;#8217;m learning from reading The Toyota Way is that visual indicators are a very important part of the Toyota Production System, and certainly my experience working in agile software development is that the same is true there.
 We have certainly learnt this lesson with regards to continuous integration - the build is either red or green and it&amp;#8217;s a very obvious visual indicator of the code base at any moment in time.</description>
    </item>
    
    <item>
      <title>Build: Checkout and Go </title>
      <link>https://www.markhneedham.com/blog/2008/10/19/build-checkout-and-go/</link>
      <pubDate>Sun, 19 Oct 2008 22:49:14 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/10/19/build-checkout-and-go/</guid>
      <description>On the previous project I was working on one of the pain points we were having was around setting up developer environments such that you could get the code up and running on a machine as quickly as possible.
 I would go to a newly formatted machine ready to set it up for development and run into a cascading list of dependencies I hadn&amp;#8217;t considered.
 SVN wasn&amp;#8217;t installed, then Ruby, then we had the wrong version of Java and all the while we were wasting time when this process could have been automated.</description>
    </item>
    
    <item>
      <title>Where are we now? Where do we want to be?</title>
      <link>https://www.markhneedham.com/blog/2008/09/20/where-are-we-now-where-do-we-want-to-be/</link>
      <pubDate>Sat, 20 Sep 2008 17:32:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/09/20/where-are-we-now-where-do-we-want-to-be/</guid>
      <description>Listening to Dan North speaking last week I was reminded of one of my favourite NLP[*] techniques for making improvements on projects.
 The technique is the http://en.wikipedia.org/wiki/T.O.T.E.[TOTE] (Test, Operate, Test, Exit) and it is a technique designed to help us get from where we are now to where we want to be via short feedback loops.
 On my previous project we had a situation where we needed to build and deploy our application in order to show it to the client in a show case.</description>
    </item>
    
    <item>
      <title>Configurable Builds: One configuration file per machine</title>
      <link>https://www.markhneedham.com/blog/2008/09/13/configurable-builds-one-configuration-file-per-machine/</link>
      <pubDate>Sat, 13 Sep 2008 03:54:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/09/13/configurable-builds-one-configuration-file-per-machine/</guid>
      <description>I&amp;#8217;ve covered some of the ways that I&amp;#8217;ve seen for making builds configurable in previous posts:
   One configuration file per environment
  One configuration file per user
  Overriding properties
   One which I haven&amp;#8217;t covered which my colleagues Gil Peeters and Jim Barritt have pointed out is having a build with one configuration file for each machine.
 Again the setup is fairly similar to one configuration per user or environment.</description>
    </item>
    
    <item>
      <title>Configurable Builds: Overriding properties</title>
      <link>https://www.markhneedham.com/blog/2008/09/02/configurable-builds-overriding-properties/</link>
      <pubDate>Tue, 02 Sep 2008 14:49:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/09/02/configurable-builds-overriding-properties/</guid>
      <description>Sometimes when configuring our build for flexibility we don&amp;#8217;t need to spend the time required to create one build configuration per user or one build configuration per environment.
 In these cases we can just override properties when we call Nant from the command line.
 One recent example where I made use of this was where we had one configuration file with properties in but wanted to override a couple of them when we ran the continuous integration build.</description>
    </item>
    
    <item>
      <title>Configurable Builds: One configuration file per user</title>
      <link>https://www.markhneedham.com/blog/2008/09/02/configurable-builds-one-configuration-file-per-user/</link>
      <pubDate>Tue, 02 Sep 2008 13:53:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/09/02/configurable-builds-one-configuration-file-per-user/</guid>
      <description>Following on from my first post about making builds configurable, the second way of doing this that I have seen is to have one configuration build file per user.
 This approach is more useful where there are different configurations needed on each developer machine. For example, if the databases being used for development are on a remote server then each developer machine would be assigned a database with a different name.</description>
    </item>
    
    <item>
      <title>Configurable Builds: One configuration file per environment</title>
      <link>https://www.markhneedham.com/blog/2008/09/02/configurable-builds-one-configuration-file-per-environment/</link>
      <pubDate>Tue, 02 Sep 2008 01:50:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/09/02/configurable-builds-one-configuration-file-per-environment/</guid>
      <description>One of the most important things when coding build files is to try and make them as configurable as possible.
 At the very least on an agile project there will be a need for two different configurations - one for developer machines and one for continuous integration.
 On my last two .NET projects we have setup our Nant build to take in a parameter which indicates which build configuration should be used.</description>
    </item>
    
    <item>
      <title>scp Nant Task - &#39;scp&#39; failed to start. The system cannot find the file specified</title>
      <link>https://www.markhneedham.com/blog/2008/08/30/scp-nant-task-scp-failed-to-start-the-system-cannot-find-the-file-specified/</link>
      <pubDate>Sat, 30 Aug 2008 16:30:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/30/scp-nant-task-scp-failed-to-start-the-system-cannot-find-the-file-specified/</guid>
      <description>I was trying to make use of the Nant Contrib scp task earlier and was getting an error message which at the time seemed a bit strange (now of course having solve the problem it is obvious!)
 This was the task I was running:
 &amp;lt;scp file=&#34;someFile.txt&#34; server=&#34;some.secure-server.com&#34; /&amp;gt;   This was the error:
 &#39;scp&#39; failed to start. The system cannot find the file specified   I ran it in debug mode to try and see what was going on and got this stack trace:</description>
    </item>
    
    <item>
      <title>Encapsulation in build scripts using nant</title>
      <link>https://www.markhneedham.com/blog/2008/08/21/encapsulation-in-build-scripts-using-nant/</link>
      <pubDate>Thu, 21 Aug 2008 00:40:45 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/21/encapsulation-in-build-scripts-using-nant/</guid>
      <description>When writing build scripts it&amp;#8217;s very easy for it to descend into complete Xml hell when you&amp;#8217;re using a tool like nant.
 I wondered previously whether it was possible to TDD build files and while this is difficult given the dependency model most build tools follow. That doesn&amp;#8217;t mean we can&amp;#8217;t apply other good design principles from the coding world however.
 Encapsulation is one of the key principles of OOP and it can be applied in build files too.</description>
    </item>
    
    <item>
      <title>Building in release mode with no pdbs with msbuild</title>
      <link>https://www.markhneedham.com/blog/2008/08/20/building-in-release-mode-with-no-pdbs-with-msbuild/</link>
      <pubDate>Wed, 20 Aug 2008 18:50:18 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/20/building-in-release-mode-with-no-pdbs-with-msbuild/</guid>
      <description>I&amp;#8217;ve been having trouble trying to work out how to build our projects in msbuild in release mode without creating the customary pdb files that seem to be created by default.
 I tried calling msbuild.exe with the &#39;Release&#39; configuration:
 &#39;C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild.Exe ( Proj.csproj /p:OutputPath=\output\path\ /p:Configuration=Release)&#39;   To no avail. It still created the pdb file. Next I tried setting the &#39;DebugSymbols&#39; property to false:
 &#39;C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild.Exe ( Proj.csproj /p:OutputPath=\output\path\ /p:Configuration=Release /p:DebugSymbols=false)&#39;   Still it created the file.</description>
    </item>
    
    <item>
      <title>NCover - Requested value &#39;/r&#39; was not found</title>
      <link>https://www.markhneedham.com/blog/2008/08/19/ncover-requested-value-r-was-not-found/</link>
      <pubDate>Tue, 19 Aug 2008 21:18:44 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/19/ncover-requested-value-r-was-not-found/</guid>
      <description>I&amp;#8217;ve been trying to integrate NCover into our build and probably making life harder for myself than it needs to be.
 The title refers to the error message that I was getting when trying to run the ncover nant task on version 1.0.1 of NCover earlier today.
 [ncover] Starting &#39;C:\Program Files\NCover\ncover-console.exe (//r &#34;\long\path\to\tmp392.tmp.ncoversettings&#34; )&#39; in &#39;C:\my-project\trunk\src&#39; [ncover] Unhandled Exception: System.ArgumentException: Requested value &#39;/r&#39; was not found. [ncover] at System.</description>
    </item>
    
    <item>
      <title>msbuild - Use OutputPath instead of OutDir</title>
      <link>https://www.markhneedham.com/blog/2008/08/14/msbuild-use-outputpath-instead-of-outdir/</link>
      <pubDate>Thu, 14 Aug 2008 19:54:03 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/14/msbuild-use-outputpath-instead-of-outdir/</guid>
      <description>We&amp;#8217;ve been using msbuild to build our project files on my current project and a colleague and I noticed some strange behaviour when trying to set the directory that the output should be built to.
 The problem was whenever we tried to set the output directory (using OutDir) to somewhere where there was a space in the directory name it would just fail catastrophically. We spent ages searching for the command line documentation before finding it here.</description>
    </item>
    
    <item>
      <title>TeamCity&#39;s strange default build location</title>
      <link>https://www.markhneedham.com/blog/2008/08/08/teamcitys-strange-default-build-location/</link>
      <pubDate>Fri, 08 Aug 2008 19:52:50 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/08/teamcitys-strange-default-build-location/</guid>
      <description>We&amp;#8217;ve been using TeamCity on my current project and it&amp;#8217;s proven to be fairly impressive in general.
 We&amp;#8217;re running quite a few different builds which have dependencies on each other and it&amp;#8217;s been pretty much one click on the web admin tool to get that set up.
 One thing that had me really confused is the default location it chooses to build from. The problem is that it seems to change arbitrarily, with the folder name it builds in being calculated from a VSC hash (not sure quite how that&amp;#8217;s worked out but there we go).</description>
    </item>
    
  </channel>
</rss>