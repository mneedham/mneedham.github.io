<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concurrent-set-based-engineering on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/concurrent-set-based-engineering/</link>
    <description>Recent content in concurrent-set-based-engineering on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Sep 2009 02:24:11 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/concurrent-set-based-engineering/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Set Based Concurrent Engineering: A simple example</title>
      <link>https://markhneedham.com/blog/2009/09/19/set-based-concurrent-engineering-a-simple-example/</link>
      <pubDate>Sat, 19 Sep 2009 02:24:11 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/09/19/set-based-concurrent-engineering-a-simple-example/</guid>
      <description>One of my favourite ideas that I came across while reading the Poppendieck&amp;rsquo;s Lean Software Developmentis set based concurrent engineering which encourages us to keep our options open with regards to the solution to a problem until we absolutely need to decide on an approach after which we probably can&amp;rsquo;t easily change that decision so we will most likely stick with it.
I like the idea but on the projects I&amp;rsquo;ve worked on we often seem to take a more point based approach - there will be some discussion up front on the potential solutions to a problem and eventually one of them will be considered to be the best solution and we go and implement that one.</description>
    </item>
    
  </channel>
</rss>