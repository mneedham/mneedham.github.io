<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Mark Needham</title>
    <link>https://mneedham.github.io/blog/tag/c/</link>
    <description>Recent content in C on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Jun 2010 22:27:58 +0000</lastBuildDate>
    
	<atom:link href="https://mneedham.github.io/blog/tag/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C#: StackTrace</title>
      <link>https://mneedham.github.io/blog/2010/06/22/c-stacktrace/</link>
      <pubDate>Tue, 22 Jun 2010 22:27:58 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/06/22/c-stacktrace/</guid>
      <description>Dermot and I were doing a bit of work on a mini testing DSL that we&amp;rsquo;ve been writing to try and make some of our interaction tests a bit more explicit and one of the things that we wanted to do was find out which method was being called on one of our collaborators.
We have a stub collaborator which gets injected into our system under test. It looks roughly like this:</description>
    </item>
    
    <item>
      <title>C#: A failed attempt at F#-ish pattern matching</title>
      <link>https://mneedham.github.io/blog/2010/06/13/c-a-failed-attempt-at-f-ish-pattern-matching/</link>
      <pubDate>Sun, 13 Jun 2010 22:35:14 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/06/13/c-a-failed-attempt-at-f-ish-pattern-matching/</guid>
      <description>A few weeks ago we had some C# code around calcuations which had got a bit too imperative in nature.
The code looked roughly like this:
public class ACalculator { public double CalculateFrom(UserData userData) { if(userData.Factor1 == Factor1.Option1) { return 1.0; } if(userData.Factor2 == Factor2.Option3) { return 2.0; } if(userData.Factor3 == Factor3.Option2) { return 3.0 } return 0.0; } }  I think there should be a more object oriented way to write this code whereby we push some of the logic onto the &amp;lsquo;UserData&amp;rsquo; object but it struck me that it reads a little bit like pattern matching code you might see in F#.</description>
    </item>
    
    <item>
      <title>C#: Using a dictionary instead of if statements</title>
      <link>https://mneedham.github.io/blog/2010/05/30/c-using-a-dictionary-instead-of-if-statements/</link>
      <pubDate>Sun, 30 May 2010 23:13:25 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/05/30/c-using-a-dictionary-instead-of-if-statements/</guid>
      <description>A problem we had to solve on my current project is how to handle form submission where the user can click on a different button depending whether they want to go to the previous page, save the form or go to the next page.
An imperative approach to this problem might yield code similar to the following:
public class SomeController { public ActionResult TheAction(string whichButton, UserData userData) { if(whichButton == &amp;quot;Back&amp;quot;) { // do the back action } else if(whichButton == &amp;quot;Next&amp;quot;) { // do the next action } else if(whichButton == &amp;quot;Save&amp;quot;) { // do the save action } throw Exception(&amp;quot;&amp;quot;); } }  A neat design idea which my colleague Dermot Kilroy introduced on our project is the idea of using a dictionary to map to the different actions instead of using if statements.</description>
    </item>
    
    <item>
      <title>Functional C#: An imperative to declarative example</title>
      <link>https://mneedham.github.io/blog/2010/04/20/functional-c-an-imperative-to-declarative-example/</link>
      <pubDate>Tue, 20 Apr 2010 07:08:09 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/04/20/functional-c-an-imperative-to-declarative-example/</guid>
      <description>I wrote previously about how we&amp;rsquo;ve been working on some calculations on my current project and one thing we&amp;rsquo;ve been trying to do is write this code in a fairly declarative way.
Since we&amp;rsquo;ve been test driving the code it initially started off being quite imperative and looked a bit like this:
public class TheCalculator { ... public double CalculateFrom(UserData userData) { return Calculation1(userData) + Calculation2(userData) + Calculation3(userData); } public double Calculation1(UserData userData) { // do calculation stuff here } public double Calculation2(UserData userData) { // do calculation stuff here } .</description>
    </item>
    
    <item>
      <title>Functional C#: Using custom delegates to encapsulate Funcs</title>
      <link>https://mneedham.github.io/blog/2010/04/17/functional-c-using-custom-delegates-to-encapsulate-funcs/</link>
      <pubDate>Sat, 17 Apr 2010 12:16:46 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/04/17/functional-c-using-custom-delegates-to-encapsulate-funcs/</guid>
      <description>One of the problems that I&amp;rsquo;ve frequently run into when writing C# code in a more functional way is that we can often end up with &amp;lsquo;Funcs&amp;rsquo; all over the place which don&amp;rsquo;t really describe what concept they&amp;rsquo;re encapsulating.
We had some code similar to this where it wasn&amp;rsquo;t entirely obvious what the Func being stored in the dictionary was actually doing:
public class Calculator { private Dictionary&amp;lt;string, Func&amp;lt;double, double, double&amp;gt;&amp;gt; lookups = new Dictionary&amp;lt;string, Func&amp;lt;double, double, double&amp;gt;&amp;gt;(); public Blah() { lookups.</description>
    </item>
    
    <item>
      <title>Functional C#: Continuation Passing Style</title>
      <link>https://mneedham.github.io/blog/2010/03/19/functional-c-continuation-passing-style/</link>
      <pubDate>Fri, 19 Mar 2010 07:48:51 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/03/19/functional-c-continuation-passing-style/</guid>
      <description>Partly inspired by my colleague Alex Scordellis&amp;rsquo; recent post about lambda passing style I spent some time trying out a continuation passing style style on some of the code in one of our controllers to see how different the code would look compared to its current top to bottom imperative style.
We had code similar to the following:
public ActionResult Submit(string id, FormCollection form) { var shoppingBasket = CreateShoppingBasketFrom(id, form); if (!</description>
    </item>
    
    <item>
      <title>Functional C#: Using Join and GroupJoin</title>
      <link>https://mneedham.github.io/blog/2010/03/04/functional-c-using-join-and-groupjoin/</link>
      <pubDate>Thu, 04 Mar 2010 18:55:02 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/03/04/functional-c-using-join-and-groupjoin/</guid>
      <description>An interesting problem which I&amp;rsquo;ve come across a few times recently is where we have two collections which we want to use together in some way and get a result which could either be another collection or some other value.
In one which Chris and I were playing around with we had a collection of years and a collection of cars with corresponding years and the requirement was to show all the years on the page with the first car we found for that year or an empty value if there was no car for that year.</description>
    </item>
    
    <item>
      <title>C#: Overcomplicating with LINQ</title>
      <link>https://mneedham.github.io/blog/2010/02/21/c-overcomplicating-with-linq/</link>
      <pubDate>Sun, 21 Feb 2010 12:01:22 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/02/21/c-overcomplicating-with-linq/</guid>
      <description>I recently came across an interesting bit of code which was going through a collection of strings and then only taking the first &amp;lsquo;x&amp;rsquo; number of characters and discarding the rest.
The code looked roughly like this:
var words = new[] {&amp;quot;hello&amp;quot;, &amp;quot;to&amp;quot;, &amp;quot;the&amp;quot;, &amp;quot;world&amp;quot;}; var newWords = new List&amp;lt;string&amp;gt;(); foreach (string word in words) { if (word.Length &amp;gt; 3) { newWords.Add(word.Substring(0, 3)); continue; } newWords.Add(word); }  For this initial collection of words we would expect &amp;lsquo;newWords&amp;rsquo; to contain [&amp;ldquo;hel&amp;rdquo;, &amp;ldquo;to&amp;rdquo;, &amp;ldquo;the&amp;rdquo;, &amp;ldquo;wor&amp;rdquo;]</description>
    </item>
    
    <item>
      <title>C#: A lack of covariance with generics example</title>
      <link>https://mneedham.github.io/blog/2010/02/20/c-a-lack-of-covariance-with-generics-example/</link>
      <pubDate>Sat, 20 Feb 2010 12:17:16 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/02/20/c-a-lack-of-covariance-with-generics-example/</guid>
      <description>One of the things I find most confusing when reading about programming languages is the idea of covariance and contravariance and while I&amp;rsquo;ve previously read that covariance is not possible when using generics in C# I recently came across an example where I saw that this was true.
I came across this problem while looking at how to refactor some code which has been written in an imperative style:
public interface IFoo { string Bar { get; set; } } public class Foo : IFoo { public string Bar { get; set; } }  private IEnumerable&amp;lt;IFoo&amp;gt; GetMeFoos() { var someStrings = new[] { &amp;quot;mike&amp;quot;, &amp;quot;mark&amp;quot; }; var someFoos = new List&amp;lt;IFoo&amp;gt;(); foreach (var s in someStrings) { someFoos.</description>
    </item>
    
    <item>
      <title>C#: Causing myself pain with LINQ&#39;s delayed evaluation</title>
      <link>https://mneedham.github.io/blog/2010/02/18/c-causing-myself-pain-with-linqs-delayed-evaluation/</link>
      <pubDate>Thu, 18 Feb 2010 22:28:12 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/02/18/c-causing-myself-pain-with-linqs-delayed-evaluation/</guid>
      <description>I recently came across some code was imperatively looping through a collection and then mapping each value to go to something else by using an injected dependency to do that.
I thought I&amp;rsquo;d try to make use of functional collection parameters to try and simplify the code a bit but actually ended up breaking one of the tests.
About a month ago I wrote about how I&amp;rsquo;d written a hand rolled stub to simplify a test and this was actually where I caused myself the problem!</description>
    </item>
    
    <item>
      <title>Functional C#: Extracting a higher order function with generics</title>
      <link>https://mneedham.github.io/blog/2010/02/08/functional-c-extracting-a-higher-order-function-with-generics/</link>
      <pubDate>Mon, 08 Feb 2010 23:17:47 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/02/08/functional-c-extracting-a-higher-order-function-with-generics/</guid>
      <description>While working on some code with Toni we realised that we&amp;rsquo;d managed to create two functions that were almost exactly the same except they made different service calls and returned collections of a different type.
The similar functions were like this:
private IEnumerable&amp;lt;Foo&amp;gt; GetFoos(Guid id) { IEnumerable&amp;lt;Foo&amp;gt; foos = new List&amp;lt;Foo&amp;gt;(); try { foos = fooService.GetFoosFor(id); } catch (Exception e) { // do some logging of the exception } return foos; }  private IEnumerable&amp;lt;Bar&amp;gt; GetBars(Guid id) { IEnumerable&amp;lt;Bar&amp;gt; bars = new List&amp;lt;Bar&amp;gt;(); try { bars = barService.</description>
    </item>
    
    <item>
      <title>Functional C#: LINQ vs Method chaining</title>
      <link>https://mneedham.github.io/blog/2010/02/05/functional-c-linq-vs-method-chaining/</link>
      <pubDate>Fri, 05 Feb 2010 18:06:28 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/02/05/functional-c-linq-vs-method-chaining/</guid>
      <description>One of the common discussions that I&amp;rsquo;ve had with several colleagues when we&amp;rsquo;re making use of some of the higher order functions that can be applied on collections is whether to use the LINQ style syntax or to chain the different methods together.
I tend to prefer the latter approach although when asked the question after my talk at Developer Developer Developer I didn&amp;rsquo;t really have a good answer other than to suggest that it seemed to just be a personal preference thing.</description>
    </item>
    
    <item>
      <title>Functional C#: Writing a &#39;partition&#39; function</title>
      <link>https://mneedham.github.io/blog/2010/02/01/functional-c-writing-a-partition-function/</link>
      <pubDate>Mon, 01 Feb 2010 23:34:02 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/02/01/functional-c-writing-a-partition-function/</guid>
      <description>One of the more interesting higher order functions that I&amp;rsquo;ve come across while playing with F# is the partition function which is similar to the filter function except it returns the values which meet the predicate passed in as well as the ones which don&amp;rsquo;t.
I came across an interesting problem recently where we needed to do exactly this and had ended up taking a more imperative for each style approach to solve the problem because this function doesn&amp;rsquo;t exist in C# as far as I know.</description>
    </item>
    
    <item>
      <title>Functional collectional parameters: Some thoughts</title>
      <link>https://mneedham.github.io/blog/2010/01/20/functional-collectional-parameters-some-thoughts/</link>
      <pubDate>Wed, 20 Jan 2010 22:45:55 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/01/20/functional-collectional-parameters-some-thoughts/</guid>
      <description>I&amp;rsquo;ve been reading through a bit of Steve Freeman and Nat Pryce&amp;rsquo;s &amp;lsquo;Growing Object Oriented Software guided by tests&amp;rsquo; book and I found the following observation in chapter 7 quite interesting:
 When starting a new area of code, we might temporarily suspend our design judgment and just write code without attempting to impose much structure.  It&amp;rsquo;s interesting that they don&amp;rsquo;t try and write perfect code the first time around which is actually something I thought experienced developers did until I came across Uncle Bob&amp;rsquo;s Clean Code book where he suggested something similar.</description>
    </item>
    
    <item>
      <title>Coding: Missing abstractions and LINQ</title>
      <link>https://mneedham.github.io/blog/2010/01/17/coding-missing-abstractions-and-linq/</link>
      <pubDate>Sun, 17 Jan 2010 19:09:35 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/01/17/coding-missing-abstractions-and-linq/</guid>
      <description>Something which I&amp;rsquo;ve noticed quite a lot on the projects that I&amp;rsquo;ve worked on since C# 3.0 was released is that lists seem to be passed around code much more and have LINQ style filters and transformations performed on them while failing to describe the underlying abstraction explcitly in the code.
As a result of this we quite frequently we end up with this code being in multiple places and since it&amp;rsquo;s usually not very much code the repetition goes unnoticed more than other types of duplication might do.</description>
    </item>
    
    <item>
      <title>C# Test Builder Pattern: My current thinking</title>
      <link>https://mneedham.github.io/blog/2010/01/13/c-test-builder-pattern-my-current-thinking/</link>
      <pubDate>Wed, 13 Jan 2010 01:37:15 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/01/13/c-test-builder-pattern-my-current-thinking/</guid>
      <description>I&amp;rsquo;ve written previously about the test builder pattern in C# and having noticed some different implementations of this pattern I thought it&amp;rsquo;d be interesting to post my current thinking on how to use it.
One thing I&amp;rsquo;ve noticed is that we often end up just creating methods which effectively act as setters rather than easing the construction of an object.
This seems to happen most commonly when the value we want to set is a boolean value.</description>
    </item>
    
    <item>
      <title>C# Object Initializer: More thoughts</title>
      <link>https://mneedham.github.io/blog/2010/01/10/c-object-initializer-more-thoughts/</link>
      <pubDate>Sun, 10 Jan 2010 18:52:22 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/01/10/c-object-initializer-more-thoughts/</guid>
      <description>I wrote previously about my dislike of C#&amp;rsquo;s object initializer syntax and while I still think those arguments hold I came across an interesting argument for why it is a useful feature in Jeremy Miller&amp;rsquo;s MSDN article on creating internal DSLs in C#.
In the article Jeremy works through an example where he builds up a &amp;lsquo;SendMessageRequest&amp;rsquo; first by using a fluent interface and then by making use of object initializer syntax.</description>
    </item>
    
    <item>
      <title>DSLs: Violating the builder pattern</title>
      <link>https://mneedham.github.io/blog/2009/10/12/dsls-violating-the-builder-pattern/</link>
      <pubDate>Mon, 12 Oct 2009 22:20:16 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/10/12/dsls-violating-the-builder-pattern/</guid>
      <description>I recently came across an interesting post by Dave Thomas where he discussed several domain specific languages (DSLs) he&amp;rsquo;s come across and suggests that a lot of them seem to be trying too hard to read like the english language instead of focusing on describing a vocabulary for their specific domain
Reading this post reminded me that I fell into this trap earlier in the year while doing some work to create a builder pattern in our code which didn&amp;rsquo;t need to make use of a &amp;lsquo;Build&amp;rsquo; method but instead would make use of C#&amp;rsquo;s implicit operator to automatically convert the builder to an object at the appropriate moment.</description>
    </item>
    
    <item>
      <title>C#: Removing duplication in mapping code with partial classes</title>
      <link>https://mneedham.github.io/blog/2009/07/07/c-removing-duplication-in-mapping-code-with-partial-classes/</link>
      <pubDate>Tue, 07 Jul 2009 18:11:36 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/07/07/c-removing-duplication-in-mapping-code-with-partial-classes/</guid>
      <description>One of the problems that we&amp;rsquo;ve come across while writing the mapping code for our anti corruption layer is that there is quite a lot of duplication of mapping similar types due to the fact that each service has different auto generated classes representing the same data structure.
We are making SOAP web service calls and generating classes to represent the requests and responses to those end points using SvcUtil. We then translate from those auto generated classes to our domain model using various mapper classes.</description>
    </item>
    
    <item>
      <title>Functional Collection Parameters: Handling the null collection</title>
      <link>https://mneedham.github.io/blog/2009/06/16/functional-collection-parameters-handling-the-null-collection/</link>
      <pubDate>Tue, 16 Jun 2009 20:29:29 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/06/16/functional-collection-parameters-handling-the-null-collection/</guid>
      <description>One of the interesting cases where I&amp;rsquo;ve noticed we tend to avoid functional collection parameters in our code base is when there&amp;rsquo;s the possibility of the collection being null.
The code is on the boundary of our application&amp;rsquo;s interaction with another service so it is actually a valid scenario that we could receive a null collection.
When using extension methods, although we wouldn&amp;rsquo;t get a null pointer exception by calling one on a null collection, we would get a &amp;lsquo;source is null&amp;rsquo; exception when the expression is evaluated so we need to protect ourself against this.</description>
    </item>
    
    <item>
      <title>C#/F#: Using .NET framework classes</title>
      <link>https://mneedham.github.io/blog/2009/06/16/cf-using-net-framework-classes/</link>
      <pubDate>Tue, 16 Jun 2009 18:55:38 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/06/16/cf-using-net-framework-classes/</guid>
      <description>I was recently discussing F# with a couple of colleagues and one thing that came up is the slightly different ways that we might choose to interact with certain .NET framework classes compared to how we use those same classes in C# code.
One of those where I see potential for different use is the Dictionary class.
In C# code when we&amp;rsquo;re querying a dictionary to check that a value exists before we try to extract it we might typically do this:</description>
    </item>
    
    <item>
      <title>Real World Functional Programming: Book Review</title>
      <link>https://mneedham.github.io/blog/2009/05/24/real-world-functional-programming-book-review/</link>
      <pubDate>Sun, 24 May 2009 19:25:07 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/05/24/real-world-functional-programming-book-review/</guid>
      <description>The Book Real World Functional Programming by Tomas Petricek with Jon Skeet (corresponding website)
The Review I decided to read this book after being somewhat inspired to learn more about functional programming after talking with Phil about his experiences learning Clojure. I&amp;rsquo;m currently working on a .NET project so it seemed to make sense that F# was the language I picked to learn.
What did I learn?  I&#39;ve worked with C# 3.</description>
    </item>
    
    <item>
      <title>C#: Using virtual leads to confusion?</title>
      <link>https://mneedham.github.io/blog/2009/05/06/c-using-virtual-leads-to-confusion/</link>
      <pubDate>Wed, 06 May 2009 19:30:50 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/05/06/c-using-virtual-leads-to-confusion/</guid>
      <description>A colleague and I were looking through some code that I worked on a couple of months ago where I had created a one level hierarchy using inheritance to represent the response status that we get back from a service call.
The code was along these lines:
public class ResponseStatus { public static readonly ResponseStatus TransactionSuccessful = new TransactionSuccessful(); public static readonly ResponseStatus UnrecoverableError = new UnrecoverableError(); public virtual bool RedirectToErrorPage { get { return true; } } } public class UnrecoverableError : ResponseStatus { } public class TransactionSuccessful : ResponseStatus { public override bool RedirectToErrorPage { get { return false; } } }  Looking at it now it does seem a bit over-engineered, but the main confusion with this code is that when you click through to the definition of &amp;lsquo;RedirectToError&amp;rsquo; it goes to the ResponseStatus version of that property and it&amp;rsquo;s not obvious that it is being overridden in a sub class, this being possible due to my use of the virtual key word.</description>
    </item>
    
    <item>
      <title>Functional C#: The hole in the middle pattern</title>
      <link>https://mneedham.github.io/blog/2009/04/04/functional-c-the-hole-in-the-middle-pattern/</link>
      <pubDate>Sat, 04 Apr 2009 11:41:23 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/04/04/functional-c-the-hole-in-the-middle-pattern/</guid>
      <description>While reading Real World Functional Programming I came across an interesting pattern that I have noticed in some code bases recently which I liked but didn&amp;rsquo;t know had been given a name!
The hole in the middle pattern, coined by Brian Hurt, shows a cool way of using higher order functions in order to reuse code in cases where the code typically looks something like this:
public void SomeServiceCall() { var serviceClient = CreateServiceClient(); try { serviceClient.</description>
    </item>
    
    <item>
      <title>NUnit: Tests with Context/Spec style assertions</title>
      <link>https://mneedham.github.io/blog/2009/03/01/nunit-tests-with-contextspec-style-assertions/</link>
      <pubDate>Sun, 01 Mar 2009 16:43:46 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/03/01/nunit-tests-with-contextspec-style-assertions/</guid>
      <description>I recently started playing around with Scott Bellware&amp;rsquo;s Spec-Unit and Aaron&amp;rsquo;s Jensen&amp;rsquo;s MSpec, two frameworks which both provide a way of writing Context/Spec style tests/specifications.
What I particularly like about this approach to writing tests is that we can divide assertions into specific blocks and have them all evaluated even if an earlier one fails.
NUnit is our testing tool of choice at the moment and we wanted to try and find a way to test the mapping between the domain and service layers of the application.</description>
    </item>
    
    <item>
      <title>C#: Wrapping DateTime</title>
      <link>https://mneedham.github.io/blog/2009/02/25/c-wrapping-datetime/</link>
      <pubDate>Wed, 25 Feb 2009 23:12:57 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/02/25/c-wrapping-datetime/</guid>
      <description>I think it was Darren Hobbs who first introduced me to the idea of wrapping dates in our system to describe what that date actually means in our context, and after suffering the pain of passing some unwrapped dates around our code I think I can safely say that wrapping them is the way to go.
The culprit was a date of birth which was sometimes being created from user input and sometimes being retrieved from another system.</description>
    </item>
    
    <item>
      <title>C#: Wrapping collections vs Extension methods</title>
      <link>https://mneedham.github.io/blog/2009/02/23/c-wrapping-collections-vs-extension-methods/</link>
      <pubDate>Mon, 23 Feb 2009 20:24:26 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/02/23/c-wrapping-collections-vs-extension-methods/</guid>
      <description>Another interesting thing I&amp;rsquo;ve noticed in C# world is that there seems to be a trend towards using extension methods as much as possible. One area where this is particularly prevalent is when working with collections.
From reading Object Calisthenics and working with Nick I have got used to wrapping collections and defining methods on the wrapped class for interacting with the underlying collection.
For example, given that we have a collection of Foos that we need to use in our system we might wrap that in an object Foos.</description>
    </item>
    
    <item>
      <title>C#: Implicit Operator</title>
      <link>https://mneedham.github.io/blog/2009/02/22/c-implicit-operator/</link>
      <pubDate>Sun, 22 Feb 2009 22:20:22 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/02/22/c-implicit-operator/</guid>
      <description>Since it was pointed out in the comments on an earlier post I wrote about using the builder pattern how useful the implicit operator could be in this context we&amp;rsquo;ve been using it wherever it makes sense.
The main benefit that using this approach provides is that our test code becomes more expressive since we don&amp;rsquo;t need to explicitly call a method to complete the building of our object.
public class FooBuilder { private string bar = &amp;quot;defaultBar&amp;quot;; public FooBuilder Bar(string value) { bar = value; return this; } public static implicit operator Foo(FooBuilder builder) { return new Foo { Bar = builder.</description>
    </item>
    
    <item>
      <title>C#: Extension methods != Open classes</title>
      <link>https://mneedham.github.io/blog/2009/02/19/c-extensions-methods-open-classes/</link>
      <pubDate>Thu, 19 Feb 2009 06:22:07 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/02/19/c-extensions-methods-open-classes/</guid>
      <description>When I first heard about extension methods in C# it sounded like a pretty cool idea but I wasn&amp;rsquo;t sure how they differed to the idea of open classes that I had seen when doing a bit of Ruby.
After a bit of a struggle recently to try and override some extension methods on HtmlHelper in ASP.NET MVC it&amp;rsquo;s clear to me that we don&amp;rsquo;t quite have the same power that open classes would provide.</description>
    </item>
    
    <item>
      <title>C#: Object Initializer and The Horse Shoe</title>
      <link>https://mneedham.github.io/blog/2009/02/16/c-object-initializer-and-the-horse-shoe/</link>
      <pubDate>Mon, 16 Feb 2009 22:04:20 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/02/16/c-object-initializer-and-the-horse-shoe/</guid>
      <description>The object initializer syntax introduced in C# 3.0 makes it easier for us to initialise our objects in one statement but I think we need to remember that they are not named parameters and that there is still a place (a very good one actually) for creating objects from constructors or factory methods.
Unfortunately what I think the cleaner syntax does is encourage us to create objects with half the fields populated and half of them null by default.</description>
    </item>
    
    <item>
      <title>C#: Properties vs Methods</title>
      <link>https://mneedham.github.io/blog/2009/02/11/c-properties-vs-methods/</link>
      <pubDate>Wed, 11 Feb 2009 11:20:08 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/02/11/c-properties-vs-methods/</guid>
      <description>I was browsing through our tests today and noticed a test along these lines (simplified for example purposes):
[Test, ExpectedException(typeof(Exception))] public void ShouldThrowExceptionIfNoBarSet() { var bar = new Foo(null).Bar; }  public class Foo { private readonly string bar; public Foo(string bar) { this.bar = bar; } public string Bar { get { if (bar == null) { throw new Exception(&amp;quot;No bar&amp;quot;); } return bar; } } }  What I found strange here is that &amp;lsquo;bar&amp;rsquo; is never used and Resharper points out as much.</description>
    </item>
    
    <item>
      <title>C#: Public fields vs automatic properties </title>
      <link>https://mneedham.github.io/blog/2009/02/04/c-public-fields-vs-automatic-properties/</link>
      <pubDate>Wed, 04 Feb 2009 17:52:03 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/02/04/c-public-fields-vs-automatic-properties/</guid>
      <description>An interesting new feature in C# 3.0 is that of automatic properties on objects - this allows us to define a get/set property and the creation of the underlying field is taken care off for us.
We can therefore create a class like this:
public class Foo { public string Bar { get; set; } }  Now ignoring the fact that it&amp;rsquo;s terrible OO to write a class like that, one thing that we&amp;rsquo;ve been wondering is what&amp;rsquo;s the difference between doing the above and just creating a public field on Foo called Bar like so:</description>
    </item>
    
    <item>
      <title>C#: Builder pattern still useful for test data</title>
      <link>https://mneedham.github.io/blog/2009/01/21/c-builder-pattern-still-useful-for-test-data/</link>
      <pubDate>Wed, 21 Jan 2009 23:49:13 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/01/21/c-builder-pattern-still-useful-for-test-data/</guid>
      <description>I had thought that with the ability to use the new object initalizer syntax in C# 3.0 meant that the builder pattern was now no longer necessary but some recent refactoring efforts have made me believe otherwise.
My original thought was that the builder pattern was really useful for providing a nicely chained way of creating objects, but after a bit of discussion with some colleagues I have come across three different reasons why we might want to use the builder pattern to create test data:</description>
    </item>
    
    <item>
      <title>F# vs C# vs Java: Functional Collection Parameters</title>
      <link>https://mneedham.github.io/blog/2009/01/19/f-vs-c-vs-java-functional-collection-parameters/</link>
      <pubDate>Mon, 19 Jan 2009 19:24:25 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/01/19/f-vs-c-vs-java-functional-collection-parameters/</guid>
      <description>I wrote a post about a month ago on using functional collection parameters in C# and over the weekend Fabio and I decided to try and contrast the way you would do this in Java, C# and then F# just for fun.
Map Map evaluates a high order function on all the elements in a collection and then returns a new collection containing the results of the function evaluation.
Given the numbers 1-5, return the square of each number</description>
    </item>
    
    <item>
      <title>Functional Collection Parameters in C#</title>
      <link>https://mneedham.github.io/blog/2008/12/17/functional-collection-parameters-in-c/</link>
      <pubDate>Wed, 17 Dec 2008 22:13:28 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/12/17/functional-collection-parameters-in-c/</guid>
      <description>While talking through my understanding of the Select method which can be applied to collections in C# with a colleague, it became clear that C# doesn&amp;rsquo;t seem to use the same names for these type of operations as are used in the world of functional programming.
Coincidentally on the same day I came across Bill Six&amp;rsquo;s post about using functional collection parameters in Ruby, so I thought I&amp;rsquo;d see what the equivalent operations are in C#.</description>
    </item>
    
    <item>
      <title>C#&#39;s Lambda ForEach: Only on Lists?</title>
      <link>https://mneedham.github.io/blog/2008/12/15/cs-lamba-foreach-only-on-lists/</link>
      <pubDate>Mon, 15 Dec 2008 23:52:17 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/12/15/cs-lamba-foreach-only-on-lists/</guid>
      <description>One of my favourite things introduced into C# recently is the new ForEach method which can be applied to (apparently only!) lists.
Last week we had a situation where we wanted to make use of the ForEach method on an IDictionary which we were using to store a collection of Selenium clients.
IDictionary&amp;lt;string, ISelenium&amp;gt; seleniumClients = new Dictionary&amp;lt;string, ISelenium&amp;gt;();  We wanted to write a piece of code to exit all of the clients when our tests had completed.</description>
    </item>
    
    <item>
      <title>Lambda in C#: Conciseness v Readability</title>
      <link>https://mneedham.github.io/blog/2008/11/24/c-new-language-features-conciseness-v-readability/</link>
      <pubDate>Mon, 24 Nov 2008 23:41:36 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/11/24/c-new-language-features-conciseness-v-readability/</guid>
      <description>One of the things I really disliked when I first came across C# 3.0 code was lambda functions.
At the time I remember speaking to my Tech Lead and expressing the opinion that they were making the code harder to understand and were valuing conciseness over readability.
After a week of reading about the new C# features and understanding how they worked the code was now more readable to me and a lot of the boiler plate code that I had come to expect was no longer necessary.</description>
    </item>
    
    <item>
      <title>Getting a strongly typed collection using LINQ to Xml</title>
      <link>https://mneedham.github.io/blog/2008/08/30/getting-a-strongly-typed-collection-using-linq-to-xml/</link>
      <pubDate>Sat, 30 Aug 2008 03:03:58 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/08/30/getting-a-strongly-typed-collection-using-linq-to-xml/</guid>
      <description>I mentioned earlier that I have been playing around with LINQ to Xml for parsing a Visual Studio csproj file.
While having namespace issues I decided to try and parse a simpler Xml file to try and work out what I was doing wrong.
Given this fragment of Xml:
&amp;lt;Node&amp;gt; &amp;lt;InnerNode&amp;gt;mark&amp;lt;/InnerNode&amp;gt; &amp;lt;InnerNode&amp;gt;needham&amp;lt;/InnerNode&amp;gt; &amp;lt;/Node&amp;gt;  I wanted to get a collection(IEnumerable) of InnerNode values.
Unfortunately my over enthusiasm to use anonymous types meant that I caused myself more problems than I needed to.</description>
    </item>
    
    <item>
      <title>C# Thrift Examples</title>
      <link>https://mneedham.github.io/blog/2008/08/29/c-thrift-examples/</link>
      <pubDate>Fri, 29 Aug 2008 01:39:52 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/08/29/c-thrift-examples/</guid>
      <description>As I mentioned in my earlier post I have been working with Facebook&amp;rsquo;s Thrift messaging project.
Unfortunately there are not currently any C# examples of how to use the Data Transfer Objects the Thrift compiler generates for us on the official wiki.
We managed to figure out how to do it by following the Java instructions and converting them into C# code. Before writing any code we need to import Thrift.</description>
    </item>
    
    <item>
      <title>Querying Xml with LINQ - Don&#39;t forget the namespace</title>
      <link>https://mneedham.github.io/blog/2008/08/28/querying-xml-with-linq-dont-forget-the-namespace/</link>
      <pubDate>Thu, 28 Aug 2008 10:15:45 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/08/28/querying-xml-with-linq-dont-forget-the-namespace/</guid>
      <description>I&amp;rsquo;ve been working with a colleague on parsing a Visual Studio project file using LINQ to effectively create a DOM of the file.
The first thing we tried to do was get a list of all the references from the file. It seemed like a fairly easy problem to solve but for some reason nothing was getting returned:
XDocument projectFile = XDocument.Load(projectFilePath.Path); var references = from itemGroupElement in projectFile.Descendants(&amp;quot;ItemGroup&amp;quot;).First().Elements() select itemGroupElement.</description>
    </item>
    
    <item>
      <title>Returning from methods</title>
      <link>https://mneedham.github.io/blog/2008/08/17/returning-from-methods/</link>
      <pubDate>Sun, 17 Aug 2008 23:05:33 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/08/17/returning-from-methods/</guid>
      <description>When pair programming there are obviously times when you have different opinions about how things should be done.
One of these is the way that we should return from methods. There seem to be two approaches when it comes to this: Exit as quickly as possible The goal with this approach is as the title suggests, to get out of the method at the earliest possible moment.
The Guard Block is the best example of this.</description>
    </item>
    
    <item>
      <title>Naming the patterns we use in code</title>
      <link>https://mneedham.github.io/blog/2008/08/16/naming-the-patterns-we-use-in-code/</link>
      <pubDate>Sat, 16 Aug 2008 23:58:17 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/08/16/naming-the-patterns-we-use-in-code/</guid>
      <description>I&amp;rsquo;ve been playing around with C#&amp;rsquo;s Xml libraries today and in particular the XmlWriter class.
I wanted to use it to create an Xml document so I called the XmlWriter.Create() method. One of the overloads for this methods takes in a StringBuilder which I initially thought the XmlWriter used to create the Xml document.
In fact it actually writes the Xml Document into this StringBuilder. This is actually possible to deduct from the documentation provided on the Create method but I only glanced at the type needed initially and misunderstood how it worked.</description>
    </item>
    
    <item>
      <title>Null Handling Strategies</title>
      <link>https://mneedham.github.io/blog/2008/08/16/null-handling-strategies/</link>
      <pubDate>Sat, 16 Aug 2008 01:03:03 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/08/16/null-handling-strategies/</guid>
      <description>I mentioned in an earlier post my dislike of the passing of null around code, and since then there have been a couple of posts on the subject on the ThoughtWorks blogs.
I had always thought that was a silver bullet for the way that we can handle null objects in our code but it seems from reading other people&amp;rsquo;s opinions and from my own experience that this is not the case (surprise, surprise!</description>
    </item>
    
    <item>
      <title>First thoughts on using var in C# 3.0 with Resharper</title>
      <link>https://mneedham.github.io/blog/2008/08/15/first-thoughts-on-using-var-in-c-30-with-resharper/</link>
      <pubDate>Fri, 15 Aug 2008 08:03:09 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/08/15/first-thoughts-on-using-var-in-c-30-with-resharper/</guid>
      <description>One of the first things I noticed when coming into the world of C# 3.0 was the use of the key word &amp;lsquo;var&amp;rsquo; all over our code base.
I had read about it previously and was under the impression that its main use would be when writing code around LINQ or when creating anonymous types.
On getting Resharper to tidy up my code I noticed that just about every variable type declaration had been removed and replaced with var.</description>
    </item>
    
    <item>
      <title>Controlling window position with the win32 API</title>
      <link>https://mneedham.github.io/blog/2008/08/10/controlling-window-position-with-the-win32-api/</link>
      <pubDate>Sun, 10 Aug 2008 03:02:47 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/08/10/controlling-window-position-with-the-win32-api/</guid>
      <description>We&amp;rsquo;ve been doing a bit of work around controlling the state of the windows of applications launched programmatically.
The problem we were trying to solve is to launch an arbitrary application, move it around the screen and then save its window position on the screen so that next time it&amp;rsquo;s launched it loads in the same position.
There are some win32 APIs designed to do just this, although it took a fair bit of searching and trial and error to work out exactly how to use them.</description>
    </item>
    
  </channel>
</rss>