<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lambdas on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/lambdas/</link>
    <description>Recent content in lambdas on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Dec 2008 23:15:31 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/lambdas/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C# lambdas: How much context should you need?</title>
      <link>https://markhneedham.com/blog/2008/12/27/c-lambdas-how-much-context-should-you-need/</link>
      <pubDate>Sat, 27 Dec 2008 23:15:31 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/12/27/c-lambdas-how-much-context-should-you-need/</guid>
      <description>I had an interesting discussion with a colleague last week about the names that we give to variables inside lambda expressions which got me thinking about the context that we should need to hold when reading code like this.
The particular discussion was around an example like this:
public class Foo { private String bar; private String baz; public Foo(String bar, String baz) { this.bar = bar; this.baz = baz; } public override string ToString() { return string.</description>
    </item>
    
  </channel>
</rss>