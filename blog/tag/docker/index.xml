<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/docker/</link>
    <description>Recent content in Docker on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Jan 2020 00:21:00 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Neo4j: Performing a database dump within a Docker container</title>
      <link>https://markhneedham.com/blog/2020/01/28/neo4j-database-dump-docker-container/</link>
      <pubDate>Tue, 28 Jan 2020 00:21:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2020/01/28/neo4j-database-dump-docker-container/</guid>
      <description>Before the release of Neo4j 4.0, taking a dump of a database running within a Docker container was a tricky affair.
 We&amp;#8217;d need to stop the container and remove it, run the container again in bash mode, and finally take a dump of the database. With 4.0 things are simpler.
  Figure 1. Neo4j on Docker  We&amp;#8217;ll be using the following Docker Compose configuration in this blog post:</description>
    </item>
    
    <item>
      <title>Docker: Find the network for a container</title>
      <link>https://markhneedham.com/blog/2019/05/24/docker-find-network-for-container/</link>
      <pubDate>Fri, 24 May 2019 06:10:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2019/05/24/docker-find-network-for-container/</guid>
      <description>If we want two Docker containers to communicate with each other they need to belong to the same network. In this post we&amp;#8217;ll learn how to find out the network of existing containers so that we can attach new containers to that network.
 All the containers mentioned in this post can be launched locally from Docker compose, using the following command:
 git clone git@github.com:mneedham/ksql-kafka-neo4j-streams.git &amp;amp;&amp;amp; cd ksql-kafka-neo4j-streams docker-compose-up   Running this command will create four containers:</description>
    </item>
    
    <item>
      <title>Deleting Kafka Topics on Docker</title>
      <link>https://markhneedham.com/blog/2019/05/23/deleting-kafka-topics-on-docker/</link>
      <pubDate>Thu, 23 May 2019 07:58:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2019/05/23/deleting-kafka-topics-on-docker/</guid>
      <description>In this post we&amp;#8217;re going to learn how to delete a Kafka Topic when running a Kafka Broker on Docker.
 We&amp;#8217;ll spin up a local Kafka environment using the Docker Compose template from the Kafka Basic Tutorial blog post that I wrote last week. Let&amp;#8217;s open a terminal window and run the following commands to set up our environment:
 git clone git@github.com:mneedham/basic-kafka-tutorial.git &amp;amp;&amp;amp; cd basic-kafka-tutorial docker-compose up   On another terminal window, run the following command to see the list of Docker containers that are running:</description>
    </item>
    
    <item>
      <title>pyspark: Py4JJavaError: An error occurred while calling o138.loadClass.: java.lang.ClassNotFoundException: org.graphframes.GraphFramePythonAPI</title>
      <link>https://markhneedham.com/blog/2019/04/17/pyspark-class-not-found-exception-org-graphframes-graphframepythonapi/</link>
      <pubDate>Wed, 17 Apr 2019 09:00:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2019/04/17/pyspark-class-not-found-exception-org-graphframes-graphframepythonapi/</guid>
      <description>I&amp;#8217;ve been building a Docker Container that has support for Jupyter, Spark, GraphFrames, and Neo4j, and ran into a problem that had me pulling my (metaphorical) hair out!
 The pyspark-notebook container gets us most of the way there, but it doesn&amp;#8217;t have GraphFrames or Neo4j support. Adding Neo4j is as simple as pulling in the Python Driver from Conda Forge, which leaves us with GraphFrames.
 When I&amp;#8217;m using GraphFrames with pyspark locally I would pull it in via the --packages config parameter, like this:</description>
    </item>
    
    <item>
      <title>Docker: Building custom Neo4j images on Mac OS X</title>
      <link>https://markhneedham.com/blog/2017/07/26/docker-building-custom-neo4j-images-on-mac-os-x/</link>
      <pubDate>Wed, 26 Jul 2017 22:20:23 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/07/26/docker-building-custom-neo4j-images-on-mac-os-x/</guid>
      <description>I sometimes needs to create custom Neo4j Docker images to try things out and wanted to share my work flow, mostly for future Mark but also in case it&amp;rsquo;s useful to someone else.
There&amp;rsquo;s already a docker-neo4j repository so we&amp;rsquo;ll just tweak the files in there to achieve what we want.
$ git clone git@github.com:neo4j/docker-neo4j.git $ cd docker-neo4j  If we want to build a Docker image for Neo4j Enterprise Edition we can run the following build target:</description>
    </item>
    
    <item>
      <title>Docker: Unknown - Unable to query docker version: x509: certificate is valid for</title>
      <link>https://markhneedham.com/blog/2016/12/21/docker-unknown-unable-to-query-docker-version-x509-certificate-is-valid-for/</link>
      <pubDate>Wed, 21 Dec 2016 07:11:50 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2016/12/21/docker-unknown-unable-to-query-docker-version-x509-certificate-is-valid-for/</guid>
      <description>I was playing around with Docker locally and somehow ended up with this error when I tried to list my docker machines: $ docker-machine ls NAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORS default - virtualbox Running tcp://192.168.99.101:2376 Unknown Unable to query docker version: Get https://192.168.99.101:2376/v1.15/version: x509: certificate is valid for 192.168.99.100, not 192.168.99.101   My Google Fu was weak I couldn&#39;t find any suggestions for what this might mean so I tried shutting it down and starting it again!</description>
    </item>
    
    <item>
      <title>Docker 1.9: Port forwarding on Mac OS X</title>
      <link>https://markhneedham.com/blog/2015/11/08/docker-1-9-port-forwarding-on-mac-os-x/</link>
      <pubDate>Sun, 08 Nov 2015 20:58:42 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2015/11/08/docker-1-9-port-forwarding-on-mac-os-x/</guid>
      <description>Since the Neo4j 2.3.0 release there&#39;s been an official docker image which I thought I&#39;d give a try this afternoon.  The last time I used docker about a year ago I had to install boot2docker which has now been deprecated in place of Docker Machine and the Docker Toolbox.  I created a container with the following command: docker run --detach --publish=7474:7474 neo4j/neo4j   And then tried to access the Neo4j server locally: $ curl http://localhost:7474 curl: (7) Failed to connect to localhost port 7474: Connection refused  I quickly checked that docker had started up Neo4j correctly:</description>
    </item>
    
    <item>
      <title>Docker/Neo4j: Port forwarding on Mac OS X not working</title>
      <link>https://markhneedham.com/blog/2014/11/27/dockerneo4j-port-forwarding-on-mac-os-x-not-working/</link>
      <pubDate>Thu, 27 Nov 2014 12:28:14 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2014/11/27/dockerneo4j-port-forwarding-on-mac-os-x-not-working/</guid>
      <description>Prompted by Ognjen Bubalo&#39;s excellent blog post I thought it was about time I tried running Neo4j on a docker container on my Mac Book Pro to make it easier to play around with different data sets.
I got the container up and running by following Ognien&#39;s instructions and had the following ports forwarded to my host machine:
$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES c62f8601e557 tpires/neo4j:latest &amp;quot;/bin/bash -c /launc About an hour ago Up About an hour 0.</description>
    </item>
    
  </channel>
</rss>