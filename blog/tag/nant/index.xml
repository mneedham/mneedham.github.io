<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nant on Mark Needham</title>
    <link>http://localhost:8000/blog/tag/nant/</link>
    <description>Recent content in nant on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Jan 2010 00:13:30 +0000</lastBuildDate><atom:link href="http://localhost:8000/blog/tag/nant/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nant: Populating templates</title>
      <link>http://localhost:8000/blog/2010/01/16/nant-populating-templates/</link>
      <pubDate>Sat, 16 Jan 2010 00:13:30 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2010/01/16/nant-populating-templates/</guid>
      <description>One of the common tasks that we need to do on every project I’ve worked on is ensure that we can create a web.config file for the different environments that we need to deploy our application to.
Nant has quite a neat task called &amp;#39;expandproperties&amp;#39; which allows us to do this quite easily.
In our build file we would have the following:
build-file.build
&amp;lt;property name =&amp;#34;configFile&amp;#34; value=&amp;#34;${environment}.properties&amp;#34; readonly=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;if test=&amp;#34;${not file::exists(configFile)}&amp;#34;&amp;gt; &amp;lt;fail message=&amp;#34;Configuration file &amp;#39;${configFile}&amp;#39; could not be found.</description>
    </item>
    
    <item>
      <title>Nant include task - namespace matters</title>
      <link>http://localhost:8000/blog/2009/02/03/nant-include-task-namespace-matters/</link>
      <pubDate>Tue, 03 Feb 2009 10:43:56 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2009/02/03/nant-include-task-namespace-matters/</guid>
      <description>We’ve been trying to include some properties into our build file from a properties file today but no matter what we tried the properties were not being set.
We eventually realised that the build file has an XML Namespace set on the project element.
&amp;lt;project name=&amp;#34;...&amp;#34; xmlns=&amp;#34;http://nant.sf.net/schemas/nant.xsd&amp;#34;&amp;gt; It turns out that if you want to include a properties file in your build file, like so:
&amp;lt;include buildfile=&amp;#34;properties.xml&amp;#34; /&amp;gt; …​you need to put the namespace on the project attribute of that file as well, otherwise its properties don’t get picked up.</description>
    </item>
    
    <item>
      <title>Configurable Builds: One configuration file per machine</title>
      <link>http://localhost:8000/blog/2008/09/13/configurable-builds-one-configuration-file-per-machine/</link>
      <pubDate>Sat, 13 Sep 2008 03:54:25 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2008/09/13/configurable-builds-one-configuration-file-per-machine/</guid>
      <description>I’ve covered some of the ways that I’ve seen for making builds configurable in previous posts:
One configuration file per environment
One configuration file per user
Overriding properties
One which I haven’t covered which my colleagues Gil Peeters and Jim Barritt have pointed out is having a build with one configuration file for each machine.
Again the setup is fairly similar to one configuration per user or environment. Using Nant we would have the following near the top of the build file:</description>
    </item>
    
    <item>
      <title>Configurable Builds: Overriding properties</title>
      <link>http://localhost:8000/blog/2008/09/02/configurable-builds-overriding-properties/</link>
      <pubDate>Tue, 02 Sep 2008 14:49:02 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2008/09/02/configurable-builds-overriding-properties/</guid>
      <description>Sometimes when configuring our build for flexibility we don’t need to spend the time required to create one build configuration per user or one build configuration per environment.
In these cases we can just override properties when we call Nant from the command line.
One recent example where I made use of this was where we had one configuration file with properties in but wanted to override a couple of them when we ran the continuous integration build.</description>
    </item>
    
    <item>
      <title>Configurable Builds: One configuration file per user</title>
      <link>http://localhost:8000/blog/2008/09/02/configurable-builds-one-configuration-file-per-user/</link>
      <pubDate>Tue, 02 Sep 2008 13:53:53 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2008/09/02/configurable-builds-one-configuration-file-per-user/</guid>
      <description>Following on from my first post about making builds configurable, the second way of doing this that I have seen is to have one configuration build file per user.
This approach is more useful where there are different configurations needed on each developer machine. For example, if the databases being used for development are on a remote server then each developer machine would be assigned a database with a different name.</description>
    </item>
    
    <item>
      <title>Configurable Builds: One configuration file per environment</title>
      <link>http://localhost:8000/blog/2008/09/02/configurable-builds-one-configuration-file-per-environment/</link>
      <pubDate>Tue, 02 Sep 2008 01:50:02 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2008/09/02/configurable-builds-one-configuration-file-per-environment/</guid>
      <description>One of the most important things when coding build files is to try and make them as configurable as possible.
At the very least on an agile project there will be a need for two different configurations - one for developer machines and one for continuous integration.
On my last two .NET projects we have setup our Nant build to take in a parameter which indicates which build configuration should be used.</description>
    </item>
    
    <item>
      <title>scp Nant Task - &#39;scp&#39; failed to start. The system cannot find the file specified</title>
      <link>http://localhost:8000/blog/2008/08/30/scp-nant-task-scp-failed-to-start-the-system-cannot-find-the-file-specified/</link>
      <pubDate>Sat, 30 Aug 2008 16:30:41 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2008/08/30/scp-nant-task-scp-failed-to-start-the-system-cannot-find-the-file-specified/</guid>
      <description>I was trying to make use of the Nant Contrib scp task earlier and was getting an error message which at the time seemed a bit strange (now of course having solve the problem it is obvious!)
This was the task I was running:
&amp;lt;scp file=&amp;#34;someFile.txt&amp;#34; server=&amp;#34;some.secure-server.com&amp;#34; /&amp;gt; This was the error:
&amp;#39;scp&amp;#39; failed to start. The system cannot find the file specified I ran it in debug mode to try and see what was going on and got this stack trace:</description>
    </item>
    
    <item>
      <title>NCover Nant Team City Integration</title>
      <link>http://localhost:8000/blog/2008/08/25/ncover-nant-team-city-integration/</link>
      <pubDate>Mon, 25 Aug 2008 21:29:03 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2008/08/25/ncover-nant-team-city-integration/</guid>
      <description>I’ve been spending quite a bit of time setting up NCover and then integrating it into Team City.
I’ve read some posts which cover parts of this process but nothing which covers the end to end process so hopefully my experience can help to fill that void.
Step 1 Download NCover 1.5.8, NCover Explorer 1.4.0.7, NCover Explorer Extras 1.4.0.5 from Kiwidude’s website and the NCover website .
Step 2 Put the following into your Nant build file:</description>
    </item>
    
    <item>
      <title>Encapsulation in build scripts using nant</title>
      <link>http://localhost:8000/blog/2008/08/21/encapsulation-in-build-scripts-using-nant/</link>
      <pubDate>Thu, 21 Aug 2008 00:40:45 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2008/08/21/encapsulation-in-build-scripts-using-nant/</guid>
      <description>When writing build scripts it’s very easy for it to descend into complete Xml hell when you’re using a tool like nant.
I wondered previously whether it was possible to TDD build files and while this is difficult given the dependency model most build tools follow. That doesn’t mean we can’t apply other good design principles from the coding world however.
Encapsulation is one of the key principles of OOP and it can be applied in build files too.</description>
    </item>
    
    <item>
      <title>NCover - Requested value &#39;/r&#39; was not found</title>
      <link>http://localhost:8000/blog/2008/08/19/ncover-requested-value-r-was-not-found/</link>
      <pubDate>Tue, 19 Aug 2008 21:18:44 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2008/08/19/ncover-requested-value-r-was-not-found/</guid>
      <description>I’ve been trying to integrate NCover into our build and probably making life harder for myself than it needs to be.
The title refers to the error message that I was getting when trying to run the ncover nant task on version 1.0.1 of NCover earlier today.
[ncover] Starting &amp;#39;C:\Program Files\NCover\ncover-console.exe (//r &amp;#34;\long\path\to\tmp392.tmp.ncoversettings&amp;#34; )&amp;#39; in &amp;#39;C:\my-project\trunk\src&amp;#39; [ncover] Unhandled Exception: System.ArgumentException: Requested value &amp;#39;/r&amp;#39; was not found. [ncover] at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase) [ncover] at NCover.</description>
    </item>
    
    <item>
      <title>Macros in nant</title>
      <link>http://localhost:8000/blog/2008/08/14/macros-in-nant/</link>
      <pubDate>Thu, 14 Aug 2008 21:49:04 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2008/08/14/macros-in-nant/</guid>
      <description>One of my favourite features of ant is the ability to create macros where you can define common behaviour and then call it from the rest of your build script.
Unfortunately that task doesn’t come with nant and it’s not available on nant-contrib either.
We were using a very roundabout way to build the various projects in our solution.12345678910111213141516171819~&amp;lt;/td&amp;gt; &amp;lt;target name=&amp;#34;compile&amp;#34;&amp;gt; &amp;lt;foreach item=&amp;#34;Folder&amp;#34; property=&amp;#34;folderName&amp;#34;&amp;gt; &amp;lt;include name=&amp;#34;${project::get-base-directory()}\Project1&amp;#34; /&amp;gt; &amp;lt;include name=&amp;#34;${project::get-base-directory()}\Project2&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;project.</description>
    </item>
    
  </channel>
</rss>
