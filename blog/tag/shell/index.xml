<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on Mark Needham</title>
    <link>https://mneedham.github.io/blog/tag/shell/</link>
    <description>Recent content in Shell on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Jun 2017 12:26:49 +0000</lastBuildDate>
    
	<atom:link href="https://mneedham.github.io/blog/tag/shell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shell: Create a comma separated string</title>
      <link>https://mneedham.github.io/blog/2017/06/23/shell-create-comma-separated-string/</link>
      <pubDate>Fri, 23 Jun 2017 12:26:49 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2017/06/23/shell-create-comma-separated-string/</guid>
      <description>I recently needed to generate a string with comma separated values, based on iterating a range of numbers.  e.g. we should get the following output where n = 3 foo-0,foo-1,foo-2  I only had the shell available to me so I couldn&#39;t shell out into Python or Ruby for example. That means it&#39;s bash scripting time!
 If we want to iterate a range of numbers and print them out on the screen we can write the following code: n=3 for i in $(seq 0 $(($n &amp;gt; 0?</description>
    </item>
    
    <item>
      <title>cURL and the case of the carriage return</title>
      <link>https://mneedham.github.io/blog/2012/09/15/curl-and-the-case-of-the-carriage-return/</link>
      <pubDate>Sat, 15 Sep 2012 09:06:02 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2012/09/15/curl-and-the-case-of-the-carriage-return/</guid>
      <description>We were doing some work this week where we needed to make a couple of calls to an API via a shell script and in the first call we wanted to capture one of the lines of the HTTP response headers and use that as in input to the second call.
The way we were doing this was something like the following:
#!/bin/bash # We were actually grabbing a different header but for the sake # of this post we&#39;ll say it was &#39;Set-Cookie&#39; AUTH_HEADER=`curl -I http://www.</description>
    </item>
    
    <item>
      <title>Bash: Piping data into a command using heredocs</title>
      <link>https://mneedham.github.io/blog/2012/09/15/bash-piping-data-into-a-command-using-heredocs/</link>
      <pubDate>Sat, 15 Sep 2012 07:54:04 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2012/09/15/bash-piping-data-into-a-command-using-heredocs/</guid>
      <description>I&amp;rsquo;ve been playing around with some data modelled in neo4j recently and one thing I wanted to do is run an adhoc query in the neo4j-shell and grab the results and do some text manipulation on them.
For example I wrote a query which outputted the following to the screen and I wanted to sum together all the values in the 3rd column:
| [&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;] | &amp;quot;3&amp;quot; | 1234567 | | [&amp;quot;4&amp;quot;,&amp;quot;5&amp;quot;,&amp;quot;6&amp;quot;] | &amp;quot;6&amp;quot; | 8910112 |  Initially I was pasting the output into a text file and then running the following sequence of commands to work it out:</description>
    </item>
    
    <item>
      <title>Unix: Caught out by shell significant characters</title>
      <link>https://mneedham.github.io/blog/2012/09/13/unix-caught-out-by-shell-significant-characters/</link>
      <pubDate>Thu, 13 Sep 2012 00:17:49 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2012/09/13/unix-caught-out-by-shell-significant-characters/</guid>
      <description>One of the applications that Phil and I were deploying today needed a MySQL server and part of our puppet code to provision that node type runs a command to setup the privileges for a database user.
The unevaluated puppet code reads like this:
/usr/bin/mysql -h ${host} -uroot ${rootpassarg} -e &amp;quot;grant all on ${name}.* to ${user}@&#39;${remote_host}&#39; identified by &#39;$password&#39;; flush privileges;&amp;quot;  In the application we were deploying that expanded into something like this:</description>
    </item>
    
    <item>
      <title>While waiting for VMs to provision...</title>
      <link>https://mneedham.github.io/blog/2012/09/12/while-waiting-for-vms-to-provision/</link>
      <pubDate>Wed, 12 Sep 2012 22:53:39 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2012/09/12/while-waiting-for-vms-to-provision/</guid>
      <description>Phil and I spent part of the day provisioning new virtual machines for some applications that we need to deploy which involves running a provisioning script and then opening another terminal and repeatedly trying to ssh into the box until it succeeds.
Eventually we got bored of doing that so we figured out a nice little one liner to use instead:
while :; do ssh 10.0.0.2; done  The &amp;lsquo;:&amp;rsquo; is a bash noop and is defined like so:</description>
    </item>
    
    <item>
      <title>Bash Shell: Reusing parts of previous commands</title>
      <link>https://mneedham.github.io/blog/2012/07/05/bash-shell-reusing-parts-of-previous-commands/</link>
      <pubDate>Thu, 05 Jul 2012 23:42:35 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2012/07/05/bash-shell-reusing-parts-of-previous-commands/</guid>
      <description>I&amp;rsquo;ve paired a few times with my colleague Phil Potter over the last couple of weeks and since he&amp;rsquo;s a bit of a ninja with bash shortcuts/commands I wanted to record some of the things he&amp;rsquo;s shown me so I won&amp;rsquo;t forget them!
Let&amp;rsquo;s say we&amp;rsquo;re in the &amp;lsquo;/tmp&amp;rsquo; directory and want to create a folder a few levels down but forget to pass the &amp;lsquo;-p&amp;rsquo; option to &amp;lsquo;mkdir&amp;rsquo;:
$ mkdir blah/de/blah mkdir: cannot create directory `blah/de/blah&#39;: No such file or directory  One way of fixing that would be to press the up arrow and navigate along the previous command and put in the &amp;lsquo;-p&amp;rsquo; flag but it&amp;rsquo;s a bit fiddly so instead we can do the following:</description>
    </item>
    
    <item>
      <title>Unix: Summing the total time from a log file</title>
      <link>https://mneedham.github.io/blog/2011/07/27/unix-summing-the-total-time-from-a-log-file/</link>
      <pubDate>Wed, 27 Jul 2011 23:02:33 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2011/07/27/unix-summing-the-total-time-from-a-log-file/</guid>
      <description>As I mentioned in my last post we&amp;rsquo;ve been doing some profiling of a data ingestion job and as a result have been putting some logging into our code to try and work out where we need to work on.
We end up with a log file peppered with different statements which looks a bit like the following:
18:50:08.086 [akka:event-driven:dispatcher:global-5] DEBUG - Imported document. /Users/mneedham/foo.xml in: 1298 18:50:09.064 [akka:event-driven:dispatcher:global-1] DEBUG - Imported document.</description>
    </item>
    
    <item>
      <title>Browsing around the Unix shell more easily</title>
      <link>https://mneedham.github.io/blog/2008/10/15/browsing-around-the-unix-shell-more-easily/</link>
      <pubDate>Wed, 15 Oct 2008 22:31:16 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/10/15/browsing-around-the-unix-shell-more-easily/</guid>
      <description>Following on from my post about getting the pwd to display on the bash prompt all the time I have learnt a couple of other tricks to make the shell experience more productive.
Aliases are the first new concept I came across and several members of my current team and I now have these setup.
We are primarily using them to provide a shortcut command to get to various locations in the file system.</description>
    </item>
    
    <item>
      <title>Calling shell script from ruby script</title>
      <link>https://mneedham.github.io/blog/2008/10/06/calling-shell-script-from-ruby-script/</link>
      <pubDate>Mon, 06 Oct 2008 20:12:49 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/10/06/calling-shell-script-from-ruby-script/</guid>
      <description>Damana and I previously posted about our experiences with different Ruby LDAP solutions.
Having settled on Ruby-LDAP (although having read Ola and Steven&amp;rsquo;s comments we will now look at ruby-net-ldap) we then needed to put together the setup, installation and teardown into a ruby script file.
A quick bit of Googling revealed that we could use the Kernel.exec method to do this.
For example, you could put the following in a ruby script file and it would execute and show you the current directory listing:</description>
    </item>
    
    <item>
      <title>Show pwd all the time</title>
      <link>https://mneedham.github.io/blog/2008/09/28/show-pwd-all-the-time/</link>
      <pubDate>Sun, 28 Sep 2008 22:50:44 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/09/28/show-pwd-all-the-time/</guid>
      <description>Finally back in the world of the shell last week I was constantly typing &amp;lsquo;pwd&amp;rsquo; to work out where exactly I was in the file system until my colleague pointed out that you can adjust your settings to get this to show up automatically for you on the left hand side of the prompt.
To do this you need to create or edit your .bash_profile file by entering the following command:</description>
    </item>
    
  </channel>
</rss>