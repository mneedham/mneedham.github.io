<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michael Feathers on Mark Needham</title>
    <link>http://markhneedham.com/blog/tag/michael-feathers/</link>
    <description>Recent content in Michael Feathers on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Nov 2009 06:33:22 +0000</lastBuildDate>
    
	<atom:link href="http://markhneedham.com/blog/tag/michael-feathers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Legacy Code: Sensing</title>
      <link>http://markhneedham.com/blog/2009/11/10/legacy-code-sensing/</link>
      <pubDate>Tue, 10 Nov 2009 06:33:22 +0000</pubDate>
      
      <guid>http://markhneedham.com/blog/2009/11/10/legacy-code-sensing/</guid>
      <description>In &amp;lsquo;Working Effectively With Legacy Code&amp;rsquo; Michael Feathers describes two reasons for wanting to break dependencies in our code - to allow separation and sensing.
The former describes the need to get a piece of code into a test harness while the latter describes the need to assert whether that piece of code is doing what we want it to.
On the projects I&amp;rsquo;ve worked on we&amp;rsquo;ve tended to run into problems with the latter more frequently and Matt and I actually ran into this problem when we were refactoring some code into a role based interface approach.</description>
    </item>
    
  </channel>
</rss>