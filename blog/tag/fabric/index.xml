<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fabric on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/fabric/</link>
    <description>Recent content in Fabric on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Feb 2020 00:21:00 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/fabric/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Neo4j: Cross database querying with Neo4j Fabric</title>
      <link>https://markhneedham.com/blog/2020/02/03/neo4j-cross-database-querying-fabric/</link>
      <pubDate>Mon, 03 Feb 2020 00:21:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2020/02/03/neo4j-cross-database-querying-fabric/</guid>
      <description>A couple of weeks ago I wrote a QuickGraph blog post about the Australian Open, in which I showed how to use Neo4j 4.0&amp;#8217;s multi database feature. In that post we focused on queries that could be run on one database, but the 4.0 release also contains another feature for doing cross database querying - Neo4j Fabric - and we&amp;#8217;re going to learn how to use that in this post.</description>
    </item>
    
    <item>
      <title>Fabric/Boto: boto.exception.NoAuthHandlerFound: No handler was ready to authenticate. 1 handlers were checked. [&#39;QuerySignatureV2AuthHandler&#39;] Check your credentials</title>
      <link>https://markhneedham.com/blog/2013/01/15/fabricboto-boto-exception-noauthhandlerfound-no-handler-was-ready-to-authenticate-1-handlers-were-checked-querysignaturev2authhandler-check-your-credentials/</link>
      <pubDate>Tue, 15 Jan 2013 00:37:01 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/01/15/fabricboto-boto-exception-noauthhandlerfound-no-handler-was-ready-to-authenticate-1-handlers-were-checked-querysignaturev2authhandler-check-your-credentials/</guid>
      <description>In our Fabric code we make use of Boto to connect to the EC2 API and pull back various bits of information and the first time anyone tries to use it they end up with the following stack trace:
File &amp;quot;/Library/Python/2.7/site-packages/fabric/main.py&amp;quot;, line 717, in main *args, **kwargs File &amp;quot;/Library/Python/2.7/site-packages/fabric/tasks.py&amp;quot;, line 332, in execute results[&#39;&amp;lt;local-only&amp;gt;&#39;] = task.run(*args, **new_kwargs) File &amp;quot;/Library/Python/2.7/site-packages/fabric/tasks.py&amp;quot;, line 112, in run return self.wrapped(*args, **kwargs) File &amp;quot;/Users/mark/projects/forward-puppet/ec2.py&amp;quot;, line 131, in running instances = instances_by_zones(running_instances(region, role_name)) File &amp;quot;/Users/mark/projects/forward-puppet/ec2.</description>
    </item>
    
    <item>
      <title>Fabric: Tailing log files on multiple machines</title>
      <link>https://markhneedham.com/blog/2013/01/15/fabric-tailing-log-files-on-multiple-machines/</link>
      <pubDate>Tue, 15 Jan 2013 00:20:49 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/01/15/fabric-tailing-log-files-on-multiple-machines/</guid>
      <description>We wanted to tail one of the log files simultaneously on 12 servers this afternoon to try and see if a particular event was being logged and rather than opening 12 SSH sessions decided to get Fabric to help us out.
My initial attempt to do this was the following:
fab -H host1,host2,host3 -- tail -f /var/www/awesome/current/log/production.log  It works but the problem is that by default Fabric runs the specified command one machine after the other so we&#39;ve actually managed to block Fabric with the tail command on &#39;host1&#39;.</description>
    </item>
    
  </channel>
</rss>