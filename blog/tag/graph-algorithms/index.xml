<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>graph-algorithms on Mark Needham</title>
    <link>http://localhost:8000/blog/tag/graph-algorithms/</link>
    <description>Recent content in graph-algorithms on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Feb 2021 00:44:37 +0000</lastBuildDate><atom:link href="http://localhost:8000/blog/tag/graph-algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Neo4j Graph Data Science 1.5: Exploring the Speaker-Listener LPA Overlapping Community Detection Algorithm</title>
      <link>http://localhost:8000/blog/2021/02/08/neo4j-gdsl-overlapping-community-detection-sllpa/</link>
      <pubDate>Mon, 08 Feb 2021 00:44:37 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2021/02/08/neo4j-gdsl-overlapping-community-detection-sllpa/</guid>
      <description>The Neo4j Graph Data Science Library provides efficiently implemented, parallel versions of common graph algorithms for Neo4j, exposed as Cypher procedures. It recently published version 1.5, which introduces some fun new algorithms.
In this blog post, we’re going to explore the newly added Speaker-Listener Label Propagation algorithm with the help of a twitter dataset.
Launching Neo4j We’re going to run Neo4j with the Graph Data Science Library using the following Docker Compose configuration:</description>
    </item>
    
    <item>
      <title>Neo4j Graph Data Science 1.5: Exploring the HITS Algorithm</title>
      <link>http://localhost:8000/blog/2021/02/03/neo4j-gdsl-hits-algorithm/</link>
      <pubDate>Wed, 03 Feb 2021 00:44:37 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2021/02/03/neo4j-gdsl-hits-algorithm/</guid>
      <description>The Neo4j Graph Data Science Library provides efficiently implemented, parallel versions of common graph algorithms for Neo4j, exposed as Cypher procedures. It recently published version 1.5, which has lots of goodies to play with.
In this blog post, we’re going to explore the newly added HITS algorithm with the help of a citations dataset.
Launching Neo4j We’re going to run Neo4j with the Graph Data Science Library using the following Docker Compose configuration:</description>
    </item>
    
    <item>
      <title>Neo4j: Storing inferred relationships with APOC triggers</title>
      <link>http://localhost:8000/blog/2018/11/05/neo4j-inferred-relationships-apoc-triggers/</link>
      <pubDate>Mon, 05 Nov 2018 06:15:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2018/11/05/neo4j-inferred-relationships-apoc-triggers/</guid>
      <description>One of my favourite things about modelling data in graphs is how easy it makes it to infer relationships between pieces of data based on other relationships. In this post we’re going to learn how to compute and store those inferred relationships using the triggers feature from the APOC library.
Meetup Graph Before we get to that, let’s first understand what we mean when we say inferred relationship. We’ll create a small graph containing Person, Meetup, and Topic nodes with the following query:</description>
    </item>
    
    <item>
      <title>Neo4j Graph Algorithms: Visualising Projected Graphs</title>
      <link>http://localhost:8000/blog/2018/10/31/neo4j-graph-algorithms-visualise-projected-graph/</link>
      <pubDate>Wed, 31 Oct 2018 18:12:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2018/10/31/neo4j-graph-algorithms-visualise-projected-graph/</guid>
      <description>A few weeks ago I wrote a blog post showing how to work out the best tennis player of all time using the Weighted PageRank algorithm, and in the process created a projected credibility graph which I want to explore in more detail in this post.
As I pointed out in that post, sometimes the graph model doesn’t fit well with what the algorithm expects, so we need to project the graph on which we run graph algorithms.</description>
    </item>
    
    <item>
      <title>Neo4j Graph Algorithms: Calculating the cosine similarity of Game of Thrones episodes</title>
      <link>http://localhost:8000/blog/2018/09/28/neo4j-graph-algorithms-cosine-game-of-thrones/</link>
      <pubDate>Fri, 28 Sep 2018 07:55:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2018/09/28/neo4j-graph-algorithms-cosine-game-of-thrones/</guid>
      <description>A couple of years ago I wrote a blog post showing how to calculate cosine similarity on Game of Thrones episodes using scikit-learn, and with the release of Similarity Algorithms in the Neo4j Graph Algorithms library I thought it was a good time to revisit that post.
The dataset contains characters and episodes, and we want to calculate episode similarity based on the characters that appear in each episode. Before we run any algorithms we need to get the data into Neo4j.</description>
    </item>
    
    <item>
      <title>QuickGraph #1: Analysing Python Dependency Graph with PageRank, Closeness Centrality, and Betweenness Centrality</title>
      <link>http://localhost:8000/blog/2018/07/16/quick-graph-python-dependency-graph/</link>
      <pubDate>Mon, 16 Jul 2018 05:25:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2018/07/16/quick-graph-python-dependency-graph/</guid>
      <description>I’ve always wanted to build a dependency graph of libraries in the Python ecosytem but I never quite got around to it…​until now! I thought I might be able to get a dump of all the libraries and their dependencies, but while searching I came across this article which does a good job of explaining why that’s not possible.
Finding Python Dependencies The best we can do is generate a dependency graph of our locally installed packages using the excellent pipdeptree tool.</description>
    </item>
    
  </channel>
</rss>
