<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kruskal on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/kruskal/</link>
    <description>Recent content in kruskal on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Dec 2012 21:43:42 +0000</lastBuildDate>
    
	<atom:link href="https://www.markhneedham.com/blog/tag/kruskal/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kruskal&#39;s Algorithm using union find in Ruby</title>
      <link>https://www.markhneedham.com/blog/2012/12/23/kruskals-algorithm-using-union-find-in-ruby/</link>
      <pubDate>Sun, 23 Dec 2012 21:43:42 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/12/23/kruskals-algorithm-using-union-find-in-ruby/</guid>
      <description>I recently wrote a blog post describing my implementation of Kruskal&amp;#8217;s algorithm - a greedy algorithm using to find a minimum spanning tree (MST) of a graph - and while it does the job it&amp;#8217;s not particularly quick.
 It takes 20 seconds to calculate the MST for a 500 node, ~2000 edge graph.
 One way that we can improve the performance of the algorithm is by storing the MST in a union find/http://en.</description>
    </item>
    
    <item>
      <title>Kruskal&#39;s Algorithm in Ruby</title>
      <link>https://www.markhneedham.com/blog/2012/12/23/kruskals-algorithm-in-ruby/</link>
      <pubDate>Sun, 23 Dec 2012 14:18:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/12/23/kruskals-algorithm-in-ruby/</guid>
      <description>Last week I wrote a couple of posts showing different implementations of Prim&amp;#8217;s algorithm - an algorithm using to find a minimum spanning tree in a graph - and a similar algorithm is Kruskal&amp;#8217;s algorithm.
 Kruskal&amp;#8217;s algorithm also finds a minimum spanning tree but it goes about it in a slightly different way.
 Prim&amp;#8217;s algorithm takes an approach whereby we select nodes and then find connecting edges until we&amp;#8217;ve covered all the nodes.</description>
    </item>
    
  </channel>
</rss>