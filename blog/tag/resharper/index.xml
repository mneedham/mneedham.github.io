<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>resharper on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/resharper/</link>
    <description>Recent content in resharper on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jun 2009 19:31:37 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/tag/resharper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Visual Studio/Resharper: Changing the order of arguments</title>
      <link>https://www.markhneedham.com/blog/2009/06/23/visual-studioresharper-changing-the-order-of-arguments/</link>
      <pubDate>Tue, 23 Jun 2009 19:31:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/23/visual-studioresharper-changing-the-order-of-arguments/</guid>
      <description>We’ve recently run into some places in our tests where the expectation and actual values passed into NUnit&amp;#39;s &amp;#39;Assert.AreEqual&amp;#39; are the wrong way round, therefore meaning that the error messages we get when tests fail are somewhat confusing!
Assert.AreEqual(theActualValue, &amp;#34;the expectation&amp;#34;); We can change the arguments around using Resharper by using the key combination &amp;#39;Ctrl-Alt-Shift-ArrowKey&amp;#39; but you can only do this one line at a time which was a bit annoying as there were about 20 to change.</description>
    </item>
    
    <item>
      <title>Resharper templates</title>
      <link>https://www.markhneedham.com/blog/2008/08/27/resharper-templates/</link>
      <pubDate>Wed, 27 Aug 2008 11:58:03 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/27/resharper-templates/</guid>
      <description>One of the first things that I do when I go onto a project is setup a ReSharper template for writing tests.
I generally set this up so that when I type &amp;#39;should&amp;#39; I can press tab and it will automatically create an outline of a test method for me.
Creating a template is as simple as going to &amp;#39;ReSharper &amp;gt; Live Templates&amp;#39; from Visual Studio.
I have attached several templates that I seem to end up writing over and over again.</description>
    </item>
    
    <item>
      <title>First thoughts on using var in C# 3.0 with Resharper</title>
      <link>https://www.markhneedham.com/blog/2008/08/15/first-thoughts-on-using-var-in-c-30-with-resharper/</link>
      <pubDate>Fri, 15 Aug 2008 08:03:09 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/15/first-thoughts-on-using-var-in-c-30-with-resharper/</guid>
      <description>One of the first things I noticed when coming into the world of C# 3.0 was the use of the key word &amp;#39;var&amp;#39; all over our code base.
I had read about it previously and was under the impression that its main use would be when writing code around LINQ or when creating anonymous types.
On getting Resharper to tidy up my code I noticed that just about every variable type declaration had been removed and replaced with var.</description>
    </item>
    
    <item>
      <title>Keyboard shortcut for running tests with Resharper</title>
      <link>https://www.markhneedham.com/blog/2008/08/08/keyboard-shortcut-for-running-tests-with-resharper/</link>
      <pubDate>Fri, 08 Aug 2008 19:23:13 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/08/keyboard-shortcut-for-running-tests-with-resharper/</guid>
      <description>Having moved back into the world of C#/.NET development after a few months in the Java world I have had the joy of getting to use Resharper again.
One annoyance that myself and my team have been having over the past few weeks is running unit tests. We always end up going to the Solution Explorer, right click the project and then click &amp;#39;Run Unit Tests&amp;#39;. There is another way…​</description>
    </item>
    
    <item>
      <title>Do IDEs encourage bad code?</title>
      <link>https://www.markhneedham.com/blog/2008/07/27/do-ides-encourage-bad-code/</link>
      <pubDate>Sun, 27 Jul 2008 11:43:30 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/07/27/do-ides-encourage-bad-code/</guid>
      <description>Although modern day IDEs (Eclipse, IntelliJ, Resharper etc) undoubtedly provide a lot of benefits when writing code, I am starting to wonder if the ease at which they make things possible actually encourages bad habits.
Useful features such as creating and initialising member variables from the definition of a constructor are quickly nullified by the ease at which one is able to create getters/setters/properties for these same member variables. All hopes of encapsulation gone with a few clicks of the mouse.</description>
    </item>
    
  </channel>
</rss>
