<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>seams on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/seams/</link>
    <description>Recent content in seams on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Jun 2009 17:21:22 +0000</lastBuildDate>
    
	<atom:link href="https://www.markhneedham.com/blog/tag/seams/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Seams: Some thoughts</title>
      <link>https://www.markhneedham.com/blog/2009/06/21/seams-some-thoughts/</link>
      <pubDate>Sun, 21 Jun 2009 17:21:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/21/seams-some-thoughts/</guid>
      <description>I pick up Michael Feathers&#39; Working Effectively with Legacy Code book from time to time and one of my favourite parts of the book is the chapter where he talks about &#39;Seams&#39;.
 To quote the book:
  A seam is a place where you can alter behaviour in your program without editing in that place
   Seams in the book are generally discussed in terms of how we can get tests around legacy code which was written without easy testability in mind but I&amp;#8217;ve noticed that the ideas behind seams seem to be more widely applicable than this.</description>
    </item>
    
  </channel>
</rss>