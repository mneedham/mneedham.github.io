<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mercurial on Mark Needham</title>
    <link>http://localhost:8000/blog/tag/mercurial/</link>
    <description>Recent content in mercurial on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Mar 2012 21:25:40 +0000</lastBuildDate><atom:link href="http://localhost:8000/blog/tag/mercurial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mercurial: hg push to Google Code</title>
      <link>http://localhost:8000/blog/2012/03/14/mercurial-hg-push-to-google-code/</link>
      <pubDate>Wed, 14 Mar 2012 21:25:40 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2012/03/14/mercurial-hg-push-to-google-code/</guid>
      <description>I wanted to make a change to add flatMap to Option in totallylazy so I had to clone the repository and make the change.
I thought I’d then be able to just push the change using my Google user name and password but instead ended up with the following error:
➜ mhneedham-totally-lazy hg push pushing to https://m.h.needham@code.google.com/r/mhneedham-totally-lazy/ searching for changes 1 changesets found http authorization required realm: Google Code hg Repository user: m.</description>
    </item>
    
    <item>
      <title>Mercurial: Only pushing some local changes</title>
      <link>http://localhost:8000/blog/2010/06/25/mercurial-only-pushing-some-local-changes/</link>
      <pubDate>Fri, 25 Jun 2010 23:32:36 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2010/06/25/mercurial-only-pushing-some-local-changes/</guid>
      <description>One problem we’ve come across a few times over the last couple of months while using Mercurial is the situation where we want to quickly commit a local change without committing other local changes that we’ve made.
The example we came across today was where we wanted to make a change to the build file as we’d made a mistake in the target that runs on our continuous integration server and hadn’t noticed for a while during which time we’d accumulated other local changes.</description>
    </item>
    
    <item>
      <title>Git/Mercurial: Pushing regularly</title>
      <link>http://localhost:8000/blog/2010/06/19/gitmercurial-pushing-regularly/</link>
      <pubDate>Sat, 19 Jun 2010 22:14:06 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2010/06/19/gitmercurial-pushing-regularly/</guid>
      <description>I was reading a recent blog post by Gabriel Schenker where he discusses http://feedproxy.google.com/r/LosTechies/3/h-tL8ABnNkY/git-and-our-friction-points-and-beginners-mistakes.aspx[how his team is making use of Git] and about half way through he says the following:
When using Git as your SCM it is normal to work for quite a while — maybe for a couple of days — in a local branch and without ever pushing the changes to the origin. Usually we only push when a feature is done or a defect is completely resolved.</description>
    </item>
    
    <item>
      <title>hg: Reverting committed changes</title>
      <link>http://localhost:8000/blog/2010/04/15/hg-reverting-committed-changes/</link>
      <pubDate>Thu, 15 Apr 2010 22:35:53 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2010/04/15/hg-reverting-committed-changes/</guid>
      <description>Continuing with our learning with Mercurial, yesterday we wanted to revert a couple of change sets that we had previously committed and go back to an old version of the code and continue working from there.
As an example, say we wanted to go back to Revision 1 and had the following changes committed:
Revision 3 Revision 2 Revision 1 Revision 0 My original thought was that we could merge revision 1 with the current tip:</description>
    </item>
    
    <item>
      <title>Mercurial: Early thoughts</title>
      <link>http://localhost:8000/blog/2010/04/10/mercurial-early-thoughts/</link>
      <pubDate>Sat, 10 Apr 2010 11:43:23 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2010/04/10/mercurial-early-thoughts/</guid>
      <description>We’re using Mercurial as our source control system on the project I’m working on at the moment and since I’ve not yet used a distributed source control system on a team I thought it’d be interesting to note some of my initial thoughts.
One of the neat things about having a local repository and a central one is that you can check in lots of times locally and then push those changes to the central repository when you want everyone else to get the changes that you’ve made.</description>
    </item>
    
    <item>
      <title>Mercurial: hg bisect</title>
      <link>http://localhost:8000/blog/2009/11/14/mercurial-hg-bisec/</link>
      <pubDate>Sat, 14 Nov 2009 11:20:13 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2009/11/14/mercurial-hg-bisec/</guid>
      <description>We’ve been using Mercurial locally on the project I’ve been working on and Phil showed me a cool feature called &amp;#39;bisect&amp;#39; a couple of weeks ago which can be helpful for working out which revision we managed to break our code in.
It’s been ported across from Git and is included in Mercurial from version 1.0.0 rather than just being an extension.
From the bisect extension page:
Its behaviour is fairly simple: it takes a first revision known to be correct (i.</description>
    </item>
    
    <item>
      <title>Mercurial: Pulling from behind a proxy</title>
      <link>http://localhost:8000/blog/2009/05/13/mercurial-pulling-from-behind-a-proxy/</link>
      <pubDate>Wed, 13 May 2009 07:49:44 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2009/05/13/mercurial-pulling-from-behind-a-proxy/</guid>
      <description>I’ve been playing around with Mercurial and the mercurial hosting website bitbucket a bit this year and recently wanted to pull from a repository from behind a proxy server.
With a bit of help from the mercurial mailing list and the documentation this is how I was able to pull the repository for the Hambread project I’ve been doing a bit of work on:
~text
hg --config http_proxy.host=ipOfYourProxyServer:portOfYourProxyServer --config http_proxy.</description>
    </item>
    
  </channel>
</rss>
