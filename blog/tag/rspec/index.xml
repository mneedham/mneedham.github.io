<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rspec on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/rspec/</link>
    <description>Recent content in rspec on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Oct 2010 18:25:32 +0000</lastBuildDate>
    
	<atom:link href="https://www.markhneedham.com/blog/tag/rspec/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RSpec: Testing Rails routes</title>
      <link>https://www.markhneedham.com/blog/2010/10/13/rspec-testing-rails-routes/</link>
      <pubDate>Wed, 13 Oct 2010 18:25:32 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/13/rspec-testing-rails-routes/</guid>
      <description>Something which I keep forgetting is how to write controller tests where I want to check whether an action correctly redirected to another action.
 With most of the routes in our application we&amp;#8217;ve created a &#39;resourceful route&#39; where each action maps to a CRUD operation in the database.
 We can do that with this type of code in routes.rb:
 ActionController::Routing::Routes.draw do |map| map.resources :foos end   Several helper methods based on named rotes get created and included in our controllers when we do this and we have access to those inside our specs.</description>
    </item>
    
    <item>
      <title>RSpec: Fooled by stub!...with</title>
      <link>https://www.markhneedham.com/blog/2010/09/26/rspec-fooled-by-stub-with/</link>
      <pubDate>Sun, 26 Sep 2010 19:03:24 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/26/rspec-fooled-by-stub-with/</guid>
      <description>We had an RSpec spec setup roughly like this the other day&amp;#8230;&amp;#8203;
 describe &#34;my stub test&#34; do it &#34;should be amazin&#34; do Mark.stub!(:random).with(&#34;some_wrong_argument&#34;).and_return(&#34;something&#34;) Another.new.a_method end end   &amp;#8230;&amp;#8203;where &#39;Mark&#39; and &#39;Another&#39; were defined like so:
 class Mark def self.random(params) &#34;do some amazing stuff&#34; end end   class Another def a_method random = Mark.random(&#34;foo&#34;) # use random for something end end   When we ran the spec we would get the following error message which was initially a little baffling:</description>
    </item>
    
    <item>
      <title>RSpec: Causing ourselves much pain through &#39;attr&#39; misuse</title>
      <link>https://www.markhneedham.com/blog/2010/09/26/rspec-causing-ourselves-much-pain-through-attr-misuse/</link>
      <pubDate>Sun, 26 Sep 2010 18:57:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/26/rspec-causing-ourselves-much-pain-through-attr-misuse/</guid>
      <description>While testing some code that we were mixing into one of our controllers we made what I thought was an interesting mistake.
 The module we wanted to test had some code a bit like this&amp;#8230;&amp;#8203;
 module OurModule def some_method @User = User.find(params[:id]) # in the test code this is always true if @user == user ... end end end   .and we had the spec setup like so: describe &#39;OurController&#39; do class TestController include OurModule attr_accessor :user end before(:each) do @controller = TestController.</description>
    </item>
    
    <item>
      <title>rspec - Invalid character &#39;\240&#39; in expression</title>
      <link>https://www.markhneedham.com/blog/2008/10/06/rspec-invalid-character-240-in-expression/</link>
      <pubDate>Mon, 06 Oct 2008 20:48:48 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/10/06/rspec-invalid-character-240-in-expression/</guid>
      <description>We have been using rspec on my project for the unit testing of our Ruby code and while running one of the specs last week I ended up getting this somewhat en-cryptic error message:
 Invalid character &#39;\240&#39; in expression ...   After convincing myself that this error wasn&amp;#8217;t actually possible it turned out that I had somehow entered an &#39;invisible to TextMate&#39; character after one of the method definitions - on the editor it just looked like a space.</description>
    </item>
    
  </channel>
</rss>