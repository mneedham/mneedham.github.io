<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sbt on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/sbt/</link>
    <description>Recent content in sbt on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jun 2011 00:16:05 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/sbt/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sbt: Rolling with continuous/incremental compilation and Jetty</title>
      <link>https://markhneedham.com/blog/2011/06/10/sbt-rolling-with-continuousincremental-compilation-and-jetty/</link>
      <pubDate>Fri, 10 Jun 2011 00:16:05 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/06/10/sbt-rolling-with-continuousincremental-compilation-and-jetty/</guid>
      <description>As I mentioned in an earlier post we&amp;#8217;re using SBT on our project and one of it&amp;#8217;s cool features is that it will listen to the source directory and then automatically recompile the code when it detects file changes.
 We&amp;#8217;ve also installed the sbt-jetty-embed plugin which allows us to create a war which has Jetty embedded so that we can keep our application containerless.
 That plugin adds an action called &#39;jetty&#39; to sbt so we (foolishly in hindsight) thought that we would be able to launch the application in triggered execution mode by making use of a ~ in front of that:</description>
    </item>
    
    <item>
      <title>Sbt: Zipping files without their directory structure</title>
      <link>https://markhneedham.com/blog/2011/06/04/sbt-zipping-files-without-their-directory-structure/</link>
      <pubDate>Sat, 04 Jun 2011 17:24:16 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/06/04/sbt-zipping-files-without-their-directory-structure/</guid>
      <description>We&amp;#8217;re using SBT on our project and Pat and I have been trying to work out how to zip together some artifacts so that they&amp;#8217;re all available from the top level of the zip file i.e. we don&amp;#8217;t want to copy the directory structure where the files come from.
 I&amp;#8217;ve been playing around with this in the Scala REPL which we can launch with our project&amp;#8217;s dependencies loaded with the following command:</description>
    </item>
    
  </channel>
</rss>