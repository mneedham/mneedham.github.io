<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aspnet-mvc on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/aspnet-mvc/</link>
    <description>Recent content in aspnet-mvc on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Mar 2009 22:55:41 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/tag/aspnet-mvc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ASP.NET MVC: Pre-compiling views when using SafeEncodingCSharpCodeProvider</title>
      <link>https://www.markhneedham.com/blog/2009/03/24/aspnet-mvc-pre-compiling-views-when-using-safeencodingcsharpcodeprovider/</link>
      <pubDate>Tue, 24 Mar 2009 22:55:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/03/24/aspnet-mvc-pre-compiling-views-when-using-safeencodingcsharpcodeprovider/</guid>
      <description>We’ve been doing some work to get our views in ASP.NET MVC to be pre-compiled which allows us to see any errors in them at compilation rather than at run time.
It’s relatively simple to do. You just need to add the following code into your .csproj file anywhere below the element:
&amp;lt;Target Name=&amp;#34;AfterBuild&amp;#34;&amp;gt; &amp;lt;AspNetCompiler VirtualPath=&amp;#34;/&amp;#34; PhysicalPath=&amp;#34;$(ProjectDir)\..\$(ProjectName)&amp;#34;/&amp;gt; &amp;lt;/Target&amp;gt; where VirtualPath refers to the virtual path defined inside your project file and PhysicalPath is the path to the folder which contains the project with the views in.</description>
    </item>
    
    <item>
      <title>ASP.NET MVC: Reducing duplication for partial models</title>
      <link>https://www.markhneedham.com/blog/2009/03/03/aspnet-mvc-using-adaptors-for-partial-models/</link>
      <pubDate>Tue, 03 Mar 2009 23:55:36 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/03/03/aspnet-mvc-using-adaptors-for-partial-models/</guid>
      <description>One of the problems we can encounter when using partials throughout our views is how we should create the model needed for those partials.
The approach that we have been following is to have the partial/child model on the parent model and then just call the appropriate method where we create the partial.
e.g.
public class ParentModel { public string Property1 {get;set;} public ChildModel ChildModel { get;set; } } public class ChildModel { public string Property1 {get;set;} } We have sometimes run into the problem where the data in the ChildModel is being populated from the ParentModel (due to it also being needed there) leading to data duplication.</description>
    </item>
    
    <item>
      <title>ASP.NET MVC: Driving partials by convention</title>
      <link>https://www.markhneedham.com/blog/2009/02/21/aspnet-mvc-driving-partials-by-convention/</link>
      <pubDate>Sat, 21 Feb 2009 10:39:49 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/21/aspnet-mvc-driving-partials-by-convention/</guid>
      <description>I like to have conventions in the code I write - I find it makes the code i write much cleaner which still providing flexibility.
One of the conventions that Jeremy Miller coined for working with ASP.NET MVC applications is that of using one model per controller method aka &amp;#34;The Thunderdome principle&amp;#34;. I think we can take this further by having one model per partial that we use inside our views.</description>
    </item>
    
  </channel>
</rss>
