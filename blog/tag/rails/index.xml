<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rails on Mark Needham</title>
    <link>http://localhost:8000/blog/tag/rails/</link>
    <description>Recent content in rails on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Jan 2011 17:09:49 +0000</lastBuildDate><atom:link href="http://localhost:8000/blog/tag/rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rails: Using helpers inside a controller</title>
      <link>http://localhost:8000/blog/2011/01/11/rails-using-helpers-inside-a-controller/</link>
      <pubDate>Tue, 11 Jan 2011 17:09:49 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2011/01/11/rails-using-helpers-inside-a-controller/</guid>
      <description>For about an hour or so this afternoon we were following the somewhat evil practice of using a method defined in a helper inside a controller.
The method was defined in the ApplicationHelper module:
module ApplicationHelper def foo # do something end end So we initially assumed that we’d just be able to reference that method inside any of our controllers since they all derive from ApplicationController.
That wasn’t the case so our next attempt was to try and add it as a helper:</description>
    </item>
    
    <item>
      <title>Rails: A slightly misleading error</title>
      <link>http://localhost:8000/blog/2010/11/16/rails-a-slightly-misleading-error/</link>
      <pubDate>Tue, 16 Nov 2010 21:17:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2010/11/16/rails-a-slightly-misleading-error/</guid>
      <description>We recently created a new project to handle the reporting part of our application and as with all our projects we decided not to checkin any configuration &amp;#34;.yml&amp;#39; files but rather &amp;#39;.yml.example&amp;#39; files which people can then customise for their own environments.
So in our config directory would look something like this when you first checkout the project:
config
database.yml.example
some.yml.example
&amp;lt;/ul&amp;gt; And we’d need to copy those files to get &amp;#39;.</description>
    </item>
    
    <item>
      <title>RSpec: Testing Rails routes</title>
      <link>http://localhost:8000/blog/2010/10/13/rspec-testing-rails-routes/</link>
      <pubDate>Wed, 13 Oct 2010 18:25:32 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2010/10/13/rspec-testing-rails-routes/</guid>
      <description>Something which I keep forgetting is how to write controller tests where I want to check whether an action correctly redirected to another action.
With most of the routes in our application we’ve created a &amp;#39;resourceful route&amp;#39; where each action maps to a CRUD operation in the database.
We can do that with this type of code in routes.rb:
ActionController::Routing::Routes.draw do |map| map.resources :foos end Several helper methods based on named rotes get created and included in our controllers when we do this and we have access to those inside our specs.</description>
    </item>
    
    <item>
      <title>Rails: before_filter, rescue_from and so on</title>
      <link>http://localhost:8000/blog/2010/10/05/rails-before_filter-rescue_from-and-so-on/</link>
      <pubDate>Tue, 05 Oct 2010 08:53:48 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2010/10/05/rails-before_filter-rescue_from-and-so-on/</guid>
      <description>One thing I’ve noticed while browsing our Rails code base is that the first entry point inside a controller is much less frequently the method corresponding to the action than it would be with a C# ASP.NET MVC application.
The concept of filters exists in ASP.NET MVC but on the projects I’ve worked on they’ve been used significantly less than before filters would be in a Rails application.
As a result I’m getting much more in the habit of checking for the before filters in the ApplicationController when an action isn’t working as expected to try and figure out what’s going on.</description>
    </item>
    
    <item>
      <title>Rails: Faking a delete method with &#39;form_for&#39;</title>
      <link>http://localhost:8000/blog/2010/09/20/rails-faking-a-delete-method-with-form_for/</link>
      <pubDate>Mon, 20 Sep 2010 18:52:15 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2010/09/20/rails-faking-a-delete-method-with-form_for/</guid>
      <description>We recently had a requirement to delete an item based on user input and wanting to adhere to the &amp;#39;RESTful&amp;#39; approach that Rails encourages we therefore needed to fake a HTTP Delete method request.
The documentation talks a little about this:
The Rails framework encourages RESTful design of your applications, which means you’ll be making a lot of “PUT” and “DELETE” requests (besides “GET” and “POST”). However, most browsers don’t support methods other than “GET” and “POST” when it comes to submitting forms.</description>
    </item>
    
    <item>
      <title>Rails: Populating a dropdown list using &#39;form_for&#39;</title>
      <link>http://localhost:8000/blog/2010/08/31/rails-populating-a-dropdown-list-using-form_for/</link>
      <pubDate>Tue, 31 Aug 2010 01:22:14 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2010/08/31/rails-populating-a-dropdown-list-using-form_for/</guid>
      <description>Last week we were trying to make use of Rails&amp;#39; &amp;#39;form_for&amp;#39; helper to populate a dropdown list with the values of a collection that we’d set to an instance variable in our controller.
My colleague pointed out that we’d need to use &amp;#39;collection_select&amp;#39; in order to do this.
We want to put the values in the &amp;#39;foos&amp;#39; collection onto the page. &amp;#39;foos&amp;#39; is a hash which defines some display values and their corresponding values like so:</description>
    </item>
    
    <item>
      <title>Ruby: Parameterising with ActiveResource</title>
      <link>http://localhost:8000/blog/2008/08/08/ruby-parameterising-with-activeresource/</link>
      <pubDate>Fri, 08 Aug 2008 22:16:02 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2008/08/08/ruby-parameterising-with-activeresource/</guid>
      <description>We’ve been using Ruby/Rails on my current project to create a RESTful web service. One of the problems we wanted to solve was making the data queried by this web service configurable from our build.
We started off with the following bit of code (which makes use of the recently added ActiveResource class):123~ &amp;lt;/td&amp;gt; class MyClass &amp;lt; ActiveResource::[.co]Base self.site = [.dl]&amp;#34;[.k]#http://localhost:3000/[.dl]&amp;#34;[.r]#end~ &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt; And then called this class as follows: 1~ &amp;lt;/td&amp;gt; MyClass.</description>
    </item>
    
    <item>
      <title>Watching a master at work</title>
      <link>http://localhost:8000/blog/2006/09/02/watching-a-master-at-work/</link>
      <pubDate>Sat, 02 Sep 2006 01:01:44 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2006/09/02/watching-a-master-at-work/</guid>
      <description>I’ve always found it fascinating watching people who really excel in their field going about business, be it footballers, tennis players, actors, whoever.
This week at TWU I’ve been playing around with some Ruby on Rails as I mentioned in the previous post, and yesterday I had the opportunity to watch one of the leading figures in the Ruby on Rails field at work. Take a bow Obie Fernandez, who gave several of the TWU attendees a demonstration of how to develop applications using Ruby on Rails.</description>
    </item>
    
  </channel>
</rss>
