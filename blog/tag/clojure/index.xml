<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clojure on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/clojure/</link>
    <description>Recent content in clojure on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Jan 2016 22:01:43 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/tag/clojure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clojure: First steps with reducers</title>
      <link>https://www.markhneedham.com/blog/2016/01/24/clojure-first-steps-with-reducers/</link>
      <pubDate>Sun, 24 Jan 2016 22:01:43 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/01/24/clojure-first-steps-with-reducers/</guid>
      <description>I’ve been playing around with Clojure a bit today in preparation for a talk I’m giving next week and found myself writing the following code to apply the same function to three different scores:
(defn log2 [n] (/ (Math/log n) (Math/log 2))) (defn score-item [n] (if (= n 0) 0 (log2 n))) (+ (score-item 12) (score-item 13) (score-item 5)) 9.60733031374961 I’d forgotten about folding over a collection but quickly remembered that I could achieve the same result with the following code:</description>
    </item>
    
    <item>
      <title>Neo4j&#39;s Cypher vs Clojure - Group by and Sorting</title>
      <link>https://www.markhneedham.com/blog/2014/06/29/neo4j-cypher-vs-clojure-for-group-by-and-sorting/</link>
      <pubDate>Sun, 29 Jun 2014 02:56:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/06/29/neo4j-cypher-vs-clojure-for-group-by-and-sorting/</guid>
      <description>One of the points that I emphasised during my talk on building Neo4j backed applications using Clojure last week is understanding when to use Cypher to solve a problem and when to use the programming language.
A good example of this is in the meetup application I’ve been working on. I have a collection of events and want to display past events in descending order and future events in ascending order.</description>
    </item>
    
    <item>
      <title>Clojure: Destructuring group-by&#39;s output</title>
      <link>https://www.markhneedham.com/blog/2014/05/31/clojure-destructuring-group-bys-output/</link>
      <pubDate>Sat, 31 May 2014 00:03:48 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/05/31/clojure-destructuring-group-bys-output/</guid>
      <description>One of my favourite features of Clojure is that it allows you to destructure a data structure into values that are a bit easier to work with.
I often find myself referring to Jay Fields&amp;#39; article which contains several examples showing the syntax and is a good starting point.
One recent use of destructuring I had was where I was working with a vector containing events like this:
user&amp;gt; (def events [{:name &amp;#34;e1&amp;#34; :timestamp 123} {:name &amp;#34;e2&amp;#34; :timestamp 456} {:name &amp;#34;e3&amp;#34; :timestamp 789}]) I wanted to split the events in two - those containing events with a timestamp greater than 123 and those less than or equal to 123.</description>
    </item>
    
    <item>
      <title>Clojure: Create a directory</title>
      <link>https://www.markhneedham.com/blog/2014/05/24/clojure-create-a-directory/</link>
      <pubDate>Sat, 24 May 2014 00:12:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/05/24/clojure-create-a-directory/</guid>
      <description>I spent much longer than I should have done trying to work out how to create a directory in Clojure as part of an import script I’m working out so for my future self this is how you do it:
(.mkdir (java.io.File. &amp;#34;/path/to/dir/to/create&amp;#34;)) I’m creating a directory which contains today’s date so I’d want something like &amp;#39;members-2014-05-24&amp;#39; if I was running it today. The clj-time library is very good for working with dates.</description>
    </item>
    
    <item>
      <title>Clojure: Paging meetup data using lazy sequences</title>
      <link>https://www.markhneedham.com/blog/2014/04/30/clojure-paging-meetup-data-using-lazy-sequences/</link>
      <pubDate>Wed, 30 Apr 2014 00:20:46 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/04/30/clojure-paging-meetup-data-using-lazy-sequences/</guid>
      <description>I’ve been playing around with the meetup API to do some analysis on the Neo4j London meetup and one thing I wanted to do was download all the members of the group.
A feature of the meetup API is that each end point will only allow you to return a maximum of 200 records so I needed to make use of offsets and paging to retrieve everybody.
It seemed like a good chance to use some lazy sequences to keep track of the offsets and then stop making calls to the API once I wasn’t retrieving any more results.</description>
    </item>
    
    <item>
      <title>Clojure: clj-time - Formatting a date / timestamp with day suffixes e.g. 1st, 2nd, 3rd</title>
      <link>https://www.markhneedham.com/blog/2014/04/26/clojure-clj-time-formatting-a-date-timestamp-with-day-suffixes-e-g-1st-2nd-3rd/</link>
      <pubDate>Sat, 26 Apr 2014 07:50:46 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/04/26/clojure-clj-time-formatting-a-date-timestamp-with-day-suffixes-e-g-1st-2nd-3rd/</guid>
      <description>I’ve been using the clj-time library recently - a Clojure wrapper around Joda Time - and one thing I wanted to do is format a date with day suffixes e.g. 1st, 2nd, 3rd.
I started with the following timestamp:
1309368600000 The first step was to convert that into a DateTime object like so:
user&amp;gt; (require &amp;#39;[clj-time.coerce :as c]) user&amp;gt; (c/from-long 1309368600000) #&amp;lt;DateTime 2011-06-29T17:30:00.000Z&amp;gt; I wanted to output that date in the following format:</description>
    </item>
    
    <item>
      <title>Clojure: Not so lazy sequences a.k.a chunking behaviour</title>
      <link>https://www.markhneedham.com/blog/2014/04/06/clojure-not-so-lazy-sequences-a-k-a-chunking-behaviour/</link>
      <pubDate>Sun, 06 Apr 2014 22:07:47 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/04/06/clojure-not-so-lazy-sequences-a-k-a-chunking-behaviour/</guid>
      <description>I’ve been playing with Clojure over the weekend and got caught out by the behaviour of lazy sequences due to chunking - something which was obvious to experienced Clojurians although not me.
I had something similar to the following bit of code which I expected to only evaluate the first item of the infinite sequence that the range function generates:
&amp;gt; (take 1 (map (fn [x] (println (str &amp;#34;printing...&amp;#34; x))) (range))) (printing.</description>
    </item>
    
    <item>
      <title>Elo Rating System: Ranking Champions League teams using Clojure Part 2</title>
      <link>https://www.markhneedham.com/blog/2013/09/30/elo-rating-system-ranking-champions-league-teams-using-clojure-part-2/</link>
      <pubDate>Mon, 30 Sep 2013 20:26:35 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/09/30/elo-rating-system-ranking-champions-league-teams-using-clojure-part-2/</guid>
      <description>A few weeks ago I wrote about ranking Champions League teams using the Elo Rating algorithm, and since I wrote that post I’ve collated data for 10 years worth of matches so I thought an update was in order.
After extracting the details of all those matches I saved them to a JSON file so that I wouldn’t have to parse the HTML pages every time I tweaked the algorithm.</description>
    </item>
    
    <item>
      <title>Clojure: Writing JSON to a file - &#34;Exception Don&#39;t know how to write JSON of class org.joda.time.DateTime&#34;</title>
      <link>https://www.markhneedham.com/blog/2013/09/26/clojure-writing-json-to-a-file-exception-dont-know-how-to-write-json-of-class-org-joda-time-datetime/</link>
      <pubDate>Thu, 26 Sep 2013 19:11:29 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/09/26/clojure-writing-json-to-a-file-exception-dont-know-how-to-write-json-of-class-org-joda-time-datetime/</guid>
      <description>As I mentioned in an earlier post I’ve been transforming Clojure hash’s into JSON strings using data.json but ran into trouble while trying to parse a hash which contained a Joda Time DateTime instance.
The date in question was constructed like this:
(ns json-date-example (:require [clj-time.format :as f]) (:require [clojure.data.json :as json])) (defn as-date [date-field] (f/parse (f/formatter &amp;#34;dd MMM YYYY&amp;#34;) date-field )) (def my-date (as-date &amp;#34;18 Mar 2012&amp;#34;)) And when I tried to convert a hash containing that object into a string I got the following exception:</description>
    </item>
    
    <item>
      <title>Clojure: Writing JSON to a file/reading JSON from a file</title>
      <link>https://www.markhneedham.com/blog/2013/09/26/clojure-writing-json-to-a-filereading-json-from-a-file/</link>
      <pubDate>Thu, 26 Sep 2013 07:47:34 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/09/26/clojure-writing-json-to-a-filereading-json-from-a-file/</guid>
      <description>A few weeks ago I described how I’d scraped football matches using Clojure’s Enlive, and the next step after translating the HTML representation into a Clojure map was to save it as a JSON document.
I decided to follow a two step process to achieve this:
Convert hash to JSON string
Write JSON string to file
I imagine there’s probably a way to convert the hash to a stream and pipe that into a file but my JSON document isn’t very large so I think this way is ok for now.</description>
    </item>
    
    <item>
      <title>Clojure: Anonymous functions using short notation and the &#39;ArityException Wrong number of args (0) passed to: PersistentVector&#39;</title>
      <link>https://www.markhneedham.com/blog/2013/09/23/clojure-anonymous-functions-using-short-notation-and-the-arityexception-wrong-number-of-args-0-passed-to-persistentvector/</link>
      <pubDate>Mon, 23 Sep 2013 21:42:12 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/09/23/clojure-anonymous-functions-using-short-notation-and-the-arityexception-wrong-number-of-args-0-passed-to-persistentvector/</guid>
      <description>In the time I’ve spent playing around with Clojure one thing I’ve always got confused by is the error message you get when trying to return a vector using the anonymous function shorthand.
For example, if we want function which creates a vector with the values 1, 2, and the argument passed into the function we could write the following:
&amp;gt; ((fn [x] [1 2 x]) 6) [1 2 6] However, when I tried to convert it to the shorthand &amp;#39;#()&amp;#39; syntax I got the following exception:</description>
    </item>
    
    <item>
      <title>Clojure/Emacs/nrepl: Stacktrace-less error messages</title>
      <link>https://www.markhneedham.com/blog/2013/09/22/clojureemacsnrepl-stacktrace-less-error-messages/</link>
      <pubDate>Sun, 22 Sep 2013 23:07:04 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/09/22/clojureemacsnrepl-stacktrace-less-error-messages/</guid>
      <description>Ever since I started using the Emacs + nrepl combination to play around with Clojure I’ve been getting fairly non descript error messages whenever I pass the wrong parameters to a function.
For example if I try to update a non existent key in a form I get a Null Pointer Exception:
&amp;gt; (update-in {} [:mark] inc) NullPointerException clojure.lang.Numbers.ops (Numbers.java:942) In this case it’s clear that the hash doesn’t have a key &amp;#39;:mark&amp;#39; so the function blows up.</description>
    </item>
    
    <item>
      <title>Clojure/Emacs/nrepl: Ctrl X &#43; Ctrl E leads to &#39;FileNotFoundException Could not locate [...] on classpath&#39;</title>
      <link>https://www.markhneedham.com/blog/2013/09/22/clojureemacsnrepl-ctrl-x-ctrl-e-leads-to-filenotfoundexception-could-not-locate-on-classpath/</link>
      <pubDate>Sun, 22 Sep 2013 21:23:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/09/22/clojureemacsnrepl-ctrl-x-ctrl-e-leads-to-filenotfoundexception-could-not-locate-on-classpath/</guid>
      <description>I’ve been playing around with Clojure using Emacs and nrepl recently and my normal work flow is to write some code in Emacs and then have it evaluated in nrepl by typing Ctrl X + Ctrl E at the end of the function.
I tried this once recently and got the following exception instead of a successful evaluation:
FileNotFoundException Could not locate ranking_algorithms/ranking__init.class or ranking_algorithms/ranking.clj on classpath: clojure.lang.RT.load (RT.java:432) I was a bit surprised because I had nrepl running already (via (Meta + X) + Enter + nrepl-jack-in) and I’d only ever seen that exception refer to dependencies which weren’t in my project.</description>
    </item>
    
    <item>
      <title>Clojure: Stripping all the whitespace</title>
      <link>https://www.markhneedham.com/blog/2013/09/22/clojure-stripping-all-the-whitespace/</link>
      <pubDate>Sun, 22 Sep 2013 18:54:47 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/09/22/clojure-stripping-all-the-whitespace/</guid>
      <description>When putting together data sets to play around with, one of the more boring tasks is stripping out characters that you’re not interested in and more often than not those characters are white spaces.
Since I’ve been building data sets using Clojure I wanted to write a function that would do this for me.
I started out with the following string:
(def word &amp;#34; with a little bit of space we can make it through the night &amp;#34;) which I wanted to format in such a way that there would be a maximum of one space between each word.</description>
    </item>
    
    <item>
      <title>Clojure: Converting an array/set into a hash map</title>
      <link>https://www.markhneedham.com/blog/2013/09/20/clojure-converting-an-arrayset-into-a-hash-map/</link>
      <pubDate>Fri, 20 Sep 2013 21:13:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/09/20/clojure-converting-an-arrayset-into-a-hash-map/</guid>
      <description>When I was implementing the Elo Rating algorithm a few weeks ago one thing I needed to do was come up with a base ranking for each team.
I started out with a set of teams that looked like this:
(def teams #{ &amp;#34;Man Utd&amp;#34; &amp;#34;Man City&amp;#34; &amp;#34;Arsenal&amp;#34; &amp;#34;Chelsea&amp;#34;}) and I wanted to transform that into a map from the team to their ranking e.g.
Man Utd -&amp;gt; {:points 1200} Man City -&amp;gt; {:points 1200} Arsenal -&amp;gt; {:points 1200} Chelsea -&amp;gt; {:points 1200} I had read the documentation of http://clojuredocs.</description>
    </item>
    
    <item>
      <title>Clojure: Converting a string to a date</title>
      <link>https://www.markhneedham.com/blog/2013/09/20/clojure-converting-a-string-to-a-date/</link>
      <pubDate>Fri, 20 Sep 2013 07:00:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/09/20/clojure-converting-a-string-to-a-date/</guid>
      <description>I wanted to do some date manipulation in Clojure recently and figured that since clj-time is a wrapper around Joda Time it’d probably do the trick.
The first thing we need to do is add the dependency to our project file and then run lein reps to pull down the appropriate JARs. The project file should look something like this:
project.clj
(defproject ranking-algorithms &amp;#34;0.1.0-SNAPSHOT&amp;#34; :license {:name &amp;#34;Eclipse Public License&amp;#34; :url &amp;#34;http://www.</description>
    </item>
    
    <item>
      <title>Clojure: See every step of a reduce</title>
      <link>https://www.markhneedham.com/blog/2013/09/19/clojure-see-every-step-of-a-reduce/</link>
      <pubDate>Thu, 19 Sep 2013 23:57:49 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/09/19/clojure-see-every-step-of-a-reduce/</guid>
      <description>Last year I wrote about a Haskell function called scanl which returned the intermediate steps of a fold over a collection and last week I realised that I needed a similar function in Clojure to analyse a reduce I’d written.
A simple reduce which adds together the numbers 1-10 would look like this:
&amp;gt; (reduce + 0 (range 1 11)) 55 If we want to see the intermediate values of this function called then instead of using http://clojuredocs.</description>
    </item>
    
    <item>
      <title>Clojure: Merge two maps but only keep the keys of one of them</title>
      <link>https://www.markhneedham.com/blog/2013/09/17/clojure-merge-two-maps-but-only-keep-the-keys-of-one-of-them/</link>
      <pubDate>Tue, 17 Sep 2013 01:03:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/09/17/clojure-merge-two-maps-but-only-keep-the-keys-of-one-of-them/</guid>
      <description>I’ve been playing around with Clojure maps recently and I wanted to merge two maps of rankings where the rankings in the second map overrode those in the first while only keeping the teams from the first map.
The http://clojuredocs.org/clojure_core/clojure.core/merge function overrides keys in earlier maps but also adds keys that only appear in later maps. For example, if we merge the following maps:
&amp;gt; (merge {&amp;#34;Man. United&amp;#34; 1500 &amp;#34;Man.</description>
    </item>
    
    <item>
      <title>Clojure: Updating keys in a map</title>
      <link>https://www.markhneedham.com/blog/2013/09/17/clojure-updating-keys-in-a-map/</link>
      <pubDate>Tue, 17 Sep 2013 00:24:48 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/09/17/clojure-updating-keys-in-a-map/</guid>
      <description>I’ve been playing with Clojure over the last few weeks and as a result I’ve been using a lot of maps to represent the data.
For example if we have the following map of teams to Glicko ratings and ratings deviations:
(def teams { &amp;#34;Man. United&amp;#34; {:points 1500 :rd 350} &amp;#34;Man. City&amp;#34; {:points 1450 :rd 300} }) We might want to increase Man. United’s points score by one for which we could use the http://clojuredocs.</description>
    </item>
    
    <item>
      <title>Clojure: All things regex</title>
      <link>https://www.markhneedham.com/blog/2013/09/14/clojure-all-things-regex/</link>
      <pubDate>Sat, 14 Sep 2013 01:24:51 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/09/14/clojure-all-things-regex/</guid>
      <description>I’ve been doing some scrapping of web pages recently using Clojure and Enlive and as part of that I’ve had to write regular expressions to extract the data I’m interested in.
On my travels I’ve come across a few different functions and I’m never sure which is the right one to use so I thought I’d document what I’ve tried for future me.
Check if regex matches The first regex I wrote was while scrapping the Champions League results from the Rec.</description>
    </item>
    
    <item>
      <title>Elo Rating System: Ranking Champions League teams using Clojure</title>
      <link>https://www.markhneedham.com/blog/2013/08/31/elo-rating-system-ranking-champions-league-teams-using-clojure/</link>
      <pubDate>Sat, 31 Aug 2013 13:01:16 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/08/31/elo-rating-system-ranking-champions-league-teams-using-clojure/</guid>
      <description>As I mentioned in an earlier blog post I’ve been learning about ranking systems and one of the first ones I came across was the Elo rating system which is most famously used to rank chess players.
The Elo rating system uses the following formula to work out a player/team’s ranking after they’ve participated in a match:
R&amp;#39; = R + K * (S - E)
R&amp;#39; is the new rating</description>
    </item>
    
    <item>
      <title>Clojure: Handling state by updating a vector inside an atom</title>
      <link>https://www.markhneedham.com/blog/2013/08/30/clojure-handling-state-by-updating-a-vector-inside-an-atom/</link>
      <pubDate>Fri, 30 Aug 2013 12:23:21 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/08/30/clojure-handling-state-by-updating-a-vector-inside-an-atom/</guid>
      <description>As I mentioned in a previous blog post, I’ve been learning about ranking algorithms and I wanted to apply them to a series of football matches to see who the strongest team was.
Before that, however, I wanted to sketch out the functions that I’d need to do this and I started with the following collections of matches and team rankings:
(def m [{:home &amp;#34;Manchester United&amp;#34;, :away &amp;#34;Manchester City&amp;#34;, :home_score 1, :away_score 0} {:home &amp;#34;Manchester United&amp;#34;, :away &amp;#34;Manchester City&amp;#34;, :home_score 2, :away_score 0}]) (def teams [ {:name &amp;#34;Manchester United&amp;#34; :points 1200} {:name &amp;#34;Manchester City&amp;#34; :points 1200} ]) I wanted to iterate over the matches and make the appropriate updates to the teams&amp;#39; rankings depending on the result of the match.</description>
    </item>
    
    <item>
      <title>Clojure/Enlive: Screen scraping a HTML file from disk</title>
      <link>https://www.markhneedham.com/blog/2013/08/26/clojureenlive-screen-scraping-a-html-file-from-disk/</link>
      <pubDate>Mon, 26 Aug 2013 17:58:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/08/26/clojureenlive-screen-scraping-a-html-file-from-disk/</guid>
      <description>I wanted to play around with some Champions League data and I came across the Rec Sport Soccer Statistics Foundation which has collected results of all matches since the tournament started in 1955.
I wanted to get a list of all the matches for a specific season so I started out by downloading the file:
$ pwd /tmp/football $ wget http://www.rsssf.com/ec/ec200203det.html The next step was to load that page and then run a CSS selector over it to extract the matches.</description>
    </item>
    
    <item>
      <title>clojure/Java Interop: The doto macro</title>
      <link>https://www.markhneedham.com/blog/2013/03/17/clojurejava-interop-the-doto-macro/</link>
      <pubDate>Sun, 17 Mar 2013 20:21:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/03/17/clojurejava-interop-the-doto-macro/</guid>
      <description>I recently wrote about some code I’ve been playing with to import neo4j spatial data and while looking to simplify the code I came across the http://clojure.org/java_interop#Java Interop-The Dot special form-(doto instance-expr (instanceMethodName-symbol args*)*) macro.
The doto macro allows us to chain method calls on an initial object and then returns the resulting object. e.g.
(doto (new java.util.HashMap) (.put &amp;#34;a&amp;#34; 1) (.put &amp;#34;b&amp;#34; 2)) -&amp;gt; {a=1, b=2} In our case this comes in quite useful in the function used to create a stadium node which initially reads like this:~ ~lisp (defn create-stadium-node [db line] (let [stadium-node (.</description>
    </item>
    
    <item>
      <title>clojure/Java Interop - Importing neo4j spatial data</title>
      <link>https://www.markhneedham.com/blog/2013/03/17/clojurejava-interop-importing-neo4j-spatial-data/</link>
      <pubDate>Sun, 17 Mar 2013 18:56:36 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/03/17/clojurejava-interop-importing-neo4j-spatial-data/</guid>
      <description>I wrote a post about a week ago where I described how I’d added football stadiums to my football graph using neo4j spatial and after I’d done that I wanted to put it into my import script along with the rest of the data.
I thought leiningen would probably work quite well for this as you can point it at a Java class and have it be executed.
To start with I had to change the import code slightly to link stadiums to teams which have already been added to the graph:</description>
    </item>
    
    <item>
      <title>Clojure: Reading and writing a reasonably sized file</title>
      <link>https://www.markhneedham.com/blog/2013/01/11/clojure-reading-and-writing-a-reasonably-sized-file/</link>
      <pubDate>Fri, 11 Jan 2013 00:40:49 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/01/11/clojure-reading-and-writing-a-reasonably-sized-file/</guid>
      <description>In a post a couple of days ago I described some code I’d written in R to find out all the features with zero variance in the Kaggle Digit Recognizer data set and yesterday I started working on some code to remove those features.
Jen and I had previously written some code to parse the training data in Clojure so I thought I’d try and adapt that to write out a new file without the unwanted pixels.</description>
    </item>
    
    <item>
      <title>Clojure: Thread last (-&gt;&gt;) vs Thread first (\-&gt;)</title>
      <link>https://www.markhneedham.com/blog/2012/11/06/clojure-thread-last-vs-thread-first/</link>
      <pubDate>Tue, 06 Nov 2012 12:42:36 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/11/06/clojure-thread-last-vs-thread-first/</guid>
      <description>In many of the Clojure examples that I’ve come across the thread last (→&amp;gt;) macro is used to make it easier (for people from a non lispy background!) to see the transformations that the initial data structure is going through.
In one of my recent posts I showed how Jen &amp;amp; I had rewritten Mahout’s entropy function in Clojure:
(defn calculate-entropy [counts data-size] (-&amp;gt;&amp;gt; counts (remove #{0}) (map (partial individual-entropy data-size)) (reduce +))) Here we are using the thread last operator to first pass counts as the last argument of the remove function on the next line, then to pass the result of that to the map function on the next line and so on.</description>
    </item>
    
    <item>
      <title>Emacs/Clojure: Starting out with paredit</title>
      <link>https://www.markhneedham.com/blog/2012/10/31/emacsclojure-starting-out-with-paredit/</link>
      <pubDate>Wed, 31 Oct 2012 08:41:09 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/10/31/emacsclojure-starting-out-with-paredit/</guid>
      <description>I’ve been complaining recently to Jen and Bruce about the lack of a beginner’s guide to emacs paredit mode which seems to be the defacto approach for people working with Clojure and both pointed me to the paredit cheat sheet.
While it’s very comprehensive, I found that it’s a little overwhelming for a complete newbie like myself.
I therefore thought it’d be useful to write a bit about a couple of things that I’ve picked up from pairing with Jen on little bits of Clojure over the last couple of months.</description>
    </item>
    
    <item>
      <title>Clojure: Mahout&#39;s &#39;entropy&#39; function</title>
      <link>https://www.markhneedham.com/blog/2012/10/30/clojure-mahouts-entropy-function/</link>
      <pubDate>Tue, 30 Oct 2012 22:46:34 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/10/30/clojure-mahouts-entropy-function/</guid>
      <description>As I mentioned in a couple of previous posts Jen and I have been playing around with Mahout random forests and for a few hours last week we spent some time looking through the code to see how it worked.
In particular we came across an entropy function which is used to determine how good a particular &amp;#39;split&amp;#39; point in a decision tree is going to be.
I quite like the following definition:</description>
    </item>
    
    <item>
      <title>Clojure: Casting to a Java class...or not!</title>
      <link>https://www.markhneedham.com/blog/2011/12/31/clojure-casting-to-a-java-class-or-not/</link>
      <pubDate>Sat, 31 Dec 2011 17:47:47 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2011/12/31/clojure-casting-to-a-java-class-or-not/</guid>
      <description>I have a bit of Java code for working out the final destination of a URL assuming that there might be one redirect which looks like this:
private String resolveUrl(String url) { try { HttpURLConnection con = (HttpURLConnection) (new URL(url).openConnection()); con.setInstanceFollowRedirects(false); con.connect(); int responseCode = con.getResponseCode(); if (String.valueOf(responseCode).startsWith(&amp;#34;3&amp;#34;)) { return con.getHeaderField(&amp;#34;Location&amp;#34;); } } catch (IOException e) { return url; } return url; } I need to cast to HttpURLConnection on the first line so that I can make the call to setInstanceFollowRedirects which isn’t available on URLConnection.</description>
    </item>
    
    <item>
      <title>Leiningen: Using goose via a local Maven repository</title>
      <link>https://www.markhneedham.com/blog/2011/12/27/leiningen-using-goose-via-a-local-maven-repository/</link>
      <pubDate>Tue, 27 Dec 2011 12:48:17 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2011/12/27/leiningen-using-goose-via-a-local-maven-repository/</guid>
      <description>I’ve been playing around a little bit with goose - a HTML content/article extractor - originally in Java but later in clojure where I needed to work out how to include goose and all its dependencies via Leiningen.
goose isn’t included in a Maven repository so I needed to create a local repository, something which I’ve got stuck on in the past.
Luckily Paul Gross has written a cool blog post explaining how his team got past this problem.</description>
    </item>
    
    <item>
      <title>XP Day: Visualizing what&#39;s happening on our project</title>
      <link>https://www.markhneedham.com/blog/2011/11/30/xp-day-visualizing-whats-happening-on-our-project/</link>
      <pubDate>Wed, 30 Nov 2011 02:25:52 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2011/11/30/xp-day-visualizing-whats-happening-on-our-project/</guid>
      <description>Another presentation that I gave at XP Day was one covering some visualisations Liz, Uday and I have created from various data we have about our project, gathered from Git, Go and Mingle.
Visualisations
These were some of the things that I learned from doing the presentation:
The various graphs I presented in the talk have a resolution of 1680 x 1050 which is a much higher resolution than what was available on the projector.</description>
    </item>
    
    <item>
      <title>Clojure: Getting caught out by lazy collections</title>
      <link>https://www.markhneedham.com/blog/2011/07/31/clojure-getting-caught-out-by-lazy-collections/</link>
      <pubDate>Sun, 31 Jul 2011 21:40:35 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2011/07/31/clojure-getting-caught-out-by-lazy-collections/</guid>
      <description>Most of the work that I’ve done with Clojure has involved running a bunch of functions directly in the REPL or through Leiningen’s run target which led to me getting caught out when I created a JAR and tried to run that.
As I mentioned a few weeks ago I’ve been rewriting part of our system in Clojure to see how the design would differ and a couple of levels down the Clojure version comprises of applying a map function over a collection of documents.</description>
    </item>
    
    <item>
      <title>Clojure: Creating XML document with namespaces</title>
      <link>https://www.markhneedham.com/blog/2011/07/20/clojure-creating-xml-document-with-namespaces/</link>
      <pubDate>Wed, 20 Jul 2011 20:28:17 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2011/07/20/clojure-creating-xml-document-with-namespaces/</guid>
      <description>As I mentioned in an earlier post we’ve been parsing XML documents with the Clojure zip-filter API and the next thing we needed to do was create a new XML document containing elements which needed to be inside a namespace.
We wanted to end up with a document which looked something like this:
&amp;lt;root&amp;gt; &amp;lt;mynamespace:foo xmlns:mynamespace=&amp;#34;http://www.magicalurlfornamespace.com&amp;#34;&amp;gt; &amp;lt;mynamespace:bar&amp;gt;baz&amp;lt;/mynamespace:bar&amp;gt; &amp;lt;/mynamespace:foo&amp;gt; &amp;lt;/root&amp;gt; We can make use of lazy-xml/emit to output an XML string from some sort of input?</description>
    </item>
    
    <item>
      <title>Clojure: Extracting child elements from an XML document with zip-filter</title>
      <link>https://www.markhneedham.com/blog/2011/07/16/clojure-extracting-child-elements-from-an-xml-document-with-zip-filter/</link>
      <pubDate>Sat, 16 Jul 2011 22:19:47 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2011/07/16/clojure-extracting-child-elements-from-an-xml-document-with-zip-filter/</guid>
      <description>I’ve been following Nurullah Akkaya’s blog post about navigating XML documents using the Clojure zip-filter API and I came across an interesting problem in a document I’m parsing which goes beyond what’s covered in his post.
Nurullah provides a neat zip-str function which we can use to convert an XML string into a zipper object:
(require &amp;#39;[clojure.zip :as zip] &amp;#39;[clojure.xml :as xml]) (use &amp;#39;[clojure.contrib.zip-filter.xml]) (defn zip-str [s] (zip/xml-zip (xml/parse (java.</description>
    </item>
    
    <item>
      <title>Clojure: Language as thought shaper</title>
      <link>https://www.markhneedham.com/blog/2011/07/10/clojure-language-as-thought-shaper/</link>
      <pubDate>Sun, 10 Jul 2011 22:21:16 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2011/07/10/clojure-language-as-thought-shaper/</guid>
      <description>I recently read an interesting article by Tom Van Cutsem where he describes some of the goals that influence the design of programming languages and one which stood out to me is that of viewing &amp;#39;language as a thought shaper&amp;#39;:
Language as thought shaper: to induce a paradigm shift in how one should structure software (changing the &amp;#34;path of least resistance&amp;#34;).
To quote Alan Perlis: &amp;#34;a language that doesn’t affect the way you think about programming, is not worth knowing.</description>
    </item>
    
    <item>
      <title>Clojure: Equivalent to Scala&#39;s flatMap/C#&#39;s SelectMany</title>
      <link>https://www.markhneedham.com/blog/2011/07/03/clojure-equivalent-to-scalas-flatmapcs-selectmany/</link>
      <pubDate>Sun, 03 Jul 2011 22:50:47 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2011/07/03/clojure-equivalent-to-scalas-flatmapcs-selectmany/</guid>
      <description>I’ve been playing around with Clojure a bit over the weekend and one thing I got stuck with was working out how to achieve the functionality provided by Scala’s flatMap or C#&amp;#39;s SelectMany methods on collections.
I had a collection of zip files and wanted to transform that into a collection of all the file entries in those files.
If we just use map then we’ll end up with a collection of collections which is more difficult to deal with going forward.</description>
    </item>
    
    <item>
      <title>Clojure: My first attempt at a macro</title>
      <link>https://www.markhneedham.com/blog/2009/12/12/clojure-my-first-attempt-at-a-macro/</link>
      <pubDate>Sat, 12 Dec 2009 03:53:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/12/12/clojure-my-first-attempt-at-a-macro/</guid>
      <description>I’m up to the chapter on using macros in Stuart Halloway’s &amp;#39;Programming Clojure&amp;#39; book and since I’ve never used a language which has macros in before I thought it’d be cool to write one.
In reality there’s no reason to create a macro to do what I want to do but I wanted to keep the example simple so I could try and understand exactly how macros work.
I want to create a macro which takes in one argument and then prints hello and the person’s name.</description>
    </item>
    
    <item>
      <title>Clojure: Forgetting the brackets</title>
      <link>https://www.markhneedham.com/blog/2009/12/12/clojure-forgetting-the-brackets/</link>
      <pubDate>Sat, 12 Dec 2009 03:51:19 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/12/12/clojure-forgetting-the-brackets/</guid>
      <description>I’ve been playing around with macros over the last few days and while writing a simple one forgot to include the brackets to make it evaluate correctly:
(defmacro say-hello [person] println &amp;#34;Hello&amp;#34; person) This macro doesn’t even expand like I thought it would:
user=&amp;gt; (macroexpand-1 &amp;#39;(say-hello blah)) blah That seemed a bit strange to me but I eventually realised that I’d missed off the brackets around &amp;#39;println&amp;#39; and the arguments following it which would have resulted in &amp;#39;println&amp;#39; being evaluated with those arguments.</description>
    </item>
    
    <item>
      <title>Clojure: when-let macro</title>
      <link>https://www.markhneedham.com/blog/2009/12/09/clojure-when-let-macro/</link>
      <pubDate>Wed, 09 Dec 2009 02:41:47 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/12/09/clojure-when-let-macro/</guid>
      <description>In my continued playing around with Clojure I came across the &amp;#39;when-let&amp;#39; macro.
&amp;#39;when-let&amp;#39; is used when we want to bind an expression to a symbol and only execute the body provided as the second argument to the macro if that symbol evaluates to true.
As I wrote previously, a value of &amp;#39;false&amp;#39; or &amp;#39;nil&amp;#39; would result in the second argument not being evaluated.
A simple example of using &amp;#39;when-let&amp;#39; would be:</description>
    </item>
    
    <item>
      <title>Clojure: Unit testing in the REPL</title>
      <link>https://www.markhneedham.com/blog/2009/12/06/clojure-unit-testing-in-the-repl/</link>
      <pubDate>Sun, 06 Dec 2009 03:28:05 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/12/06/clojure-unit-testing-in-the-repl/</guid>
      <description>One thing which I think is great about coding with F# is the quick feedback that we can get by defining and then testing out functions in the REPL.
We can do the same thing in Clojure but it’s even better because we can also define and run unit tests which I think is pretty neat.
Nurullah Akkaya has a good post which describes how to use clojure.test, a testing framework written by Stuart Sierra so I’ve been using that to define some tests cases for the little RSS feed parser that I’m writing.</description>
    </item>
    
    <item>
      <title>Clojure: Parsing an RSS feed</title>
      <link>https://www.markhneedham.com/blog/2009/11/30/clojure-parsing-an-rss-feed/</link>
      <pubDate>Mon, 30 Nov 2009 18:33:55 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/11/30/clojure-parsing-an-rss-feed/</guid>
      <description>I’ve been playing around with a little script in Clojure to parse the ThoughtWorks Blogs RSS feed and then create a tweet for each of them which contains a link to the blog post and the person’s Twitter ID if they have one.
It’s not finished yet but I’m finding the way that we parse documents like this in Clojure quite intriguing.
The xml to parse looks roughly like this:</description>
    </item>
    
    <item>
      <title>Clojure: The &#39;apply&#39; function</title>
      <link>https://www.markhneedham.com/blog/2009/11/25/clojure-the-apply-function/</link>
      <pubDate>Wed, 25 Nov 2009 11:59:11 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/11/25/clojure-the-apply-function/</guid>
      <description>In my continued playing around with Clojure I came across the &amp;#39;apply&amp;#39; function which is used when we want to call another function with a number of arguments but have actually been given a single argument which contains the argument list.
The example that I’ve been trying to understand is applying &amp;#39;str&amp;#39; to a collection of values.
I started off with the following:
(str [1 2 3]) =&amp;gt; &amp;#34;[1 2 3]&amp;#34; This just returns the string representation of the vector that we passed it, but what we actually want is to get an output of &amp;#34;123&amp;#34;.</description>
    </item>
    
    <item>
      <title>Writing a Java function in Clojure</title>
      <link>https://www.markhneedham.com/blog/2009/11/23/writing-a-java-function-in-clojure/</link>
      <pubDate>Mon, 23 Nov 2009 20:08:20 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/11/23/writing-a-java-function-in-clojure/</guid>
      <description>A function that we had to write in Java on a project that I worked on recently needed to indicate whether there was a gap in a series of data points or not.
If there were gaps at the beginning or end of the sequence then that was fine but gaps in the middle of the sequence were not.
null, 1, 2, 3 =&amp;gt; no gaps 1, 2, 3, null =&amp;gt; no gaps 1, null, 2, 3 =&amp;gt; gaps The Java version looked a bit like this:</description>
    </item>
    
    <item>
      <title>Clojure: Checking for a nil value in a collection</title>
      <link>https://www.markhneedham.com/blog/2009/11/21/clojure-checking-for-a-nil-value-in-a-collection/</link>
      <pubDate>Sat, 21 Nov 2009 22:11:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/11/21/clojure-checking-for-a-nil-value-in-a-collection/</guid>
      <description>Something which I wanted to do recently was write a function that would indicate whether a collection contained a nil value.
I initially incorrectly thought the &amp;#39;contains?&amp;#39; function was the one that I wanted:
(contains? &amp;#39;(1 nil 2 3) nil) =&amp;gt; false I thought it would work the same as the Java equivalent but that function actually checks whether a key exists in a collection rather than a value. It’s more useful when dealing with maps.</description>
    </item>
    
    <item>
      <title>Clojure: A few things I&#39;ve been tripping up on</title>
      <link>https://www.markhneedham.com/blog/2009/11/20/clojure-a-few-things-ive-been-tripping-up-on/</link>
      <pubDate>Fri, 20 Nov 2009 13:11:03 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/11/20/clojure-a-few-things-ive-been-tripping-up-on/</guid>
      <description>In my continued playing with Clojure I’m noticing a few things that I keep getting confused about.
The meaning of parentheses Much like Keith Bennett I’m not used to parentheses playing such an important role in the way that an expression gets evaluated.
As I understand it if an expression is enclosed in parentheses then that means it will be evaluated as a function.
For example I spent quite a while trying to work out why the following code kept throwing a class cast exception:</description>
    </item>
    
    <item>
      <title>Clojure: A first look at recursive functions</title>
      <link>https://www.markhneedham.com/blog/2009/11/17/clojure-a-first-look-at-recursive-functions/</link>
      <pubDate>Tue, 17 Nov 2009 11:10:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/11/17/clojure-a-first-look-at-recursive-functions/</guid>
      <description>I’m working through Stuart Halloway’s &amp;#39;Programming Clojure&amp;#39; book and I just got to the section where it first mentions recursive functions.
It’s a simple function to countdown from a given number to zero and then return that sequence.
This was one of the examples from the book:
(defn countdown [result x] (if (zero? x) result (recur (conj result x) (dec x)))) That function could then be called like this:</description>
    </item>
    
  </channel>
</rss>
