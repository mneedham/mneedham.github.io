<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Traits on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/traits/</link>
    <description>Recent content in Traits on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Jul 2011 19:54:05 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/traits/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scala: Traits galore</title>
      <link>https://markhneedham.com/blog/2011/07/09/scala-traits-galore/</link>
      <pubDate>Sat, 09 Jul 2011 19:54:05 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/07/09/scala-traits-galore/</guid>
      <description>We recently came across a problem where we had some logic that we wanted to be used by two classes.
Our original thought was to pull it up into an abstract class which ended up looking like this:
abstract class SomeArbitraryClass(root:xml.Node) { def unrelatedField1:String def unrelatedField2:String def startPage:String def endPage:String def pageRange = if(firstPage == lastPage) &amp;quot;page %s&amp;quot;.format(firstPage) else &amp;quot;pages %s-%s&amp;quot;.format(firstPage, lastPage) }  Writing a test link to scala test for the page logic helped us to see more clearly that the design was a bit awkward:</description>
    </item>
    
  </channel>
</rss>