<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>performance on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/performance/</link>
    <description>Recent content in performance on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Jul 2010 22:49:52 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/performance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Performance: Do it less or find another way</title>
      <link>https://markhneedham.com/blog/2010/07/10/performance-do-it-less-or-find-another-way/</link>
      <pubDate>Sat, 10 Jul 2010 22:49:52 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/07/10/performance-do-it-less-or-find-another-way/</guid>
      <description>One thing that we tried to avoid on the project that I&amp;rsquo;ve been working on is making use of C# expressions treesin production code.
We found that the areas of the code where we compiled these expressions trees frequently showed up as being the least performant areas of the code base when run through a performance profiler.
In a discussion about the ways to improve the performance of an application Christianpointed out that once we&amp;rsquo;ve identified the area for improvement there are two ways to do this:</description>
    </item>
    
  </channel>
</rss>