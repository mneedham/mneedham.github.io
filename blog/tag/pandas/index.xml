<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pandas on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/pandas/</link>
    <description>Recent content in pandas on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Dec 2018 16:57:00 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/pandas/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pandas: Create matplotlib plot with x-axis label not index</title>
      <link>https://markhneedham.com/blog/2018/12/21/pandas-plot-x-axis-index/</link>
      <pubDate>Fri, 21 Dec 2018 16:57:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2018/12/21/pandas-plot-x-axis-index/</guid>
      <description>I&amp;#8217;ve been using matplotlib a bit recently, and wanted to share a lesson I learnt about choosing the label of the x-axis. Let&amp;#8217;s first import the libraries we&amp;#8217;ll use in this post:
 import pandas as pd import matplotlib.pyplot as plt   And now we&amp;#8217;ll create a DataFrame of values that we want to chart:
 df = pd.DataFrame({ &#34;name&#34;: [&#34;Mark&#34;, &#34;Arya&#34;, &#34;Praveena&#34;], &#34;age&#34;: [34, 1, 31] }) df   This is what our DataFrame looks like:</description>
    </item>
    
    <item>
      <title>Pandas: ValueError: The truth value of a Series is ambiguous.</title>
      <link>https://markhneedham.com/blog/2017/07/26/pandas-valueerror-the-truth-value-of-a-series-is-ambiguous/</link>
      <pubDate>Wed, 26 Jul 2017 21:41:55 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/07/26/pandas-valueerror-the-truth-value-of-a-series-is-ambiguous/</guid>
      <description>import pandas as pd &amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame({&amp;#34;a&amp;#34;: [1,2,3,4,5], &amp;#34;b&amp;#34;: [2,3,4,5,6]}) &amp;gt;&amp;gt;&amp;gt; df a b 0 5 2 1 6 6 2 0 8 3 3 2 4 1 6 &amp;gt;&amp;gt;&amp;gt; divmod(df[&amp;#34;a&amp;#34;], 2)[1] &amp;gt; 0 0 True 1 False 2 True 3 False 4 True Name: a, dtype: bool &amp;gt;&amp;gt;&amp;gt; divmod(df[&amp;#34;b&amp;#34;], 2)[1] &amp;gt; 0 0 False 1 True 2 False 3 True 4 False Name: b, dtype: bool &amp;gt;&amp;gt;&amp;gt; df[&amp;#34;anyOdd&amp;#34;] = (divmod(df[&amp;#34;a&amp;#34;], 2)[1] &amp;gt; 0) or (divmod(df[&amp;#34;b&amp;#34;], 2)[1] &amp;gt; 0) Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; File &amp;#34;/Users/markneedham/projects/kaggle/house-prices/a/lib/python3.</description>
    </item>
    
    <item>
      <title>Pandas/scikit-learn: get_dummies test/train sets - ValueError: shapes not aligned</title>
      <link>https://markhneedham.com/blog/2017/07/05/pandasscikit-learn-get_dummies-testtrain-sets-valueerror-shapes-not-aligned/</link>
      <pubDate>Wed, 05 Jul 2017 15:42:08 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/07/05/pandasscikit-learn-get_dummies-testtrain-sets-valueerror-shapes-not-aligned/</guid>
      <description>import pandas as pd import numpy as np from sklearn import linear_model train = pd.DataFrame({&amp;#34;letter&amp;#34;:[&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;, &amp;#34;D&amp;#34;], &amp;#34;value&amp;#34;: [1, 2, 3, 4]}) X_train = train.drop([&amp;#34;value&amp;#34;], axis=1) X_train = pd.get_dummies(X_train) y_train = train[&amp;#34;value&amp;#34;]~~~ &amp;lt;h3&amp;gt;Test set&amp;lt;/h3&amp;gt; ~~~python test = pd.DataFrame({&amp;#34;letter&amp;#34;:[&amp;#34;D&amp;#34;, &amp;#34;D&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;E&amp;#34;], &amp;#34;value&amp;#34;: [4, 5, 7, 19]}) X_test = test.drop([&amp;#34;value&amp;#34;], axis=1) X_test = pd.get_dummies(X_test) y_test = test[&amp;#34;value&amp;#34;] lr = linear_model.LinearRegression() model = lr.fit(X_train, y_train) model.score(X_test, y_test) ValueError: shapes (4,3) and (4,) not aligned: 3 (dim 1) !</description>
    </item>
    
    <item>
      <title>Pandas: Find rows where column/field is null</title>
      <link>https://markhneedham.com/blog/2017/07/05/pandas-find-rows-where-columnfield-is-null/</link>
      <pubDate>Wed, 05 Jul 2017 14:31:04 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/07/05/pandas-find-rows-where-columnfield-is-null/</guid>
      <description>import pandas as pd train = pd.read_csv(&amp;#34;train.csv&amp;#34;) null_columns=train.columns[train.isnull().any()] train[null_columns].isnull().sum() LotFrontage 259 Alley 1369 MasVnrType 8 MasVnrArea 8 BsmtQual 37 BsmtCond 37 BsmtExposure 38 BsmtFinType1 37 BsmtFinType2 38 Electrical 1 FireplaceQu 690 GarageType 81 GarageYrBlt 81 GarageFinish 81 GarageQual 81 GarageCond 81 PoolQC 1453 Fence 1179 MiscFeature 1406 dtype: int64 print(train[train[&amp;#34;Electrical&amp;#34;].isnull()][null_columns]) LotFrontage Alley MasVnrType MasVnrArea BsmtQual BsmtCond BsmtExposure \ 1379 73.0 NaN None 0.0 Gd TA No BsmtFinType1 BsmtFinType2 Electrical FireplaceQu GarageType GarageYrBlt \ 1379 Unf Unf NaN NaN BuiltIn 2007.</description>
    </item>
    
    <item>
      <title>Python: Find the highest value in a group</title>
      <link>https://markhneedham.com/blog/2015/01/25/python-find-the-highest-value-in-a-group/</link>
      <pubDate>Sun, 25 Jan 2015 12:47:01 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2015/01/25/python-find-the-highest-value-in-a-group/</guid>
      <description>$ head -n 10 data/import/episodes.csv NumberOverall,NumberInSeason,Episode,Season,DateAired,Timestamp 1,1,/wiki/Pilot,1,&amp;#34;September 19, 2005&amp;#34;,1127084400 2,2,/wiki/Purple_Giraffe,1,&amp;#34;September 26, 2005&amp;#34;,1127689200 3,3,/wiki/Sweet_Taste_of_Liberty,1,&amp;#34;October 3, 2005&amp;#34;,1128294000 4,4,/wiki/Return_of_the_Shirt,1,&amp;#34;October 10, 2005&amp;#34;,1128898800 5,5,/wiki/Okay_Awesome,1,&amp;#34;October 17, 2005&amp;#34;,1129503600 6,6,/wiki/Slutty_Pumpkin,1,&amp;#34;October 24, 2005&amp;#34;,1130108400 7,7,/wiki/Matchmaker,1,&amp;#34;November 7, 2005&amp;#34;,1131321600 8,8,/wiki/The_Duel,1,&amp;#34;November 14, 2005&amp;#34;,1131926400 9,9,/wiki/Belly_Full_of_Turkey,1,&amp;#34;November 21, 2005&amp;#34;,1132531200 import csv from collections import defaultdict seasons = defaultdict(list) with open(&amp;#34;data/import/episodes.csv&amp;#34;, &amp;#34;r&amp;#34;) as episodesfile: reader = csv.reader(episodesfile, delimiter = &amp;#34;,&amp;#34;) reader.next() for row in reader: seasons[int(row[3])].append(int(row[0])) print seasons $ python blog.py defaultdict(&amp;lt;type &amp;#39;list&amp;#39;&amp;gt;, { 1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], 2: [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], 3: [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], 4: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88], 5: [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], 6: [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], 7: [137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160], 8: [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], 9: [185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208]}) for season, episode_ids in seasons.</description>
    </item>
    
    <item>
      <title>pandas: Adding a column to a DataFrame (based on another DataFrame)</title>
      <link>https://markhneedham.com/blog/2013/10/30/pandas-adding-a-column-to-a-dataframe-based-on-another-dataframe/</link>
      <pubDate>Wed, 30 Oct 2013 06:12:08 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/10/30/pandas-adding-a-column-to-a-dataframe-based-on-another-dataframe/</guid>
      <description>def addrow(df, row): return df.append(pd.DataFrame(row), ignore_index=True) customers = pd.DataFrame(columns=[&amp;#39;PassengerId&amp;#39;,&amp;#39;Pclass&amp;#39;,&amp;#39;Name&amp;#39;,&amp;#39;Sex&amp;#39;,&amp;#39;Fare&amp;#39;]) customers = addrow(customers, [dict(PassengerId=892, Pclass=3, Name=&amp;#34;Kelly, Mr. James&amp;#34;, Sex=&amp;#34;male&amp;#34;, Fare=7.8292)]) customers = addrow(customers, [dict(PassengerId=893, Pclass=3, Name=&amp;#34;Wilkes, Mrs. James (Ellen Needs)&amp;#34;, Sex=&amp;#34;female&amp;#34;, Fare=7)]) &amp;gt;&amp;gt;&amp;gt; customers Fare Name PassengerId Pclass Sex 0 7.8292 Kelly, Mr. James 892 3 male 1 7.0000 Wilkes, Mrs. James (Ellen Needs) 893 3 female survival_table = pd.DataFrame(columns=[&amp;#39;Sex&amp;#39;, &amp;#39;Pclass&amp;#39;, &amp;#39;PriceDist&amp;#39;, &amp;#39;Survived&amp;#39;]) survival_table = addrow(survival_table, [dict(Pclass=1, Sex=&amp;#34;female&amp;#34;, PriceDist = 0, Survived = 0)]) survival_table = addrow(survival_table, [dict(Pclass=1, Sex=&amp;#34;male&amp;#34;, PriceDist = 0, Survived = 0)]) survival_table = addrow(survival_table, [dict(Pclass=1, Sex=&amp;#34;female&amp;#34;, PriceDist = 1, Survived = 0)]) survival_table = addrow(survival_table, [dict(Pclass=1, Sex=&amp;#34;male&amp;#34;, PriceDist = 1, Survived = 0)]) survival_table = addrow(survival_table, [dict(Pclass=1, Sex=&amp;#34;female&amp;#34;, PriceDist = 2, Survived = 1)]) survival_table = addrow(survival_table, [dict(Pclass=1, Sex=&amp;#34;male&amp;#34;, PriceDist = 2, Survived = 0)]) survival_table = addrow(survival_table, [dict(Pclass=1, Sex=&amp;#34;female&amp;#34;, PriceDist = 3, Survived = 1)]) survival_table = addrow(survival_table, [dict(Pclass=1, Sex=&amp;#34;male&amp;#34;, PriceDist = 3, Survived = 0)]) survival_table = addrow(survival_table, [dict(Pclass=2, Sex=&amp;#34;female&amp;#34;, PriceDist = 0, Survived = 0)]) survival_table = addrow(survival_table, [dict(Pclass=2, Sex=&amp;#34;male&amp;#34;, PriceDist = 0, Survived = 0)]) survival_table = addrow(survival_table, [dict(Pclass=2, Sex=&amp;#34;female&amp;#34;, PriceDist = 1, Survived = 1)]) survival_table = addrow(survival_table, [dict(Pclass=2, Sex=&amp;#34;male&amp;#34;, PriceDist = 1, Survived = 0)]) survival_table = addrow(survival_table, [dict(Pclass=2, Sex=&amp;#34;female&amp;#34;, PriceDist = 2, Survived = 1)]) survival_table = addrow(survival_table, [dict(Pclass=2, Sex=&amp;#34;male&amp;#34;, PriceDist = 2, Survived = 0)]) survival_table = addrow(survival_table, [dict(Pclass=2, Sex=&amp;#34;female&amp;#34;, PriceDist = 3, Survived = 1)]) survival_table = addrow(survival_table, [dict(Pclass=2, Sex=&amp;#34;male&amp;#34;, PriceDist = 3, Survived = 0)]) survival_table = addrow(survival_table, [dict(Pclass=3, Sex=&amp;#34;female&amp;#34;, PriceDist = 0, Survived = 1)]) survival_table = addrow(survival_table, [dict(Pclass=3, Sex=&amp;#34;male&amp;#34;, PriceDist = 0, Survived = 0)]) survival_table = addrow(survival_table, [dict(Pclass=3, Sex=&amp;#34;female&amp;#34;, PriceDist = 1, Survived = 1)]) survival_table = addrow(survival_table, [dict(Pclass=3, Sex=&amp;#34;male&amp;#34;, PriceDist = 1, Survived = 0)]) survival_table = addrow(survival_table, [dict(Pclass=3, Sex=&amp;#34;female&amp;#34;, PriceDist = 2, Survived = 0)]) survival_table = addrow(survival_table, [dict(Pclass=3, Sex=&amp;#34;male&amp;#34;, PriceDist = 2, Survived = 0)]) survival_table = addrow(survival_table, [dict(Pclass=3, Sex=&amp;#34;female&amp;#34;, PriceDist = 3, Survived = 0)]) survival_table = addrow(survival_table, [dict(Pclass=3, Sex=&amp;#34;male&amp;#34;, PriceDist = 3, Survived = 0)]) &amp;gt;&amp;gt;&amp;gt; survival_table Pclass PriceDist Sex Survived 0 1 0 female 0 1 1 0 male 0 2 1 1 female 0 3 1 1 male 0 4 1 2 female 1 5 1 2 male 0 6 1 3 female 1 7 1 3 male 0 8 2 0 female 0 9 2 0 male 0 10 2 1 female 1 11 2 1 male 0 12 2 2 female 1 13 2 2 male 0 14 2 3 female 1 15 2 3 male 0 16 3 0 female 1 17 3 0 male 0 18 3 1 female 1 19 3 1 male 0 20 3 2 female 0 21 3 2 male 0 22 3 3 female 0 23 3 3 male 0 def select_bucket(fare): if (fare &amp;gt;= 0 and fare &amp;lt; 10): return 0 elif (fare &amp;gt;= 10 and fare &amp;lt; 20): return 1 elif (fare &amp;gt;= 20 and fare &amp;lt; 30): return 2 else: return 3 def calculate_survival(survival_table, customer): survival_row = survival_table[(survival_table[&amp;#34;Sex&amp;#34;] == customer[&amp;#34;Sex&amp;#34;]) &amp;amp; (survival_table[&amp;#34;Pclass&amp;#34;] == customer[&amp;#34;Pclass&amp;#34;]) &amp;amp; (survival_table[&amp;#34;PriceDist&amp;#34;] == select_bucket(customer[&amp;#34;Fare&amp;#34;]))] return survival_row[&amp;#34;Survived&amp;#34;] &amp;gt;&amp;gt;&amp;gt; customers[&amp;#34;Survived&amp;#34;] = customers.</description>
    </item>
    
  </channel>
</rss>