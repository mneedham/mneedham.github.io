<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pandas on Mark Needham</title>
    <link>https://mneedham.github.io/blog/tag/pandas/</link>
    <description>Recent content in Pandas on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Jul 2017 21:41:55 +0000</lastBuildDate>
    
	<atom:link href="https://mneedham.github.io/blog/tag/pandas/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pandas: ValueError: The truth value of a Series is ambiguous.</title>
      <link>https://mneedham.github.io/blog/2017/07/26/pandas-valueerror-the-truth-value-of-a-series-is-ambiguous/</link>
      <pubDate>Wed, 26 Jul 2017 21:41:55 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2017/07/26/pandas-valueerror-the-truth-value-of-a-series-is-ambiguous/</guid>
      <description>I&#39;ve been playing around with Kaggle in my spare time over the last few weeks and came across an unexpected behaviour when trying to add a column to a dataframe.  First let&#39;s get Panda&#39;s into our program scope: Prerequisites import pandas as pd   Now we&#39;ll create a data frame to play with for the duration of this post: &amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame({&amp;quot;a&amp;quot;: [1,2,3,4,5], &amp;quot;b&amp;quot;: [2,3,4,5,6]}) &amp;gt;&amp;gt;&amp;gt; df a b 0 5 2 1 6 6 2 0 8 3 3 2 4 1 6   Let&#39;s say we want to create a new column which returns True if either of the numbers are odd.</description>
    </item>
    
    <item>
      <title>Pandas/scikit-learn: get_dummies test/train sets - ValueError: shapes not aligned</title>
      <link>https://mneedham.github.io/blog/2017/07/05/pandasscikit-learn-get_dummies-testtrain-sets-valueerror-shapes-not-aligned/</link>
      <pubDate>Wed, 05 Jul 2017 15:42:08 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2017/07/05/pandasscikit-learn-get_dummies-testtrain-sets-valueerror-shapes-not-aligned/</guid>
      <description>I&#39;ve been using panda&#39;s get_dummies function to generate dummy columns for categorical variables to use with scikit-learn, but noticed that it sometimes doesn&#39;t work as I expect.
Prerequisites import pandas as pd import numpy as np from sklearn import linear_model  Let&#39;s say we have the following training and test sets:
Training set train = pd.DataFrame({&amp;quot;letter&amp;quot;:[&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;D&amp;quot;], &amp;quot;value&amp;quot;: [1, 2, 3, 4]}) X_train = train.drop([&amp;quot;value&amp;quot;], axis=1) X_train = pd.</description>
    </item>
    
    <item>
      <title>Pandas: Find rows where column/field is null</title>
      <link>https://mneedham.github.io/blog/2017/07/05/pandas-find-rows-where-columnfield-is-null/</link>
      <pubDate>Wed, 05 Jul 2017 14:31:04 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2017/07/05/pandas-find-rows-where-columnfield-is-null/</guid>
      <description>In my continued playing around with the Kaggle house prices dataset I wanted to find any columns/fields that have null values in.  If we want to get a count of the number of null fields by column we can use the following code, adapted from Poonam Ligade&#39;s kernel: Prerequisites import pandas as pd  Count the null columns train = pd.read_csv(&amp;quot;train.csv&amp;quot;) null_columns=train.columns[train.isnull().any()] train[null_columns].isnull().sum()  LotFrontage 259 Alley 1369 MasVnrType 8 MasVnrArea 8 BsmtQual 37 BsmtCond 37 BsmtExposure 38 BsmtFinType1 37 BsmtFinType2 38 Electrical 1 FireplaceQu 690 GarageType 81 GarageYrBlt 81 GarageFinish 81 GarageQual 81 GarageCond 81 PoolQC 1453 Fence 1179 MiscFeature 1406 dtype: int64   So there are lots of different columns containing null values.</description>
    </item>
    
    <item>
      <title>Python: Find the highest value in a group</title>
      <link>https://mneedham.github.io/blog/2015/01/25/python-find-the-highest-value-in-a-group/</link>
      <pubDate>Sun, 25 Jan 2015 12:47:01 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2015/01/25/python-find-the-highest-value-in-a-group/</guid>
      <description>In my continued playing around with a How I met your mother data set I needed to find out the last episode that happened in a season so that I could use it in a chart I wanted to plot.  I had this CSV file containing each of the episodes: $ head -n 10 data/import/episodes.csv NumberOverall,NumberInSeason,Episode,Season,DateAired,Timestamp 1,1,/wiki/Pilot,1,&amp;quot;September 19, 2005&amp;quot;,1127084400 2,2,/wiki/Purple_Giraffe,1,&amp;quot;September 26, 2005&amp;quot;,1127689200 3,3,/wiki/Sweet_Taste_of_Liberty,1,&amp;quot;October 3, 2005&amp;quot;,1128294000 4,4,/wiki/Return_of_the_Shirt,1,&amp;quot;October 10, 2005&amp;quot;,1128898800 5,5,/wiki/Okay_Awesome,1,&amp;quot;October 17, 2005&amp;quot;,1129503600 6,6,/wiki/Slutty_Pumpkin,1,&amp;quot;October 24, 2005&amp;quot;,1130108400 7,7,/wiki/Matchmaker,1,&amp;quot;November 7, 2005&amp;quot;,1131321600 8,8,/wiki/The_Duel,1,&amp;quot;November 14, 2005&amp;quot;,1131926400 9,9,/wiki/Belly_Full_of_Turkey,1,&amp;quot;November 21, 2005&amp;quot;,1132531200   I started out by parsing the CSV file into a dictionary of (seasons - episode ids): import csv from collections import defaultdict seasons = defaultdict(list) with open(&amp;quot;data/import/episodes.</description>
    </item>
    
    <item>
      <title>pandas: Adding a column to a DataFrame (based on another DataFrame)</title>
      <link>https://mneedham.github.io/blog/2013/10/30/pandas-adding-a-column-to-a-dataframe-based-on-another-dataframe/</link>
      <pubDate>Wed, 30 Oct 2013 06:12:08 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2013/10/30/pandas-adding-a-column-to-a-dataframe-based-on-another-dataframe/</guid>
      <description>Nathan and I have been working on the Titanic Kaggle problem using the pandas data analysis library and one thing we wanted to do was add a column to a DataFrame indicating if someone survived.
We had the following (simplified) DataFrame containing some information about customers on board the Titanic:
def addrow(df, row): return df.append(pd.DataFrame(row), ignore_index=True) customers = pd.DataFrame(columns=[&#39;PassengerId&#39;,&#39;Pclass&#39;,&#39;Name&#39;,&#39;Sex&#39;,&#39;Fare&#39;]) customers = addrow(customers, [dict(PassengerId=892, Pclass=3, Name=&amp;quot;Kelly, Mr. James&amp;quot;, Sex=&amp;quot;male&amp;quot;, Fare=7.8292)]) customers = addrow(customers, [dict(PassengerId=893, Pclass=3, Name=&amp;quot;Wilkes, Mrs.</description>
    </item>
    
  </channel>
</rss>