<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>net on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/net/</link>
    <description>Recent content in net on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Jun 2015 21:25:25 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Iron Ruby: &#39;unitialized constant...NameError&#39;</title>
      <link>https://markhneedham.com/blog/2010/04/25/iron-ruby-unitialized-constant-nameerror/</link>
      <pubDate>Sun, 25 Apr 2010 17:27:25 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/04/25/iron-ruby-unitialized-constant-nameerror/</guid>
      <description>I&amp;rsquo;ve been playing around a bit with Iron Ruby and cucumber following Rupak Ganguly&amp;rsquo;s tutorialand I tried to change the .NET example provided in the 0.4.2 release of cucumberto call a class wrapping Castle&amp;rsquo;s WindsorContainer.
The feature file now looks like this:
# &amp;#39;MyAssembly.dll&amp;#39; is in the &amp;#39;C:/Ruby/lib/ruby/gems/1.8/gems/cucumber-0.6.4/examples/cs&amp;#39; folder require &amp;#39;MyAssembly&amp;#39; ... Before do @container = Our::Namespace::OurContainer.new.Container end The class is defined roughly like this:
public class OurContainer : IContainerAccessor { private WindsorContainer container = new WindsorContainer(); public SwintonContainer() { container.</description>
    </item>
    
    <item>
      <title>Functional C#: An imperative to declarative example</title>
      <link>https://markhneedham.com/blog/2010/04/20/functional-c-an-imperative-to-declarative-example/</link>
      <pubDate>Tue, 20 Apr 2010 07:08:09 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/04/20/functional-c-an-imperative-to-declarative-example/</guid>
      <description>I wrote previously about how we&amp;rsquo;ve been working on some calculationson my current project and one thing we&amp;rsquo;ve been trying to do is write this code in a fairly declarative way.
Since we&amp;rsquo;ve been test driving the code it initially started off being quite imperative and looked a bit like this:
public class TheCalculator { ... public double CalculateFrom(UserData userData) { return Calculation1(userData) + Calculation2(userData) + Calculation3(userData); } public double Calculation1(UserData userData) { // do calculation stuff here 	} public double Calculation2(UserData userData) { // do calculation stuff here 	} .</description>
    </item>
    
    <item>
      <title>C#: Java-ish enums</title>
      <link>https://markhneedham.com/blog/2010/04/17/c-java-ish-enums/</link>
      <pubDate>Sat, 17 Apr 2010 10:33:16 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/04/17/c-java-ish-enums/</guid>
      <description>We&amp;rsquo;ve been writing quite a bit of code on my current project trying to encapsulate user selected values from drop down menus where we then want to go and look up something in another system based on the value that they select.
Essentially we have the need for some of the things that a Java Enum would give us but which a C# one doesn&amp;rsquo;t!
Right now we have several classes similar to the following in our code base to achieve this:</description>
    </item>
    
    <item>
      <title>Functional C#: Using Join and GroupJoin</title>
      <link>https://markhneedham.com/blog/2010/03/04/functional-c-using-join-and-groupjoin/</link>
      <pubDate>Thu, 04 Mar 2010 18:55:02 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/03/04/functional-c-using-join-and-groupjoin/</guid>
      <description>An interesting problem which I&amp;rsquo;ve come across a few times recently is where we have two collections which we want to use together in some way and get a result which could either be another collection or some other value.
In one which Chrisand I were playing around with we had a collection of years and a collection of cars with corresponding years and the requirement was to show all the years on the page with the first car we found for that year or an empty value if there was no car for that year.</description>
    </item>
    
    <item>
      <title>C#: Overcomplicating with LINQ</title>
      <link>https://markhneedham.com/blog/2010/02/21/c-overcomplicating-with-linq/</link>
      <pubDate>Sun, 21 Feb 2010 12:01:22 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/02/21/c-overcomplicating-with-linq/</guid>
      <description>I recently came across an interesting bit of code which was going through a collection of strings and then only taking the first &amp;lsquo;x&amp;rsquo; number of characters and discarding the rest.
The code looked roughly like this:
var words = new[] {&amp;#34;hello&amp;#34;, &amp;#34;to&amp;#34;, &amp;#34;the&amp;#34;, &amp;#34;world&amp;#34;}; var newWords = new List&amp;lt;string&amp;gt;(); foreach (string word in words) { if (word.Length &amp;gt; 3) { newWords.Add(word.Substring(0, 3)); continue; } newWords.Add(word); } For this initial collection of words we would expect &amp;lsquo;newWords&amp;rsquo; to contain [&amp;ldquo;hel&amp;rdquo;, &amp;ldquo;to&amp;rdquo;, &amp;ldquo;the&amp;rdquo;, &amp;ldquo;wor&amp;rdquo;]</description>
    </item>
    
    <item>
      <title>Functional C#: Writing a &#39;partition&#39; function</title>
      <link>https://markhneedham.com/blog/2010/02/01/functional-c-writing-a-partition-function/</link>
      <pubDate>Mon, 01 Feb 2010 23:34:02 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/02/01/functional-c-writing-a-partition-function/</guid>
      <description>One of the more interesting higher order functions that I&amp;rsquo;ve come across while playing with F# is the partition function which is similar to the filter function except it returns the values which meet the predicate passed in as well as the ones which don&amp;rsquo;t.
I came across an interesting problem recently where we needed to do exactly this and had ended up taking a more imperative for each style approach to solve the problem because this function doesn&amp;rsquo;t exist in C# as far as I know.</description>
    </item>
    
    <item>
      <title>Functional collectional parameters: Some thoughts</title>
      <link>https://markhneedham.com/blog/2010/01/20/functional-collectional-parameters-some-thoughts/</link>
      <pubDate>Wed, 20 Jan 2010 22:45:55 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/01/20/functional-collectional-parameters-some-thoughts/</guid>
      <description>I&amp;rsquo;ve been reading through a bit of Steve Freeman and Nat Pryce&amp;rsquo;s &amp;lsquo;Growing Object Oriented Software guided by tests&amp;rsquo; book and I found the following observation in chapter 7 quite interesting:
It&amp;rsquo;s interesting that they don&amp;rsquo;t try and write perfect code the first time around which is actually something I thought experienced developers did until I came across Uncle Bob&amp;rsquo;s Clean Codebook where he suggested something similar.
One thing I&amp;rsquo;ve noticed when working with collections is that if we want to do something more complicated than just doing a simple map or filter then I find myself initially trying to work through the problem in an imperative hacky way.</description>
    </item>
    
    <item>
      <title>C#: Removing duplication in mapping code with partial classes</title>
      <link>https://markhneedham.com/blog/2009/07/07/c-removing-duplication-in-mapping-code-with-partial-classes/</link>
      <pubDate>Tue, 07 Jul 2009 18:11:36 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/07/07/c-removing-duplication-in-mapping-code-with-partial-classes/</guid>
      <description>One of the problems that we&amp;rsquo;ve come across while writing the mapping code for our anti corruption layeris that there is quite a lot of duplication of mapping similar types due to the fact that each service has different auto generated classes representing the same data structure.
We are making SOAP web service calls and generating classes to represent the requests and responses to those end points using SvcUtil. We then translate from those auto generated classes to our domain model using various mapper classes.</description>
    </item>
    
    <item>
      <title>Brownfield Application Development in .NET: Book Review</title>
      <link>https://markhneedham.com/blog/2009/07/06/brownfield-application-development-in-net-book-review/</link>
      <pubDate>Mon, 06 Jul 2009 00:43:40 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/07/06/brownfield-application-development-in-net-book-review/</guid>
      <description>Brownfield Application Development in .NETby Kyle Baley and Donald Belcham
I asked to be sent this book to review by Manning as I was quite intrigued to see how well it would complement Michael Feather&amp;rsquo;s Working Effectively with Legacy Code, the other book I&amp;rsquo;m aware of which covers approaches to dealing with non green field applications.
I often end up over complicating code in an attempt to create &amp;lsquo;abstractions&amp;rsquo; but by this definition I&amp;rsquo;m not really abstracting since I&amp;rsquo;m not simplifying but complicating!</description>
    </item>
    
    <item>
      <title>Functional Collection Parameters: Handling the null collection</title>
      <link>https://markhneedham.com/blog/2009/06/16/functional-collection-parameters-handling-the-null-collection/</link>
      <pubDate>Tue, 16 Jun 2009 20:29:29 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/06/16/functional-collection-parameters-handling-the-null-collection/</guid>
      <description>One of the interesting cases where I&amp;rsquo;ve noticed we tend to avoid functionalcollection parametersin our code base is when there&amp;rsquo;s the possibility of the collection being null.
The code is on the boundary of our application&amp;rsquo;s interaction with another service so it is actually a valid scenario that we could receive a null collection.
When using extension methods, although we wouldn&amp;rsquo;t get a null pointer exception by calling one on a null collection, we would get a &amp;lsquo;source is null&amp;rsquo; exception when the expression is evaluated so we need to protect ourself against this.</description>
    </item>
    
    <item>
      <title>C#/F#: Using .NET framework classes</title>
      <link>https://markhneedham.com/blog/2009/06/16/cf-using-net-framework-classes/</link>
      <pubDate>Tue, 16 Jun 2009 18:55:38 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/06/16/cf-using-net-framework-classes/</guid>
      <description>I was recently discussing F# with a couple of colleagues and one thing that came up is the slightly different ways that we might choose to interact with certain .NET framework classes compared to how we use those same classes in C# code.
One of those where I see potential for different use is the Dictionary class.
In C# code when we&amp;rsquo;re querying a dictionary to check that a value exists before we try to extract it we might typically do this:</description>
    </item>
    
    <item>
      <title>Real World Functional Programming: Book Review</title>
      <link>https://markhneedham.com/blog/2009/05/24/real-world-functional-programming-book-review/</link>
      <pubDate>Sun, 24 May 2009 19:25:07 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/05/24/real-world-functional-programming-book-review/</guid>
      <description>Real World Functional Programmingby Tomas Petricek with Jon Skeet (corresponding website)
I decided to read this book after being somewhat inspired to learn more about functional programming after talking with Philabout his experiences learning Clojure. I&amp;rsquo;m currently working on a .NET project so it seemed to make sense that F# was the language I picked to learn.
module Tests = let WithIncome (f:Func&amp;lt;_, _&amp;gt;) client = { client with Income = f.</description>
    </item>
    
    <item>
      <title>C#: Using virtual leads to confusion?</title>
      <link>https://markhneedham.com/blog/2009/05/06/c-using-virtual-leads-to-confusion/</link>
      <pubDate>Wed, 06 May 2009 19:30:50 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/05/06/c-using-virtual-leads-to-confusion/</guid>
      <description>A colleague and I were looking through some code that I worked on a couple of months ago where I had created a one level hierarchy using inheritance to represent the response status that we get back from a service call.
The code was along these lines:
public class ResponseStatus { public static readonly ResponseStatus TransactionSuccessful = new TransactionSuccessful(); public static readonly ResponseStatus UnrecoverableError = new UnrecoverableError(); public virtual bool RedirectToErrorPage { get { return true; } } } public class UnrecoverableError : ResponseStatus { } public class TransactionSuccessful : ResponseStatus { public override bool RedirectToErrorPage { get { return false; } } } Looking at it now it does seem a bit over-engineered, but the main confusion with this code is that when you click through to the definition of &amp;lsquo;RedirectToError&amp;rsquo; it goes to the ResponseStatus version of that property and it&amp;rsquo;s not obvious that it is being overridden in a sub class, this being possible due to my use of the virtualkey word.</description>
    </item>
    
    <item>
      <title>F#: A day of writing a little twitter application</title>
      <link>https://markhneedham.com/blog/2009/04/13/f-a-day-of-writing-a-little-twitter-application/</link>
      <pubDate>Mon, 13 Apr 2009 22:09:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/04/13/f-a-day-of-writing-a-little-twitter-application/</guid>
      <description>I spent most of the bank holiday Monday here in Sydney writing a little application to scan through my twitter feedand find me just the tweets which have links in them since for me that&amp;rsquo;s where a lot of the value of twitter lies.
I&amp;rsquo;m sure someone has done this already but it seemed like a good opportunity to try and put a little of the F# that I&amp;rsquo;ve learned from reading Real World Functional Programmingto use.</description>
    </item>
    
    <item>
      <title>Functional C#: The hole in the middle pattern</title>
      <link>https://markhneedham.com/blog/2009/04/04/functional-c-the-hole-in-the-middle-pattern/</link>
      <pubDate>Sat, 04 Apr 2009 11:41:23 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/04/04/functional-c-the-hole-in-the-middle-pattern/</guid>
      <description>While reading Real World Functional ProgrammingI came across an interesting pattern that I have noticed in some code bases recently which I liked but didn&amp;rsquo;t know had been given a name!
The hole in the middle pattern, coined by Brian Hurt, shows a cool way of using higher order functions in order to reuse code in cases where the code typically looks something like this:
public void SomeServiceCall() { var serviceClient = CreateServiceClient(); try { serviceClient.</description>
    </item>
    
    <item>
      <title>F#: Forcing type to unit for Assert.ShouldThrow in XUnit.NET</title>
      <link>https://markhneedham.com/blog/2009/03/28/f-forcing-type-to-unit-for-assertshouldthrow-in-xunitnet/</link>
      <pubDate>Sat, 28 Mar 2009 02:35:27 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/03/28/f-forcing-type-to-unit-for-assertshouldthrow-in-xunitnet/</guid>
      <description>I&amp;rsquo;ve started playing around with F# again and decided to try and create some unit tests around the examples I&amp;rsquo;m following from Real World Functional Programming. After reading Matt Podwysocki&amp;rsquo;s blog post about XUnit.NETI decided that would probably be the best framework for me to use.
The example I&amp;rsquo;m writing tests around is:
let convertDataRow(str:string) = let cells = List.of_seq(str.Split([|&amp;#39;,&amp;#39;|])) match cells with | label::value::_ -&amp;gt; let numericValue = Int32.Parse(value) (label, numericValue) | _ -&amp;gt; failwith &amp;#34;Incorrect data format!</description>
    </item>
    
    <item>
      <title>NUnit: Tests with Context/Spec style assertions</title>
      <link>https://markhneedham.com/blog/2009/03/01/nunit-tests-with-contextspec-style-assertions/</link>
      <pubDate>Sun, 01 Mar 2009 16:43:46 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/03/01/nunit-tests-with-contextspec-style-assertions/</guid>
      <description>I recently started playing around with Scott Bellware&amp;rsquo;sSpec-Unitand Aaron&amp;rsquo;s Jensen&amp;rsquo;sMSpec, two frameworks which both provide a way of writing Context/Spec style tests/specifications.
What I particularly like about this approach to writing tests is that we can divide assertions into specific blocks and have them all evaluated even if an earlier one fails.
NUnitis our testing tool of choice at the moment and we wanted to try and find a way to test the mapping between the domain and service layers of the application.</description>
    </item>
    
    <item>
      <title>C#: Wrapping DateTime</title>
      <link>https://markhneedham.com/blog/2009/02/25/c-wrapping-datetime/</link>
      <pubDate>Wed, 25 Feb 2009 23:12:57 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/02/25/c-wrapping-datetime/</guid>
      <description>I think it was Darren Hobbswho first introduced me to the idea of wrapping dates in our system to describe what that date actually means in our context, and after suffering the pain of passing some unwrapped dates around our code I think I can safely say that wrapping them is the way to go.
The culprit was a date of birth which was sometimes being created from user input and sometimes being retrieved from another system.</description>
    </item>
    
    <item>
      <title>C#: Wrapping collections vs Extension methods</title>
      <link>https://markhneedham.com/blog/2009/02/23/c-wrapping-collections-vs-extension-methods/</link>
      <pubDate>Mon, 23 Feb 2009 20:24:26 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/02/23/c-wrapping-collections-vs-extension-methods/</guid>
      <description>Another interesting thing I&amp;rsquo;ve noticed in C# world is that there seems to be a trend towards using extension methods as much as possible. One area where this is particularly prevalent is when working with collections.
From reading Object Calisthenicsand working with NickI have got used to wrapping collections and defining methods on the wrapped class for interacting with the underlying collection.
For example, given that we have a collection of Foos that we need to use in our system we might wrap that in an object Foos.</description>
    </item>
    
    <item>
      <title>C#: Implicit Operator</title>
      <link>https://markhneedham.com/blog/2009/02/22/c-implicit-operator/</link>
      <pubDate>Sun, 22 Feb 2009 22:20:22 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/02/22/c-implicit-operator/</guid>
      <description>Since it was pointed out in the comments on an earlier post I wrote about using the builder pattern how useful the implicit operatorcould be in this context we&amp;rsquo;ve been using it wherever it makes sense.
The main benefit that using this approach provides is that our test code becomes more expressive since we don&amp;rsquo;t need to explicitly call a method to complete the building of our object.
public class FooBuilder { private string bar = &amp;#34;defaultBar&amp;#34;; public FooBuilder Bar(string value) { bar = value; return this; } public static implicit operator Foo(FooBuilder builder) { return new Foo { Bar = builder.</description>
    </item>
    
    <item>
      <title>C#: Extension methods != Open classes</title>
      <link>https://markhneedham.com/blog/2009/02/19/c-extensions-methods-open-classes/</link>
      <pubDate>Thu, 19 Feb 2009 06:22:07 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/02/19/c-extensions-methods-open-classes/</guid>
      <description>When I first heard about extension methodsin C# it sounded like a pretty cool idea but I wasn&amp;rsquo;t sure how they differed to the idea of open classes that I had seen when doing a bit of Ruby.
After a bit of a struggle recently to try and override some extension methods on HtmlHelper in ASP.NET MVC it&amp;rsquo;s clear to me that we don&amp;rsquo;t quite have the same power that open classes would provide.</description>
    </item>
    
    <item>
      <title>C#: Properties vs Methods</title>
      <link>https://markhneedham.com/blog/2009/02/11/c-properties-vs-methods/</link>
      <pubDate>Wed, 11 Feb 2009 11:20:08 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/02/11/c-properties-vs-methods/</guid>
      <description>I was browsing through our tests today and noticed a test along these lines (simplified for example purposes):
[Test, ExpectedException(typeof(Exception))] public void ShouldThrowExceptionIfNoBarSet() { var bar = new Foo(null).Bar; } public class Foo { private readonly string bar; public Foo(string bar) { this.bar = bar; } public string Bar { get { if (bar == null) { throw new Exception(&amp;#34;No bar&amp;#34;); } return bar; } } } What I found strange here is that &amp;lsquo;bar&amp;rsquo; is never used and Resharper points out as much.</description>
    </item>
    
    <item>
      <title>C#: Public fields vs automatic properties </title>
      <link>https://markhneedham.com/blog/2009/02/04/c-public-fields-vs-automatic-properties/</link>
      <pubDate>Wed, 04 Feb 2009 17:52:03 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/02/04/c-public-fields-vs-automatic-properties/</guid>
      <description>An interesting new feature in C# 3.0 is that of automatic propertieson objects - this allows us to define a get/set property and the creation of the underlying field is taken care off for us.
We can therefore create a class like this:
public class Foo { public string Bar { get; set; } } Now ignoring the fact that it&amp;rsquo;s terrible OO to write a class like that, one thing that we&amp;rsquo;ve been wondering is what&amp;rsquo;s the difference between doing the above and just creating a public field on Foo called Bar like so:</description>
    </item>
    
    <item>
      <title>C#: Refactoring to functional collection parameters</title>
      <link>https://markhneedham.com/blog/2009/02/03/c-refactoring-to-functional-collection-parameters/</link>
      <pubDate>Tue, 03 Feb 2009 07:18:40 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/02/03/c-refactoring-to-functional-collection-parameters/</guid>
      <description>I wrote about a month or so ago about the functional collection parametersnow available in C# and certainly one of the most fun refactorings for me is trying to get code written using a for loop into a state where it is using one of these.
With a bit of help from my colleague James Crisp, these are some of the most common refactorings that I have come across so far.</description>
    </item>
    
    <item>
      <title>C#: Builder pattern still useful for test data</title>
      <link>https://markhneedham.com/blog/2009/01/21/c-builder-pattern-still-useful-for-test-data/</link>
      <pubDate>Wed, 21 Jan 2009 23:49:13 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/01/21/c-builder-pattern-still-useful-for-test-data/</guid>
      <description>I had thought that with the ability to use the new object initalizersyntax in C# 3.0 meant that the builder pattern was now no longer necessary but some recent refactoring efforts have made me believe otherwise.
My original thought was that the builder pattern was really useful for providing a nicely chained way of creating objects, but after a bit of discussion with some colleagues I have come across three different reasons why we might want to use the builder pattern to create test data:</description>
    </item>
    
    <item>
      <title>F#: Partial Function Application with the Function Composition Operator</title>
      <link>https://markhneedham.com/blog/2009/01/12/f-partial-function-application-with-the-function-composition-operator/</link>
      <pubDate>Mon, 12 Jan 2009 22:22:43 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/01/12/f-partial-function-application-with-the-function-composition-operator/</guid>
      <description>In my continued reading of F# one of the ideas I&amp;rsquo;ve come across recently is that of partial function application.
This is a way of allowing us to combine different functions together and allows some quite powerful syntax to be written.
The term &amp;lsquo;currying&amp;rsquo; is perhaps a better known term for describing this although as I understand they are not exactly the same.
Curryingis where we return a function that has been partially applied, in such a way that we can chain together a group of functions with a single argument.</description>
    </item>
    
    <item>
      <title>F#: Forward Operator</title>
      <link>https://markhneedham.com/blog/2009/01/06/f-forward-operator/</link>
      <pubDate>Tue, 06 Jan 2009 00:19:52 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/01/06/f-forward-operator/</guid>
      <description>Continuing on my F# journey I came across a post by Ben Hall describing the approach he takes when learning a new programming language.
One of the approaches he describes is that of writing unit tests to help keep your learning on track. I&amp;rsquo;ve only been using the F# interactive console so far so I thought I&amp;rsquo;d give it a try.
After reading about the somewhat convoluted approachrequired to use NUnit or MBUnit to write F# unit tests I came across XUnit.</description>
    </item>
    
    <item>
      <title>F# Option Types</title>
      <link>https://markhneedham.com/blog/2009/01/02/f-option-types/</link>
      <pubDate>Fri, 02 Jan 2009 22:35:31 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/01/02/f-option-types/</guid>
      <description>I&amp;rsquo;ve been spending a bit of time working through the Real World Functional Programmingbook to learn a bit about F# and one of the cool features I came across today (while reading Chris Smith&amp;rsquo;s post on F# lists) is the Option type.
I first came across this idea a few months ago when discussing null handling strategieswith a colleaguewho pointed out that you could get around this problem in Scala by using the Option class.</description>
    </item>
    
    <item>
      <title>C# lambdas: How much context should you need?</title>
      <link>https://markhneedham.com/blog/2008/12/27/c-lambdas-how-much-context-should-you-need/</link>
      <pubDate>Sat, 27 Dec 2008 23:15:31 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/12/27/c-lambdas-how-much-context-should-you-need/</guid>
      <description>I had an interesting discussion with a colleague last week about the names that we give to variables inside lambda expressions which got me thinking about the context that we should need to hold when reading code like this.
The particular discussion was around an example like this:
public class Foo { private String bar; private String baz; public Foo(String bar, String baz) { this.bar = bar; this.baz = baz; } public override string ToString() { return string.</description>
    </item>
    
    <item>
      <title>Lambda in C#: Conciseness v Readability</title>
      <link>https://markhneedham.com/blog/2008/11/24/c-new-language-features-conciseness-v-readability/</link>
      <pubDate>Mon, 24 Nov 2008 23:41:36 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/11/24/c-new-language-features-conciseness-v-readability/</guid>
      <description>One of the things I really disliked when I first came across C# 3.0 code was lambda functions.
At the time I remember speaking to my Tech Leadand expressing the opinion that they were making the code harder to understand and were valuing conciseness over readability.
After a week of reading about the new C# features and understanding how they worked the code was now more readable to me and a lot of the boiler plate code that I had come to expect was no longer necessary.</description>
    </item>
    
    <item>
      <title>Java vs .NET: An Overview</title>
      <link>https://markhneedham.com/blog/2008/10/15/java-vs-net-an-overview/</link>
      <pubDate>Wed, 15 Oct 2008 00:09:05 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/10/15/java-vs-net-an-overview/</guid>
      <description>A couple of months ago my colleague Mark Thomas posted about working on a C# project after 10 years working in Java, and being someone who has worked on projects in both languages fairly consistently (3 Java projects, 2 .NET projects) over the last two years I thought it would be interesting to do a comparison between the two.
The standard ThoughtWorks joke is that you just need to remember to capitalise the first letter of method names in C# and then you&amp;rsquo;re good to go but I think there&amp;rsquo;s more to it than that.</description>
    </item>
    
    <item>
      <title>Alt.NET UK Conference 2.0</title>
      <link>https://markhneedham.com/blog/2008/09/14/altnet-uk-conference-20/</link>
      <pubDate>Sun, 14 Sep 2008 16:28:27 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/09/14/altnet-uk-conference-20/</guid>
      <description>I spent most of yesterday at the 2nd Alt.NET UKconference at Conway Hall in London.
First of all kudos to Ian Cooper, Alan Deanand Ben Hallfor arranging it. There seemed to be a lot more people around than for the one in February which no doubt took a lot of arranging.
It was again run using the open spacesformat and we started with an interesting discussion on what Alt.NET actually is.</description>
    </item>
    
    <item>
      <title>Getting a strongly typed collection using LINQ to Xml</title>
      <link>https://markhneedham.com/blog/2008/08/30/getting-a-strongly-typed-collection-using-linq-to-xml/</link>
      <pubDate>Sat, 30 Aug 2008 03:03:58 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/08/30/getting-a-strongly-typed-collection-using-linq-to-xml/</guid>
      <description>I mentioned earlierthat I have been playing around with LINQ to Xml for parsing a Visual Studio csproj file.
While having namespace issues I decided to try and parse a simpler Xml file to try and work out what I was doing wrong.
Given this fragment of Xml:
&amp;lt;Node&amp;gt; &amp;lt;InnerNode&amp;gt;mark&amp;lt;/InnerNode&amp;gt; &amp;lt;InnerNode&amp;gt;needham&amp;lt;/InnerNode&amp;gt; &amp;lt;/Node&amp;gt; I wanted to get a collection(IEnumerable) of InnerNode values.
Unfortunately my over enthusiasm to use anonymous typesmeant that I caused myself more problems than I needed to.</description>
    </item>
    
    <item>
      <title>Querying Xml with LINQ - Don&#39;t forget the namespace</title>
      <link>https://markhneedham.com/blog/2008/08/28/querying-xml-with-linq-dont-forget-the-namespace/</link>
      <pubDate>Thu, 28 Aug 2008 10:15:45 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/08/28/querying-xml-with-linq-dont-forget-the-namespace/</guid>
      <description>I&amp;rsquo;ve been working with a colleague on parsing a Visual Studio project file using LINQto effectively create a DOM of the file.
The first thing we tried to do was get a list of all the references from the file. It seemed like a fairly easy problem to solve but for some reason nothing was getting returned:
XDocument projectFile = XDocument.Load(projectFilePath.Path); var references = from itemGroupElement in projectFile.Descendants(&amp;#34;ItemGroup&amp;#34;).First().Elements() select itemGroupElement.Attribute(&amp;#34;Include&amp;#34;).Value; We are selecting all the occurrences of &amp;lsquo;ItemGroup&amp;rsquo;, taking the first occurrence, getting all the elements inside it (i.</description>
    </item>
    
    <item>
      <title>Building in release mode with no pdbs with msbuild</title>
      <link>https://markhneedham.com/blog/2008/08/20/building-in-release-mode-with-no-pdbs-with-msbuild/</link>
      <pubDate>Wed, 20 Aug 2008 18:50:18 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/08/20/building-in-release-mode-with-no-pdbs-with-msbuild/</guid>
      <description>I&amp;rsquo;ve been having trouble trying to work out how to build our projects in msbuild in release mode without creating the customary pdbfiles that seem to be created by default.
I tried calling msbuild.exe with the &amp;lsquo;Release&amp;rsquo; configuration:
&amp;#39;C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild.Exe ( Proj.csproj /p:OutputPath=\output\path\ /p:Configuration=Release)&amp;#39; To no avail. It still created the pdb file. Next I tried setting the &amp;lsquo;DebugSymbols&amp;rsquo; property to false:
&amp;#39;C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild.Exe ( Proj.csproj /p:OutputPath=\output\path\ /p:Configuration=Release /p:DebugSymbols=false)&amp;#39; Still it created the file.</description>
    </item>
    
    <item>
      <title>NCover - Requested value &#39;/r&#39; was not found</title>
      <link>https://markhneedham.com/blog/2008/08/19/ncover-requested-value-r-was-not-found/</link>
      <pubDate>Tue, 19 Aug 2008 21:18:44 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/08/19/ncover-requested-value-r-was-not-found/</guid>
      <description>I&amp;rsquo;ve been trying to integrate NCoverinto our build and probably making life harder for myself than it needs to be.
The title refers to the error message that I was getting when trying to run the ncover nant taskon version 1.0.1 of NCover earlier today.
[ncover] Starting &amp;#39;C:\Program Files\NCover\ncover-console.exe (//r &amp;#34;\long\path\to\tmp392.tmp.ncoversettings&amp;#34; )&amp;#39; in &amp;#39;C:\my-project\trunk\src&amp;#39; [ncover] Unhandled Exception: System.ArgumentException: Requested value &amp;#39;/r&amp;#39; was not found. [ncover] at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase) [ncover] at NCover.</description>
    </item>
    
    <item>
      <title>Naming the patterns we use in code</title>
      <link>https://markhneedham.com/blog/2008/08/16/naming-the-patterns-we-use-in-code/</link>
      <pubDate>Sat, 16 Aug 2008 23:58:17 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/08/16/naming-the-patterns-we-use-in-code/</guid>
      <description>I&amp;rsquo;ve been playing around with C#&amp;lsquo;s Xml libraries today and in particular the XmlWriterclass.
I wanted to use it to create an Xml document so I called the XmlWriter.Create() method. One of the overloads for this methods takes in a StringBuilder which I initially thought the XmlWriter used to create the Xml document.
In fact it actually writes the Xml Document into this StringBuilder. This is actually possible to deduct from the documentation provided on the Create method but I only glanced at the type needed initially and misunderstood how it worked.</description>
    </item>
    
    <item>
      <title>First thoughts on using var in C# 3.0 with Resharper</title>
      <link>https://markhneedham.com/blog/2008/08/15/first-thoughts-on-using-var-in-c-30-with-resharper/</link>
      <pubDate>Fri, 15 Aug 2008 08:03:09 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/08/15/first-thoughts-on-using-var-in-c-30-with-resharper/</guid>
      <description>One of the first things I noticed when coming into the world of C# 3.0 was the use of the key word &amp;lsquo;var&amp;rsquo; all over our code base.
I had read about it previously and was under the impression that its main use would be when writing code around LINQ or when creating anonymous types.
On getting Resharperto tidy up my code I noticed that just about every variable type declaration had been removed and replaced with var.</description>
    </item>
    
    <item>
      <title>Controlling window position with the win32 API</title>
      <link>https://markhneedham.com/blog/2008/08/10/controlling-window-position-with-the-win32-api/</link>
      <pubDate>Sun, 10 Aug 2008 03:02:47 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/08/10/controlling-window-position-with-the-win32-api/</guid>
      <description>We&amp;rsquo;ve been doing a bit of work around controlling the state of the windows of applications launched programmatically.
The problem we were trying to solve is to launch an arbitrary application, move it around the screen and then save its window position on the screen so that next time it&amp;rsquo;s launched it loads in the same position.
There are some win32 APIs designed to do just this, although it took a fair bit of searching and trial and error to work out exactly how to use them.</description>
    </item>
    
    <item>
      <title>IntelliJ style item tracking in Visual Studio</title>
      <link>https://markhneedham.com/blog/2008/08/09/intellij-style-item-tracking-in-visual-studio/</link>
      <pubDate>Sat, 09 Aug 2008 14:51:29 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/08/09/intellij-style-item-tracking-in-visual-studio/</guid>
      <description>One of my favourite features of IntelliJis that it tracks the item that you currently have open on your Solution Explorer.
I thought this wasn&amp;rsquo;t possible in Visual Studio and had resigned myself to trying to remember which project each file was in. Luckily for me a colleague pointed out that it is in fact possible but is just turned off by default.
Tools &amp;gt; Options &amp;gt; Projects and Solutions &amp;gt; Check &amp;lsquo;Track Active Item in Solution Explorer&amp;rsquo;</description>
    </item>
    
  </channel>
</rss>