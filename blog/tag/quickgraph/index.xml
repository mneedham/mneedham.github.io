<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quickgraph on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/quickgraph/</link>
    <description>Recent content in Quickgraph on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Jan 2020 00:21:00 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/quickgraph/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>QuickGraph #5: Australian Open</title>
      <link>https://markhneedham.com/blog/2020/01/23/quick-graph-australian-open/</link>
      <pubDate>Thu, 23 Jan 2020 00:21:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2020/01/23/quick-graph-australian-open/</guid>
      <description>It&amp;#8217;s time for another QuickGraph, this one based on data from the Australian Open tennis tournament. We&amp;#8217;re going to use data curated by Jeff Sackmann in the tennis_wta and tennis_atp repositories.
  Figure 1. Australian Open Graph  Setting up Neo4j We&amp;#8217;re going to use the following Docker Compose configuration in this blog post:
 docker-compose.yml version: &#39;3.7&#39; services: neo4j: image: neo4j:4.0.0-enterprise container_name: &#34;quickgraph-aus-open&#34; volumes: - ./plugins:/plugins - ./data:/data - .</description>
    </item>
    
    <item>
      <title>QuickGraph #4: UK Official Singles Chart 2019</title>
      <link>https://markhneedham.com/blog/2020/01/04/quick-graph-uk-official-charts/</link>
      <pubDate>Sat, 04 Jan 2020 00:21:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2020/01/04/quick-graph-uk-official-charts/</guid>
      <description>For our first QuickGraph of the new decade we&amp;#8217;re going to explore data from the Official UK Top 40 Chart. This chart ranks the top 100 songs of the week based on official sales of sales of downloads, CD, vinyl, audio streams and video streams. Every week BBC Radio 1 broadcast the top 40 songs, which explains the name of the chart.
  Figure 1. The Official UK Charts  Scraping the Official Charts I couldn&amp;#8217;t find a dump of the dataset, so we&amp;#8217;re going to use our web scraping skills again.</description>
    </item>
    
    <item>
      <title>QuickGraph #3: Itsu Allergens</title>
      <link>https://markhneedham.com/blog/2019/12/23/quick-graph-itsu-allergens/</link>
      <pubDate>Mon, 23 Dec 2019 00:21:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2019/12/23/quick-graph-itsu-allergens/</guid>
      <description>As someone who&amp;#8217;s allergic to lots of different things, the introduction of allergen charts in restaurants over the last few years has been very helpful. These charts are often hidden away in PDF files, but the Asian inspired Itsu restaurant have all this information available on their online menus. This therefore seemed like a great opportunity for another QuickGraph.
   Scraping the Itsu website I wrote a couple of Python scripts to download each of the menu items and then extract the product name, description, and allergens.</description>
    </item>
    
    <item>
      <title>QuickGraph #2: Guardian Top 100 Male Footballers</title>
      <link>https://markhneedham.com/blog/2019/12/22/quick-graph-guardian-top-100-male-footballers/</link>
      <pubDate>Sun, 22 Dec 2019 00:21:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2019/12/22/quick-graph-guardian-top-100-male-footballers/</guid>
      <description>Over the last week the Guardian have been counting down their top 100 male footballers of 2019, and on Friday they also published a Google sheet containing all the votes, which seemed like a perfect candidate for a QuickGraph.
   We can see a preview of the Google sheet in the printscreen below:
   We can also download Google Sheets in CSV format based on the following URI template:</description>
    </item>
    
    <item>
      <title>QuickGraph #1: Analysing Python Dependency Graph with PageRank, Closeness Centrality, and Betweenness Centrality</title>
      <link>https://markhneedham.com/blog/2018/07/16/quick-graph-python-dependency-graph/</link>
      <pubDate>Mon, 16 Jul 2018 05:25:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2018/07/16/quick-graph-python-dependency-graph/</guid>
      <description>I&amp;#8217;ve always wanted to build a dependency graph of libraries in the Python ecosytem but I never quite got around to it&amp;#8230;&amp;#8203;until now! I thought I might be able to get a dump of all the libraries and their dependencies, but while searching I came across this article which does a good job of explaining why that&amp;#8217;s not possible.
 Finding Python Dependencies The best we can do is generate a dependency graph of our locally installed packages using the excellent pipdeptree tool.</description>
    </item>
    
  </channel>
</rss>