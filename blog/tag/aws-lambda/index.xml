<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws Lambda on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/aws-lambda/</link>
    <description>Recent content in Aws Lambda on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Aug 2017 16:01:50 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/aws-lambda/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Serverless: AWS HTTP Gateway - 502 Bad Gateway</title>
      <link>https://markhneedham.com/blog/2017/08/11/serverless-aws-http-gateway-502-bad-gateway/</link>
      <pubDate>Fri, 11 Aug 2017 16:01:50 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/08/11/serverless-aws-http-gateway-502-bad-gateway/</guid>
      <description>In my continued work with Serverless and AWS Lambda I ran into a problem when trying to call a HTTP gateway.  My project looked like this:  serverless.yaml service: http-gateway frameworkVersion: &amp;quot;&amp;gt;=1.2.0 &amp;lt;2.0.0&amp;quot; provider: name: aws runtime: python3.6 timeout: 180 functions: no-op: name: NoOp handler: handler.noop events: - http: POST noOp   handler.py def noop(event, context): return &amp;quot;hello&amp;quot;   Let&#39;s deploy to AWS: $ serverless deploy Serverless: Packaging service.</description>
    </item>
    
    <item>
      <title>AWS Lambda: /lib/ld-linux.so.2: bad ELF interpreter: No such file or directory&#39;</title>
      <link>https://markhneedham.com/blog/2017/08/03/aws-lambda-libld-linux-2-bad-elf-interpreter-no-file-directory/</link>
      <pubDate>Thu, 03 Aug 2017 17:24:16 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/08/03/aws-lambda-libld-linux-2-bad-elf-interpreter-no-file-directory/</guid>
      <description>I&#39;ve been working on an AWS lambda job to convert a HTML page to PDF using a Python wrapper around the wkhtmltopdf library but ended up with the following error when I tried to execute it: b&#39;/bin/sh: ./binary/wkhtmltopdf: /lib/ld-linux.so.2: bad ELF interpreter: No such file or directory\n&#39;: Exception Traceback (most recent call last): File &amp;quot;/var/task/handler.py&amp;quot;, line 33, in generate_certificate wkhtmltopdf(local_html_file_name, local_pdf_file_name) File &amp;quot;/var/task/lib/wkhtmltopdf.py&amp;quot;, line 64, in wkhtmltopdf wkhp.render() File &amp;quot;/var/task/lib/wkhtmltopdf.</description>
    </item>
    
    <item>
      <title>AWS Lambda: Programmatically scheduling a CloudWatchEvent</title>
      <link>https://markhneedham.com/blog/2017/04/05/aws-lambda-programatically-scheduling-a-cloudwatchevent/</link>
      <pubDate>Wed, 05 Apr 2017 23:49:45 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/04/05/aws-lambda-programatically-scheduling-a-cloudwatchevent/</guid>
      <description>I recently wrote a blog post showing how to create a Python &#39;Hello World&#39; AWS lambda function and manually invoke it, but what I really wanted to do was have it run automatically every hour.  To achieve that in AWS Lambda land we need to create a CloudWatch Event. The documentation describes them as follows:  Using simple rules that you can quickly set up, you can match events and route them to one or more target functions or streams.</description>
    </item>
    
    <item>
      <title>AWS Lambda: Encrypted environment variables</title>
      <link>https://markhneedham.com/blog/2017/04/03/aws-lambda-encrypted-environment-variables/</link>
      <pubDate>Mon, 03 Apr 2017 05:49:53 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/04/03/aws-lambda-encrypted-environment-variables/</guid>
      <description>Continuing on from my post showing how to create a &#39;Hello World&#39; AWS lambda function I wanted to pass encrypted environment variables to my function.
The following function takes in both an encrypted and unencrypted variable and prints them out.
 Don&#39;t print out encrypted variables in a real function, this is just so we can see the example working! import boto3 import os from base64 import b64decode def lambda_handler(event, context): encrypted = os.</description>
    </item>
    
    <item>
      <title>AWS Lambda: Programatically create a Python &#39;Hello World&#39; function</title>
      <link>https://markhneedham.com/blog/2017/04/02/aws-lambda-programatically-create-a-python-hello-world-function/</link>
      <pubDate>Sun, 02 Apr 2017 22:11:47 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2017/04/02/aws-lambda-programatically-create-a-python-hello-world-function/</guid>
      <description>I&#39;ve been playing around with AWS Lambda over the last couple of weeks and I wanted to automate the creation of these functions and all their surrounding config. Let&#39;s say we have the following Hello World function: ~~~python def lambda_handler(event, context): print(&#34;Hello world&#34;) ~~~  To upload it to AWS we need to put it inside a zip file so let&#39;s do that: $ zip HelloWorld.zip HelloWorld.py  $ unzip -l HelloWorld.</description>
    </item>
    
  </channel>
</rss>