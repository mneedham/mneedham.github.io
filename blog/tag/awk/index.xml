<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>awk on Mark Needham</title>
    <link>http://localhost:8000/blog/tag/awk/</link>
    <description>Recent content in awk on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Jun 2013 15:23:14 +0000</lastBuildDate><atom:link href="http://localhost:8000/blog/tag/awk/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unix/awk: Extracting substring using a regular expression with capture groups</title>
      <link>http://localhost:8000/blog/2013/06/26/unixawk-extracting-substring-using-a-regular-expression-with-capture-groups/</link>
      <pubDate>Wed, 26 Jun 2013 15:23:14 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2013/06/26/unixawk-extracting-substring-using-a-regular-expression-with-capture-groups/</guid>
      <description>A couple of years ago I wrote a blog post explaining how I’d used GNU awk to extract story numbers from git commit messages and I wanted to do a similar thing today to extract some node ids from a file.
My eventual solution looked like this:
$ echo &amp;#34;mark #1000&amp;#34; | gawk &amp;#39;{ match($0, /#([0-9]+)/, arr); if(arr[1] != &amp;#34;&amp;#34;) print arr[1] }&amp;#39; 1000 But in the comments an alternative approach was suggested which used the Mac version of awk and the RSTART and RLENGTH global variables which get set when a match is found:</description>
    </item>
    
    <item>
      <title>Unix: Getting the page count of a linearized PDF</title>
      <link>http://localhost:8000/blog/2011/10/09/unix-getting-the-page-count-of-a-linearized-pdf/</link>
      <pubDate>Sun, 09 Oct 2011 11:34:04 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2011/10/09/unix-getting-the-page-count-of-a-linearized-pdf/</guid>
      <description>We were doing some work last week to rasterize a PDF document into a sequence of images and wanted to get a rough idea of how many pages we’d be dealing with if we created an image per page.
The PDFs we’re dealing with are linearized since they’re available for viewing on the web:
A LINEARIZED PDF FILE is one that has been organized in a special way to enable efﬁcient incremental access in a network environment.</description>
    </item>
    
  </channel>
</rss>
