<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>strava on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/strava/</link>
    <description>Recent content in strava on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Jan 2022 00:44:37 +0000</lastBuildDate>
    
	<atom:link href="https://www.markhneedham.com/blog/tag/strava/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Strava: Export and interpolate lat/long points for an activity</title>
      <link>https://www.markhneedham.com/blog/2022/01/18/strava-export-interpolate-lat-long-points-activity/</link>
      <pubDate>Tue, 18 Jan 2022 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2022/01/18/strava-export-interpolate-lat-long-points-activity/</guid>
      <description>I&amp;#8217;ve been working with Strava data again recently and wanted to extract all the lat/long coordinates recorded for my runs. Having done this, I realised that my running watch hadn&amp;#8217;t recorded as many points as I expected, so I needed to interpolate the missing points. In this blog post we&amp;#8217;ll learn how to do that.
  Figure 1. Strava: Export and interpolate lat/long points for an activity  Setup Let&amp;#8217;s first install a few libraries that we&amp;#8217;ll be using:</description>
    </item>
    
    <item>
      <title>Strava: Export all activities to JSON file</title>
      <link>https://www.markhneedham.com/blog/2020/12/20/strava-export-all-activities-json/</link>
      <pubDate>Sun, 20 Dec 2020 00:21:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2020/12/20/strava-export-all-activities-json/</guid>
      <description>In my continued playing around with the Strava API, I wanted to write a script to download all of my Strava activities to a JSON file.
 As I mentioned in a previous blog post, the approach to authenticating requests has changed in the last two years, so we first need to generate an access token via the OAuth endpoint. Luckily Odd Eirik Igland shared a script showing how to solve most of the problem, and I&amp;#8217;ve adapted it to do what I want.</description>
    </item>
    
    <item>
      <title>Strava: Authorization Error - Missing activity:read_permission</title>
      <link>https://www.markhneedham.com/blog/2020/12/15/strava-authorization-error-missing-read-permission/</link>
      <pubDate>Tue, 15 Dec 2020 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2020/12/15/strava-authorization-error-missing-read-permission/</guid>
      <description>I&amp;#8217;m revisiting the Strava API after a two year absence and the approach to authenticating requests has changed in that time. You now need to generate an access token via OAuth 2.0, as described in the &#39;How to authenticate with OAuth 2.0&#39; section of the Getting Started with the Strava API guide.
 I want to generate a token that lets me retrieve all of my activities via the /athlete/activities end point.</description>
    </item>
    
    <item>
      <title>Neo4j 3.4: Grouping Datetimes</title>
      <link>https://www.markhneedham.com/blog/2018/07/10/neo4j-grouping-datetimes/</link>
      <pubDate>Tue, 10 Jul 2018 04:21:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/07/10/neo4j-grouping-datetimes/</guid>
      <description>In my continued analysis of Strava runs I wanted to try and find my best runs grouped by different time components, which was actually much easier than I was expecting.
 Importing the dataset If you want to try out the examples below you can execute the following LOAD CSV commands to load the data:
 LOAD CSV WITH HEADERS FROM &#34;https://github.com/mneedham/strava/raw/master/runs.csv&#34; AS row MERGE (run:Run {id: toInteger(row.id)}) SET run.distance = toFloat(row.</description>
    </item>
    
    <item>
      <title>Neo4j 3.4: Syntax Error - Text cannot be parsed to a Duration (aka dealing with empty durations)</title>
      <link>https://www.markhneedham.com/blog/2018/07/09/neo4j-text-cannot-be-parsed-to-duration/</link>
      <pubDate>Mon, 09 Jul 2018 18:21:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/07/09/neo4j-text-cannot-be-parsed-to-duration/</guid>
      <description>As I continued with my travels with Neo4j 3.4&amp;#8217;s temporal data type I came across some fun edge cases when dealing with empty durations while importing data.
 Imagine we&amp;#8217;re trying to create 3 nodes from the following array of input data. Two of the rows have invalid durations!
 UNWIND [ {id: 12345, duration: &#34;PT2M20S&#34;}, {id: 12346, duration: &#34;&#34;}, {id: 12347, duration: null} ] AS row MERGE (run:Run {id: row.</description>
    </item>
    
    <item>
      <title>Neo4j: Querying the Strava Graph using Py2neo</title>
      <link>https://www.markhneedham.com/blog/2018/06/15/neo4j-querying-strava-graph-py2neo/</link>
      <pubDate>Fri, 15 Jun 2018 13:45:21 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/06/15/neo4j-querying-strava-graph-py2neo/</guid>
      <description>Last week Nigel released v4 of Py2neo and given I was just getting ready to write some queries against my Strava activity graph I thought I&amp;#8217;d give it a try.
 If you want to learn how to create your own Strava graph you should read my previous post, but just to recap, this is the graph model that we created:
   Let&amp;#8217;s get to it!
 tl;dr the code in this post is available as a Jupyter notebook so if you want the code and nothing but the code head over there!</description>
    </item>
    
    <item>
      <title>Neo4j: Building a graph of Strava activities</title>
      <link>https://www.markhneedham.com/blog/2018/06/12/neo4j-building-strava-graph/</link>
      <pubDate>Tue, 12 Jun 2018 05:30:21 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/06/12/neo4j-building-strava-graph/</guid>
      <description>In my last post I showed how to import activities from Strava&amp;#8217;s API into Neo4j using only the APOC library, but that was only part of the graph so I thought I&amp;#8217;d share the rest of what I&amp;#8217;ve done.
 The Graph Model In the previous post I showed how to import nodes with Run label, but there are some other pieces of data that I wanted to import as well.</description>
    </item>
    
    <item>
      <title>Neo4j APOC: Importing data from Strava&#39;s paginated JSON API</title>
      <link>https://www.markhneedham.com/blog/2018/06/05/neo4j-apoc-loading-data-strava-paginated-json-api/</link>
      <pubDate>Tue, 05 Jun 2018 05:30:21 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/06/05/neo4j-apoc-loading-data-strava-paginated-json-api/</guid>
      <description>Over the weekend I&amp;#8217;ve been playing around with loading data from the Strava API into Neo4j and I started with the following Python script which creates a node with a Run label for each of my activities.
 If you want to follow along on your own data you&amp;#8217;ll need to get an API key via the &#39;My API Application&#39; section of the website. Once you&amp;#8217;ve got that put it in the TOKEN environment variable and you should be good to go.</description>
    </item>
    
    <item>
      <title>Strava: Calculating the similarity of two runs</title>
      <link>https://www.markhneedham.com/blog/2018/01/18/strava-calculating-similarity-two-runs/</link>
      <pubDate>Thu, 18 Jan 2018 23:35:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/01/18/strava-calculating-similarity-two-runs/</guid>
      <description>I go running several times a week and wanted to compare my runs against each other to see how similar they are.
 I record my runs with the Strava app and it has an API that returns lat/long coordinates for each run in the Google encoded polyline algorithm format.
 We can use the polyline library to decode these values into a list of lat/long tuples. For example:
 import polyline polyline.</description>
    </item>
    
    <item>
      <title>Loading and analysing Strava runs using PostgreSQL JSON data type</title>
      <link>https://www.markhneedham.com/blog/2017/05/01/loading-and-analysing-strava-runs-using-postgresql-json-data-type/</link>
      <pubDate>Mon, 01 May 2017 19:11:54 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/05/01/loading-and-analysing-strava-runs-using-postgresql-json-data-type/</guid>
      <description>In my last post I showed how to map Strava runs using data that I&amp;#8217;d extracted from their https://strava.github.io/api/v3/activities/ API, but the API returns a lot of other data that I discarded because I wasn&amp;#8217;t sure what I should keep.
 The API returns a nested JSON structure so the easiest solution would be to save each run as an individual file but I&amp;#8217;ve always wanted to try out PostgreSQL&amp;#8217;s JSON data type and this seemed like a good opportunity.</description>
    </item>
    
    <item>
      <title>Leaflet: Mapping Strava runs/polylines on Open Street Map</title>
      <link>https://www.markhneedham.com/blog/2017/04/29/leaflet-strava-polylines-osm/</link>
      <pubDate>Sat, 29 Apr 2017 15:36:36 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/04/29/leaflet-strava-polylines-osm/</guid>
      <description>I&amp;#8217;m a big Strava user and spent a bit of time last weekend playing around with their API to work out how to map all my runs.
   Strava API and polylines This is a two step process:
  Call the /athlete/activities/ endpoint to get a list of all my activities
  For each of those activities call /activities/ endpoint to get more detailed information for each activity&amp;lt;/cite&amp;gt;</description>
    </item>
    
  </channel>
</rss>