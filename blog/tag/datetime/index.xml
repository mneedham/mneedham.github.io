<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>datetime on Mark Needham</title>
    <link>http://localhost:8000/blog/tag/datetime/</link>
    <description>Recent content in datetime on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Jul 2018 18:21:00 +0000</lastBuildDate><atom:link href="http://localhost:8000/blog/tag/datetime/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Neo4j 3.4: Syntax Error - Text cannot be parsed to a Duration (aka dealing with empty durations)</title>
      <link>http://localhost:8000/blog/2018/07/09/neo4j-text-cannot-be-parsed-to-duration/</link>
      <pubDate>Mon, 09 Jul 2018 18:21:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2018/07/09/neo4j-text-cannot-be-parsed-to-duration/</guid>
      <description>As I continued with my travels with Neo4j 3.4’s temporal data type I came across some fun edge cases when dealing with empty durations while importing data.
Imagine we’re trying to create 3 nodes from the following array of input data. Two of the rows have invalid durations!
UNWIND [ {id: 12345, duration: &amp;#34;PT2M20S&amp;#34;}, {id: 12346, duration: &amp;#34;&amp;#34;}, {id: 12347, duration: null} ] AS row MERGE (run:Run {id: row.id}) SET run.</description>
    </item>
    
    <item>
      <title>Neo4j 3.4: Gotchas when working with Durations</title>
      <link>http://localhost:8000/blog/2018/06/03/neo4j-3.4-gotchas-working-with-durations/</link>
      <pubDate>Sun, 03 Jun 2018 20:11:21 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2018/06/03/neo4j-3.4-gotchas-working-with-durations/</guid>
      <description>Continuing with my explorations of Strava data in Neo4j I wanted to share some things I learnt while trying to work out my pace for certain distances.
Before we get into the pace calculations let’s first understand how the duration function works. If we run the following query we might expect to get back the same value that we put in…​
RETURN duration({seconds: 413.77}).seconds AS seconds ╒═════════╕ │&amp;#34;seconds&amp;#34;│ ╞═════════╡ │413 │ └─────────┘ …​but as you can see the value gets rounded down to the nearest number, losing us some accuracy.</description>
    </item>
    
    <item>
      <title>Neo4j 3.4: Formatting instances of the Duration and Datetime date types</title>
      <link>http://localhost:8000/blog/2018/06/03/neo4j-3.4-formatting-instances-durations-dates/</link>
      <pubDate>Sun, 03 Jun 2018 04:08:21 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2018/06/03/neo4j-3.4-formatting-instances-durations-dates/</guid>
      <description>In my last blog post I showed how to compare instances of Neo4j’s Duration data type, and in the middle of the post I realised that I needed to use the APOC library to return the value in the format I wanted. This was the solution I ended up with:
WITH duration({seconds: 100}) AS duration RETURN apoc.text.lpad(toString(duration.minutes), 2, &amp;#34;0&amp;#34;) + &amp;#34;:&amp;#34; + apoc.text.lpad(toString(duration.secondsOfMinute), 2, &amp;#34;0&amp;#34;) If we run that query this is the output:</description>
    </item>
    
    <item>
      <title>Neo4j 3.4: Comparing durations</title>
      <link>http://localhost:8000/blog/2018/06/02/neo4j-3.4-comparing-durations/</link>
      <pubDate>Sat, 02 Jun 2018 03:24:21 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2018/06/02/neo4j-3.4-comparing-durations/</guid>
      <description>Neo4j 3.4 saw the introduction of the temporal date type, which my colleague Adam Cowley covered in his excellent blog post, and in this post I want to share my experience using durations from my Strava runs.
I’ll show how to load the whole Strava dataset in another blog post but for now we’ll just manually create some durations based on the elapsed time in seconds that Strava provides. We can run the following query to convert duration in seconds into the duration type:</description>
    </item>
    
  </channel>
</rss>
