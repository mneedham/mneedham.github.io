<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ddd on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/ddd/</link>
    <description>Recent content in ddd on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Jan 2010 14:05:05 +0000</lastBuildDate>
    
	<atom:link href="https://www.markhneedham.com/blog/tag/ddd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DDD: Making implicit concepts explicit</title>
      <link>https://www.markhneedham.com/blog/2009/04/23/ddd-making-implicit-concepts-explicit/</link>
      <pubDate>Thu, 23 Apr 2009 12:36:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/04/23/ddd-making-implicit-concepts-explicit/</guid>
      <description>One of my favourite parts of the Domain Driven Design book is where Eric Evans talks about making implicit concepts in our domain model explicit.
 The book describes this process like so:
  Many transformations of domain models and the corresponding code happen when developers recognize a concept that has been hinted at in discussion or present implicitly in the design, and they then represent it explicitly in the model with one or more objects or relationships.</description>
    </item>
    
    <item>
      <title>DDD: Only for complex projects?</title>
      <link>https://www.markhneedham.com/blog/2009/04/06/ddd-only-for-complex-projects/</link>
      <pubDate>Mon, 06 Apr 2009 19:21:55 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/04/06/ddd-only-for-complex-projects/</guid>
      <description>One of the things I find a bit confusing when it comes to Domain Driven Design is that some of the higher profile speakers/user group contributors on the subject have expressed the opinion that DDD is more suitable when we are dealing with complex projects.
 I think this means complex in terms of the domain but I&amp;#8217;ve certainly worked on some projects where we&amp;#8217;ve been following certainly some of the ideas of DDD and have got some value out of doing so in domains which I wouldn&amp;#8217;t say were particularly complex.</description>
    </item>
    
    <item>
      <title>DDD: Recognising relationships between bounded contexts</title>
      <link>https://www.markhneedham.com/blog/2009/03/30/ddd-recognising-relationships-between-bounded-contexts/</link>
      <pubDate>Mon, 30 Mar 2009 22:52:52 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/03/30/ddd-recognising-relationships-between-bounded-contexts/</guid>
      <description>One of the big takeaways for me from the Domain Driven Design track at the recent QCon London conference was that the organisational patterns in the second half of the book are probably more important than the actual patterns themselves.
 There are various patterns used to describe the relationships between different bounded contexts:
   Shared Kernel - This is where two teams share some subset of the domain model.</description>
    </item>
    
    <item>
      <title>How does the user language fit in with the ubiquitous language?</title>
      <link>https://www.markhneedham.com/blog/2009/01/10/how-does-the-user-language-fit-in-with-the-ubiquitous-language/</link>
      <pubDate>Sat, 10 Jan 2009 15:38:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/01/10/how-does-the-user-language-fit-in-with-the-ubiquitous-language/</guid>
      <description>We&amp;#8217;ve been doing some work this week around trying to ensure that we have a ubiquitous language to describe aspects of the domain across the various different systems on my project.
 It&amp;#8217;s not easy as there are several different teams involved but one thing we realised while working on the language is that the language of the business is not the same as the language of the user.
 Although this is the first time that I recall working on a project where the language of the user is different to the language of the domain I&amp;#8217;m sure there must be other domains where this is the case as well.</description>
    </item>
    
    <item>
      <title>Internal/External Domain Models</title>
      <link>https://www.markhneedham.com/blog/2008/12/28/internalexternal-domain-models/</link>
      <pubDate>Sun, 28 Dec 2008 00:19:13 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/12/28/internalexternal-domain-models/</guid>
      <description>One of the underlying characteristic of most of the projects I have worked on is that we have defined our own domain model.
 On my current project due to the fact that most of the logic in the system is being handled through other services we decided to use WCF messages as the domain model, meaning that our domain model is being defined externally by the team defining the message contracts.</description>
    </item>
    
    <item>
      <title>Similarities between Domain Driven Design &amp; Object Oriented Programming</title>
      <link>https://www.markhneedham.com/blog/2008/09/20/similarities-between-domain-driven-design-object-oriented-programming/</link>
      <pubDate>Sat, 20 Sep 2008 13:12:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/09/20/similarities-between-domain-driven-design-object-oriented-programming/</guid>
      <description>At the Alt.NET UK Conference which I attended over the weekend it occurred to me while listening to some of the discussions on Domain Driven Design that a lot of the ideas in DDD are actually very similar to those being practiced in Object Oriented Programming and related best practices.
 The similarities   Anaemic Domain Model/Law of Demeter There was quite a bit of discussion in the session about anaemic domain models.</description>
    </item>
    
    <item>
      <title>Should we always use Domain Model?</title>
      <link>https://www.markhneedham.com/blog/2008/09/19/should-we-always-use-domain-mode/</link>
      <pubDate>Fri, 19 Sep 2008 08:34:35 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/09/19/should-we-always-use-domain-mode/</guid>
      <description>During the discussion about Domain Driven Design at the Alt.NET conference I felt like the idea of the Rich Domain Model was being represented as the only way to design software but I don&amp;#8217;t feel that this is the case.
 As always in software we never have a silver bullet and there are times when Domain Model is not necessarily the best choice, just as there are times when OOP is not necessarily the best choice.</description>
    </item>
    
  </channel>
</rss>