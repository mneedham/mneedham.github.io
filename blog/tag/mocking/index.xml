<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mocking on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/mocking/</link>
    <description>Recent content in mocking on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Dec 2008 20:57:23 +0000</lastBuildDate>
    
	<atom:link href="https://www.markhneedham.com/blog/tag/mocking/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TDD: Mock expectations in Setup</title>
      <link>https://www.markhneedham.com/blog/2008/12/19/tdd-mock-expectations-in-setup/</link>
      <pubDate>Fri, 19 Dec 2008 20:57:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/12/19/tdd-mock-expectations-in-setup/</guid>
      <description>One of the ideas that I mentioned in a recent post about what I consider to be a good unit test was the ideas that we shouldn&amp;#8217;t necessarily consider the DRY (Don&amp;#8217;t Repeat Yourself) principle to be our number one driver.
 I consider putting mock expectations in the setup methods of our tests to be one of those occasions where we shouldn&amp;#8217;t obey this principle and I thought this would be fairly unanimously agreed upon but putting the question to the Twittersphere led to mixed opinions.</description>
    </item>
    
    <item>
      <title>TDD without the design</title>
      <link>https://www.markhneedham.com/blog/2008/10/01/tdd-without-the-design/</link>
      <pubDate>Wed, 01 Oct 2008 00:32:20 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/10/01/tdd-without-the-design/</guid>
      <description>Roy Osherove and several others have posted recently about introducing TDD to the &#39;masses&#39;
 As I understand it Roy&amp;#8217;s idea is to separate the learning of TDD from the learning of good design principles - good design principles in this case being the OOP principles described in Uncle Bob&amp;#8217;s Agile Software Development Principles, Practices and Practices or on the Object Mentor website.
 I am usually in favour of an approach that breaks a skill down into chunks so that it is easier to learn but in this case I feel that some of the big gains in coding in a TDD way is the decoupled design it encourages, which in my experience is more likely to follow good design principles.</description>
    </item>
    
  </channel>
</rss>