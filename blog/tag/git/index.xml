<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Mark Needham</title>
    <link>http://markhneedham.com/blog/tag/git/</link>
    <description>Recent content in Git on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Nov 2013 21:58:08 +0000</lastBuildDate>
    
	<atom:link href="http://markhneedham.com/blog/tag/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git: Viewing the last commit on all the tags</title>
      <link>http://markhneedham.com/blog/2013/11/16/git-viewing-the-last-commit-on-all-the-tags/</link>
      <pubDate>Sat, 16 Nov 2013 21:58:08 +0000</pubDate>
      
      <guid>http://markhneedham.com/blog/2013/11/16/git-viewing-the-last-commit-on-all-the-tags/</guid>
      <description>A couple of days ago I was curious when different versions of Neo4j had been released and although the release notes page was helpful I thought I&#39;d find more detailed information if I looked up the git tags.
Assuming that we&#39;ve already got a clone of the repository on our machine:
$ git clone git@github.com:neo4j/neo4j.git  We can pull down the latest tags by calling git fetch --tags or git fetch -t</description>
    </item>
    
    <item>
      <title>Git: Commit squashing made even easier using &#39;git branch --set-upstream&#39;</title>
      <link>http://markhneedham.com/blog/2013/07/16/git-commit-squashing-made-even-easier-using-git-branch-set-upstream/</link>
      <pubDate>Tue, 16 Jul 2013 08:13:02 +0000</pubDate>
      
      <guid>http://markhneedham.com/blog/2013/07/16/git-commit-squashing-made-even-easier-using-git-branch-set-upstream/</guid>
      <description>A few days ago I wrote a blog post describing how I wanted to squash a series of commits into one bigger one before making a pull request and in the comments Rob Hunter showed me an even easier way to do so.
To recap, by the end of the post I had the following git config:
$ cat .git/config [remote &amp;quot;origin&amp;quot;] fetch = +refs/heads/*:refs/remotes/origin/* url = git@github.com:mneedham/neo4j-shell-tools.git [branch &amp;quot;master&amp;quot;] remote = origin merge = refs/heads/master [remote &amp;quot;base&amp;quot;] url = git@github.</description>
    </item>
    
    <item>
      <title>Git/GitHub: Squashing all commits before sending a pull request</title>
      <link>http://markhneedham.com/blog/2013/07/13/gitgithub-squashing-all-commits-before-sending-a-pull-request/</link>
      <pubDate>Sat, 13 Jul 2013 18:47:49 +0000</pubDate>
      
      <guid>http://markhneedham.com/blog/2013/07/13/gitgithub-squashing-all-commits-before-sending-a-pull-request/</guid>
      <description>My colleague Michael has been doing some work to make it easier for people to import data into neo4j and his latest attempt is neo4j-shell-tools which adds some additional commands to the neo4j-shell.
I&#39;ve spent a bit of time refactoring the readme which I&#39;d done on a branch of my fork of the repository and consisted of 46 commits, most changing 2 or 3 lines.
I wanted to send Michael a pull request on Github but first I needed to squash all my commits down into a single one.</description>
    </item>
    
    <item>
      <title>git: Having a branch/tag with the same name (error: dst refspec matches more than one.)</title>
      <link>http://markhneedham.com/blog/2013/06/13/git-having-a-branchtag-with-the-same-name-error-dst-refspec-matches-more-than-one/</link>
      <pubDate>Thu, 13 Jun 2013 22:18:31 +0000</pubDate>
      
      <guid>http://markhneedham.com/blog/2013/06/13/git-having-a-branchtag-with-the-same-name-error-dst-refspec-matches-more-than-one/</guid>
      <description>Andres and I recently found ourselves wanting to delete a remote branch which had the same name as a tag and therefore the normal way of doing that wasn&#39;t worked out as well as we&#39;d hoped.
I created a dummy repository to recreate the state we&#39;d got ourselves into:
$ echo &amp;quot;mark&amp;quot; &amp;gt; README $ git commit -am &amp;quot;readme&amp;quot; $ echo &amp;quot;for the branch&amp;quot; &amp;gt;&amp;gt; README $ git commit -am &amp;quot;for the branch&amp;quot; $ git checkout -b same Switched to a new branch &#39;same&#39; $ git push origin same Counting objects: 5, done.</description>
    </item>
    
    <item>
      <title>git: Only pushing some changes from local repository</title>
      <link>http://markhneedham.com/blog/2011/10/20/git-only-pushing-some-changes-from-local-repository/</link>
      <pubDate>Thu, 20 Oct 2011 06:50:01 +0000</pubDate>
      
      <guid>http://markhneedham.com/blog/2011/10/20/git-only-pushing-some-changes-from-local-repository/</guid>
      <description>Something that we want to do reasonable frequently on my current project is to push some changes which have been committed to our local repository to master but not all of them.
For example we might end up with 3 changes we haven&amp;rsquo;t pushed:
&amp;gt;&amp;gt; ~/github/local$ git status # On branch master # Your branch is ahead of &#39;origin/master&#39; by 3 commits. # nothing to commit (working directory clean)  &amp;gt;&amp;gt; ~/github/local$ git hist * bb7b139 Thu, 20 Oct 2011 07:37:11 +0100 | mark: one last time (HEAD, master) [Mark Needham] * 1cef99a Thu, 20 Oct 2011 07:36:35 +0100 | mark:another new line [Mark Needham] * 850e105 Thu, 20 Oct 2011 07:36:01 +0100 | mark: new line [Mark Needham] * 2b25622 Thu, 20 Oct 2011 07:32:43 +0100 | mark: adding file for first time (origin/master) [Mark Needham]  And we only want to push the commit with hash 850e105 for example.</description>
    </item>
    
    <item>
      <title>Git: Getting the history of a deleted file</title>
      <link>http://markhneedham.com/blog/2011/10/04/git-getting-the-history-of-a-deleted-file/</link>
      <pubDate>Tue, 04 Oct 2011 22:33:09 +0000</pubDate>
      
      <guid>http://markhneedham.com/blog/2011/10/04/git-getting-the-history-of-a-deleted-file/</guid>
      <description>We recently wanted to get the Git history of a file which we knew existed but had now been deleted so we could find out what had happened to it.
Using a simple git log didn&amp;rsquo;t work:
git log deletedFile.txt fatal: ambiguous argument &#39;deletedFile.txt&#39;: unknown revision or path not in the working tree. ~~~	We eventually came across &amp;lt;a href=&amp;quot;http://feeding.cloud.geek.nz/2010/07/querying-deleted-content-in-git.html&amp;quot;&amp;gt;Francois Marier&#39;s blog post&amp;lt;/a&amp;gt; which points out that you need to use the following command instead: ~~~text git log -- deletedFile.</description>
    </item>
    
    <item>
      <title>Git: Deleting a remote branch on a gitolite configured repository</title>
      <link>http://markhneedham.com/blog/2011/06/28/git-deleting-a-remote-branch-on-a-gitolite-configured-repository/</link>
      <pubDate>Tue, 28 Jun 2011 22:09:18 +0000</pubDate>
      
      <guid>http://markhneedham.com/blog/2011/06/28/git-deleting-a-remote-branch-on-a-gitolite-configured-repository/</guid>
      <description>We&amp;rsquo;ve had an xsbt branch on our gitolite powered repository for the last couple of weeks while we worked out how to move our build from sbt 0.7 to sbt 0.10 but having finally done that we needed to delete it.
I originally tried running the following command from one of our developer workstations:
git push origin :xsbt  But ended up with the following error:
 remote: error: denying ref deletion for regs/head/xsbt !</description>
    </item>
    
    <item>
      <title>Git/Mercurial: Pushing regularly</title>
      <link>http://markhneedham.com/blog/2010/06/19/gitmercurial-pushing-regularly/</link>
      <pubDate>Sat, 19 Jun 2010 22:14:06 +0000</pubDate>
      
      <guid>http://markhneedham.com/blog/2010/06/19/gitmercurial-pushing-regularly/</guid>
      <description>I was reading a recent blog post by Gabriel Schenker where he discusses how his team is making use of Git and about half way through he says the following:
When using Git as your SCM it is normal to work for quite a while – maybe for a couple of days – in a local branch and without ever pushing the changes to the origin. Usually we only push when a feature is done or a defect is completely resolved.</description>
    </item>
    
    <item>
      <title>A reminder of the usefulness of Git</title>
      <link>http://markhneedham.com/blog/2010/03/14/a-reminder-of-the-usefulness-of-git/</link>
      <pubDate>Sun, 14 Mar 2010 00:45:34 +0000</pubDate>
      
      <guid>http://markhneedham.com/blog/2010/03/14/a-reminder-of-the-usefulness-of-git/</guid>
      <description>Despite the fact that none of the projects that I&amp;rsquo;ve worked on have used Git or Mercurial as the team&amp;rsquo;s main repository I keep forgetting how useful those tools can be even if they&amp;rsquo;re just being used locally.
I ran into a problem when trying to work out why a Rhino Mocks expectation wasn&amp;rsquo;t working as I expected last week having refactored a bit of code to include a constructor.</description>
    </item>
    
    <item>
      <title>Pulling from github on Windows</title>
      <link>http://markhneedham.com/blog/2009/08/18/pulling-from-github-on-windows/</link>
      <pubDate>Tue, 18 Aug 2009 00:33:11 +0000</pubDate>
      
      <guid>http://markhneedham.com/blog/2009/08/18/pulling-from-github-on-windows/</guid>
      <description>My colleague Dave Cameron has been telling me about his adventures playing around with Git Sharp (a C# port of the Java Git implementation jGit) so I thought I&amp;rsquo;d get a copy of the code and have a look as well.
I tend to check out all code bases from my host machine instead of virtual machine so I got the code all checked out on the Mac and accessed it via a shared folder on my VM.</description>
    </item>
    
  </channel>
</rss>