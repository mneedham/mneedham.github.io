<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/git/</link>
    <description>Recent content in git on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Apr 2019 05:03:00 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git: Viewing the last commit on all the tags</title>
      <link>https://markhneedham.com/blog/2013/11/16/git-viewing-the-last-commit-on-all-the-tags/</link>
      <pubDate>Sat, 16 Nov 2013 21:58:08 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/11/16/git-viewing-the-last-commit-on-all-the-tags/</guid>
      <description>$ git clone git@github.com:neo4j/neo4j.git $ git fetch -t remote: Counting objects: 542, done. remote: Compressing objects: 100% (231/231), done. remote: Total 287 (delta 247), reused 84 (delta 50) Receiving objects: 100% (287/287), 42.85 KiB, done. Resolving deltas: 100% (247/247), completed with 191 local objects. From github.com:neo4j/neo4j * [new tag] 1.9.2 -&amp;gt; 1.9.2 * [new tag] 1.9.5 -&amp;gt; 1.9.5 * [new tag] 2.0.0-M06 -&amp;gt; 2.0.0-M06 $ git tag | head -n5 1.</description>
    </item>
    
    <item>
      <title>Git: Commit squashing made even easier using &#39;git branch --set-upstream&#39;</title>
      <link>https://markhneedham.com/blog/2013/07/16/git-commit-squashing-made-even-easier-using-git-branch-set-upstream/</link>
      <pubDate>Tue, 16 Jul 2013 08:13:02 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/07/16/git-commit-squashing-made-even-easier-using-git-branch-set-upstream/</guid>
      <description>$ cat .git/config [remote &amp;#34;origin&amp;#34;] fetch = +refs/heads/*:refs/remotes/origin/* url = git@github.com:mneedham/neo4j-shell-tools.git [branch &amp;#34;master&amp;#34;] remote = origin merge = refs/heads/master [remote &amp;#34;base&amp;#34;] url = git@github.com:jexp/neo4j-shell-tools.git fetch = +refs/heads/*:refs/remotes/base/* [branch &amp;#34;readme-pull&amp;#34;] remote = origin merge = refs/heads/readme-pull [branch &amp;#34;readme&amp;#34;] remote = origin merge = refs/heads/readme $ git rebase -i c4e94f668223d53f6c7364d19aa965d09ea7eb00 $ git branch master * readme readme-pull $ git checkout -b readme-pull-new Switched to a new branch &amp;#39;readme-pull-new&amp;#39; $ git branch --set-upstream readme-pull-new base/master Branch readme-pull-new set up to track remote branch master from base.</description>
    </item>
    
    <item>
      <title>Git/GitHub: Squashing all commits before sending a pull request</title>
      <link>https://markhneedham.com/blog/2013/07/13/gitgithub-squashing-all-commits-before-sending-a-pull-request/</link>
      <pubDate>Sat, 13 Jul 2013 18:47:49 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/07/13/gitgithub-squashing-all-commits-before-sending-a-pull-request/</guid>
      <description>[remote &amp;#34;origin&amp;#34;] fetch = +refs/heads/*:refs/remotes/origin/* url = git@github.com:mneedham/neo4j-shell-tools.git [branch &amp;#34;master&amp;#34;] remote = origin merge = refs/heads/master [remote &amp;#34;base&amp;#34;] url = git@github.com:jexp/neo4j-shell-tools.git fetch = +refs/heads/*:refs/remotes/base/* [branch &amp;#34;readme&amp;#34;] remote = origin merge = refs/heads/readme $ git branch readme-pull $ git checkout readme-pull Switched to branch &amp;#39;readme-pull&amp;#39; $ git fetch base remote: Counting objects: 77, done. remote: Compressing objects: 100% (18/18), done. remote: Total 43 (delta 15), reused 40 (delta 12) Unpacking objects: 100% (43/43), done.</description>
    </item>
    
    <item>
      <title>git: Having a branch/tag with the same name (error: dst refspec matches more than one.)</title>
      <link>https://markhneedham.com/blog/2013/06/13/git-having-a-branchtag-with-the-same-name-error-dst-refspec-matches-more-than-one/</link>
      <pubDate>Thu, 13 Jun 2013 22:18:31 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/06/13/git-having-a-branchtag-with-the-same-name-error-dst-refspec-matches-more-than-one/</guid>
      <description>$ echo &amp;#34;mark&amp;#34; &amp;gt; README $ git commit -am &amp;#34;readme&amp;#34; $ echo &amp;#34;for the branch&amp;#34; &amp;gt;&amp;gt; README $ git commit -am &amp;#34;for the branch&amp;#34; $ git checkout -b same Switched to a new branch &amp;#39;same&amp;#39; $ git push origin same Counting objects: 5, done. Writing objects: 100% (3/3), 263 bytes, done. Total 3 (delta 0), reused 0 (delta 0) To ssh://git@bitbucket.org/markhneedham/branch-tag-test.git * [new branch] same -&amp;gt; same $ git checkout master $ echo &amp;#34;for the tag&amp;#34; &amp;gt;&amp;gt; README $ git commit -am &amp;#34;for the tag&amp;#34; $ git tag same $ git push origin refs/tags/same Counting objects: 5, done.</description>
    </item>
    
    <item>
      <title>git: Only pushing some changes from local repository</title>
      <link>https://markhneedham.com/blog/2011/10/20/git-only-pushing-some-changes-from-local-repository/</link>
      <pubDate>Thu, 20 Oct 2011 06:50:01 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/10/20/git-only-pushing-some-changes-from-local-repository/</guid>
      <description>Something that we want to do reasonable frequently on my current project is to push some changes which have been committed to our local repository to master but not all of them.
For example we might end up with 3 changes we haven&amp;rsquo;t pushed:
&amp;gt;&amp;gt; ~/github/local$ git status # On branch master # Your branch is ahead of &amp;#39;origin/master&amp;#39; by 3 commits. # nothing to commit (working directory clean) &amp;gt;&amp;gt; ~/github/local$ git hist * bb7b139 Thu, 20 Oct 2011 07:37:11 +0100 | mark: one last time (HEAD, master) [Mark Needham] * 1cef99a Thu, 20 Oct 2011 07:36:35 +0100 | mark:another new line [Mark Needham] * 850e105 Thu, 20 Oct 2011 07:36:01 +0100 | mark: new line [Mark Needham] * 2b25622 Thu, 20 Oct 2011 07:32:43 +0100 | mark: adding file for first time (origin/master) [Mark Needham] And we only want to push the commit with hash 850e105for example.</description>
    </item>
    
    <item>
      <title>Git: Getting the history of a deleted file</title>
      <link>https://markhneedham.com/blog/2011/10/04/git-getting-the-history-of-a-deleted-file/</link>
      <pubDate>Tue, 04 Oct 2011 22:33:09 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/10/04/git-getting-the-history-of-a-deleted-file/</guid>
      <description>We recently wanted to get the Git history of a file which we knew existed but had now been deleted so we could find out what had happened to it.
Using a simple git logdidn&amp;rsquo;t work:
git log deletedFile.txt fatal: ambiguous argument &amp;#39;deletedFile.txt&amp;#39;: unknown revision or path not in the working tree. We eventually came across Francois Marier&amp;rsquo;s blog postwhich points out that you need to use the following command instead:</description>
    </item>
    
    <item>
      <title>Git: Deleting a remote branch on a gitolite configured repository</title>
      <link>https://markhneedham.com/blog/2011/06/28/git-deleting-a-remote-branch-on-a-gitolite-configured-repository/</link>
      <pubDate>Tue, 28 Jun 2011 22:09:18 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/06/28/git-deleting-a-remote-branch-on-a-gitolite-configured-repository/</guid>
      <description>We&amp;rsquo;ve had an xsbtbranch on our gitolitepowered repository for the last couple of weeks while we worked out how to move our build from sbt 0.7 to sbt 0.10 but having finally done that we needed to delete it.
I originally tried running the following command from one of our developer workstations:
git push origin :xsbt But ended up with the following error:
! [remote rejected] xsbt (deletion prohibited)
A bit of googling led me to this stackoverflow threadwhich suggested that you needed to be an administrator in order to delete a remote branch.</description>
    </item>
    
    <item>
      <title>Git/Mercurial: Pushing regularly</title>
      <link>https://markhneedham.com/blog/2010/06/19/gitmercurial-pushing-regularly/</link>
      <pubDate>Sat, 19 Jun 2010 22:14:06 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/06/19/gitmercurial-pushing-regularly/</guid>
      <description>I was reading a recent blog post by Gabriel Schenker where he discusses how his team is making use of Gitand about half way through he says the following:
We&amp;rsquo;ve been using Mercurial on the project I&amp;rsquo;m currently working on over the past few months and although it&amp;rsquo;s a similar tool we&amp;rsquo;ve been following a different approach.
We&amp;rsquo;ve got it setup the same way we would setup Subversion:
We&amp;rsquo;ve been trying to push to the central repository as frequently as possible, just as we would if we were using Subversion.</description>
    </item>
    
    <item>
      <title>A reminder of the usefulness of Git</title>
      <link>https://markhneedham.com/blog/2010/03/14/a-reminder-of-the-usefulness-of-git/</link>
      <pubDate>Sun, 14 Mar 2010 00:45:34 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/03/14/a-reminder-of-the-usefulness-of-git/</guid>
      <description>Despite the fact that none of the projects that I&amp;rsquo;ve worked on have used Gitor Mercurialas the team&amp;rsquo;s main repository I keep forgetting how useful those tools can be even if they&amp;rsquo;re just being used locally.
I ran into a problem when trying to work out why a Rhino Mocks expectation wasn&amp;rsquo;t working as I expected last week having refactored a bit of code to include a constructor.
I wanted to include the Rhino Mocks source code in our solution before and after the refactoring and step through the code to see what was different in the way the expectations were being setup.</description>
    </item>
    
    <item>
      <title>Pulling from github on Windows</title>
      <link>https://markhneedham.com/blog/2009/08/18/pulling-from-github-on-windows/</link>
      <pubDate>Tue, 18 Aug 2009 00:33:11 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/08/18/pulling-from-github-on-windows/</guid>
      <description>My colleague Dave Cameronhas been telling me about his adventures playing around with Git Sharp(a C# port of the Java Git implementation jGit) so I thought I&amp;rsquo;d get a copy of the code and have a look as well.
I tend to check out all code bases from my host machine instead of virtual machine so I got the code all checked out on the Mac and accessed it via a shared folder on my VM.</description>
    </item>
    
  </channel>
</rss>