<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reading-code on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/tag/reading-code/</link>
    <description>Recent content in reading-code on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Feb 2013 23:12:49 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/tag/reading-code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reading Code: Assume it doesn&#39;t work</title>
      <link>https://www.markhneedham.com/blog/2013/02/27/reading-code-assume-it-doesnt-work/</link>
      <pubDate>Wed, 27 Feb 2013 23:12:49 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/02/27/reading-code-assume-it-doesnt-work/</guid>
      <description>Jae and I have spent a reasonable chunk of the past few weeks pairing on code that neither of us are familiar with and at times we’ve found it quite difficult to work out exactly what it’s supposed to be doing.
My default stance in this situation is to assume that the code is probably correct and then try and work out how that’s the case.
After I’d vocalised this a few times, Jae pointed out that we couldn’t be sure that the code worked and it didn’t make sense to start with that as an assumption.</description>
    </item>
    
    <item>
      <title>Reading Code: boilerpipe</title>
      <link>https://www.markhneedham.com/blog/2012/02/13/reading-code-boilerpipe/</link>
      <pubDate>Mon, 13 Feb 2012 21:16:24 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/02/13/reading-code-boilerpipe/</guid>
      <description>I’m a big fan of the iPad application Flipboard, especially it’s ability to filter out the non important content on web pages and just show me the main content so I’ve been looking around at open source libraries which provide that facility.
I came across a quora page where someone had asked how this was done and the suggested libraries were readability, Goose and boilerpipe.
boilerpipe was written by Christian Kohlschütter and has a corresponding paper and video as well.</description>
    </item>
    
    <item>
      <title>Reading Code: Know what you&#39;re looking for</title>
      <link>https://www.markhneedham.com/blog/2011/12/29/reading-code-know-what-youre-looking-for/</link>
      <pubDate>Thu, 29 Dec 2011 02:43:34 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2011/12/29/reading-code-know-what-youre-looking-for/</guid>
      <description>In the last week or so before Christmas I got the chance to spend some time pairing with my colleague Alex Harin while trying to understand how an existing application which we were investigating was written.
We knew from watching a demo of the application that the user was able to send some processing off to be done in the background and that they would be emailed once that had happened.</description>
    </item>
    
    <item>
      <title>Reading Code: underscore.js</title>
      <link>https://www.markhneedham.com/blog/2010/03/28/reading-code-underscore-js/</link>
      <pubDate>Sun, 28 Mar 2010 20:02:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/28/reading-code-underscore-js/</guid>
      <description>I’ve been spending a bit of time reading through the source code of underscore.js, a JavaScript library that provides lots of functional programming support which my colleague Dave Yeung pointed out to me after reading my post about building a small application with node.js.
I’m still getting used to the way that JavaScript libraries are written but these were some of the interesting things that I got from reading the code:</description>
    </item>
    
    <item>
      <title>Reading Code: Unity</title>
      <link>https://www.markhneedham.com/blog/2009/11/04/reading-code-unity/</link>
      <pubDate>Wed, 04 Nov 2009 01:22:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/11/04/reading-code-unity/</guid>
      <description>I spent a bit of time reading some of the Unity code base recently and I decided to try out a variation of Michael Feathers &amp;#39;Effect Sketching&amp;#39; which my colleague Dave Cameron showed me.
&amp;#39;Effect Sketching&amp;#39; is a technique Feathers describes in &amp;#39;Working Effectively With Legacy Code&amp;#39; and the idea is that we sketch a diagram showing the interactions between the fields and methods in a specific class while browsing through the code.</description>
    </item>
    
    <item>
      <title>Reading Code: Rhino Mocks</title>
      <link>https://www.markhneedham.com/blog/2009/07/28/reading-code-rhino-mocks/</link>
      <pubDate>Tue, 28 Jul 2009 00:05:11 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/07/28/reading-code-rhino-mocks/</guid>
      <description>I spent a bit of time recently reading through some of the Rhino Mocks to get a basic understanding of how some features work under the hood.
As well as just getting some practice at reading unfamiliar code I also wanted to know the following:
How does the &amp;#39;VerifyAllExpectations&amp;#39; extension method work?
What’s the difference between the &amp;#39;GenerateMock&amp;#39; and &amp;#39;GenerateStub&amp;#39; methods on MockRepository?
How does the &amp;#39;AssertWasNotCalled&amp;#39; extension method actually work?</description>
    </item>
    
  </channel>
</rss>
