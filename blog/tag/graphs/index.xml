<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>graphs on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/graphs/</link>
    <description>Recent content in graphs on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jul 2013 00:37:41 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/graphs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Graph Processing: Calculating betweenness centrality for an undirected graph using graphstream</title>
      <link>https://markhneedham.com/blog/2013/07/19/graph-processing-calculating-betweenness-centrality-for-an-undirected-graph-using-graphstream/</link>
      <pubDate>Fri, 19 Jul 2013 00:37:41 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/07/19/graph-processing-calculating-betweenness-centrality-for-an-undirected-graph-using-graphstream/</guid>
      <description>&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; &amp;lt;artifactId&amp;gt;my-gs-project&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;org.graphstream&amp;lt;/groupId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;name&amp;gt;my-gs-project&amp;lt;/name&amp;gt; &amp;lt;description/&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.graphstream&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;gs-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.graphstream&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;gs-algo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/project&amp;gt; A -&amp;gt; B: None A -&amp;gt; C: B A -&amp;gt; D: B, C A -&amp;gt; E: B, C, D B -&amp;gt; C: None B -&amp;gt; D: C B -&amp;gt; E: C, D C -&amp;gt; D: None C -&amp;gt; E: D D -&amp;gt; E: None A: 0 B: 3 C: 4 D: 3 E: 0 public class Spike { public static void main(String[] args) { Graph graph = new SingleGraph(&amp;#34;Tutorial 1&amp;#34;); Node A = graph.</description>
    </item>
    
    <item>
      <title>Bellman-Ford algorithm in Python</title>
      <link>https://markhneedham.com/blog/2013/01/18/bellman-ford-algorithm-in-python/</link>
      <pubDate>Fri, 18 Jan 2013 00:40:32 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/01/18/bellman-ford-algorithm-in-python/</guid>
      <description>import os file = open(os.path.dirname(os.path.realpath(__file__)) + &amp;#34;/g_small.txt&amp;#34;) vertices, edges = map(lambda x: int(x), file.readline().replace(&amp;#34;\n&amp;#34;, &amp;#34;&amp;#34;).split(&amp;#34; &amp;#34;)) adjacency_list = [[] for k in xrange(vertices)] for line in file.readlines(): tail, head, weight = line.split(&amp;#34; &amp;#34;) adjacency_list[int(head)-1].append({&amp;#34;from&amp;#34; : int(tail), &amp;#34;weight&amp;#34; : int(weight)}) s=0 cache = [[0 for k in xrange(vertices+1)] for j in xrange(vertices+1)] cache[0][s] = 0 for v in range(0, vertices): if v != s: cache[0][v] = float(&amp;#34;inf&amp;#34;) for i in range(1, vertices): for v in range(0, vertices): least_adjacent_cost = calculate_least_adjacent_cost(adjacency_list, i, v, cache[i-1]) cache[i][v] = min(cache[i-1][v], least_adjacent_cost) # detecting negative cycles for v in range(0, vertices): least_adjacent_cost = calculate_least_adjacent_cost(adjacency_list, i, v, cache[vertices-1]) cache[vertices][v] = min(cache[vertices-1][v], least_adjacent_cost) if(not cache[vertices] == cache[vertices-1]): raise Exception(&amp;#34;negative cycle detected&amp;#34;) shortest_path = min(cache[vertices-1]) print(&amp;#34;Shortest Path: &amp;#34; + str(shortest_path)) def calculate_least_adjacent_cost(adjacency_list, i, v, cache): adjacent_nodes = adjacency_list[v] least_adjacent_cost = float(&amp;#34;inf&amp;#34;) for node in adjacent_nodes: adjacent_cost = cache[node[&amp;#34;from&amp;#34;]-1] + node[&amp;#34;weight&amp;#34;] if adjacent_cost &amp;lt; least_adjacent_cost: least_adjacent_cost = adjacent_cost return least_adjacent_cost s=0 cache = [[] for j in xrange(vertices+1)] cache[s] = 0 for v in range(0, vertices): if v !</description>
    </item>
    
    <item>
      <title>gephi: Centring a graph around an individual node</title>
      <link>https://markhneedham.com/blog/2012/04/30/gephi-centring-a-graph-around-an-individual-node/</link>
      <pubDate>Mon, 30 Apr 2012 22:20:45 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/04/30/gephi-centring-a-graph-around-an-individual-node/</guid>
      <description>I spent some time recently playing around with gephi- an open source platform for creating visualisations of graphs - to get a bit more insight into the ThoughtWorks graph which I&amp;rsquo;ve created in neo4j.
I followed Max De Marxi&amp;rsquo;s blog postto create a GEFX (Graph Exchange XML Format) file to use in gephi although I later learned that you can import directly from neo4j into gephi which I haven&amp;rsquo;t tried yet.</description>
    </item>
    
  </channel>
</rss>