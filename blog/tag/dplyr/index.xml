<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dplyr on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/dplyr/</link>
    <description>Recent content in dplyr on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Jul 2015 05:55:33 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/dplyr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>R: dplyr - Error: cannot modify grouping variable</title>
      <link>https://markhneedham.com/blog/2015/07/09/r-dplyr-error-cannot-modify-grouping-variable/</link>
      <pubDate>Thu, 09 Jul 2015 05:55:33 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2015/07/09/r-dplyr-error-cannot-modify-grouping-variable/</guid>
      <description>I&amp;#8217;ve been doing some exploration of the posts made on this blog and I thought I&amp;#8217;d start with answering a simple question - on which dates did I write the most posts?
 I started with a data frame containing each post and the date it was published:
 &amp;gt; library(dplyr) &amp;gt; df %&amp;gt;% sample_n(5) title date 1148 Taiichi Ohno&#39;s Workplace Management: Book Review 2008-12-08 14:14:48 158 Rails: Faking a delete method with &#39;form_for&#39; 2010-09-20 18:52:15 331 Retrospectives: The 4 L&#39;s Retrospective 2011-07-25 21:00:30 1035 msbuild - Use OutputPath instead of OutDir 2008-08-14 18:54:03 1181 The danger of commenting out code 2009-01-17 06:02:33   To find the most popular days for blog posts we can write the following aggregation function:</description>
    </item>
    
    <item>
      <title>R: dplyr - segfault cause &#39;memory not mapped&#39;</title>
      <link>https://markhneedham.com/blog/2015/06/20/r-dplyr-segfault-cause-memory-not-mapped/</link>
      <pubDate>Sat, 20 Jun 2015 22:18:55 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2015/06/20/r-dplyr-segfault-cause-memory-not-mapped/</guid>
      <description>In my continued playing around with web logs in R I wanted to process the logs for a day and see what the most popular URIs were.
 I first read in all the lines using the read_lines function in readr and put the vector it produced into a data frame so I could process it using dplyr.
 library(readr) dlines = data.frame(column = read_lines(&#34;~/projects/logs/2015-06-18-22-docs&#34;))   In the previous post I showed some code to extract the URI from a log line.</description>
    </item>
    
    <item>
      <title>R: dplyr - removing empty rows</title>
      <link>https://markhneedham.com/blog/2015/06/02/r-dplyr-removing-empty-rows/</link>
      <pubDate>Tue, 02 Jun 2015 06:49:10 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2015/06/02/r-dplyr-removing-empty-rows/</guid>
      <description>I&amp;#8217;m still working my way through the exercises in Think Bayes and in Chapter 6 needed to do some cleaning of the data in a CSV file containing information about the Price is Right.
 I downloaded the file using wget:
 wget ￼http://www.greenteapress.com/thinkbayes/showcases.2011.csv￼   And then loaded it into R and explored the first few rows using dplyr
 library(dplyr) df2011 = read.csv(&#34;~/projects/rLearning/showcases.2011.csv&#34;) &amp;gt; df2011 %&amp;gt;% head(10) X Sep.</description>
    </item>
    
    <item>
      <title>R: dplyr - Select &#39;random&#39; rows from a data frame</title>
      <link>https://markhneedham.com/blog/2014/11/26/r-dplyr-select-random-rows-from-a-data-frame/</link>
      <pubDate>Wed, 26 Nov 2014 00:01:12 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2014/11/26/r-dplyr-select-random-rows-from-a-data-frame/</guid>
      <description>Frequently I find myself wanting to take a sample of the rows in a data frame where just taking the head isn&amp;#8217;t enough.
 Let&amp;#8217;s say we start with the following data frame:
 data = data.frame( letter = sample(LETTERS, 50000, replace = TRUE), number = sample (1:10, 50000, replace = TRUE) )   And we&amp;#8217;d like to sample 10 rows to see what it contains. We&amp;#8217;ll start by generating 10 random numbers to represent row numbers using the runif function:</description>
    </item>
    
    <item>
      <title>R: dplyr - &#34;Variables not shown&#34;</title>
      <link>https://markhneedham.com/blog/2014/11/23/r-dplyr-variables-not-shown/</link>
      <pubDate>Sun, 23 Nov 2014 01:02:06 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2014/11/23/r-dplyr-variables-not-shown/</guid>
      <description>I recently ran into a problem where the result of applying some operations to a data frame wasn&amp;#8217;t being output the way I wanted.
 I started with this data frame:
 words = function(numberOfWords, lengthOfWord) { w = c(1:numberOfWords) for(i in 1:numberOfWords) { w[i] = paste(sample(letters, lengthOfWord, replace=TRUE), collapse = &#34;&#34;) } w } numberOfRows = 100 df = data.frame(a = sample (1:numberOfRows, 10, replace = TRUE), b = sample (1:numberOfRows, 10, replace = TRUE), name = words(numberOfRows, 10))   I wanted to group the data frame by a and b and output a comma separated list of the associated names.</description>
    </item>
    
  </channel>
</rss>