<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jersey on Mark Needham</title>
    <link>https://markhneedham.com/blog/tag/jersey/</link>
    <description>Recent content in jersey on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Apr 2014 01:24:33 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/tag/jersey/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jersey/Jax RS: Streaming JSON</title>
      <link>https://markhneedham.com/blog/2014/04/30/jerseyjax-rs-streaming-json/</link>
      <pubDate>Wed, 30 Apr 2014 01:24:33 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2014/04/30/jerseyjax-rs-streaming-json/</guid>
      <description>@Path(&amp;#34;/resource&amp;#34;) public class MadeUpResource { private final ObjectMapper objectMapper; public MadeUpResource() { objectMapper = new ObjectMapper(); } @GET @Produces(MediaType.APPLICATION_JSON) public Response loadHierarchy(@PathParam( &amp;#34;pkPerson&amp;#34; ) String pkPerson) { final Map&amp;lt;Integer, String&amp;gt; people = new HashMap&amp;lt;&amp;gt;(); people.put(1, &amp;#34;Michael&amp;#34;); people.put(2, &amp;#34;Mark&amp;#34;); StreamingOutput stream = new StreamingOutput() { @Override public void write(OutputStream os) throws IOException, WebApplicationException { JsonGenerator jg = objectMapper.getJsonFactory().createJsonGenerator( os, JsonEncoding.UTF8 ); jg.writeStartArray(); for ( Map.Entry&amp;lt;Integer, String&amp;gt; person : people.entrySet() ) { jg.</description>
    </item>
    
    <item>
      <title>Jersey Client: java.net.ProtocolException: Server redirected too many times/Setting cookies on request</title>
      <link>https://markhneedham.com/blog/2013/08/17/jersey-client-java-net-protocolexception-server-redirected-too-many-timessetting-cookies-on-request/</link>
      <pubDate>Sat, 17 Aug 2013 20:25:28 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/08/17/jersey-client-java-net-protocolexception-server-redirected-too-many-timessetting-cookies-on-request/</guid>
      <description>Client = Client.create(); ClientResponse response = client.resource( &amp;#34;http://localhost:59680&amp;#34; ).get( ClientResponse.class ); com.sun.jersey.api.client.ClientHandlerException: java.net.ProtocolException: Server redirected too many times (20) at com.sun.jersey.client.urlconnection.URLConnectionClientHandler.handle(URLConnectionClientHandler.java:151) at com.sun.jersey.api.client.Client.handle(Client.java:648) at com.sun.jersey.api.client.WebResource.handle(WebResource.java:680) at com.sun.jersey.api.client.WebResource.get(WebResource.java:191) at com.neotechnology.testlab.manager.webapp.AuthenticationIntegrationTest.shouldRedirectToGitHubForAuthentication(AuthenticationIntegrationTest.java:81) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) at com.neotechnology.kirkaldy.testing.Resources$1.evaluate(Resources.java:84) at com.neotechnology.kirkaldy.testing.FailureOutput$2.evaluate(FailureOutput.java:37) at org.junit.rules.RunRules.evaluate(RunRules.java:18) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222) at org.junit.runners.ParentRunner.run(ParentRunner.java:300) at org.junit.runner.JUnitCore.run(JUnitCore.java:157) at com.</description>
    </item>
    
    <item>
      <title>Jersey Client: Testing external calls</title>
      <link>https://markhneedham.com/blog/2013/07/28/jersey-client-testing-external-calls/</link>
      <pubDate>Sun, 28 Jul 2013 20:43:24 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/07/28/jersey-client-testing-external-calls/</guid>
      <description>class Neo4jInstance { private Client httpClient; private URI hostname; public Neo4jInstance(Client httpClient, URI hostname) { this.httpClient = httpClient; this.hostname = hostname; } public Boolean isSlave() { String slaveURI = hostname.toString() + &amp;#34;:7474/db/manage/server/ha/slave&amp;#34;; ClientResponse response = httpClient.resource(slaveURI).accept(TEXT_PLAIN).get(ClientResponse.class); return Boolean.parseBoolean(response.getEntity(String.class)); } } @Test public void shouldIndicateInstanceIsSlave() { Client client = mock( Client.class ); WebResource webResource = mock( WebResource.class ); WebResource.Builder builder = mock( WebResource.Builder.class ); ClientResponse clientResponse = mock( ClientResponse.class ); when( builder.</description>
    </item>
    
    <item>
      <title>Jersey: Listing all resources, paths, verbs to build an entry point/index for an API</title>
      <link>https://markhneedham.com/blog/2013/07/21/jersey-listing-all-resources-paths-verbs-to-build-an-entry-pointindex-for-an-api/</link>
      <pubDate>Sun, 21 Jul 2013 11:07:11 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/07/21/jersey-listing-all-resources-paths-verbs-to-build-an-entry-pointindex-for-an-api/</guid>
      <description>AbstractResource resource = IntrospectionModeller.createResource(JacksonResource.class); System.out.println(&amp;#34;Path is &amp;#34; + resource.getPath().getValue()); String uriPrefix = resource.getPath().getValue(); for (AbstractSubResourceMethod srm :resource.getSubResourceMethods()) { String uri = uriPrefix + &amp;#34;/&amp;#34; + srm.getPath().getValue(); System.out.println(srm.getHttpMethod() + &amp;#34; at the path &amp;#34; + uri + &amp;#34; return &amp;#34; + srm.getReturnType().getName()); } Path is /jackson GET at the path /jackson/{who} return com.g414.j4.minimal.JacksonResource$Greeting GET at the path /jackson/awesome/{who} return javax.ws.rs.core.Response @Path(&amp;#34;/&amp;#34;) public class ResourceListingResource { @GET @Produces(MediaType.APPLICATION_JSON) public Response showAll( @Context Application application, @Context HttpServletRequest request) { String basePath = request.</description>
    </item>
    
    <item>
      <title>Jersey Server: com.sun.jersey.api.MessageException: A message body writer for Java class org.codehaus.jackson.node.ObjectNode and MIME media type application/json was not found</title>
      <link>https://markhneedham.com/blog/2013/07/21/jersey-server-com-sun-jersey-api-messageexception-a-message-body-writer-for-java-class-org-codehaus-jackson-node-objectnode-and-mime-media-type-applicationjson-was-not-found/</link>
      <pubDate>Sun, 21 Jul 2013 10:37:45 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/07/21/jersey-server-com-sun-jersey-api-messageexception-a-message-body-writer-for-java-class-org-codehaus-jackson-node-objectnode-and-mime-media-type-applicationjson-was-not-found/</guid>
      <description>@Path(&amp;#34;/jackson&amp;#34;) public class JacksonResource { @GET @Produces( { MediaType.APPLICATION_JSON }) @Path(&amp;#34;/awesome/{who}&amp;#34;) public Response sayOtherGreeting(@PathParam(&amp;#34;who&amp;#34;) String name) { ObjectNode result = JsonNodeFactory.instance.objectNode(); result.put(&amp;#34;name&amp;#34;, name); return Response.ok().entity(result).build(); } } SEVERE: The registered message body writers compatible with the MIME media type are: application/json -&amp;gt; com.sun.jersey.json.impl.provider.entity.JSONJAXBElementProvider$App com.sun.jersey.json.impl.provider.entity.JSONArrayProvider$App com.sun.jersey.json.impl.provider.entity.JSONObjectProvider$App com.sun.jersey.json.impl.provider.entity.JSONRootElementProvider$App com.sun.jersey.json.impl.provider.entity.JSONListElementProvider$App */* -&amp;gt; com.sun.jersey.core.impl.provider.entity.FormProvider com.sun.jersey.server.impl.template.ViewableMessageBodyWriter com.sun.jersey.core.impl.provider.entity.StringProvider com.sun.jersey.core.impl.provider.entity.ByteArrayProvider com.sun.jersey.core.impl.provider.entity.FileProvider com.sun.jersey.core.impl.provider.entity.InputStreamProvider com.sun.jersey.core.impl.provider.entity.DataSourceProvider com.sun.jersey.core.impl.provider.entity.XMLJAXBElementProvider$General com.sun.jersey.core.impl.provider.entity.ReaderProvider com.sun.jersey.core.impl.provider.entity.DocumentProvider com.sun.jersey.core.impl.provider.entity.StreamingOutputProvider com.sun.jersey.core.impl.provider.entity.SourceProvider$SourceWriter com.sun.jersey.json.impl.provider.entity.JSONJAXBElementProvider$General com.sun.jersey.json.impl.provider.entity.JSONArrayProvider$General com.sun.jersey.json.impl.provider.entity.JSONObjectProvider$General com.sun.jersey.json.impl.provider.entity.JSONWithPaddingProvider com.sun.jersey.core.impl.provider.entity.XMLRootElementProvider$General com.sun.jersey.core.impl.provider.entity.XMLListElementProvider$General com.sun.jersey.json.impl.provider.entity.JSONRootElementProvider$General com.sun.jersey.json.impl.provider.entity.JSONListElementProvider$General com.sun.jersey.json.impl.provider.entity.JacksonProviderProxy Jul 21, 2013 11:11:17 AM com.</description>
    </item>
    
    <item>
      <title>Jersey: com.sun.jersey.api.client.ClientHandlerException: A message body reader for Java class [...] and MIME media type application/json was not found</title>
      <link>https://markhneedham.com/blog/2012/11/28/jersey-com-sun-jersey-api-client-clienthandlerexception-a-message-body-reader-for-java-class-and-mime-media-type-applicationjson-was-not-found/</link>
      <pubDate>Wed, 28 Nov 2012 06:03:55 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/11/28/jersey-com-sun-jersey-api-client-clienthandlerexception-a-message-body-reader-for-java-class-and-mime-media-type-applicationjson-was-not-found/</guid>
      <description>We&amp;rsquo;ve used the Jerseylibrary on the last couple of Java based applications that I&amp;rsquo;ve worked on and one thing we&amp;rsquo;ve done on both of them is write services that communicate with each other using JSON.
On both occasions we didn&amp;rsquo;t quite setup the Jersey client correctly and ended up with an error along these lines when making a call to an end point:
com.sun.jersey.api.client.ClientHandlerException: A message body reader for Java class java.</description>
    </item>
    
  </channel>
</rss>