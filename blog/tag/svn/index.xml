<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Svn on Mark Needham</title>
    <link>https://mneedham.github.io/blog/tag/svn/</link>
    <description>Recent content in Svn on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Oct 2008 21:10:27 +0000</lastBuildDate>
    
	<atom:link href="https://mneedham.github.io/blog/tag/svn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ignore file in Svn</title>
      <link>https://mneedham.github.io/blog/2008/10/02/ignore-file-in-svn/</link>
      <pubDate>Thu, 02 Oct 2008 21:10:27 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/10/02/ignore-file-in-svn/</guid>
      <description>I spent a bit of time this afternoon marveling at the non intuitiveness of working out how to ignore files in Svn.
Normally I&amp;rsquo;d just use Tortoise SVN as it makes it so easy for you but I really wanted to know how to do it from the shell!
After a bit of Googling and conversation with a colleague I think I have it figured out to some extent.
Ignoring just one file or pattern If you only have one pattern or file that you want to ignore then the following command should do the trick.</description>
    </item>
    
    <item>
      <title>Getting latest tagged revision in SVN from DOS/Batch script</title>
      <link>https://mneedham.github.io/blog/2008/08/16/getting-latest-tagged-revision-in-svn-from-dosbatch-script/</link>
      <pubDate>Sat, 16 Aug 2008 00:10:51 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/08/16/getting-latest-tagged-revision-in-svn-from-dosbatch-script/</guid>
      <description>The way we have setup the build on our continuous integration server, Team City is configured to create a new tag every time the functional tests past successful on that machine.
We then have a QA and Showcase build that we can run to deploy all the artifacts necessary to launch the application on that machine.
Originally I had just written the batch script to take in the tag of the build which the user could find by looking through repo-browser for the last tag created.</description>
    </item>
    
  </channel>
</rss>