+++
draft = false
date="2008-12-02 21:18:54"
title="What are your personal practices?"
tag=['coding']
category=['Coding', 'Software Development']
+++

I've been reviewing <a href="http://apprenticeship.oreilly.com/wiki">Apprenticeship Patterns</a> over the last week or so and one of the cool ideas I came across is that of creating a <a href="http://www.xpdeveloper.net/xpdwiki/Wiki.jsp?page=PersonalPracticesMap">Personal Practices Map</a>.

The idea is that you draw up a list of your 10 most important practices for coding and design and draw out any relationships between them.

This is mine as of now:

<img src="http://www.markhneedham.com/blog/wp-content/uploads/2008/12/personal-practices.jpg" alt="personal-practices.jpg" border="0" />

I wouldn't say I follow all of these all the time, but they are the practices that I try to follow whenever possible.

Why these?

<ul>
<li><strong>Separation of concerns</strong> - code is much easier to test and understand when everything is in the right place.</li>
<li><strong>Keep behaviour with data</strong> - again makes the code easier to understand but also makes it easier to change later on as the code is in nice cohesive units.</li>
<li><strong>Intention revealing methods</strong> - should be able to tell what the code does without having to go into the method to work it out. Makes browsing of code much quicker.</li>
<li><strong>Compose Method </strong>- the best way to make code more readable from my experience. Helps keep methods short and easy to follow.</li>
<li><strong>Keep it simple</strong> - don't do something clever when something simple solves the same problem. Easier said than done.</li>
<li><strong>Avoid debugger</strong> - the debugger is invaluable when tracing through 3rd party code but with our own code we should test it well enough that we don't need to use the debugger often. Ideas like the <a href="http://www.markhneedham.com/blog/2008/11/21/saff-squeeze-first-thoughts/">Saff Squeeze</a> can help achieve this.</li>
<li><strong>Short feedback loops</strong> - keeping the steps as small as possible whatever we are doing is vital for making progress I've found. Every time I try to be clever and do two things in one step it ends up taking much more time than taking small steps would have done.</li>
<li><strong>Always test first</strong> - I wrote last week about the <a href="http://www.markhneedham.com/blog/2008/11/28/tdd-suffering-from-testing-last/">pain of testing last</a> and writing code without having a test to verify whether what you've done actually works is something I find very difficult. Code without tests to tell us whether it actually does what we want it to is a disaster waiting to happen in my book.</li>
<li><strong>Understand how it fits together</strong> - Understanding how different parts of a design fit together is important for knowing how to solve any problems that pop up and also useful for understanding the big picture and why certain decisions were made.</li>
<li><strong>Learning by teaching</strong> - I've found this is the most effective method for knowing whether you truly understand something or not. Having to explain it to someone else requires you to not only understand something but be able to articulate it in a way that someone else can understand.</li>
</ul>

