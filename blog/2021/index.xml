<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2021s on Mark Needham</title>
    <link>https://markhneedham.com/blog/2021/</link>
    <description>Recent content in 2021s on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 17 Apr 2021 00:44:37 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/2021/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exploring England&#39;s Covid Vaccination Rates: The Data (cleanup)</title>
      <link>https://markhneedham.com/blog/2021/04/17/england-covid-vaccination-rates-the-data/</link>
      <pubDate>Sat, 17 Apr 2021 00:44:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2021/04/17/england-covid-vaccination-rates-the-data/</guid>
      <description>Over the last 13 months I&amp;#8217;ve spent countless hours looking at dashboards that showed Coronavirus infection rates, death rates, and numbers of people vaccinated. The UK government host a dashbaord at https://coronavirus.data.gov.uk, which contains charts and tables showing all of the above. One thing I haven&amp;#8217;t been able to find, however, is a drill down of vaccinations by local area and age group.
 This is the first in a series of blog posts showing how to build one, and we&amp;#8217;ll be looking at how to get the data and get it into a format that&amp;#8217;s easier to process.</description>
    </item>
    
    <item>
      <title>Pandas - Format DataFrame numbers with commas and control decimal places</title>
      <link>https://markhneedham.com/blog/2021/04/11/pandas-format-dataframe-numbers-commas-decimals/</link>
      <pubDate>Sun, 11 Apr 2021 00:44:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2021/04/11/pandas-format-dataframe-numbers-commas-decimals/</guid>
      <description>I&amp;#8217;m still playing around with the UK&amp;#8217;s COVID-19 vaccination data and in this blog post we&amp;#8217;ll learn how to format a DataFrame that contains a mix of string and numeric values.
 We&amp;#8217;ll be using Pandas&#39; styling functionality, which generates CSS and HTML, so if you want to follow along you&amp;#8217;ll need to install Pandas and Jupyter:
 pip install pandas jupyter   Next, launch Jupyter and create a notebook:</description>
    </item>
    
    <item>
      <title>Pandas - Dividing two DataFrames (TypeError: unsupported operand type(s) for /: &#39;str&#39; and &#39;str&#39;)</title>
      <link>https://markhneedham.com/blog/2021/04/08/pandas-divide-dataframes-unsupported-operand-type-str/</link>
      <pubDate>Thu, 08 Apr 2021 00:44:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2021/04/08/pandas-divide-dataframes-unsupported-operand-type-str/</guid>
      <description>I&amp;#8217;ve been doing some more exploration of the UK Coronavirus vaccine data, this time looking at the number of people vaccinated by Local Tier Local Authority. The government publish data showing the number of people vaccinated in each authority by age group, as well as population estimates for each cohort.
 Having loaded that data into two Pandas DataFrames, I wanted to work out the % of people vaccinated per age group per local area.</description>
    </item>
    
    <item>
      <title>Altair - Remove margin/padding on discrete X axis</title>
      <link>https://markhneedham.com/blog/2021/04/02/altair-discrete-x-axis-margin-padding/</link>
      <pubDate>Fri, 02 Apr 2021 00:44:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2021/04/02/altair-discrete-x-axis-margin-padding/</guid>
      <description>One of the Altair charts on my Covid Vaccine Dashboards Streamlit app shows the % of first doses, but when I first created it there was some padding on the X axis that I wanted to remove. In this blog post we&amp;#8217;ll learn how to do that.
 Pre requisites Let&amp;#8217;s start by installing the following libraries:
 pip install pandas altair altair_viewer   Next let&amp;#8217;s import them, as shown below:</description>
    </item>
    
    <item>
      <title>Pandas: Filter column value in array/list - ValueError: The truth value of a Series is ambiguous</title>
      <link>https://markhneedham.com/blog/2021/03/28/pandas-column-value-in-array-list-truth-value-ambiguous/</link>
      <pubDate>Sun, 28 Mar 2021 00:44:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2021/03/28/pandas-column-value-in-array-list-truth-value-ambiguous/</guid>
      <description>The UK government publishes Coronavirus vaccinations data on coronavirus.data.gov.uk, but I wanted to create some different visualisations so I downloaded the data and have been playing with it in the mneedham/covid-vaccines GitHub repository.
 I massaged the data so that I have rows in a Pandas DataFrame representing the numbers of first doses, second doses, and total doses done each day. I then wanted to filter this DataFrame based on the type of dose, but initially got a bit stuck.</description>
    </item>
    
    <item>
      <title>Neo4j Graph Data Science 1.5: Exploring the Speaker-Listener LPA Overlapping Community Detection Algorithm</title>
      <link>https://markhneedham.com/blog/2021/02/08/neo4j-gdsl-overlapping-community-detection-sllpa/</link>
      <pubDate>Mon, 08 Feb 2021 00:44:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2021/02/08/neo4j-gdsl-overlapping-community-detection-sllpa/</guid>
      <description>The Neo4j Graph Data Science Library provides efficiently implemented, parallel versions of common graph algorithms for Neo4j, exposed as Cypher procedures. It recently published version 1.5, which introduces some fun new algorithms.
   In this blog post, we&amp;#8217;re going to explore the newly added Speaker-Listener Label Propagation algorithm with the help of a twitter dataset.
 Launching Neo4j We&amp;#8217;re going to run Neo4j with the Graph Data Science Library using the following Docker Compose configuration:</description>
    </item>
    
    <item>
      <title>Neo4j Graph Data Science 1.5: Exploring the HITS Algorithm</title>
      <link>https://markhneedham.com/blog/2021/02/03/neo4j-gdsl-hits-algorithm/</link>
      <pubDate>Wed, 03 Feb 2021 00:44:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2021/02/03/neo4j-gdsl-hits-algorithm/</guid>
      <description>The Neo4j Graph Data Science Library provides efficiently implemented, parallel versions of common graph algorithms for Neo4j, exposed as Cypher procedures. It recently published version 1.5, which has lots of goodies to play with.
   In this blog post, we&amp;#8217;re going to explore the newly added HITS algorithm with the help of a citations dataset.
 Launching Neo4j We&amp;#8217;re going to run Neo4j with the Graph Data Science Library using the following Docker Compose configuration:</description>
    </item>
    
    <item>
      <title>Materialize: Creating multiple views on one source</title>
      <link>https://markhneedham.com/blog/2021/01/28/materialize-multiple-views-one-source/</link>
      <pubDate>Thu, 28 Jan 2021 00:44:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2021/01/28/materialize-multiple-views-one-source/</guid>
      <description>This is another post describing my exploration of Materialize, a SQL streaming database. In this post we&amp;#8217;re going to learn how to create multiple views on top of the same underlying source.
   We&amp;#8217;re still going to be using data extracted from Strava, an app that I use to record my runs, but this time we have more detailed information about each run. As in the previous blog posts, each run is represented as JSON document and store in the activities-detailed-all.</description>
    </item>
    
  </channel>
</rss>