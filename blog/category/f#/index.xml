<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>F# on Mark Needham</title>
    <link>https://mneedham.github.io/blog/category/f#/</link>
    <description>Recent content in F# on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Jun 2010 22:35:14 +0000</lastBuildDate>
    
	<atom:link href="https://mneedham.github.io/blog/category/f#/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C#: A failed attempt at F#-ish pattern matching</title>
      <link>https://mneedham.github.io/blog/2010/06/13/c-a-failed-attempt-at-f-ish-pattern-matching/</link>
      <pubDate>Sun, 13 Jun 2010 22:35:14 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/06/13/c-a-failed-attempt-at-f-ish-pattern-matching/</guid>
      <description>A few weeks ago we had some C# code around calcuations which had got a bit too imperative in nature.
The code looked roughly like this:
public class ACalculator { public double CalculateFrom(UserData userData) { if(userData.Factor1 == Factor1.Option1) { return 1.0; } if(userData.Factor2 == Factor2.Option3) { return 2.0; } if(userData.Factor3 == Factor3.Option2) { return 3.0 } return 0.0; } }  I think there should be a more object oriented way to write this code whereby we push some of the logic onto the &amp;lsquo;UserData&amp;rsquo; object but it struck me that it reads a little bit like pattern matching code you might see in F#.</description>
    </item>
    
    <item>
      <title>F#: Tacit programming</title>
      <link>https://mneedham.github.io/blog/2010/05/10/f-tacit-programming/</link>
      <pubDate>Mon, 10 May 2010 23:24:39 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/05/10/f-tacit-programming/</guid>
      <description>I recently came across the idea of tacit programming which is described as such:
 Tacit programming is a programming paradigm in which a function definition does not include information regarding its arguments, using combinators and function composition (but not Î»-abstraction) instead of variables. The simplicity behind this idea allows its use on several programming languages, such as J programming language and APL and especially in stack or concatenative languages, such as PostScript, Forth, Joy or Factor.</description>
    </item>
    
    <item>
      <title>F#: My current coding approach</title>
      <link>https://mneedham.github.io/blog/2010/05/06/f-my-current-coding-approach/</link>
      <pubDate>Thu, 06 May 2010 23:36:26 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/05/06/f-my-current-coding-approach/</guid>
      <description>I spent a bit of time over the weekend coding a simple generic builder for test objects in F# and I noticed that although there were similarity with the ways I drive code in C# or Java my approach didn&amp;rsquo;t seem to be exactly the same.
I&amp;rsquo;ve previously written about the importance of getting quick feedback when programming and how I believe that this can often be achieved faster by using the REPL rather than unit testing.</description>
    </item>
    
    <item>
      <title>F#: The Kestrel Revisited</title>
      <link>https://mneedham.github.io/blog/2010/05/04/f-the-kestrel-revisited/</link>
      <pubDate>Tue, 04 May 2010 18:36:58 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/05/04/f-the-kestrel-revisited/</guid>
      <description>A couple of days I wrote about a &amp;lsquo;returning&amp;rsquo; function that I&amp;rsquo;d written to simplify a bit of F# code that I&amp;rsquo;ve been working on.
It&amp;rsquo;s defined like so:
let returning t f = f(t); t  And can then be used like this:
let build (t:Type) = returning (Activator.CreateInstance(t)) (fun t -&amp;gt; t.GetType().GetProperties() |&amp;gt; Array.iter (fun p -&amp;gt; p.SetValue(t, createValueFor p, null)))  While I quite like this function it didn&amp;rsquo;t quite feel like idiomatic F# to me.</description>
    </item>
    
    <item>
      <title>F#: The &#39;defaultArg&#39; function</title>
      <link>https://mneedham.github.io/blog/2010/04/12/f-the-defaultarg-function/</link>
      <pubDate>Mon, 12 Apr 2010 18:21:41 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/04/12/f-the-defaultarg-function/</guid>
      <description>While reading through an old blog post by Matthew Podwysocki about writing F# code in a functional rather than imperative way I came across the &amp;lsquo;defaultArg&amp;rsquo; function which I haven&amp;rsquo;t seen previously.
It&amp;rsquo;s quite a simple function that we can use when we want to set a default value if an option type has a value of &amp;lsquo;None&amp;rsquo;:
The type signature is as follows:
&amp;gt; defaultArg;; val it : (&#39;a option -&amp;gt; &#39;a -&amp;gt; &#39;a) = &amp;lt;fun:clo@0&amp;gt;  And the definition is relatively simple:</description>
    </item>
    
    <item>
      <title>F#: Passing an argument to a member constraint</title>
      <link>https://mneedham.github.io/blog/2010/02/15/f-passing-an-argument-to-a-member-constraint/</link>
      <pubDate>Mon, 15 Feb 2010 00:05:17 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/02/15/f-passing-an-argument-to-a-member-constraint/</guid>
      <description>I&amp;rsquo;ve written previously about function overloading in F# and my struggles working out how to do it and last week I came across the concept of inline functions and statically resolved parameters as a potential way to solve that problem.
I came across a problem where I thought I would be able to make use of this while playing around with some code parsing Xml today.
I had a &amp;lsquo;descendants&amp;rsquo; function which I wanted to be applicable against &amp;lsquo;XDocument&amp;rsquo; and &amp;lsquo;XElement&amp;rsquo; so I originally just defined the functions separately forgetting that the compiler wouldn&amp;rsquo;t allow me to do so as we would have a duplicate definition of the function:</description>
    </item>
    
    <item>
      <title>F#: Unexpected identifier in implementation file</title>
      <link>https://mneedham.github.io/blog/2010/02/14/f-unexpected-identifier-in-implementation-file/</link>
      <pubDate>Sun, 14 Feb 2010 01:03:34 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/02/14/f-unexpected-identifier-in-implementation-file/</guid>
      <description>I&amp;rsquo;ve been playing around with some F# code this evening and one of the bits of code needs to make a HTTP call and return the result.
I wrote this code and then tried to make use of the &amp;lsquo;Async.RunSynchronously&amp;rsquo; function to execute the call.
The code I had looked roughly like this:
namespace Twitter module RetrieveLinks open System.Net open System.IO open System.Web open Microsoft.FSharp.Control let AsyncHttp (url:string) = async { let request = HttpWebRequest.</description>
    </item>
    
    <item>
      <title>F#: Inline functions and statically resolved type parameters</title>
      <link>https://mneedham.github.io/blog/2010/02/10/f-inline-functions-and-statically-resolved-type-parameters/</link>
      <pubDate>Wed, 10 Feb 2010 23:06:14 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/02/10/f-inline-functions-and-statically-resolved-type-parameters/</guid>
      <description>One thing which I&amp;rsquo;ve often wondered when playing around with F# is that when writing the following function the type of the function is inferred to be &amp;lsquo;int -&amp;gt; int -&amp;gt; int&amp;rsquo; rather than allowing any values which can be added together:
let add x y = x + y &amp;gt; val add : int -&amp;gt; int -&amp;gt; int  It turns out if you use the &amp;lsquo;inline&amp;rsquo; keyword then the compiler does exactly what we want:</description>
    </item>
    
    <item>
      <title>F#: function keyword</title>
      <link>https://mneedham.github.io/blog/2010/02/07/f-function-keyword/</link>
      <pubDate>Sun, 07 Feb 2010 02:54:13 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/02/07/f-function-keyword/</guid>
      <description>I&amp;rsquo;ve been browsing through Chris Smith&amp;rsquo;s Programming F# book and in the chapter on pattern matching he describes the &amp;lsquo;function&amp;rsquo; key word which I haven&amp;rsquo;t used before.
It&amp;rsquo;s used in pattern matching expressions when we want to match against one of the parameters passed into the function which contains the pattern match.
For example if we have this somewhat contrived example:
let isEven value = match value with | x when (x % 2) = 0 -&amp;gt; true | _ -&amp;gt; false  That could be rewritten using the function keyword to the following:</description>
    </item>
    
    <item>
      <title>F#: Refactoring to sequence/for expressions</title>
      <link>https://mneedham.github.io/blog/2010/01/14/f-refactoring-to-sequencefor-expressions/</link>
      <pubDate>Thu, 14 Jan 2010 08:01:29 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/01/14/f-refactoring-to-sequencefor-expressions/</guid>
      <description>Since I started playing around with F# one of the things I&amp;rsquo;ve been trying to do is not use the &amp;lsquo;for&amp;rsquo; keyword because I was trying to avoid writing code in an imperative way and for loops are a big part of this for me.
Having read Jon Harrop&amp;rsquo;s solution to the word count problem where he made use of both sequence and for expressions I thought it&amp;rsquo;d be intersting to see what some of the code I&amp;rsquo;ve written would look like using that approach.</description>
    </item>
    
    <item>
      <title>F#: Refactoring to pattern matching</title>
      <link>https://mneedham.github.io/blog/2010/01/12/f-refactoring-to-pattern-matching/</link>
      <pubDate>Tue, 12 Jan 2010 01:33:58 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/01/12/f-refactoring-to-pattern-matching/</guid>
      <description>I was looking through some of the F# code I&amp;rsquo;ve written recently and I realised that I was very much writing C# in F# with respect to the number of if statements I&amp;rsquo;ve been using.
I thought it would be interesting to see what the code would look like if I was able to refactor some of that code to make use of pattern matching instead which would be a more idiomatic way of solving the problem in F#.</description>
    </item>
    
    <item>
      <title>Roy Osherove&#39;s TDD Kata: An F# attempt</title>
      <link>https://mneedham.github.io/blog/2010/01/10/roy-osheroves-tdd-kata-an-f-attempt/</link>
      <pubDate>Sun, 10 Jan 2010 01:46:07 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/01/10/roy-osheroves-tdd-kata-an-f-attempt/</guid>
      <description>As I&amp;rsquo;ve mentioned in a few of my recent posts I&amp;rsquo;ve been having another go at Roy Osherove&amp;rsquo;s TDD Kata but this time in F#.
One thing I&amp;rsquo;ve been struggling with when coding in F# is working out how many intermediate variables we actually need. They can be useful for expressing intent better but they&amp;rsquo;re clutter in a way.
I&amp;rsquo;ve included my solution at the end and in the active pattern which determines whether or not we have a custom delimeter defined in our input string I can&amp;rsquo;t decide whether or not to create a value to represent the expressions that determine that.</description>
    </item>
    
    <item>
      <title>F#: Refactoring to active patterns</title>
      <link>https://mneedham.github.io/blog/2010/01/07/f-refactoring-to-active-patterns/</link>
      <pubDate>Thu, 07 Jan 2010 23:31:37 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/01/07/f-refactoring-to-active-patterns/</guid>
      <description>I&amp;rsquo;ve been playing around with more F# code and after realising that I&amp;rsquo;d peppered the code with if statements I thought it would be interesting to try and refactor it to make use of active patterns.
The code is part of my F# solution to Roy Osherove&amp;rsquo;s TDD Kata and is used to parse the input string and find which delimeters are being used.
This is the original code:
let hasCustomDelimeter (value:string) = value.</description>
    </item>
    
    <item>
      <title>F#: String.Split with a multi character delimeter</title>
      <link>https://mneedham.github.io/blog/2010/01/05/f-string-split-with-a-multi-character-delimeter/</link>
      <pubDate>Tue, 05 Jan 2010 23:10:56 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/01/05/f-string-split-with-a-multi-character-delimeter/</guid>
      <description>In my continued efforts at Roy Osherove&amp;rsquo;s TDD Kata I&amp;rsquo;ve been trying to work out how to split a string based on a delimeter which contains more than one character.
My original thinking was that it should be possible to do so like this:
&amp;quot;1***2&amp;quot;.Split(&amp;quot;***&amp;quot;.ToCharArray());;  I didn&amp;rsquo;t realise that splitting the string like that splits on each of the stars individually which means that we end up getting 2 empty values in the result:</description>
    </item>
    
    <item>
      <title>F#: Expressing intent and the forward/application operators</title>
      <link>https://mneedham.github.io/blog/2010/01/04/f-expressing-intent-and-the-forwardapplication-operators/</link>
      <pubDate>Mon, 04 Jan 2010 11:11:10 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/01/04/f-expressing-intent-and-the-forwardapplication-operators/</guid>
      <description>A while ago I wrote about F#&amp;rsquo;s forward and application operators where I&amp;rsquo;d looked at how these could be used to simplify code and while trying out Roy Osherove&amp;rsquo;s TDD Kata I realised that perhaps the choice of which of these to use or whether to use them at all depends on what intent we&amp;rsquo;re expressing.
The specific bit of code I was writing was for raising an exception if negative values were provided and I originally thought I&amp;rsquo;d use the forward operator to express this code:</description>
    </item>
    
    <item>
      <title>F#: Word Count using a Dictionary</title>
      <link>https://mneedham.github.io/blog/2009/12/20/f-word-count-using-a-dictionary/</link>
      <pubDate>Sun, 20 Dec 2009 10:09:30 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/12/20/f-word-count-using-a-dictionary/</guid>
      <description>Having spent some time unsuccessfully trying to make my F# attempt at the word count problem work I decided to follow the lead of the other examples I&amp;rsquo;ve read and make use of a Dictionary to keep count of the words.
I originally thought that I might be having a problem with the downloading of the files and storing of those strings in memory so I tried to change that bit of code to be lazily evaluated:</description>
    </item>
    
    <item>
      <title>F#: The use keyword and using function</title>
      <link>https://mneedham.github.io/blog/2009/12/19/f-the-use-keyword-and-using-function/</link>
      <pubDate>Sat, 19 Dec 2009 10:33:57 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/12/19/f-the-use-keyword-and-using-function/</guid>
      <description>While I was playing around with the little F# script that I wrote to try and solve the word count problem I noticed that in a couple of places I had used the &amp;lsquo;use&amp;rsquo; keyword when dealing with resources that needed to be released when they&amp;rsquo;d been used.
Using the &amp;lsquo;use&amp;rsquo; keyword means that the &amp;lsquo;Dispose&amp;rsquo; method will be called on the resource when it goes out of scope.
The two examples were &amp;lsquo;StreamWriter&amp;rsquo; and &amp;lsquo;StreamReader&amp;rsquo;:</description>
    </item>
    
    <item>
      <title>F#: Word Count - A somewhat failed attempt</title>
      <link>https://mneedham.github.io/blog/2009/12/18/f-word-count-a-somewhat-failed-attempt/</link>
      <pubDate>Fri, 18 Dec 2009 02:58:34 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/12/18/f-word-count-a-somewhat-failed-attempt/</guid>
      <description>I came across Zach Cox&amp;rsquo;s word count problem via Sam Aaron and Ola Bini&amp;rsquo;s twitter streams and I thought it&amp;rsquo;d be interesting to try it out in F# to see what the solution would be like.
The solution needs to count word frequencies from a selection of newsgroup articles.
I wanted to see if it was possible to write it in F# without using a map to keep track of how many of each word had been found.</description>
    </item>
    
    <item>
      <title>Haskell vs F#: Function composition</title>
      <link>https://mneedham.github.io/blog/2009/12/09/haskell-vs-f-function-composition/</link>
      <pubDate>Wed, 09 Dec 2009 22:10:27 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/12/09/haskell-vs-f-function-composition/</guid>
      <description>I&amp;rsquo;m reading through John Hughes&amp;rsquo; &amp;lsquo;Why functional programming matters&amp;rsquo; paper and one thing I&amp;rsquo;ve come across which is a bit counter intuitive to me is the Haskell function composition operator.
I&amp;rsquo;ve written previously about F#&amp;rsquo;s function composition operator which is defined as follows:
let inline (&amp;gt;&amp;gt;) f g x = g(f x)  To write a function which doubled all the values in a list and then returned the odd values we&amp;rsquo;d do this:</description>
    </item>
    
    <item>
      <title>F#: Playing around with asynchronous workflows</title>
      <link>https://mneedham.github.io/blog/2009/07/26/f-playing-around-with-asynchronous-workflows/</link>
      <pubDate>Sun, 26 Jul 2009 23:45:14 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/07/26/f-playing-around-with-asynchronous-workflows/</guid>
      <description>I spent a bit of time over the weekend playing around with F# asynchronous workflows and seeing how they could be used to launch Firefox windows asynchronously for my FeedBurner graph creator.
Initially I decided to try out the &amp;lsquo;Async.RunWithContinuations&amp;rsquo; function which I recently read about on Matthew Podwysocki&amp;rsquo;s blog.
Matthew describes this as being a function which is useful for executing a single operation asynchronously and this worked out quite well for me as my application only has the ability to get one feed and then create a graph from its data.</description>
    </item>
    
    <item>
      <title>F#: Values, functions and DateTime</title>
      <link>https://mneedham.github.io/blog/2009/07/25/f-values-functions-and-datetime/</link>
      <pubDate>Sat, 25 Jul 2009 14:10:45 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/07/25/f-values-functions-and-datetime/</guid>
      <description>One of the things I&amp;rsquo;ve noticed recently in my playing around with F# is that when we decide to wrap calls to the .NET DateTime methods there is a need to be quite careful that we are wrapping those calls with an F# function and not an F# value.
If we don&amp;rsquo;t do this then the DateTime method will only be evaluated once and then return the same value for every call which is probably not the behaviour we&amp;rsquo;re looking for.</description>
    </item>
    
    <item>
      <title>F#: Active patterns for parsing xml</title>
      <link>https://mneedham.github.io/blog/2009/07/19/f-active-patterns-for-parsing-xml/</link>
      <pubDate>Sun, 19 Jul 2009 12:12:13 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/07/19/f-active-patterns-for-parsing-xml/</guid>
      <description>I decided to spend some time doing some refactoring on the FeedBurner application that I started working on last week and the first area I worked on was cleaning up the way that the xml we get from FeedBurner is parsed.
While playing around with the application from the command line I realised that it didn&amp;rsquo;t actually cover error conditions - such as passing in an invalid feed name - very well and I thought this would be a good opportunity to make use of an active pattern to handle this.</description>
    </item>
    
    <item>
      <title>F#: Passing command line arguments to a script</title>
      <link>https://mneedham.github.io/blog/2009/07/16/f-passing-command-line-arguments-to-a-script/</link>
      <pubDate>Thu, 16 Jul 2009 07:40:18 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/07/16/f-passing-command-line-arguments-to-a-script/</guid>
      <description>I&amp;rsquo;ve been doing a bit of refactoring of my FeedBurner application so that I can call it from the command line with the appropriate arguments and one of the problems I came across is working out how to pass arguments from the command line into an F# script.
With a compiled application we are able to make use of the &amp;lsquo;EntryPointAttribute&amp;rsquo; to get access to the arguments passed in:
[&amp;lt;EntryPointAttribute&amp;gt;] let main args = ShowFeedBurnerStats args 0  Sadly this doesn&amp;rsquo;t work with a script but it was pointed out on Hub FS that we can get access to all the command line arguments by using &amp;lsquo;Sys.</description>
    </item>
    
    <item>
      <title>F#: A day writing a Feedburner graph creator</title>
      <link>https://mneedham.github.io/blog/2009/07/12/f-a-day-writing-a-feedburner-graph-creator/</link>
      <pubDate>Sun, 12 Jul 2009 17:14:13 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/07/12/f-a-day-writing-a-feedburner-graph-creator/</guid>
      <description>I&amp;rsquo;ve spent a bit of the day writing a little application to take the xml from my Feedburner RSS feed and create a graph showing the daily &amp;amp; weekly average subscribers.
What did I learn?  I decided that I wanted to parameterise the feedburner url so that I would be able to run the code for different time periods and against different feeds. In C# we&amp;rsquo;d probably make use of &amp;lsquo;string.</description>
    </item>
    
    <item>
      <title>F#: Wrapping .NET library calls</title>
      <link>https://mneedham.github.io/blog/2009/07/12/f-wrapping-net-library-calls/</link>
      <pubDate>Sun, 12 Jul 2009 12:11:46 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/07/12/f-wrapping-net-library-calls/</guid>
      <description>I&amp;rsquo;ve been spending a bit of time writing some code to parse the xml of my Feedburner RSS feed and create a graph to show both the daily and weekly average subscribers which you can&amp;rsquo;t currently get from the Feedburner dashboard.
One thing which I found while doing this is that calls to the .NET base class library don&amp;rsquo;t seem to fit in that well with the way that you would typically compose functions together in F#.</description>
    </item>
    
    <item>
      <title>F#: Downloading a file from behind a proxy</title>
      <link>https://mneedham.github.io/blog/2009/07/11/f-downloading-a-file-from-behind-a-proxy/</link>
      <pubDate>Sat, 11 Jul 2009 03:20:25 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/07/11/f-downloading-a-file-from-behind-a-proxy/</guid>
      <description>I&amp;rsquo;ve been continuing working on a little script to parse Cruise build data and the latest task was to work out how to download my Google Graph API created image onto the local disk.
I&amp;rsquo;m using the WebClient class to do this and the code looks like this:
let DownloadGraph (fileLocation:string) (uri:System.Uri) = async { let webClient = new WebClient() webClient.DownloadFileAsync(uri, fileLocation)}  Sadly this doesn&amp;rsquo;t work when I run it from the client site where I have access to the build metrics as there is a corporate proxy sitting in the way.</description>
    </item>
    
    <item>
      <title>F#: Convert sequence to comma separated string</title>
      <link>https://mneedham.github.io/blog/2009/07/09/f-convert-sequence-to-comma-separated-string/</link>
      <pubDate>Thu, 09 Jul 2009 22:32:55 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/07/09/f-convert-sequence-to-comma-separated-string/</guid>
      <description>I&amp;rsquo;ve been continuing playing around with parsing Cruise data as I mentioned yesterday with the goal today being to create a graph from the build data.
After recommendations from Dean Cornish and Sam Newman on Twitter I decided to give the Google Graph API a try to do this and realised that I would need to create a comma separated string listing all the build times to pass to the Google API.</description>
    </item>
    
    <item>
      <title>F#: Parsing Cruise build data</title>
      <link>https://mneedham.github.io/blog/2009/07/08/f-parsing-cruise-build-data/</link>
      <pubDate>Wed, 08 Jul 2009 22:46:05 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/07/08/f-parsing-cruise-build-data/</guid>
      <description>I&amp;rsquo;ve been playing around a bit with the properties REST API that Cruise exposes to try and get together some build metrics and I decided it might be an interesting task to try and use F# for.
I&amp;rsquo;m making use of the &amp;lsquo;search&amp;rsquo; part of the API to return the metrics of all the builds run on a certain part of the pipeline and I then want to parse those results so that I can extract just the name of the agent that ran that build and the duration of that build.</description>
    </item>
    
    <item>
      <title>F#: Pattern matching with the &#39;:?&#39; operator</title>
      <link>https://mneedham.github.io/blog/2009/07/02/f-pattern-matching-with-the-operator/</link>
      <pubDate>Thu, 02 Jul 2009 23:10:19 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/07/02/f-pattern-matching-with-the-operator/</guid>
      <description>I&amp;rsquo;ve been doing a bit more reading of the Fake source code and one interesting thing which I came across which I hadn&amp;rsquo;t seen was an active pattern which was making use of the &amp;lsquo;:?&amp;rsquo; operator to match the input type against .NET types.
let (|File|Directory|) (fileSysInfo : FileSystemInfo) = match fileSysInfo with | :? FileInfo as file -&amp;gt; File (file.Name) | :? DirectoryInfo as dir -&amp;gt; Directory (dir.Name, seq { for x in dir.</description>
    </item>
    
    <item>
      <title>F#: What I&#39;ve learnt so far</title>
      <link>https://mneedham.github.io/blog/2009/06/30/f-what-ive-learnt-so-far/</link>
      <pubDate>Tue, 30 Jun 2009 23:09:35 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/06/30/f-what-ive-learnt-so-far/</guid>
      <description>I did a presentation of some of the stuff that I&amp;rsquo;ve learnt from playing around with F# over the last six months or so at the most recent Alt.NET Sydney meeting.
I&amp;rsquo;ve included the slides below but there was also some interesting discussion as well.
 One of the questions asked was around how you would deal with code on a real project with regards to structuring it and ensuring that it was maintainable.</description>
    </item>
    
    <item>
      <title>F#: Setting properties like named parameters</title>
      <link>https://mneedham.github.io/blog/2009/06/29/f-setting-properties-like-named-parameters/</link>
      <pubDate>Mon, 29 Jun 2009 00:28:14 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/06/29/f-setting-properties-like-named-parameters/</guid>
      <description>One of the most frustrating things for me lately about interacting with C# libraries from F# has been setting up objects through the use of properties.
While I am against the use of setters to construct objects in the first place, that&amp;rsquo;s the way that a lot of libraries work so it&amp;rsquo;s a bit of a necessary evil!
In C# we would typically make use of the object initializer syntax to do this, but in F# I&amp;rsquo;ve been writing code like this to do the same thing:</description>
    </item>
    
    <item>
      <title>F#: More thoughts on the forward &amp; application operators</title>
      <link>https://mneedham.github.io/blog/2009/06/27/f-more-thoughts-on-the-forward-application-operators/</link>
      <pubDate>Sat, 27 Jun 2009 22:55:02 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/06/27/f-more-thoughts-on-the-forward-application-operators/</guid>
      <description>I&amp;rsquo;ve been spending a bit of time reading through the Fake source code to try and understand how it works and one of the things which I quite like about it is the way the authors have made use of different F# operators to make expressions easier to read by reducing the number of brackets that need to be written and reordering the functions/values depending on the particular context.
One which I hadn&amp;rsquo;t seen before is the application operator which is the opposite of the forward operator which I have previously written about.</description>
    </item>
    
    <item>
      <title>F#: Continuation Passing Style</title>
      <link>https://mneedham.github.io/blog/2009/06/22/f-continuation-passing-style/</link>
      <pubDate>Mon, 22 Jun 2009 23:39:07 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/06/22/f-continuation-passing-style/</guid>
      <description>I recently came across the idea of continuations while reading Real World Functional Programming and Wes Dyer has a blog post where he explains continuations in more detail and also talks about the idea of using a continuation passing style in languages which don&amp;rsquo;t support Call/CC (Call with Current continuation).
As I understand it we can achieve a continuation passing style of programming by passing in the bit of code that we went executed next (i.</description>
    </item>
    
    <item>
      <title>C#/F#: Using .NET framework classes</title>
      <link>https://mneedham.github.io/blog/2009/06/16/cf-using-net-framework-classes/</link>
      <pubDate>Tue, 16 Jun 2009 18:55:38 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/06/16/cf-using-net-framework-classes/</guid>
      <description>I was recently discussing F# with a couple of colleagues and one thing that came up is the slightly different ways that we might choose to interact with certain .NET framework classes compared to how we use those same classes in C# code.
One of those where I see potential for different use is the Dictionary class.
In C#Â code when we&amp;rsquo;re querying a dictionary to check that a value exists before we try to extract it we might typically do this:</description>
    </item>
    
    <item>
      <title>F#: Using C# extension methods</title>
      <link>https://mneedham.github.io/blog/2009/06/15/f-using-c-extension-methods/</link>
      <pubDate>Mon, 15 Jun 2009 20:03:34 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/06/15/f-using-c-extension-methods/</guid>
      <description>An interesting thing I noticed about referencing C# libraries from F# is that you can&amp;rsquo;t access C#Â extension methods on generic open types in the same way that you would be able to if you were using the library from C# code.
I came across this problem when playing around with the Rhino Mocks framework in some F# code.
I wrote a simple test to see whether I could get an expectation to work correctly, without paying any regard for the fact that you can&amp;rsquo;t use all C# extension methods in the same way as you can from C# code!</description>
    </item>
    
    <item>
      <title>F#: Overlapping fields in record types</title>
      <link>https://mneedham.github.io/blog/2009/06/14/f-overlapping-fields-in-record-types/</link>
      <pubDate>Sun, 14 Jun 2009 00:37:01 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/06/14/f-overlapping-fields-in-record-types/</guid>
      <description>A problem which has confused me for a while is how to create instances of record types whose fields overlap with another record defined further down in an F# file.
The most recently defined record seems to take precedence even if it has more fields than a record defined earlier and you don&amp;rsquo;t specify all of those fields in your record creation attempt.
For example, if I have the following two record types:</description>
    </item>
    
    <item>
      <title>F#: Useful for scripting</title>
      <link>https://mneedham.github.io/blog/2009/06/09/f-useful-for-scripting/</link>
      <pubDate>Tue, 09 Jun 2009 23:29:15 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/06/09/f-useful-for-scripting/</guid>
      <description>We had the need to do a bit of scripting recently to change the names of the folders where we store our artifacts to signify which artifacts were created from our build&amp;rsquo;s production branch and which were generated from the main branch.
The problem we had was that we were ending up overwriting old artifacts from the main branch with the production branch&amp;rsquo;s artifacts so we wanted to fix this.</description>
    </item>
    
    <item>
      <title>F#: Explicit interface implementation</title>
      <link>https://mneedham.github.io/blog/2009/06/07/f-explicit-interface-implementation/</link>
      <pubDate>Sun, 07 Jun 2009 08:19:01 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/06/07/f-explicit-interface-implementation/</guid>
      <description>I&amp;rsquo;ve been writing some code to map between CouchDB documents and F# objects and something which I re-learned while doing this is the way that interfaces work in F#.
In F# when you have a class which implements an interface that class makes use of explicit interface implementation.
This means that in order to access any members of the interface that the class implements you need to specifically refer to the interface by upcasting the value using the &amp;lsquo;:&amp;gt;&amp;rsquo; operator.</description>
    </item>
    
    <item>
      <title>F#: Tuples don&#39;t seem to express intent well</title>
      <link>https://mneedham.github.io/blog/2009/06/02/f-tuples-dont-seem-to-express-intent-well/</link>
      <pubDate>Tue, 02 Jun 2009 22:01:52 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/06/02/f-tuples-dont-seem-to-express-intent-well/</guid>
      <description>Tuples are one of the data types that I learnt about at university but never actually got to use for anything until I started playing around with F# which has this type in the language.
A tuple describes an ordered group of values and in that sense is similar to a C# anonymous type except an anonymous type&amp;rsquo;s values are named whereas a tuple&amp;rsquo;s are not.
In F# we can create one by separating a sequence of values with a comma in a value assignment:</description>
    </item>
    
    <item>
      <title>F#: Testing asynchronous calls to MailBoxProcessor</title>
      <link>https://mneedham.github.io/blog/2009/05/30/f-testing-asynchronous-calls-to-mailboxprocessor/</link>
      <pubDate>Sat, 30 May 2009 20:38:02 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/05/30/f-testing-asynchronous-calls-to-mailboxprocessor/</guid>
      <description>Continuing with my attempts to test some of the code in my twitter application I&amp;rsquo;ve been trying to work out how to test the Erlang style messaging which I set up to process tweets when I had captured them using the TweetSharp API.
The problem I had is that that processing is being done asynchronously so we can&amp;rsquo;t test it in our normal sequential way.
Chatting with Dave about this he suggested that what I really needed was a latch which could be triggered when the asynchronous behaviour had completed, thus informing the test that it could proceed.</description>
    </item>
    
    <item>
      <title>F#: Object expressions</title>
      <link>https://mneedham.github.io/blog/2009/05/19/f-object-expressions/</link>
      <pubDate>Tue, 19 May 2009 01:38:31 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/05/19/f-object-expressions/</guid>
      <description>One of the things I miss a bit from the Java world is the ability to create anonymous inner classes which implement a certain interface.
We can&amp;rsquo;t do this in C# - you always need to define a named class - but in my latest playing around with F# I was quite pleased to learn that we do have this ability using a feature called object expressions.
These come in particularly useful when you are only making use of the implementation of an interface in one place in the code and therefore don&amp;rsquo;t want to expose this type to any other code.</description>
    </item>
    
    <item>
      <title>F#: Regular expressions/active patterns</title>
      <link>https://mneedham.github.io/blog/2009/05/10/f-regular-expressionsactive-patterns/</link>
      <pubDate>Sun, 10 May 2009 08:58:48 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/05/10/f-regular-expressionsactive-patterns/</guid>
      <description>Josh has been teaching me how to do regular expressions in Javascript this week and intrigued as to how you would do this in F# I came across a couple of blog posts by Chris Smith talking about active patterns and regular expressions via active patterns.
As I understand them active patterns are not that much different to normal functions but we can make use of them as part of a let or match statement which we can&amp;rsquo;t do with a normal function.</description>
    </item>
    
    <item>
      <title>F#: Stuff I get confused about</title>
      <link>https://mneedham.github.io/blog/2009/05/02/f-stuff-i-get-confused-about/</link>
      <pubDate>Sat, 02 May 2009 14:38:36 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/05/02/f-stuff-i-get-confused-about/</guid>
      <description>Coming from the world of C# I&amp;rsquo;ve noticed that there are a couple of things that I sometimes get confused about when playing around with stuff in F# land.
Passing arguments to functions The way that we pass arguments to functions seems to be a fairly constant cause of confusion at the moment especially when doing that as part of a chain of other expressions where the use of brackets starts to become necessary.</description>
    </item>
    
    <item>
      <title>F#: Entry point of an application</title>
      <link>https://mneedham.github.io/blog/2009/05/02/f-entry-point-of-an-application/</link>
      <pubDate>Sat, 02 May 2009 01:56:09 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/05/02/f-entry-point-of-an-application/</guid>
      <description>In an attempt to see whether or not the mailboxes I&amp;rsquo;ve been working on for my twitter application were actually processing messages on different threads I ran into the problem of defining the entry point of an F# application.
I thought it would be as simple as defining a function called &amp;lsquo;main&amp;rsquo; but I put this function into my code ran the executable and nothing happened!
Googling the problem a bit led me to believe that it is possible to do but that the function needs to be the last thing that happens in the compilation sequence of the project.</description>
    </item>
    
    <item>
      <title>F#: Erlang style messaging passing</title>
      <link>https://mneedham.github.io/blog/2009/05/02/f-erlang-style-messaging-passing/</link>
      <pubDate>Sat, 02 May 2009 01:53:56 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/05/02/f-erlang-style-messaging-passing/</guid>
      <description>As I mentioned in my previous post about over loading methods in F# I&amp;rsquo;ve been trying to refactor my twitter application into a state where it can concurrently process twitter statuses while continuing to retrieve more of them from the twitter website.
I played around a bit with Erlang last year and one thing that I quite liked is the message passing between processes to allow operations to be performed concurrently.</description>
    </item>
    
    <item>
      <title>F#: Overloading functions/pattern matching</title>
      <link>https://mneedham.github.io/blog/2009/04/28/f-overloading-functionspattern-matching/</link>
      <pubDate>Tue, 28 Apr 2009 23:43:22 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/04/28/f-overloading-functionspattern-matching/</guid>
      <description>While trying to refactor my twitter application into a state where I could use Erlang style message passing to process some requests asynchronously while still hitting twitter to get more messages I came across the problem of wanting to overload a method.
By default it seems that you can&amp;rsquo;t do method overloading in F# unless you make use of the OverloadID attribute which I learnt about from reading Scott Seely&amp;rsquo;s blog post:</description>
    </item>
    
    <item>
      <title>F#: Not equal/Not operator</title>
      <link>https://mneedham.github.io/blog/2009/04/25/f-not-equalnot-operator/</link>
      <pubDate>Sat, 25 Apr 2009 22:12:43 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/04/25/f-not-equalnot-operator/</guid>
      <description>While continuing playing with my F# twitter application I was trying to work out how to exclude the tweets that I posted from the list that gets displayed.
I actually originally had the logic the wrong way round so that it was only showing my tweets!
let excludeSelf (statuses:seq&amp;lt;TwitterStatus&amp;gt;) = statuses |&amp;gt; Seq.filter (fun eachStatus -&amp;gt; eachStatus.User.ScreenName.Equals(&amp;quot;markhneedham&amp;quot;))  Coming from the world of Java and C# &amp;lsquo;!&amp;rsquo; would be the operator to find the screen names that don&amp;rsquo;t match my own name.</description>
    </item>
    
    <item>
      <title>F#: Refactoring that little twitter application into objects</title>
      <link>https://mneedham.github.io/blog/2009/04/18/f-refactoring-that-little-twitter-application-into-objects/</link>
      <pubDate>Sat, 18 Apr 2009 08:47:06 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/04/18/f-refactoring-that-little-twitter-application-into-objects/</guid>
      <description>I previously wrote about a little twitter application I&amp;rsquo;ve been writing to go through my twitter feed and find only the tweets with links it and while it works I realised that I was finding it quite difficult to add any additional functionality to it.
I&amp;rsquo;ve been following the examples in Real World Functional Programming which has encouraged an approach of creating functions to do everything that you want to do and then mixing them together.</description>
    </item>
    
    <item>
      <title>Coding Dojo #12: F#</title>
      <link>https://mneedham.github.io/blog/2009/04/16/coding-dojo-12-f/</link>
      <pubDate>Thu, 16 Apr 2009 18:20:50 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/04/16/coding-dojo-12-f/</guid>
      <description>In our latest coding dojo we worked on trying to port some of the functionality of some C# 1.0 brain models, and in particular one around simulating chaos behaviour, that Dave worked on at university.
The Format This was more of an experimental dojo since everyone was fairly new to F# so we didn&amp;rsquo;t rotate the pair at the keyboard as frequently as possible.
What We Learnt  The aim of the session was to try and put some unit tests around the C# code and then try and replace that code with an F# version of it piece by piece.</description>
    </item>
    
    <item>
      <title>F#: A day of writing a little twitter application</title>
      <link>https://mneedham.github.io/blog/2009/04/13/f-a-day-of-writing-a-little-twitter-application/</link>
      <pubDate>Mon, 13 Apr 2009 22:09:37 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/04/13/f-a-day-of-writing-a-little-twitter-application/</guid>
      <description>I spent most of the bank holiday Monday here in Sydney writing a little application to scan through my twitter feed and find me just the tweets which have links in them since for me that&amp;rsquo;s where a lot of the value of twitter lies.
I&amp;rsquo;m sure someone has done this already but it seemed like a good opportunity to try and put a little of the F# that I&amp;rsquo;ve learned from reading Real World Functional Programming to use.</description>
    </item>
    
    <item>
      <title>F#: Forcing type to unit for Assert.ShouldThrow in XUnit.NET</title>
      <link>https://mneedham.github.io/blog/2009/03/28/f-forcing-type-to-unit-for-assertshouldthrow-in-xunitnet/</link>
      <pubDate>Sat, 28 Mar 2009 02:35:27 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/03/28/f-forcing-type-to-unit-for-assertshouldthrow-in-xunitnet/</guid>
      <description>I&amp;rsquo;ve started playing around with F# again and decided to try and create some unit tests around the examples I&amp;rsquo;m following from Real World Functional Programming. After reading Matt Podwysocki&amp;rsquo;s blog post about XUnit.NET I decided that would probably be the best framework for me to use.
The example I&amp;rsquo;m writing tests around is:
let convertDataRow(str:string) = let cells = List.of_seq(str.Split([|&#39;,&#39;|])) match cells with | label::value::_ -&amp;gt; let numericValue = Int32.</description>
    </item>
    
    <item>
      <title>F#: Partial Function Application with the Function Composition Operator</title>
      <link>https://mneedham.github.io/blog/2009/01/12/f-partial-function-application-with-the-function-composition-operator/</link>
      <pubDate>Mon, 12 Jan 2009 22:22:43 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/01/12/f-partial-function-application-with-the-function-composition-operator/</guid>
      <description>In my continued reading of F# one of the ideas I&amp;rsquo;ve come across recently is that of partial function application.
This is a way of allowing us to combine different functions together and allows some quite powerful syntax to be written.
The term &amp;lsquo;currying&amp;rsquo; is perhaps a better known term for describing this although as I understand they are not exactly the same.
Currying is where we return a function that has been partially applied, in such a way that we can chain together a group of functions with a single argument.</description>
    </item>
    
    <item>
      <title>F#: Forward Operator</title>
      <link>https://mneedham.github.io/blog/2009/01/06/f-forward-operator/</link>
      <pubDate>Tue, 06 Jan 2009 00:19:52 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/01/06/f-forward-operator/</guid>
      <description>Continuing on my F# journey I came across a post by Ben Hall describing the approach he takes when learning a new programming language.
One of the approaches he describes is that of writing unit tests to help keep your learning on track. I&amp;rsquo;ve only been using the F# interactive console so far so I thought I&amp;rsquo;d give it a try.
After reading about the somewhat convoluted approach required to use NUnit or MBUnit to write F# unit tests I came across XUnit.</description>
    </item>
    
    <item>
      <title>F# Option Types</title>
      <link>https://mneedham.github.io/blog/2009/01/02/f-option-types/</link>
      <pubDate>Fri, 02 Jan 2009 22:35:31 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/01/02/f-option-types/</guid>
      <description>I&amp;rsquo;ve been spending a bit of time working through the Real World Functional Programming book to learn a bit about F# and one of the cool features I came across today (while reading Chris Smith&amp;rsquo;s post on F# lists) is the Option type.
I first came across this idea a few months ago when discussing null handling strategies with a colleague who pointed out that you could get around this problem in Scala by using the Option class.</description>
    </item>
    
  </channel>
</rss>