<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>J on Mark Needham</title>
    <link>https://markhneedham.com/blog/category/j/</link>
    <description>Recent content in J on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Dec 2017 17:35:03 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/category/j/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>J: Tacit Programming</title>
      <link>https://markhneedham.com/blog/2010/07/13/j-tacit-programming/</link>
      <pubDate>Tue, 13 Jul 2010 14:47:41 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/07/13/j-tacit-programming/</guid>
      <description>A couple of months ago I wrote about tacit programming with respect to F#, a term which I first came across while reading about the J programming language.
 There&amp;#8217;s a good introduction to tacit programming on the J website which shows the evolution of a function which originally has several local variables into a state where it has none at all.
 I&amp;#8217;ve been having a go at writing Roy Osherove&amp;#8217;s TDD Kata in J and while I haven&amp;#8217;t got very far yet I saw a good opportunity to move the code I&amp;#8217;ve written so far into a more tacit style.</description>
    </item>
    
  </channel>
</rss>