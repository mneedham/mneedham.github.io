<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lean on Mark Needham</title>
    <link>http://localhost:8000/blog/category/lean/</link>
    <description>Recent content in Lean on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Feb 2010 23:53:31 +0000</lastBuildDate><atom:link href="http://localhost:8000/blog/category/lean/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shu Ha Ri harmful?</title>
      <link>http://localhost:8000/blog/2010/02/26/shu-ha-ri-harmful/</link>
      <pubDate>Fri, 26 Feb 2010 23:53:31 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2010/02/26/shu-ha-ri-harmful/</guid>
      <description>I came across a blog post by Rachel Davies where she wonders whether the Shu-Ha-Ri approach to learning/teaching is actually harmful and I found Rachel’s thoughts around the teaching of principles and practices quite interesting.
Quoting Jeff Sutherland:
Only when you have mastered the basic practices are you allowed to improvise. And the last and most important — Before you have gained discipline, centering, and flexibility, you are a hazard to yourself and others.</description>
    </item>
    
    <item>
      <title>Set Based Concurrent Engineering: A simple example</title>
      <link>http://localhost:8000/blog/2009/09/19/set-based-concurrent-engineering-a-simple-example/</link>
      <pubDate>Sat, 19 Sep 2009 02:24:11 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2009/09/19/set-based-concurrent-engineering-a-simple-example/</guid>
      <description>One of my favourite ideas that I came across while reading the Poppendieck’s Lean Software Development is set based concurrent engineering which encourages us to keep our options open with regards to the solution to a problem until we absolutely need to decide on an approach after which we probably can’t easily change that decision so we will most likely stick with it.
I like the idea but on the projects I’ve worked on we often seem to take a more point based approach - there will be some discussion up front on the potential solutions to a problem and eventually one of them will be considered to be the best solution and we go and implement that one.</description>
    </item>
    
    <item>
      <title>Lean: Big Picture over Local Optimisations</title>
      <link>http://localhost:8000/blog/2009/04/14/lean-big-picture-over-local-optimisations/</link>
      <pubDate>Tue, 14 Apr 2009 22:10:13 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2009/04/14/lean-big-picture-over-local-optimisations/</guid>
      <description>I recently finished reading Lean Thinking and one of the things that was repeatedly emphasised is the need to look at the process as a whole rather than trying to optimise each part individually.
If we phrased this in a similar way to the Agile Manifesto it would probably read &amp;#39;Big Picture over Local Optimisations&amp;#39;.
The examples in Lean Thinking tend to be more manufacturing focused but I think this idea can certainly be applied in thinking about software projects too.</description>
    </item>
    
  </channel>
</rss>
