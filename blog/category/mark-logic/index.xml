<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mark Logic on Mark Needham</title>
    <link>https://markhneedham.com/blog/category/mark-logic/</link>
    <description>Recent content in Mark Logic on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Jun 2011 22:36:48 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/category/mark-logic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MarkLogic: Customising a result set</title>
      <link>https://markhneedham.com/blog/2011/06/20/marklogic-customising-a-result-set/</link>
      <pubDate>Mon, 20 Jun 2011 22:36:48 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/06/20/marklogic-customising-a-result-set/</guid>
      <description>One of the stories we worked on last week had us needing to be able to customise the output of a MarkLogic search query to include some elements which aren&amp;#8217;t included in the default view.
 We started off with this:
 search.xqy
 xquery version &#34;1.0-ml&#34;; import module namespace search = &#34;http://marklogic.com/appservices/search&#34; at &#34;/MarkLogic/appservices/search/search.xqy&#34;; declare variable $term as xs:string := xdmp:get-request-field(&#34;query&#34;, &#34;&#34;); search:search($term)   Which gives us back a list of results showing where in the documents the search term appeared.</description>
    </item>
    
    <item>
      <title>MarkLogic: Deleting all the documents in a database</title>
      <link>https://markhneedham.com/blog/2011/06/18/marklogic-deleting-all-the-documents-in-a-database/</link>
      <pubDate>Sat, 18 Jun 2011 16:08:47 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/06/18/marklogic-deleting-all-the-documents-in-a-database/</guid>
      <description>We&amp;#8217;re using the MarkLogic database on my current project and something that we wanted to do recently was delete all the documents as part of a deployment script.
 Getting all of the documents is reasonably easy - we just need to make a call to the doc() function.
 We can then iterate through the documents like so:
 for $doc in doc() return $doc   We wanted to make use of the http://docs.</description>
    </item>
    
  </channel>
</rss>