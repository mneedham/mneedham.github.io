<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Agile on Mark Needham</title>
    <link>https://markhneedham.com/blog/category/agile/</link>
    <description>Recent content in Agile on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Oct 2012 18:21:57 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/category/agile/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Retrospectives: An alternative safety check</title>
      <link>https://markhneedham.com/blog/2012/10/27/retrospectives-an-alternative-safety-check/</link>
      <pubDate>Sat, 27 Oct 2012 18:21:57 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/10/27/retrospectives-an-alternative-safety-check/</guid>
      <description>At the start of most of the retrospectives I&amp;rsquo;ve been part of we&amp;rsquo;ve followed the safety check ritual whereby each person participating has to write a number from 1-5 on a sticky describing how they&amp;rsquo;ll be participating in the retrospective.
1 means you&amp;rsquo;ll probably keep quiet and not say much, 5 means you&amp;rsquo;re perfectly comfortable saying anything and the other numbers fall in between those two extremes.
In my experiences it&amp;rsquo;s a bit of a fruitless exercise because its viewed that a higher number is &amp;lsquo;better&amp;rsquo; and therefore the minimum people will tend to write down is &amp;lsquo;3&amp;rsquo; because they don&amp;rsquo;t want to stand out or cause a problem.</description>
    </item>
    
    <item>
      <title>How we&#39;re using story points</title>
      <link>https://markhneedham.com/blog/2012/10/21/how-were-using-story-points/</link>
      <pubDate>Sun, 21 Oct 2012 23:08:01 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/10/21/how-were-using-story-points/</guid>
      <description>A couple of weeks ago Joshua Kerievsky wrote a post describing how he and his teams don&amp;rsquo;t use story points anymorebecause of the problems they&amp;rsquo;d had with them which included:
On the team I&amp;rsquo;m currently working on we still estimate the relative size of stories using points but we don&amp;rsquo;t use velocity per iteration to keep score - most of the time it&amp;rsquo;s barely even mentioned.
Instead for the past couple of months we&amp;rsquo;ve just been using the velocity to see whether or not we were going to achieve the minimum viable infrastructure (MVI)that we needed to have done before launch.</description>
    </item>
    
    <item>
      <title>Focused Retrospectives: things to watch for</title>
      <link>https://markhneedham.com/blog/2012/01/16/focused-retrospectives-things-to-watch-for/</link>
      <pubDate>Mon, 16 Jan 2012 01:01:30 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/01/16/focused-retrospectives-things-to-watch-for/</guid>
      <description>A few weeks ago a slide deck from an Esther Derby presentation on retrospectiveswas doing the rounds on twitter and one thing that I found interesting in the deck was the suggestion that a retrospective needs to be focused in some way.
I&amp;rsquo;ve participated in a few focused retrospectives over the past 7/8 months and I think there are some things to be careful about when we decide to focus on something specific rather than just looking back at a time period in general.</description>
    </item>
    
    <item>
      <title>The Language of Risk</title>
      <link>https://markhneedham.com/blog/2011/12/30/the-language-of-risk/</link>
      <pubDate>Fri, 30 Dec 2011 03:38:58 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/12/30/the-language-of-risk/</guid>
      <description>A few weeks ago Chris Matts wrote an interesting blog post &amp;lsquo;the language of risk&amp;rsquo; in which he describes an approach he used to explain the processes his team uses to an auditor.
Because I explained everything we did in terms of risk. When they asked for a “process”, I explained the risk the process was meant to address. I then explained how our different process addressed the risk more effectively.</description>
    </item>
    
    <item>
      <title>Retrospective: The 5 whys</title>
      <link>https://markhneedham.com/blog/2011/10/24/retrospective-the-5-whys/</link>
      <pubDate>Mon, 24 Oct 2011 22:53:14 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/10/24/retrospective-the-5-whys/</guid>
      <description>Last week my colleague Pat Fornasierran our team&amp;rsquo;s fortnightly retrospective and one of the exercises we did was &amp;lsquo;the 5 whys&amp;rsquo;.
I&amp;rsquo;ve always wanted to see how the 5 why&amp;rsquo;s would pan out but could never see how you could fit it into a normal retrospective.
Pat was able to do this by using the data gathered by an earlier timeline exercise where the team had to plot the main events that had happened over the last 6 months.</description>
    </item>
    
    <item>
      <title>Retrospectives: Getting overly focused on actions</title>
      <link>https://markhneedham.com/blog/2011/09/24/retrospectives-getting-overly-focused-on-actions/</link>
      <pubDate>Sat, 24 Sep 2011 06:56:39 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/09/24/retrospectives-getting-overly-focused-on-actions/</guid>
      <description>I&amp;rsquo;ve attended a lot of different retrospectives over the last few years and one thing that seems to happen quite frequently is that a problem will be raised and there will become a massive urgency to find an action to match with that problem.
As a result of this we don&amp;rsquo;t tend to go very deeply into working out why that problem happened in the first place and how we can stop it happening in the first place.</description>
    </item>
    
    <item>
      <title>Retrospectives: The 4 L&#39;s Retrospective</title>
      <link>https://markhneedham.com/blog/2011/07/25/retrospectives-the-4-ls-retrospective/</link>
      <pubDate>Mon, 25 Jul 2011 21:00:30 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/07/25/retrospectives-the-4-ls-retrospective/</guid>
      <description>I facilitated the latest retrospective my team had last week and decided to try The 4 L&amp;rsquo;s techniquewhich I&amp;rsquo;d come across while browsing the &amp;lsquo;retrospectives&amp;rsquo; tag on del.icio.us.
We had 4 posters around the room representing each of the L&amp;rsquo;s:
I&amp;rsquo;m not really a fan of the majority of a retrospective being dominated by a full group discussion as many people aren&amp;rsquo;t comfortable giving their opinions to that many peopleand therefore end up not participating at all.</description>
    </item>
    
    <item>
      <title>Parkinson&#39;s Law and Iteration Zero</title>
      <link>https://markhneedham.com/blog/2011/06/13/parkinsons-law-and-iteration-zero/</link>
      <pubDate>Mon, 13 Jun 2011 23:02:57 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/06/13/parkinsons-law-and-iteration-zero/</guid>
      <description>I&amp;#8217;ve been thinking a bit about Parkinson&amp;#8217;s Law recently and its&#39; applicability in software development.
 Parkinson&amp;#8217;s law is defined as follows:
  Parkinson&amp;#8217;s Law is the adage first articulated by Cyril Northcote Parkinson as the first sentence of a humorous essay published in The Economist in 1955: &amp;#8220;Work expands so as to fill the time available for its completion&amp;#8221;
   My colleagues quite frequently reference this law with respect to stories taking the amount of time that reflects the story point estimate assigned to them.</description>
    </item>
    
    <item>
      <title>Retrospectives: Mini Group Discussions</title>
      <link>https://markhneedham.com/blog/2011/03/20/retrospectives-mini-group-discussions/</link>
      <pubDate>Sun, 20 Mar 2011 18:36:42 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/03/20/retrospectives-mini-group-discussions/</guid>
      <description>One of the approaches that I like the best in retrospectives is when the facilitator splits the team into smaller groups during the brainstorming part of the retrospective.
I decided to try this out in a retrospective we ran after one week of ThoughtWorks University, using The Retrospective Starfishto provide a framework in which people could frame their thoughts.
Usually what I&amp;rsquo;ve seen happen in these mini groups is that everyone will write down their own ideas on stickies and then discuss them as a group but still put up all the stickies even if the group didn&amp;rsquo;t agree with everything.</description>
    </item>
    
    <item>
      <title>Increasing team sizes: Collective unresponsibility</title>
      <link>https://markhneedham.com/blog/2011/02/16/increasing-team-sizes-collective-unresponsibility/</link>
      <pubDate>Wed, 16 Feb 2011 18:00:52 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/02/16/increasing-team-sizes-collective-unresponsibility/</guid>
      <description>After a few recent conversations with colleagues as well as my observations of several projects I&amp;rsquo;m coming to the conclusion that the way that people react in situations often differs significantly depending on whether they&amp;rsquo;re working in a large or small team.
One of the most obvious ways that this manifests itself is when there comes a need for someone to volunteer to take care of something - be it a particular functional area, communication with the onshore team or something else.</description>
    </item>
    
    <item>
      <title>Increasing team sizes: Boredom</title>
      <link>https://markhneedham.com/blog/2011/01/27/increasing-team-sizes-boredom/</link>
      <pubDate>Thu, 27 Jan 2011 22:59:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/01/27/increasing-team-sizes-boredom/</guid>
      <description>Although the majority of the teams that I&amp;rsquo;ve worked on over the past few years have been relatively small in size I have worked on a few where the team size has been pretty big and perhaps inevitably the productivity has felt much lower.
I think this is somewhat inevitable since although the overall throughput of these teams may be higher than on smaller teams, due to problems such as having difficulty parallelising work, not every pair is working at maximum productivity.</description>
    </item>
    
    <item>
      <title>Distributed Agile: Stories -  Negotiable</title>
      <link>https://markhneedham.com/blog/2011/01/24/distributed-agile-stories-negotiable/</link>
      <pubDate>Mon, 24 Jan 2011 03:34:47 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/01/24/distributed-agile-stories-negotiable/</guid>
      <description>I was recently reading an article about how to write meaningful user storiesand towards the end of it the author mentioned the INVEST acronym which suggests that stories should be:
From what I&amp;rsquo;ve seen the most difficult one to achieve in a distributed context is that stories should be &amp;lsquo;negotiable&amp;rsquo;, in particular when it comes to negotiating the way that the UX of a bit of functionality should work.
On most of the projects that I&amp;rsquo;ve worked on the people designing the UX tend to work slightly detached from the development team and then send their designs over as wire frames.</description>
    </item>
    
    <item>
      <title>Technical implementation heavy stories</title>
      <link>https://markhneedham.com/blog/2010/12/13/technical-implementation-heavy-stories/</link>
      <pubDate>Mon, 13 Dec 2010 21:29:02 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/12/13/technical-implementation-heavy-stories/</guid>
      <description>Earlier this year I wrote about some of the problems that we can run into when we have implicit assumptions in storiesand another problematic approach I&amp;rsquo;ve seen around this area is where we end up with stories that are very heavily focused on technical implementation.
Initially this seems like it will work out pretty well since all the developer then needs to do is follow the steps that have been outlined for them but from my experience it seems to create more problems than it solves.</description>
    </item>
    
    <item>
      <title>Increasing team sizes: Parallelising work</title>
      <link>https://markhneedham.com/blog/2010/11/26/increasing-team-sizes-parallelising-work/</link>
      <pubDate>Fri, 26 Nov 2010 03:53:33 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/11/26/increasing-team-sizes-parallelising-work/</guid>
      <description>One of the trickiest things to do when working in bigger teams is ensuring that it is possible to parallelise the work we have across the number of pairs that we have available.
From my experience this problem happens much less frequently in smaller teams. Perhaps inevitably it&amp;rsquo;s much easier to find 2 or 3 things that can be worked on in parallel than it is to find 6 or 7 or more.</description>
    </item>
    
    <item>
      <title>Retrospectives: My first time facilitating</title>
      <link>https://markhneedham.com/blog/2010/11/15/retrospectives-my-first-time-facilitating/</link>
      <pubDate>Mon, 15 Nov 2010 19:52:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/11/15/retrospectives-my-first-time-facilitating/</guid>
      <description>Despite being part of numerous retrospectives over the past few years I don&amp;rsquo;t remember actually facilitating one until my current team&amp;rsquo;s last week.
I&amp;rsquo;ve gradually come to appreciate the skill involved in facilitating this type of meeting having originally been of the opinion that there wasn&amp;rsquo;t much to it.
I recently read Agile Retrospectiveswhich has loads of different ideas for activities beyond just creating &amp;lsquo;went well&amp;rsquo; and &amp;lsquo;could improve&amp;rsquo; columns and then filling those in as a group.</description>
    </item>
    
    <item>
      <title>Agile: Increasing team sizes</title>
      <link>https://markhneedham.com/blog/2010/11/14/agile-increasing-team-sizes/</link>
      <pubDate>Sun, 14 Nov 2010 11:51:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/11/14/agile-increasing-team-sizes/</guid>
      <description>A fairly common trend on nearly every project I&amp;rsquo;ve worked on is that at some stage the client will ask for more people to be added to the team in order to &amp;lsquo;improve&amp;rsquo; the velocity.
Some of the most common arguments against doing so are that it will initially slow down the team&amp;rsquo;s velocity as the new members learn the domain, code base and get to know the other members of the team.</description>
    </item>
    
    <item>
      <title>Retrospectives: General observations</title>
      <link>https://markhneedham.com/blog/2010/11/06/retrospectives-general-observations/</link>
      <pubDate>Sat, 06 Nov 2010 17:17:16 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/11/06/retrospectives-general-observations/</guid>
      <description>Following on from my blog post about some observations about the actions that we create in retrospectivesI&amp;rsquo;ve also noticed some general ways that retrospectives might not end up being as useful as we&amp;rsquo;d hope.
I&amp;rsquo;ve noticed that there can be a tendency for people to direct any comments they make during the retrospective towards the manager, thereby excluding others from the conversation.
Having the facilitator call out their role at the beginning of the retrospective and encourage participants to address any comments to the group can help to counter this situation.</description>
    </item>
    
    <item>
      <title>Retrospectives: Actions</title>
      <link>https://markhneedham.com/blog/2010/11/06/retrospectives-actions/</link>
      <pubDate>Sat, 06 Nov 2010 11:59:16 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/11/06/retrospectives-actions/</guid>
      <description>My colleague Ashwin Raghav wrote a blog post earlier in the week in which he noted some patterns that he&amp;rsquo;s noticed in retrospectives in his time working in ThoughtWorks.
In it he talks quite generally about things he&amp;rsquo;s noticed but in my experience one of the areas in which teams typically struggle is when it comes to action items.
We find so many things that we can improve in our team and we want to try and do all of them straight away.</description>
    </item>
    
    <item>
      <title>Agile: Story Wall - A couple of learnings</title>
      <link>https://markhneedham.com/blog/2010/10/22/agile-story-wall-a-couple-of-learnings/</link>
      <pubDate>Fri, 22 Oct 2010 17:13:34 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/10/22/agile-story-wall-a-couple-of-learnings/</guid>
      <description>I wrote earlier in the week about the benefits of having a physical story wall on a distributed teamand in the process of getting one in place on the project we learnt a few things that I&amp;rsquo;d previously taken for granted.
The problem with this approach was that it wasn&amp;rsquo;t easy to glance at the wall from wherever you were sitting and be able to quickly gauge the state of the project at any given time.</description>
    </item>
    
    <item>
      <title>Agile: Constraints</title>
      <link>https://markhneedham.com/blog/2010/10/13/agile-constraints/</link>
      <pubDate>Wed, 13 Oct 2010 14:03:54 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/10/13/agile-constraints/</guid>
      <description>I recently came across quite an interesting post written by Steve Garnett where he discusses the difference between constraints and impediments inside organisations.
He comes to the following conclusion:
If whoever is working with the obstacle believes it can be removed then it is considered an impediment, if the same person doesn&amp;rsquo;t not believe it can be removed, or doesn&amp;rsquo;t wish to work towards it&amp;rsquo;s removal, it&amp;rsquo;s considered a constraint.</description>
    </item>
    
    <item>
      <title>Agile: The curse of meetings</title>
      <link>https://markhneedham.com/blog/2010/10/09/agile-the-curse-of-meetings/</link>
      <pubDate>Sat, 09 Oct 2010 03:39:29 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/10/09/agile-the-curse-of-meetings/</guid>
      <description>Something which can often happen with agile software development teams is that in the desire to take everyone&amp;rsquo;s opinion into account for every decision we end up having a lot of meetings.
Toni wrote about this a while agoand described a situation where he&amp;rsquo;d managed to get rid of a meeting and just have a discussion after the stand up with the necessary people.
While this is a good idea I still think there are occasions where it&amp;rsquo;s not necessary to discuss every problem down to the minute details with the whole team.</description>
    </item>
    
    <item>
      <title>Agile: Developer attendance at showcases</title>
      <link>https://markhneedham.com/blog/2010/07/27/agile-developer-attendance-at-showcases/</link>
      <pubDate>Tue, 27 Jul 2010 07:31:59 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/07/27/agile-developer-attendance-at-showcases/</guid>
      <description>On the majority of the projects that I&amp;rsquo;ve worked on at ThoughtWorks we&amp;rsquo;ve held a showcase at the end of each iteration to show our client what we&amp;rsquo;ve been working on and finished over the previous one or two weeks.
The format of these showcases has been fairly similar each time but the people who attended has tended to vary depending on the situation.
As part of the project being worked on at ThoughtWorks Universitywe&amp;rsquo;ve run a showcase at the end of each week which the whole team have been attending.</description>
    </item>
    
    <item>
      <title>Writing off a badly executed practice</title>
      <link>https://markhneedham.com/blog/2010/07/17/writing-off-a-badly-executed-practice/</link>
      <pubDate>Sat, 17 Jul 2010 11:13:51 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/07/17/writing-off-a-badly-executed-practice/</guid>
      <description>I recently came across an interesting post about pair programming by Paritosh Ranjan where he outlines some of the problems he&amp;rsquo;s experienced with this practice.
While some of the points that he raises are certainly valid I think they&amp;rsquo;re more evidence of pair programming not being done in an effective way rather than a problem with the idea in itself.
To take one example:
While it&amp;rsquo;s certainly possible to end up with this scenario, I&amp;rsquo;ve also taken part in pairing sessions where we were able to think through a problem and come up with a design much more effectively than either of us would have been able to alone.</description>
    </item>
    
    <item>
      <title>Slack time</title>
      <link>https://markhneedham.com/blog/2010/06/18/slack-time/</link>
      <pubDate>Fri, 18 Jun 2010 17:36:25 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/06/18/slack-time/</guid>
      <description>Ken Schwaber recently wrote a blog post where he compared the differences between the kanban, lean and scrum approaches to software developmentand although I haven&amp;rsquo;t had the same experiences as he has with the first two, one interesting thing he implies is that with a scrum approach we have slack time built in.
The project that I&amp;rsquo;m currently working on has switched emphasis from being in pure delivery mode into a combination of delivery and handover and it&amp;rsquo;s been quite noticeable how much more slack we have in the system as a result.</description>
    </item>
    
    <item>
      <title>Retrospectives: Some thoughts</title>
      <link>https://markhneedham.com/blog/2010/06/10/retrospectives-some-thoughts/</link>
      <pubDate>Thu, 10 Jun 2010 07:22:38 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/06/10/retrospectives-some-thoughts/</guid>
      <description>I&amp;rsquo;ve worked on two different teams this year which had quite different approaches to retrospectives.
In the first team we had a retrospective at the beginning of every iterationi.e. once every two weeks and in the second team we tried out the idea of having a rolling retrospectivei.e. we put up potential retrospective items on the wall and when there were enough of those we discussed them in the standup.</description>
    </item>
    
    <item>
      <title>Agile: Chasing a points total</title>
      <link>https://markhneedham.com/blog/2010/05/11/agile-chasing-a-points-total/</link>
      <pubDate>Tue, 11 May 2010 22:28:42 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/05/11/agile-chasing-a-points-total/</guid>
      <description>I&amp;rsquo;ve previously written about the danger of using velocity as a goalbut on almost every project I&amp;rsquo;ve worked on at some stage we do actually end up chasing a points total.
Something I find quite interesting towards the end of an iteration is that if there is a choice of two stories to pick up then the project manager will nearly always press for one which can be completed within the remaining time in order to get the points total for that iteration higher.</description>
    </item>
    
    <item>
      <title>Agile: Slimming down stories</title>
      <link>https://markhneedham.com/blog/2010/04/14/agile-slimming-down-stories/</link>
      <pubDate>Wed, 14 Apr 2010 22:53:07 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/04/14/agile-slimming-down-stories/</guid>
      <description>On the project I&amp;rsquo;m currently working on we have several stories around writing the code that does various different calculations based on user input and then shows the results on the screen.
The original assumption on these stories was that we would be looking up the data of the business rules from a local database. The data would be copied across from a central database into that one for this project.</description>
    </item>
    
    <item>
      <title>Velocity as a goal </title>
      <link>https://markhneedham.com/blog/2010/04/07/velocity-as-a-goal/</link>
      <pubDate>Wed, 07 Apr 2010 23:36:16 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/04/07/velocity-as-a-goal/</guid>
      <description>Grant Joung wrote a post a while ago about velocity goalsand whether they&amp;rsquo;re a good or bad idea, a topic which seems to come up from time to time on agile teams.
My colleague Danilo Sato previously wrote about the dangers of using velocity as a performance measurebecause it&amp;rsquo;s something that&amp;rsquo;s directly within our control and can therefore be gamed:
Danilo suggests that we should look to use metrics which are outside of our immediate control but which we can score high on if we focus on doing a good job.</description>
    </item>
    
    <item>
      <title>Finding the assumptions in stories</title>
      <link>https://markhneedham.com/blog/2010/03/26/finding-the-assumptions-in-stories/</link>
      <pubDate>Fri, 26 Mar 2010 01:14:15 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/03/26/finding-the-assumptions-in-stories/</guid>
      <description>My colleague J.K. has written an interesting blog post where he describes a slightly different approach that he&amp;rsquo;s been taking to writing storiesto help move the business value in a story towards the beginning of the description and avoid detailing a solution in the &amp;lsquo;I want&amp;rsquo; section of the story.
To summarise, J.K.&amp;lsquo;s current approach involves moving from the traditional story format of:
As I... I want.. So that... To the following:</description>
    </item>
    
    <item>
      <title>A reminder about context switching</title>
      <link>https://markhneedham.com/blog/2010/03/01/a-reminder-about-context-switching/</link>
      <pubDate>Mon, 01 Mar 2010 23:12:01 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/03/01/a-reminder-about-context-switching/</guid>
      <description>I&amp;rsquo;ve spent most of my time working on agile software development teams over the last few years so for the most part each pair is only working on one story, keeping the work in progress low and allowing them to focus on that piece of work until it&amp;rsquo;s completed.
My pair and I ended up in a therefore somewhat unusual situation last week where we were attempting to work on three things at the same time and weren&amp;rsquo;t doing a particularly great job on any of them.</description>
    </item>
    
    <item>
      <title>Requirements: The story points focus</title>
      <link>https://markhneedham.com/blog/2009/11/23/requirements-the-story-points-focus/</link>
      <pubDate>Mon, 23 Nov 2009 11:46:52 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/11/23/requirements-the-story-points-focus/</guid>
      <description>Something which an agile approach on a project typically gives us is the ability to change requirements rapidly based on the different types of feedback we typically get over the course of the project.
One way that we can lose this advantage is by getting caught up by the number of story points being completed and using this as the measure of success.
The flexibility to change has an impact on the number of story points that may be completed in a given iteration - if we start doing some work on a story and then get feedback from the business while it is still in progress it&amp;rsquo;s possible that we will end up with more work to do than we had previously.</description>
    </item>
    
    <item>
      <title>Lean: Big Picture over Local Optimisations</title>
      <link>https://markhneedham.com/blog/2009/04/14/lean-big-picture-over-local-optimisations/</link>
      <pubDate>Tue, 14 Apr 2009 22:10:13 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/04/14/lean-big-picture-over-local-optimisations/</guid>
      <description>I recently finished reading Lean Thinkingand one of the things that was repeatedly emphasised is the need to look at the process as a whole rather than trying to optimise each part individually.
If we phrased this in a similar way to the Agile Manifesto it would probably read &amp;lsquo;Big Picture over Local Optimisations&amp;rsquo;.
The examples in Lean Thinking tend to be more manufacturing focused but I think this idea can certainly be applied in thinking about software projects too.</description>
    </item>
    
    <item>
      <title>Agile: Re-estimating cards</title>
      <link>https://markhneedham.com/blog/2009/02/11/agile-re-estimating-cards/</link>
      <pubDate>Wed, 11 Feb 2009 07:25:50 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/02/11/agile-re-estimating-cards/</guid>
      <description>Chris Johnston has another interesting post in which he writes about the practice of re-estimating cards after they have been completed.
I think this somewhat misses the point that the estimate is indeed supposed to be an estimate. It might turn out to be too optimistic or too pessimistic, the theory being that overall we will end up with a reasonable balance that will allow us to make a prediction on how much work we believe we can complete in a certain time period.</description>
    </item>
    
    <item>
      <title>Agile: What is it?</title>
      <link>https://markhneedham.com/blog/2009/02/09/agile-what-is-it/</link>
      <pubDate>Mon, 09 Feb 2009 17:06:02 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/02/09/agile-what-is-it/</guid>
      <description>My colleague Chris Johnston wrote recently about his experiences in agile software development, posing some questions that he has.
Specifically:
Now I&amp;rsquo;m assuming that most (if not all) of Chris&amp;rsquo; experiences with agile have been at ThoughtWorks, in which case the mix of agile we use on our projects tends to be a combination of Scrum and Extreme Programming.
The last question seems the most logical to start with:
I&amp;rsquo;m with Chris on this one - as far as I understand agile is all about adapting a set of principles to the environmentthat we find ourself in.</description>
    </item>
    
    <item>
      <title>Agile: Why do we integrate early?</title>
      <link>https://markhneedham.com/blog/2009/02/06/agile-why-do-we-integrate-early/</link>
      <pubDate>Fri, 06 Feb 2009 16:47:26 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/02/06/agile-why-do-we-integrate-early/</guid>
      <description>One of the inevitabilities of most projects is that at some stage there is going to need be some sort of integration.
The likes of Alistair Cockburn in Crystal Clearand Andy Hunt/Dave Thomas in The Pragmatic Programmertalk of the need to do integration early rather than letting it wait until later, but why?
To some degree every time we try to integrate there is going to be some level of pain - for me it therefore makes sense that we take this pain early on when we have the chance to do something about it rather than leaving it until later and being surprised at the problems it causes.</description>
    </item>
    
    <item>
      <title>Agile: When is a story done?</title>
      <link>https://markhneedham.com/blog/2009/01/04/agile-when-is-a-story-done/</link>
      <pubDate>Sun, 04 Jan 2009 22:17:08 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/01/04/agile-when-is-a-story-done/</guid>
      <description>I&amp;rsquo;ve worked on a few different agile projects and one of the things that hasn&amp;rsquo;t been completely consistent is when we consider a story to be &amp;lsquo;done&amp;rsquo;.
There seem to a few different approaches, each of which has its benefits and drawbacks.
With this approach we count a story as done when it has been signed of by a business proxy, typically a client business analyst or maybe a combination of a BA/QA.</description>
    </item>
    
    <item>
      <title>Agile: Some misconceptions</title>
      <link>https://markhneedham.com/blog/2008/12/31/agile-some-misconceptions/</link>
      <pubDate>Wed, 31 Dec 2008 09:04:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/12/31/agile-some-misconceptions/</guid>
      <description>I came across an interesting article written for Visual Studio Magazineabout agile methodologies where the author makes what I consider to be some misconceptions.
The first is around the level of experience of people working on an agile team:
I wouldn&amp;rsquo;t say I have a high level of experience and I&amp;rsquo;ve been working on agile teams for the past two years, just one data point suggesting that this statement is not actually accurate.</description>
    </item>
    
    <item>
      <title>Agile/Lean: All or Nothing?</title>
      <link>https://markhneedham.com/blog/2008/11/26/agilelean-all-or-nothing/</link>
      <pubDate>Wed, 26 Nov 2008 06:29:06 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/11/26/agilelean-all-or-nothing/</guid>
      <description>While reading The Toyota Wayone of the ideas which stood out for me was the constant mentioning of organisations which picked bits of The Toyota Way, implemented them, achieved some short term gains but then eventually these improvements and went back to the way they were before.
I noticed a similar theme coming out in the seriesofpostsin the last week or so about the decline of agile.
I have worked on several projects over the last couple of years with varying levels of agile being applied.</description>
    </item>
    
    <item>
      <title>Agile: A reminder of the benefits of colocation </title>
      <link>https://markhneedham.com/blog/2008/11/22/agile-a-reminder-of-the-benefits-of-colocation/</link>
      <pubDate>Sat, 22 Nov 2008 12:46:27 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/11/22/agile-a-reminder-of-the-benefits-of-colocation/</guid>
      <description>Sometimes it&amp;rsquo;s the seemingly small details of the agile/XP approach to software development that make it so much more effective than the traditional approach.
I was reminded of this last week with regards to having co-located teamswith the developers, BAs, QAs and the business people all sitting in close proximity.
I was working on the auto completion function for one of our screens and the QA on the team, who was sitting next to me, asked me if I could look through the acceptance criteria that he was working on.</description>
    </item>
    
    <item>
      <title>Standups: Pair stand together</title>
      <link>https://markhneedham.com/blog/2008/11/17/standups-pair-stand-together/</link>
      <pubDate>Mon, 17 Nov 2008 22:16:11 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/11/17/standups-pair-stand-together/</guid>
      <description>One of the common trends I have noticed in the stand upsof teams which practice pair programming is that very often the first person in the pair describes what they have been working on and what they will be doing today and then when it comes to the other person they say &amp;lsquo;ditto&amp;rsquo;.
After I dittoed one too many times on a project earlier this year it was pointed out to me that this was not a valuable way of contributing to the weekend and that I should describe my view of our progress as it may differ to my pair.</description>
    </item>
    
    <item>
      <title>Agile - Should everyone have to learn all the roles?</title>
      <link>https://markhneedham.com/blog/2008/11/17/agile-should-everyone-have-to-learn-all-the-roles/</link>
      <pubDate>Mon, 17 Nov 2008 00:14:22 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/11/17/agile-should-everyone-have-to-learn-all-the-roles/</guid>
      <description>In my final year of university a few years ago when I was applying for jobs I was really keen to join the (then) Reuters Graduate Technology program.
The thing that appealed to me the most was that over the 2 years you were on the graduate program you would have the opportunity to be placed in 4 different roles within the business.	The website gives some examples:
What I really liked about this idea was:</description>
    </item>
    
    <item>
      <title>Agile: The Client/User dilemma</title>
      <link>https://markhneedham.com/blog/2008/11/12/agile-the-clientuser-dilemma/</link>
      <pubDate>Wed, 12 Nov 2008 07:22:55 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/11/12/agile-the-clientuser-dilemma/</guid>
      <description>While reading Marc&amp;rsquo;s post about the Customer or Clientnaming dilemma I was reminded of another situation I have noticed in software development - the Client/User dilemma.
From my experience of agile projects it tends to be much more likely that we can get easy access to our client than to the users of the system we are writing.
Alistair Cockburn mentions in Crystal Clearthat having an expert user sit with the team can be very useful, but it is not something that I have experienced on all the projects that I have worked on.</description>
    </item>
    
    <item>
      <title>Agile: Putting the risk up front</title>
      <link>https://markhneedham.com/blog/2008/11/10/agile-putting-the-risk-up-front/</link>
      <pubDate>Mon, 10 Nov 2008 22:44:15 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/11/10/agile-putting-the-risk-up-front/</guid>
      <description>The last two projects that I&amp;rsquo;ve worked on I&amp;rsquo;ve been on the project from right near the start, and one thing that&amp;rsquo;s been consistent in both projects is that we&amp;rsquo;ve spent time early on in the project trying to reduce technical risk.
In my most recent project this has involved getting infrastructure in place early on, and in the previous one it involved working on technical spikes for several weeks to prove that what the client was asking for was actually technically possible.</description>
    </item>
    
    <item>
      <title>Onshore or Offshore - The concepts are the same?</title>
      <link>https://markhneedham.com/blog/2008/09/24/onshore-or-offshore-the-concepts-are-the-same/</link>
      <pubDate>Wed, 24 Sep 2008 07:08:54 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/09/24/onshore-or-offshore-the-concepts-are-the-same/</guid>
      <description>I&amp;rsquo;ve never worked on a distributed or offshore project before, but intrigued having read about Jay Fields&amp;rsquo; experiencesI attended the &#39;OffShoring: The Current State of Play&#39;Quarterly Technology Briefing held this morning in Sydney to hear the other side of the argument.
The underlying message for me was that a lot of the concepts we apply for onshore projects are equally important for offshore projects.
Forrester&amp;rsquo;s Tim Sheedystarted off by providing some research data on the state of IT offshoring, some reasons he had identified around which type of work should be offshored before closing on some reasons that it might fail if not done correctly.</description>
    </item>
    
    <item>
      <title>The Wisdom of Crowds and groupthink in Agile Software Development</title>
      <link>https://markhneedham.com/blog/2008/09/03/the-wisdom-of-crowds-and-groupthink-in-agile-software-development/</link>
      <pubDate>Wed, 03 Sep 2008 15:17:15 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/09/03/the-wisdom-of-crowds-and-groupthink-in-agile-software-development/</guid>
      <description>Gojko Adzicposted a summaryof a talk James Surowiecki gave at Agile 2008and it got me thinking how we use the Wisdom of Crowdsin Agile projects.
One of the most interesting things I learnt from the book is that when you bring together a diverse group of people, their output will probably be better than any one expert. Gojko points out this example that was used at Agile 2008:
There are a couple of areas of agile where I have seen how The Wisdom of Crowds can become groupthinkif we&amp;rsquo;re not careful:</description>
    </item>
    
    <item>
      <title>Perils of estimation</title>
      <link>https://markhneedham.com/blog/2008/08/31/perils-of-estimation/</link>
      <pubDate>Sun, 31 Aug 2008 00:24:51 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/08/31/perils-of-estimation/</guid>
      <description>I had my first opportunity to participate in release plan estimation over the last couple of weeks. I&amp;rsquo;ve done estimation before but never at such a high level.
When doing this it appeared clear that there were two situations that we were trying to avoid:
Under estimating is where we predict that the amount of time taken to complete a piece of work will be less than it actually is.</description>
    </item>
    
    <item>
      <title>Agile - Should we track more than just development?</title>
      <link>https://markhneedham.com/blog/2008/08/26/agile-should-we-track-more-than-just-development/</link>
      <pubDate>Tue, 26 Aug 2008 23:57:40 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/08/26/agile-should-we-track-more-than-just-development/</guid>
      <description>I touched earlieron the transparency of agile and I&amp;rsquo;ve been thinking about some of the ways that we track/report information in agile projects.
In all the projects I&amp;rsquo;ve been involved in the data being tracked almost exclusively referred to development time. One of the advantages of having continuous analysis/development/testing is that we are able to reduce the time spent on the System Integration and User Acceptance Testing phases of the project.</description>
    </item>
    
    <item>
      <title>The transparency of Agile</title>
      <link>https://markhneedham.com/blog/2008/08/26/the-transparency-of-agile/</link>
      <pubDate>Tue, 26 Aug 2008 11:46:46 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/08/26/the-transparency-of-agile/</guid>
      <description>One of the key ideas behind agile software development is providing information as early as possible to allow the business to best make decisions.
There are a variety of ways that this is done including the use of burn up charts, estimates of scope and velocity for example. This data is compiled to try and give an accurate idea of how long a project is likely to take so that the business can work out early on whether the value it adds is worth the expected cost.</description>
    </item>
    
  </channel>
</rss>