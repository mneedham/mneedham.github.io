<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>materialize on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/category/materialize/</link>
    <description>Recent content in materialize on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Jan 2021 00:44:37 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/category/materialize/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Materialize: Creating multiple views on one source</title>
      <link>https://www.markhneedham.com/blog/2021/01/28/materialize-multiple-views-one-source/</link>
      <pubDate>Thu, 28 Jan 2021 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2021/01/28/materialize-multiple-views-one-source/</guid>
      <description>This is another post describing my exploration of Materialize, a SQL streaming database. In this post we’re going to learn how to create multiple views on top of the same underlying source.
We’re still going to be using data extracted from Strava, an app that I use to record my runs, but this time we have more detailed information about each run. As in the previous blog posts, each run is represented as JSON document and store in the activities-detailed-all.</description>
    </item>
    
    <item>
      <title>Materialize: Unable to automatically determine a timestamp for your query; this can happen if your query depends on non-materialized sources</title>
      <link>https://www.markhneedham.com/blog/2020/12/31/materialize-unable-automatically-determine-timestamp-query/</link>
      <pubDate>Thu, 31 Dec 2020 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2020/12/31/materialize-unable-automatically-determine-timestamp-query/</guid>
      <description>This is another post describing my exploration of Materialize, a SQL streaming database. In this post I’m going to explain a confusing (to me at least) error message that you might come across when you’re getting started.
As I mentioned in my first post about Materialize, the general idea is that you create a source around a data resource and then a view on top of that. Those views can either be materialized or non-materialized.</description>
    </item>
    
    <item>
      <title>Materialize: Querying JSON arrays</title>
      <link>https://www.markhneedham.com/blog/2020/12/29/materialize-json-arrays/</link>
      <pubDate>Tue, 29 Dec 2020 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2020/12/29/materialize-json-arrays/</guid>
      <description>In a blog post I wrote a couple of weeks ago, we learned how to analyse JSON files using the Materialize SQL streaming database.
In this post we’re going to build on that knowledge to analyse a JSON file of tweets that contain arrays of hashtags. It took me a while to figure out to do this, so I wanted to share what I learnt along the way.
The JSON file that we’re going to analyse looks like this and we’ll save that file in a data directory locally.</description>
    </item>
    
    <item>
      <title>Materialize: Querying JSON files</title>
      <link>https://www.markhneedham.com/blog/2020/12/17/materialize-querying-json-file/</link>
      <pubDate>Thu, 17 Dec 2020 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2020/12/17/materialize-querying-json-file/</guid>
      <description>I recently learnt about Materialize, a SQL streaming database, via their Series B fundraising announcement, and thought I’d take it for a spin.
My go-to dataset for new databases is Strava, an app that I use to record my runs. It has an API that returns a JSON representation of each run, containing information like the distance covered, elapsed time, heart rate metrics, and more.
I’ve extracted my latest 30 activities to a file in the JSON lines format and in this post we’re going to analyse that data using Materialize.</description>
    </item>
    
  </channel>
</rss>
