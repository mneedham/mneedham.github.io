<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kafka on Mark Needham</title>
    <link>https://markhneedham.com/blog/category/kafka/</link>
    <description>Recent content in Kafka on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 May 2019 12:46:00 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/category/kafka/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Processing Neo4j Transaction Events with KSQL and Kafka Streams</title>
      <link>https://markhneedham.com/blog/2019/05/23/processing-neo4j-transaction-events-ksql-kafka-streams/</link>
      <pubDate>Thu, 23 May 2019 12:46:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2019/05/23/processing-neo4j-transaction-events-ksql-kafka-streams/</guid>
      <description>The Neo4j Streams Library lets users send transaction events to a Kafka topic, and in this post we&amp;#8217;re going to learn how to explore these events using the KSQL streaming SQL Engine.
 All the infrastructure used in this post can be launched locally from Docker compose, using the following command:
 git clone git@github.com:mneedham/ksql-kafka-neo4j-streams.git &amp;amp;&amp;amp; cd ksql-kafka-neo4j-streams docker-compose-up   Running this command will create four containers:
 Starting zookeeper-blog .</description>
    </item>
    
    <item>
      <title>Deleting Kafka Topics on Docker</title>
      <link>https://markhneedham.com/blog/2019/05/23/deleting-kafka-topics-on-docker/</link>
      <pubDate>Thu, 23 May 2019 07:58:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2019/05/23/deleting-kafka-topics-on-docker/</guid>
      <description>In this post we&amp;#8217;re going to learn how to delete a Kafka Topic when running a Kafka Broker on Docker.
 We&amp;#8217;ll spin up a local Kafka environment using the Docker Compose template from the Kafka Basic Tutorial blog post that I wrote last week. Let&amp;#8217;s open a terminal window and run the following commands to set up our environment:
 git clone git@github.com:mneedham/basic-kafka-tutorial.git &amp;amp;&amp;amp; cd basic-kafka-tutorial docker-compose up   On another terminal window, run the following command to see the list of Docker containers that are running:</description>
    </item>
    
    <item>
      <title>KSQL: Create Stream - extraneous input &#39;properties&#39;</title>
      <link>https://markhneedham.com/blog/2019/05/20/kql-create-stream-extraneous-input/</link>
      <pubDate>Mon, 20 May 2019 11:43:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2019/05/20/kql-create-stream-extraneous-input/</guid>
      <description>In my continued playing with the KSQL streaming engine for Kafka, I came across another interesting error while trying to put a stream on top of a topic generated by the Neo4j Streams Library.
 We&amp;#8217;ll simplify the events being posted on the topic for this blog post, so this is what the events on the topic look like:
 { &#34;id&#34;:&#34;ABCDEFGHI&#34;, &#34;properties&#34;: { &#34;name&#34;:&#34;Mark&#34;, &#34;location&#34;:&#34;London&#34; } }   We then create a stream on that topic:</description>
    </item>
    
    <item>
      <title>KSQL: Create Stream - Failed to prepare statement: name is null</title>
      <link>https://markhneedham.com/blog/2019/05/19/ksql-create-stream-failed-to-prepare-statement-name-is-null/</link>
      <pubDate>Sun, 19 May 2019 19:21:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2019/05/19/ksql-create-stream-failed-to-prepare-statement-name-is-null/</guid>
      <description>I&amp;#8217;ve been playing with KSQL over the weekend and ran into a basic error message that took me a little while to solve.
 I was trying to create a stream over a topic dummy1, which is the simplest possible thing you can do with KSQL. The events posted to dummy1 are JSON messages containing only an id key. Below is an example of a message posted to the topic:</description>
    </item>
    
    <item>
      <title>Kafka: A basic tutorial</title>
      <link>https://markhneedham.com/blog/2019/05/16/kafka-basic-tutorial/</link>
      <pubDate>Thu, 16 May 2019 10:02:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2019/05/16/kafka-basic-tutorial/</guid>
      <description>In this post we&amp;#8217;re going to learn how to launch Kafka locally and write to and read from a topic using one of the Python drivers.
 To make things easy for myself, I&amp;#8217;ve created a Docker Compose template that launches 3 containers:
   broker - our Kafka broker
  zookeeper - used by Kafka for leader election
  jupyter - notebooks for connecting to our Kafka broker</description>
    </item>
    
  </channel>
</rss>