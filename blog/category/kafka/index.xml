<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kafka on Mark Needham</title>
    <link>https://markhneedham.com/blog/category/kafka/</link>
    <description>Recent content in Kafka on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 May 2019 19:21:00 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/category/kafka/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>KSQL: Create Stream - Failed to prepare statement: name is null</title>
      <link>https://markhneedham.com/blog/2019/05/19/ksql-create-stream-failed-to-prepare-statement-name-is-null/</link>
      <pubDate>Sun, 19 May 2019 19:21:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2019/05/19/ksql-create-stream-failed-to-prepare-statement-name-is-null/</guid>
      <description>I&amp;#8217;ve been playing with KSQL over the weekend and ran into a basic error message that took me a little while to solve.
 I was trying to create a stream over a topic dummy1, which is the simplest possible thing you can do with KSQL. The events posted to dummy1 are JSON messages containing only an id key. Below is an example of a message posted to the topic:</description>
    </item>
    
    <item>
      <title>Kafka: A basic tutorial</title>
      <link>https://markhneedham.com/blog/2019/05/16/kafka-basic-tutorial/</link>
      <pubDate>Thu, 16 May 2019 10:02:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2019/05/16/kafka-basic-tutorial/</guid>
      <description>In this post we&amp;#8217;re going to learn how to launch Kafka locally and write to and read from a topic using one of the Python drivers.
 To make things easy for myself, I&amp;#8217;ve created a Docker Compose template that launches 3 containers:
   broker - our Kafka broker
  zookeeper - used by Kafka for leader election
  jupyter - notebooks for connecting to our Kafka broker</description>
    </item>
    
  </channel>
</rss>