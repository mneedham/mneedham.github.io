<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Mark Needham</title>
    <link>https://markhneedham.com/blog/category/android/</link>
    <description>Recent content in Android on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Jan 2012 17:24:30 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/category/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Learning Android: Roboguice - Injecting context into PreferenceManager</title>
      <link>https://markhneedham.com/blog/2012/01/12/learning-android-roboguice-injecting-context-into-preferencemanager/</link>
      <pubDate>Thu, 12 Jan 2012 17:24:30 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/01/12/learning-android-roboguice-injecting-context-into-preferencemanager/</guid>
      <description>In my last post I showed how I&amp;rsquo;d been able to write a test around saved preferences in my app by making use of a ShadowPreferenceManager but it seemed a bit hacky.
I didn&amp;rsquo;t want to have to do that for every test where I dealt with preferences - I thought it&amp;rsquo;d be better if I could wrap the preferences in an object of my own and then inject it where necessary.</description>
    </item>
    
    <item>
      <title>Learning Android: Robolectric - Testing details got saved to SharedPreferences</title>
      <link>https://markhneedham.com/blog/2012/01/10/learning-android-testing-details-got-saved-to-sharedpreferences/</link>
      <pubDate>Tue, 10 Jan 2012 09:53:48 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/01/10/learning-android-testing-details-got-saved-to-sharedpreferences/</guid>
      <description>I&amp;rsquo;ve been writing some tests around an app I&amp;rsquo;ve been working on using the Robolectric testing framework and one thing I wanted to do was check that an OAuth token/secret were being saved to the user&amp;rsquo;s preferences.
The code that saved the preferences looked like this:
public class AuthoriseWithTwitterActivity extends RoboActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(intent); ... save(&amp;quot;fakeToken&amp;quot;, &amp;quot;fakeSecret&amp;quot;); ... } private void save(String userKey, String userSecret) { SharedPreferences settings = PreferenceManager.</description>
    </item>
    
    <item>
      <title>Learning Android: Getting android-support jar/compatability package as a Maven dependency</title>
      <link>https://markhneedham.com/blog/2012/01/08/learning-android-getting-android-support-jarcompatability-package-as-a-maven-dependency/</link>
      <pubDate>Sun, 08 Jan 2012 20:56:45 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/01/08/learning-android-getting-android-support-jarcompatability-package-as-a-maven-dependency/</guid>
      <description>In the app I&amp;rsquo;m working on I make use of the ViewPager class which is only available in the compatibility package from revisions 3 upwards.
Initially I followed the instructions on the developer guide to get hold of the jar but now that I&amp;rsquo;m trying to adapt my code to fit the RobolectricSample, as I mentioned in my previous post, I needed to hook it up as a Maven dependency.</description>
    </item>
    
    <item>
      <title>Learning Android: java.lang.OutOfMemoryError: Java heap space with android-maven-plugin</title>
      <link>https://markhneedham.com/blog/2012/01/07/learning-android-java-lang-outofmemoryerror-java-heap-space-with-android-maven-plugin/</link>
      <pubDate>Sat, 07 Jan 2012 17:14:41 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/01/07/learning-android-java-lang-outofmemoryerror-java-heap-space-with-android-maven-plugin/</guid>
      <description>I&amp;rsquo;ve been trying to adapt my Android application to fit into the structure of the RobolectricSample so that I can add some tests around my code but I was running into a problem when trying to deploy the application.
To deploy the application you need to run the following command:
mvn package android:deploy  Which was resulting in the following error:
[INFO] UNEXPECTED TOP-LEVEL ERROR: [INFO] java.lang.OutOfMemoryError: Java heap space [INFO] at com.</description>
    </item>
    
    <item>
      <title>Learning Android: Freezing the UI with a BroadcastReceiver</title>
      <link>https://markhneedham.com/blog/2012/01/06/learning-android-freezing-the-ui-with-a-broadcastreceiver/</link>
      <pubDate>Fri, 06 Jan 2012 23:40:53 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/01/06/learning-android-freezing-the-ui-with-a-broadcastreceiver/</guid>
      <description>As I mentioned in a previous post I recently wrote some code in my Android app to inform a BroadcastReceiver whenever a service processed a tweet with a link in it but in implementing this I managed to freeze the UI every time that happened.
I made the stupid (in hindsight) mistake of not realising that I shouldn&amp;rsquo;t be doing a lot of logic in BroadcastReceiver.onReceive since that bit of code gets executed on the UI thread.</description>
    </item>
    
    <item>
      <title>Learning Android: Getting a service to communicate with an activity</title>
      <link>https://markhneedham.com/blog/2012/01/05/learning-android-getting-a-service-to-communicate-with-an-activity/</link>
      <pubDate>Thu, 05 Jan 2012 01:41:32 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/01/05/learning-android-getting-a-service-to-communicate-with-an-activity/</guid>
      <description>In the app I&amp;rsquo;m working on I created a service which runs in the background away from the main UI thread consuming the Twitter streaming API using twitter4j.
It looks like this:
public class TweetService extends IntentService { String consumerKey = &amp;quot;TwitterConsumerKey&amp;quot;; String consumerSecret = &amp;quot;TwitterConsumerSecret&amp;quot;; public TweetService() { super(&amp;quot;Tweet Service&amp;quot;); } @Override protected void onHandleIntent(Intent intent) { AccessToken accessToken = createAccessToken(); StatusListener listener = new UserStreamListener() { // override a whole load of methods - removed for brevity public void onStatus(Status status) { String theTweet = status.</description>
    </item>
    
    <item>
      <title>Learning Android: Authenticating with Twitter using OAuth</title>
      <link>https://markhneedham.com/blog/2012/01/02/learning-android-authenticating-with-twitter-using-oauth/</link>
      <pubDate>Mon, 02 Jan 2012 02:39:52 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/01/02/learning-android-authenticating-with-twitter-using-oauth/</guid>
      <description>I want to be able to get the tweets from my timeline into my app which means I need to authorise the app with Twitter using OAuth.
The last time I tried to authenticate using OAuth a couple of years ago was a bit of a failure but luckily this time Honza Pokorny has written a blog post explaining what to do.
I had to adjust the code a little bit from what&amp;rsquo;s written on his post so I thought I&amp;rsquo;d document what I&amp;rsquo;ve done.</description>
    </item>
    
    <item>
      <title>Learning Android: &#39;Unable to start service Intent not found&#39;</title>
      <link>https://markhneedham.com/blog/2012/01/01/learning-android-unable-to-start-service-intent-not-found/</link>
      <pubDate>Sun, 01 Jan 2012 03:22:34 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/01/01/learning-android-unable-to-start-service-intent-not-found/</guid>
      <description>In the Android application that I&amp;rsquo;ve been playing around with I wrote a service which consumes the Twitter streaming API which I trigger from the app&amp;rsquo;s main activity like so:
public class MyActivity extends Activity { ... @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Intent intent = new Intent(this, TweetService.class); startService(intent); ... } }  Where TweetService is defined roughly like this:
public class TweetService extends IntentService { @Override protected void onHandleIntent(Intent intent) { // Twitter streaming API stuff goes here } }  Unfortunately when I tried to deploy the app the service wasn&amp;rsquo;t starting and I got this message in the log:</description>
    </item>
    
    <item>
      <title>Learning Android: Sharing with Twitter/the &#39;share via&#39; dialog</title>
      <link>https://markhneedham.com/blog/2011/12/29/learning-android-sharing-with-twitterthe-share-via-dialog/</link>
      <pubDate>Thu, 29 Dec 2011 22:40:19 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/12/29/learning-android-sharing-with-twitterthe-share-via-dialog/</guid>
      <description>One thing I wanted to do in the little application I&amp;rsquo;m working on was send data to other apps on my phone using the &amp;lsquo;share via&amp;rsquo; dialog which I&amp;rsquo;ve seen used on the Twitter app.
In this case I wanted to send a link and its title to twitter and came across a StackOverflow post which explained how to do so.
To keep it simple I added a button to the view and then shared the data via the on click event on that button:</description>
    </item>
    
    <item>
      <title>Learning Android: WebView character encoding</title>
      <link>https://markhneedham.com/blog/2011/12/27/learning-android-webview-character-encoding/</link>
      <pubDate>Tue, 27 Dec 2011 23:53:56 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/12/27/learning-android-webview-character-encoding/</guid>
      <description>In my continued attempts to learn how to write an Android application I came across a problem with character encoding when trying to load some text into a WebView.
I was initially trying to write the text to the WebView like this:
WebView webview = new WebView(collection.getContext()); webview.loadData(textWithQuotesIn, &amp;quot;text/html&amp;quot;, &amp;quot;UTF-8&amp;quot;);   But ended up with the output in the picture on the left hand side. I tried playing around with the encoding and debugged the application all the way through until it hit the WebView but there didn&#39;t seem to be any problem with the text.</description>
    </item>
    
    <item>
      <title>Learning Android: Deploying application to phone from Mac OS X</title>
      <link>https://markhneedham.com/blog/2011/12/23/learning-android-deploying-application-to-phone-from-mac-os-x/</link>
      <pubDate>Fri, 23 Dec 2011 22:55:17 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/12/23/learning-android-deploying-application-to-phone-from-mac-os-x/</guid>
      <description>I&amp;rsquo;ve been playing around a little bit today with writing an Android application and while for the majority of the time I&amp;rsquo;ve been deploying to an emulator I wanted to see what it&amp;rsquo;d look like on my phone.
The developer guide contains all the instructions on how to do this but unfortunately I&amp;rsquo;m blessed with the ability to skim over instructions which meant that my phone wasn&amp;rsquo;t getting picked up by the Android Debug Bridge.</description>
    </item>
    
  </channel>
</rss>