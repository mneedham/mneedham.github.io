<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Networking on Mark Needham</title>
    <link>http://localhost:8000/blog/category/networking/</link>
    <description>Recent content in Networking on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Jul 2013 06:01:47 +0000</lastBuildDate><atom:link href="http://localhost:8000/blog/category/networking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>netcat: Strange behaviour with UDP - only receives first packet sent</title>
      <link>http://localhost:8000/blog/2013/07/30/netcat-strange-behaviour-with-udp-only-receives-first-packet-sent/</link>
      <pubDate>Tue, 30 Jul 2013 06:01:47 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2013/07/30/netcat-strange-behaviour-with-udp-only-receives-first-packet-sent/</guid>
      <description>I was playing around with netcat yesterday to create a client and server which would communicate via UDP packets and I rediscovered some &amp;#34;weird&amp;#34; behaviour which I’d previously encountered but not explained.
I started up a netcat server listening for UDP packets on port 9000 of my machine:
$ nc -kluv localhost 9000 We can check with lsof what running that command has done:
$ lsof -Pni :9000 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME nc 63289 markhneedham 5u IPv6 0xc99222a54b3975b5 0t0 UDP [::1]:9000 We can see that the netcat process is listening on port 9000 so let’s send it a UDP packet, using another netcat process:</description>
    </item>
    
    <item>
      <title>Java: Testing a socket is listening on all network interfaces/wildcard interface</title>
      <link>http://localhost:8000/blog/2013/07/14/java-testing-a-socket-is-listening-on-all-network-interfaceswildcard-interface/</link>
      <pubDate>Sun, 14 Jul 2013 14:31:44 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2013/07/14/java-testing-a-socket-is-listening-on-all-network-interfaceswildcard-interface/</guid>
      <description>I previously wrote a blog post describing how I’ve been trying to learn more about network sockets in which I created some server sockets and connected to them using netcat.
The next step was to do the same thing in Java and I started out by writing a server socket which echoed any messages sent by the client:
public class EchoServer { public static void main(String[] args) throws IOException { int port = 4444; ServerSocket serverSocket = new ServerSocket(port, 50, InetAddress.</description>
    </item>
    
    <item>
      <title>Learning more about network sockets</title>
      <link>http://localhost:8000/blog/2013/07/14/learning-more-about-network-sockets/</link>
      <pubDate>Sun, 14 Jul 2013 09:52:17 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2013/07/14/learning-more-about-network-sockets/</guid>
      <description>While reading through some of the neo4j code a few weeks ago I realised that I didn’t have a very good understanding about the mechanics behind network ports/sockets so I thought I’d try to learn more.
In particular I’d not considered what binding a socket to different network interfaces meant so I decided to setup a few examples using netcat to help me understand better.
To start with let’s list the network interfaces that I have on my machine using ifconfig:</description>
    </item>
    
    <item>
      <title>Network Address Translation</title>
      <link>http://localhost:8000/blog/2012/09/23/network-address-translation/</link>
      <pubDate>Sun, 23 Sep 2012 19:23:54 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2012/09/23/network-address-translation/</guid>
      <description>I’ve often heard people talking about Network Address Translation (NAT) but I never really understood exactly how it worked until we started configuring some virtual data centres on my current project.
This is an attempt at documenting my own current understanding so I won’t forget in future.
In our case we’ve been provisioning a bunch of machines into different private networks, and each machine therefore has an IP in the range of IPv4 addresses reserved for private networks:</description>
    </item>
    
    <item>
      <title>tcpdump: Learning how to read UDP packets</title>
      <link>http://localhost:8000/blog/2012/07/15/tcpdump-learning-how-to-read-udp-packets/</link>
      <pubDate>Sun, 15 Jul 2012 13:29:05 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2012/07/15/tcpdump-learning-how-to-read-udp-packets/</guid>
      <description>Phil and I spent some of Friday afternoon configuring statsd:
A network daemon that runs on the Node.js platform and listens for statistics, like counters and timers, sent over UDP and sends aggregates to one or more pluggable backend services
We configured it to listen on its default port 8125 and then used netcat to send UDP packets to see if it was working like so:
echo -n &amp;#34;blah:36|c&amp;#34; | nc -w 1 -u -4 localhost 8125 We used tcpdump to capture any UDP packets on port 8125 like so:</description>
    </item>
    
    <item>
      <title>netcat: localhost resolution not working when sending UDP packets</title>
      <link>http://localhost:8000/blog/2012/07/15/netcat-localhost-resolution-not-working-when-sending-udp-packets/</link>
      <pubDate>Sun, 15 Jul 2012 08:14:16 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/2012/07/15/netcat-localhost-resolution-not-working-when-sending-udp-packets/</guid>
      <description>As part of some work we were doing last week Phil and I needed to send UDP packets to a local port and check that they were being picked up.
We initially tried sending a UDP packet to localhost port 8125 using netcat like so:
echo -n &amp;#34;hello&amp;#34; | nc -w 1 -u localhost 8125 That message wasn’t being received by the application listening on the port so Phil decided to try and send the same packet from Ruby which worked fine:</description>
    </item>
    
  </channel>
</rss>
