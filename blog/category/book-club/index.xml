<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Book Club on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/category/book-club/</link>
    <description>Recent content in Book Club on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Jan 2010 19:13:22 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/category/book-club/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Book Club: Growing Object Oriented Software - Chapter 7 (Steve Freeman &amp; Nat Pryce)</title>
      <link>https://www.markhneedham.com/blog/2010/01/28/book-club-growing-object-oriented-software-chapter-7-steve-freeman-nat-pryce/</link>
      <pubDate>Thu, 28 Jan 2010 19:13:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/28/book-club-growing-object-oriented-software-chapter-7-steve-freeman-nat-pryce/</guid>
      <description>My colleague David Santoro has started up a technical book club at the client we’re working at in Wales and the book choice for the first session was Chapter 7 - Achieving Object Oriented Design - of Growing Object Oriented Software, guided by tests written by Steve Freeman and Nat Pryce.
In this chapter they cover various approaches for driving towards object oriented code including techniques to find new objects and a detailed description of TDD and how we can approach this in a way that allows us to drive out new behaviour effectively.</description>
    </item>
    
    <item>
      <title>Book Club: Working Effectively With Legacy Code - Chapters 12 &amp; 13 (Michael Feathers)</title>
      <link>https://www.markhneedham.com/blog/2009/12/20/book-club-working-effectively-with-legacy-code-chapters-12-13-michael-feathers/</link>
      <pubDate>Sun, 20 Dec 2009 03:52:12 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/12/20/book-club-working-effectively-with-legacy-code-chapters-12-13-michael-feathers/</guid>
      <description>In the last Sydney book club that I attended before I moved back to the UK we discussed Chapters 12 and 13 of Michael Feathers&amp;#39; &amp;#39;Working Effectively With Legacy Code&amp;#39;
Liz has taken over the summarising of the book club now that I’m not there so if you want to keep on reading about the book club Liz’s blog is the place to go!
Chapter 12 - I Need to Make Many Changes in One Area.</description>
    </item>
    
    <item>
      <title>Book Club: Working Effectively With Legacy Code - Chapter 11 (Michael Feathers)</title>
      <link>https://www.markhneedham.com/blog/2009/12/03/book-club-working-effectively-with-legacy-code-chapter-11-michael-feathers/</link>
      <pubDate>Thu, 03 Dec 2009 16:27:29 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/12/03/book-club-working-effectively-with-legacy-code-chapter-11-michael-feathers/</guid>
      <description>In our latest technical book club we discussed chapter 11 - &amp;#39;I Need to Make a Change. What Methods Should I Test?&amp;#39; - of Michael Feathers&amp;#39; &amp;#39;Working Effectively With Legacy Code&amp;#39;.
In this chapter Feathers covers some techniques which allow us to work out which parts of the code we need to write tests around when we make changes.
These are some of my thoughts and our discussion of the chapter:</description>
    </item>
    
    <item>
      <title>Book Club: Working Effectively With Legacy Code - Chapter 10 (Michael Feathers)</title>
      <link>https://www.markhneedham.com/blog/2009/11/24/book-club-working-effectively-with-legacy-code-chapter-10-michael-feathers/</link>
      <pubDate>Tue, 24 Nov 2009 23:31:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/11/24/book-club-working-effectively-with-legacy-code-chapter-10-michael-feathers/</guid>
      <description>In our latest technical book club we discussed chapter 10 - &amp;#39;I Can’t Run This Method in a Test Harness&amp;#39; - of Michael Feather’s &amp;#39;Working Effectively With Legacy Code&amp;#39;.
In this chapter Feathers outlines some of the problems we might have getting methods under test and then suggests some ways to get around those problems.
These are some of my thoughts and our discussion of the chapter:
I quite like the idea of pragmatic refactoring that Feathers suggests early on in the chapter:</description>
    </item>
    
    <item>
      <title>Book Club: Working Effectively With Legacy Code - Chapter 9 (Michael Feathers)</title>
      <link>https://www.markhneedham.com/blog/2009/11/18/book-club-working-effectively-with-legacy-code-chapter-9-michael-feathers/</link>
      <pubDate>Wed, 18 Nov 2009 17:25:32 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/11/18/book-club-working-effectively-with-legacy-code-chapter-9-michael-feathers/</guid>
      <description>In our latest technical book club we discussed chapter 9 - &amp;#39;I Can’t Get This Class Into A Test Harness&amp;#39; - of Michael Feather’s &amp;#39;Working Effectively With Legacy Code&amp;#39;.
This chapter goes through various problems that we might have getting a class under test and then suggests different techniques to get around those problems.
These are some of my thoughts and our discussion of the chapter:
One approach that Feathers describes when dealing with constructors which take in a lot of values is to just pass in nulls for the parameters that we don’t care about.</description>
    </item>
    
    <item>
      <title>Book Club: Working Effectively With Legacy Code - Chapter 8 (Michael Feathers)</title>
      <link>https://www.markhneedham.com/blog/2009/11/03/book-club-working-effectively-with-legacy-code-chapter-8-michael-feathers/</link>
      <pubDate>Tue, 03 Nov 2009 00:16:32 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/11/03/book-club-working-effectively-with-legacy-code-chapter-8-michael-feathers/</guid>
      <description>In our latest technical book club we discussed chapter 8 - &amp;#39;How do I add a feature?&amp;#39; - of Michael Feather’s &amp;#39;Working Effectively With Legacy Code&amp;#39;.
This chapter covers Test Driven Development and a technique I hadn’t come across before called Programming By Difference.
These are some of my thoughts and our discussion of the chapter:
In the section on TDD Feathers mentions the copy/paste/refactor pattern which I wrote about a few days ago.</description>
    </item>
    
    <item>
      <title>Book Club: Working Effectively With Legacy Code - Chapters 6 &amp; 7 (Michael Feathers)</title>
      <link>https://www.markhneedham.com/blog/2009/10/26/book-club-working-effectively-with-legacy-code-chapters-6-7-michael-feathers/</link>
      <pubDate>Mon, 26 Oct 2009 23:10:45 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/10/26/book-club-working-effectively-with-legacy-code-chapters-6-7-michael-feathers/</guid>
      <description>In our latest technical book club we covered chapters 6 &amp;amp; 7 - &amp;#39;I Don’t Have Much Time And I Have To Change It&amp;#39; and &amp;#39;It Takes Forever To Make A Change&amp;#39; - of Michael Feathers&amp;#39; &amp;#39;Working Effectively With Legacy Code&amp;#39;.
The first chapter discusses various different techniques that we can use to add in new code to a legacy code base. These include:
Sprout method - create a new method for our new functionality and make a call to it from existing code.</description>
    </item>
    
    <item>
      <title>Book Club: Working Effectively With Legacy Code - Chapters 3,4 &amp; 5 (Michael Feathers)</title>
      <link>https://www.markhneedham.com/blog/2009/10/20/book-club-working-effectively-with-legacy-code-chapters-34-5-michael-feathers/</link>
      <pubDate>Tue, 20 Oct 2009 07:01:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/10/20/book-club-working-effectively-with-legacy-code-chapters-34-5-michael-feathers/</guid>
      <description>In our latest technical book club we discussed chapters 3,4 and 5 of Michael Feathers&amp;#39; &amp;#39;Working Effectively With Legacy Code&amp;#39; - &amp;#39;Sensing and Separation&amp;#39;, &amp;#39;The Seam Model&amp;#39; and &amp;#39;Tools&amp;#39;.
These are some of my thoughts from our discussion of these chapters:
Feathers suggests two reasons why we break dependencies when trying to get tests in place - sensing and separation. The former involves the breaking of dependencies in order to get access to the values computed in our code and the latter is necessary so that we can get our code into a test harness to start with.</description>
    </item>
    
    <item>
      <title>Book Club: Working Effectively With Legacy Code - Chapters 1 &amp; 2 (Michael Feathers)</title>
      <link>https://www.markhneedham.com/blog/2009/10/14/book-club-working-effectively-with-legacy-code-chapters-1-2-michael-feathers/</link>
      <pubDate>Wed, 14 Oct 2009 23:21:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/10/14/book-club-working-effectively-with-legacy-code-chapters-1-2-michael-feathers/</guid>
      <description>We’ve decided to go back to reading a book in our technical book club after a few months of discussing different papers and the chosen book is Michael Feathers&amp;#39; &amp;#39;Working Effectively With Legacy Code&amp;#39;.
We started off by reading the first two chapters titled &amp;#39;Changing Software&amp;#39; and &amp;#39;Working with Feedback&amp;#39; and these are some of my thoughts and our discussion of the chapters:
Early on Feathers talks about the need to change software in order to add features and fix bugs and while it is certainly necessary to make some changes to code in order to do this we discussed whether there is ever a time that we might look to keep the number of changes we’re making to a minimum.</description>
    </item>
    
    <item>
      <title>Book Club: Integration tests are a scam (J.B. Rainsberger)</title>
      <link>https://www.markhneedham.com/blog/2009/10/06/book-club-integration-tests-are-a-scam-j-b-rainsberger/</link>
      <pubDate>Tue, 06 Oct 2009 23:37:52 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/10/06/book-club-integration-tests-are-a-scam-j-b-rainsberger/</guid>
      <description>In our latest book club we discussed J.B. Rainsberger’s presentation from Agile 2009 titled &amp;#39;Integration tests are a scam&amp;#39;.
These are some of my thoughts and our discussion of the video:
While talking about how to write interaction tests he suggests that we should only be looking to create interfaces for Domain Driven Design services. If we find ourselves wanting to create interfaces for entities or value objects then we probably have a service wanting to get out.</description>
    </item>
    
    <item>
      <title>Book Club: Design Sense (Michael Feathers)</title>
      <link>https://www.markhneedham.com/blog/2009/09/30/book-club-design-sense-michael-feathers/</link>
      <pubDate>Wed, 30 Sep 2009 00:42:29 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/09/30/book-club-design-sense-michael-feathers/</guid>
      <description>In our latest technical book club we discussed a presentation given at the Norwegian Developers Conference by Michael Feathers titled &amp;#39;Design Sense&amp;#39;.
In this presentation he presents quite a number of different ideas that he has learned from his experiences in software development over the years.
These are some of my thoughts and our discussion:
The first part of the presentation talks about method size and Feathers observes that there seems to be a power law with relation to the size of methods in code bases - i.</description>
    </item>
    
    <item>
      <title>Book Club: Versioning your database (K. Scott Allen)</title>
      <link>https://www.markhneedham.com/blog/2009/09/24/book-club-versioning-your-database-k-scott-allen/</link>
      <pubDate>Thu, 24 Sep 2009 07:35:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/09/24/book-club-versioning-your-database-k-scott-allen/</guid>
      <description>In our latest technical book club we discussed a series of posts written by K. Scott Allen about getting your database under version control.
Three rules for database work
The baseline
Change scripts
Views, Stored Procedures and the like
Branching and Merging
These are some of my thoughts and our discussion:
We had an interesting discussion around when it’s ok to go and change checked in change scripts - on previous projects I’ve worked on we’ve actually had the rule that once you’ve checked in a change script to source control then you can no longer change it but instead need to add another change script that does what you want.</description>
    </item>
    
    <item>
      <title>Book Club: SOLID Principles (Uncle Bob Martin)</title>
      <link>https://www.markhneedham.com/blog/2009/09/16/book-club-solid-principles-uncle-bob-martin/</link>
      <pubDate>Wed, 16 Sep 2009 01:11:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/09/16/book-club-solid-principles-uncle-bob-martin/</guid>
      <description>In our latest technical book club we discussed Uncle Bob Martin’s presentation to the Norwegian Developers Conference on &amp;#39;SOLID Design&amp;#39;.
These principles of object oriented design are also written up on Uncle Bob’s website and are also in his book &amp;#39;Agile Principles, Patterns and Practices&amp;#39;.
I read most of the book a couple of years ago but I don’t always remember all of the principles when I’m coding so it was good to revisit them again.</description>
    </item>
    
    <item>
      <title>Book Club: Promiscuous Pairing &amp; Beginner&#39;s Mind (Arlo Belshee)</title>
      <link>https://www.markhneedham.com/blog/2009/09/05/book-club-promiscuous-pairing-beginners-mind-arlo-belkshee/</link>
      <pubDate>Sat, 05 Sep 2009 16:12:32 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/09/05/book-club-promiscuous-pairing-beginners-mind-arlo-belkshee/</guid>
      <description>In this weeks book club we discussed Arlo Belshee’s paper &amp;#39;Promiscuous Pairing and Beginner’s Mind&amp;#39; where he presents the idea of rotating pairs more frequently than we might usually, suggesting that the optimal rotation time is 90 minutes.
I remember coming across the idea of promiscuous pairing a couple of years ago but I hadn’t read the paper all the way through and so far haven’t worked on a team where we’ve really tried out his ideas.</description>
    </item>
    
    <item>
      <title>Book Club: Unshackle your domain (Greg Young)</title>
      <link>https://www.markhneedham.com/blog/2009/08/29/book-club-unshackle-your-domain-greg-young/</link>
      <pubDate>Sat, 29 Aug 2009 09:54:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/08/29/book-club-unshackle-your-domain-greg-young/</guid>
      <description>In this week’s book club we continued with the idea of discussing videos, this week’s selection being Greg Young’s &amp;#39;Unshackle your Domain&amp;#39; presentation from QCon San Francisco in November 2008. He also did a version of this talk in the February European Alt.NET meeting.
In this presentation Greg talks about Command Query Separation at the architecture level and explicit state transitions amongst other things.
Jonathan Oliver has created a useful resource page of the material that’s been written about some of these ideas as well.</description>
    </item>
    
    <item>
      <title>Book Club: What I&#39;ve learned about DDD since the book (Eric Evans)</title>
      <link>https://www.markhneedham.com/blog/2009/08/24/book-club-what-ive-learned-about-ddd-since-the-book-eric-evans/</link>
      <pubDate>Mon, 24 Aug 2009 18:20:33 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/08/24/book-club-what-ive-learned-about-ddd-since-the-book-eric-evans/</guid>
      <description>This week book club became video club as we discussed Eric Evans&amp;#39; QCon London presentation &amp;#39;What I’ve learned about DDD since the book&amp;#39;.
I was lucky enough to be able to attend this presentation live and we previously ran a book club where I briefly summarised what I’d learnt but this gave everyone else an opportunity to see it first hand.
There are some of my thoughts and our discussion of the presentation:</description>
    </item>
    
    <item>
      <title>Book Club: Object Role Stereotypes (Jeremy Miller)</title>
      <link>https://www.markhneedham.com/blog/2009/08/08/book-club-object-role-stereotypes-jeremy-miller/</link>
      <pubDate>Sat, 08 Aug 2009 00:49:12 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/08/08/book-club-object-role-stereotypes-jeremy-miller/</guid>
      <description>In last week’s book club we discussed an article written by Jeremy Miller for MSDN Magazine titled &amp;#39;Object Role Stereotypes&amp;#39; which discusses part of Rebecca Wirfs Brock’s book &amp;#39;Object Design&amp;#39;.
I’ve been trying to read Object Design for about a year since coming across the book while reading through the slides from JAOO Sydney 2008 but I’ve often found the reading to be quite abstract and have struggled to work out how to apply the ideas to the coding I do day to day.</description>
    </item>
    
    <item>
      <title>Book Club: Hexagonal Architecture (Alistair Cockburn)</title>
      <link>https://www.markhneedham.com/blog/2009/07/30/book-club-hexagonal-architecture-alistair-cockburn/</link>
      <pubDate>Thu, 30 Jul 2009 00:59:18 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/07/30/book-club-hexagonal-architecture-alistair-cockburn/</guid>
      <description>In our latest book club we discussed Alistair Cockburn’s Hexagonal Architecture which I first heard about around a year ago and was another of Dave Cameron&amp;#39;s recommendations.
As I understand it, the article describes an architecture for our systems where the domain sits in the centre and other parts of the system depend on the domain while the domain doesn’t depend on anything concrete but is interacted with by various adapters.</description>
    </item>
    
    <item>
      <title>Book Club: The Dreyfus Model (Stuart and Hubert Dreyfus)</title>
      <link>https://www.markhneedham.com/blog/2009/07/18/book-club-the-dreyfus-model-stuart-and-hubert-dreyfus/</link>
      <pubDate>Sat, 18 Jul 2009 10:40:30 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/07/18/book-club-the-dreyfus-model-stuart-and-hubert-dreyfus/</guid>
      <description>In our latest book club we discussed the Dreyfus Model, a paper written in 1980 by Stuart and Hubert Dreyfus.
I’ve become quite intrigued by the Dreyfus Model particularly since reading about its applicability to software development in Andy Hunt’s Pragmatic Learning and Thinking and after looking through Pat Kua’s presentation on &amp;#39;Climbing the Dreyfus Ladder of Agile Practices&amp;#39; I thought it’d be interesting to study the original paper.</description>
    </item>
    
    <item>
      <title>Book Club: An agile approach to a legacy system (Chris Stevenson and Andy Pols)</title>
      <link>https://www.markhneedham.com/blog/2009/07/15/book-club-an-agile-approach-to-a-legacy-system-chris-stevenson-and-andy-pols/</link>
      <pubDate>Wed, 15 Jul 2009 00:53:45 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/07/15/book-club-an-agile-approach-to-a-legacy-system-chris-stevenson-and-andy-pols/</guid>
      <description>Our latest book club session was a discussion on a paper written by my colleague Chris Stevenson and Andy Pols titled &amp;#39;An Agile Approach to a Legacy System&amp;#39; which I think was written in 2004. This paper was suggested by Dave Cameron.
These are some of my thoughts and our discussion of the paper:
The first thing that was quite interesting was that the authors pointed out that if you just try and rewrite a part of a legacy system you are actually just writing legacy code yourself - we weren’t sure exactly what was meant by this since for me at least the definition of legacy code is &amp;#39;code which we are scared to change [because it has no tests]&amp;#39; but presumably the new code did have tests so it wasn’t legacy in this sense.</description>
    </item>
    
    <item>
      <title>Book Club: Why noone uses functional languages (Philip Wadler)</title>
      <link>https://www.markhneedham.com/blog/2009/07/08/book-club-why-noone-uses-functional-languages-philip-wadler/</link>
      <pubDate>Wed, 08 Jul 2009 00:29:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/07/08/book-club-why-noone-uses-functional-languages-philip-wadler/</guid>
      <description>Our latest technical book club discussion was based around Philip Wadler’s paper &amp;#39;Why noone uses functional langauges&amp;#39; which he wrote in 1998. I came across this paper when reading some of the F# goals in the FAQs on the Microsoft website.
These are some of my thoughts and our discussion of the paper:
One of the points suggested in the paper is that functional languages aren’t used because of their lack of availability on machines but as Dave pointed out this doesn’t really seem to be such a big problem these days - certainly for F# I’ve found it relatively painless to get it setup and running and even for a language like Ruby people are happy to download and install it on their machines and it is also pretty much painless to do so.</description>
    </item>
    
    <item>
      <title>Book Club: Logging - Release It (Michael Nygaard)</title>
      <link>https://www.markhneedham.com/blog/2009/07/02/book-club-logging-release-it-michael-nygaard/</link>
      <pubDate>Thu, 02 Jul 2009 12:04:34 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/07/02/book-club-logging-release-it-michael-nygaard/</guid>
      <description>Our latest technical book club session was a discussion of the logging section in Michael Nygard’s Release It.
I recently listened to an interview with Michael Nygard on Software Engineering Radio so I was interested in reading more of his stuff and Cam suggested that the logging chapter would be an interesting one to look at as it’s often something which we don’t spend a lot of time thinking about on software development teams.</description>
    </item>
    
    <item>
      <title>Book Club: The Readability of Tests - Growing Object Oriented Software (Steve Freeman/Nat Pryce)</title>
      <link>https://www.markhneedham.com/blog/2009/06/20/book-club-the-readability-of-tests-growing-object-oriented-software-steve-freemannat-pryce/</link>
      <pubDate>Sat, 20 Jun 2009 11:26:51 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/20/book-club-the-readability-of-tests-growing-object-oriented-software-steve-freemannat-pryce/</guid>
      <description>Our technical book club this week focused on &amp;#39;The Readability of Tests&amp;#39; chapter from Steve Freeman &amp;amp; Nat Pryce’s upcoming book &amp;#39;Growing Object Oriented Software, guide by tests&amp;#39;.
I’ve been reading through some of the other chapters online and I thought this would be an interesting chapter to talk about as people seem to have different opinions on how DRY tests should be, how we build test data, how we name tests and so on.</description>
    </item>
    
    <item>
      <title>Book Club: Arguments and Results (James Noble)</title>
      <link>https://www.markhneedham.com/blog/2009/06/16/book-club-arguments-and-results-james-noble/</link>
      <pubDate>Tue, 16 Jun 2009 23:37:04 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/16/book-club-arguments-and-results-james-noble/</guid>
      <description>We restarted our book club again last week by reading James Noble’s Arguments and Results paper, a paper I came across from a Michael Feathers blog post a few months ago detailing 10 papers that every programmer should read.
We decided to try out the idea of reading papers/individual chapters from books as it allows us to vary the type of stuff we’re reading more frequently and is an approach which Obie seems to be having some success with.</description>
    </item>
    
  </channel>
</rss>
