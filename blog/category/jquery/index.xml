<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jQuery on Mark Needham</title>
    <link>https://markhneedham.com/blog/category/jquery/</link>
    <description>Recent content in jQuery on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Sep 2011 09:26:19 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/category/jquery/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>jQuery: Collecting the results from a collection of asynchronous requests</title>
      <link>https://markhneedham.com/blog/2011/09/25/jquery-collecting-the-results-from-a-collection-of-asynchronous-requests/</link>
      <pubDate>Sun, 25 Sep 2011 09:26:19 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/09/25/jquery-collecting-the-results-from-a-collection-of-asynchronous-requests/</guid>
      <description>Lizand I recently spent some time building a pair stair to show how long ago people had paired with each other and one of the things we had to do was make AJAX requests to get the pairing data for each person and then collate it all to build the stair.
The original attempt to do this looked a bit like this:
var people = [&amp;#34;Marc&amp;#34;, &amp;#34;Liz&amp;#34;, &amp;#34;Ken&amp;#34;, &amp;#34;Duncan&amp;#34;, &amp;#34;Uday&amp;#34;, &amp;#34;Mark&amp;#34;, &amp;#34;Charles&amp;#34;]; var grid = []; $.</description>
    </item>
    
    <item>
      <title>jQuery UI Tabs: Changing selected tab</title>
      <link>https://markhneedham.com/blog/2010/09/08/jquery-ui-tabs-changing-selected-tab/</link>
      <pubDate>Wed, 08 Sep 2010 18:32:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/08/jquery-ui-tabs-changing-selected-tab/</guid>
      <description>We&amp;rsquo;re using the tabs part of the jQuery UI libraryon the project I&amp;rsquo;m currently working on and one thing we wanted to do was change the default tab that was being selected.
The documentation suggested that one way to do this was to give the index of the tab we wanted selected when calling the tabs function:
$( &amp;#34;.selector&amp;#34; ).tabs({ selected: 3 }); Since we wanted to select the tab by name based on a value from the query string we thought it would probably be simpler if we could just set the selected tab using a css class.</description>
    </item>
    
    <item>
      <title>jQuery: Dynamically updating a drop down list</title>
      <link>https://markhneedham.com/blog/2010/06/30/jquery-dynamically-updating-a-drop-down-list/</link>
      <pubDate>Wed, 30 Jun 2010 10:46:20 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/06/30/jquery-dynamically-updating-a-drop-down-list/</guid>
      <description>We recently had a requirement to dynamically update a drop down list based on how the user had filled in other parts of the page.
Our initial approach was to populate the drop down with all potential options on page load and then add CSS selectors to the options that we wanted to hide. That worked fine in Chrome and Firefox but Internet Explorer seems to ignore CSS selectors inside a drop down list so none of the options were being hidden.</description>
    </item>
    
    <item>
      <title>jQuery: $.post, &#39;jsonp&#39; and cross-domain requests</title>
      <link>https://markhneedham.com/blog/2009/08/27/jquery-post-jsonp-and-cross-domain-requests/</link>
      <pubDate>Thu, 27 Aug 2009 22:39:26 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/08/27/jquery-post-jsonp-and-cross-domain-requests/</guid>
      <description>We spent a bit of time yesterday looking through the jQuery code trying to work out why a cross domain request we were making using jQuery&amp;rsquo;s &amp;lsquo;$.post&amp;rsquo; function wasn&amp;rsquo;t working.
In hindsight perhaps it should have been obvious that you wouldn&amp;rsquo;t be able to do that but I didn&amp;rsquo;t completely understand how we were able to do cross domain requests were possible at all but we had some &amp;lsquo;$.getJson&amp;rsquo; &amp;lsquo;jsonp&amp;rsquo; function calls around our code base which were doing just that.</description>
    </item>
    
    <item>
      <title>jQuery: Approaches to testing</title>
      <link>https://markhneedham.com/blog/2009/01/24/jquery-approaches-to-testing/</link>
      <pubDate>Sat, 24 Jan 2009 09:36:32 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/01/24/jquery-approaches-to-testing/</guid>
      <description>We&amp;rsquo;ve been doing a bit of work with jQueryand true to our TDD roots we&amp;rsquo;ve been trying to work out the best way to test drive our coding in this area.
There seem to be 3 main ways that you can go about doing this, regardless of the testing framework you choose to you. We are using screw-unitfor our javascript testing.
The idea here is that we mock out all calls made to jQuery functions and then we assert that the expected calls were made in our test.</description>
    </item>
    
    <item>
      <title>jQuery datepicker IE6 positioning bug</title>
      <link>https://markhneedham.com/blog/2009/01/06/jquery-datepicker-ie6-positioning-bug/</link>
      <pubDate>Tue, 06 Jan 2009 21:57:06 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/01/06/jquery-datepicker-ie6-positioning-bug/</guid>
      <description>We&amp;rsquo;ve been using the jQuery datepickeron my current project and came across some strange behaviour with regards to the positioning of the calendar in IE6.
The calendar was always positioning itself right at the top of the screen instead of just below the textbox it was hooked up to but in Firefox it was working fine.
After a bit of exploration in the jQuery code (ui.datepicker.js) we worked out that the &amp;lsquo;document.</description>
    </item>
    
    <item>
      <title>Javascript: Creating quick feedback loops</title>
      <link>https://markhneedham.com/blog/2008/12/09/javascript-creating-quick-feedback-loops/</link>
      <pubDate>Tue, 09 Dec 2008 21:13:21 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/12/09/javascript-creating-quick-feedback-loops/</guid>
      <description>I&amp;rsquo;ve been working quite a lot with Javascript and in particular jQueryrecently and since I haven&amp;rsquo;t done much in this area before all the tips and tricks are new to me.
One thing which is always useful no matter the programming language is to use it in a way that you can get rapid feedback on what you are doing.
Fortunately there are quite a few tools that allow us to do this with Javascript:</description>
    </item>
    
    <item>
      <title>jQuery Validation &amp; Firefox Refresh Behaviour</title>
      <link>https://markhneedham.com/blog/2008/12/02/jquery-validation-firefox-refresh-behaviour/</link>
      <pubDate>Tue, 02 Dec 2008 22:54:52 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/12/02/jquery-validation-firefox-refresh-behaviour/</guid>
      <description>We&amp;rsquo;ve been working quite a bit with jQueryand cross browser compatibility and one of the interesting differences we came across today was the behaviour of Firefox and Internet Explorer when it comes to refreshing a page.
When you press refresh in Internet Explorer the page gets refreshed to the state that it was in when you first loaded the URL, meaning that the state of the data in forms is returned to its original state.</description>
    </item>
    
  </channel>
</rss>