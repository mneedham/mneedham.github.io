<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Mark Needham</title>
    <link>https://markhneedham.com/blog/category/ruby/</link>
    <description>Recent content in Ruby on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Aug 2014 21:42:24 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/category/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ruby: Create and share Google Drive Spreadsheet</title>
      <link>https://markhneedham.com/blog/2014/08/17/ruby-create-and-share-google-drive-spreadsheet/</link>
      <pubDate>Sun, 17 Aug 2014 21:42:24 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2014/08/17/ruby-create-and-share-google-drive-spreadsheet/</guid>
      <description>require &amp;#39;sinatra&amp;#39; require &amp;#39;json&amp;#39; require &amp;#34;google_drive&amp;#34; require &amp;#39;google/api_client&amp;#39; CLIENT_ID = &amp;#39;my client id&amp;#39; CLIENT_SECRET = &amp;#39;my client secret&amp;#39; OAUTH_SCOPE = &amp;#39;https://www.googleapis.com/auth/drive https://docs.google.com/feeds/ https://docs.googleusercontent.com/ https://spreadsheets.google.com/feeds/&amp;#39; REDIRECT_URI = &amp;#39;http://localhost:9393/oauth2callback&amp;#39; helpers do def partial (template, locals = {}) haml(template, :layout =&amp;gt; false, :locals =&amp;gt; locals) end end enable :sessions get &amp;#39;/&amp;#39; do haml :index end configure do google_client = Google::APIClient.new google_client.authorization.client_id = CLIENT_ID google_client.authorization.client_secret = CLIENT_SECRET google_client.authorization.scope = OAUTH_SCOPE google_client.authorization.redirect_uri = REDIRECT_URI set :google_client, google_client set :google_client_driver, google_client.</description>
    </item>
    
    <item>
      <title>Ruby: Receive JSON in request body</title>
      <link>https://markhneedham.com/blog/2014/08/17/ruby-receive-json-in-request-body/</link>
      <pubDate>Sun, 17 Aug 2014 12:21:15 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2014/08/17/ruby-receive-json-in-request-body/</guid>
      <description>require &amp;#39;sinatra&amp;#39; require &amp;#39;json&amp;#39; post &amp;#39;/somewhere/&amp;#39; do request.body.rewind request_payload = JSON.parse request.body.read p request_payload &amp;#34;win&amp;#34; end dummy.json{&amp;#34;i&amp;#34;: &amp;#34;am json&amp;#34;} $ curl -H &amp;#34;Content-Type: application/json&amp;#34; -XPOST http://localhost:9393/somewhere/ -d @dummy.json {&amp;#34;i&amp;#34;=&amp;gt;&amp;#34;am json&amp;#34;} </description>
    </item>
    
    <item>
      <title>Ruby: Google Drive - Error=BadAuthentication (GoogleDrive::AuthenticationError) Info=InvalidSecondFactor</title>
      <link>https://markhneedham.com/blog/2014/08/17/ruby-google-drive-errorbadauthentication-googledriveauthenticationerror-infoinvalidsecondfactor/</link>
      <pubDate>Sun, 17 Aug 2014 01:49:10 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2014/08/17/ruby-google-drive-errorbadauthentication-googledriveauthenticationerror-infoinvalidsecondfactor/</guid>
      <description>require &amp;#34;rubygems&amp;#34; require &amp;#34;google_drive&amp;#34; session = GoogleDrive.login(&amp;#34;me@mydomain.com&amp;#34;, &amp;#34;mypassword&amp;#34;) /Users/markneedham/.rbenv/versions/1.9.3-p327/lib/ruby/gems/1.9.1/gems/google_drive-0.3.10/lib/google_drive/session.rb:93:in `rescue in login&amp;#39;: Authentication failed for me@mydomain.com: Response code 403 for post https://www.google.com/accounts/ClientLogin: Error=BadAuthentication (GoogleDrive::AuthenticationError) Info=InvalidSecondFactor from /Users/markneedham/.rbenv/versions/1.9.3-p327/lib/ruby/gems/1.9.1/gems/google_drive-0.3.10/lib/google_drive/session.rb:86:in `login&amp;#39; from /Users/markneedham/.rbenv/versions/1.9.3-p327/lib/ruby/gems/1.9.1/gems/google_drive-0.3.10/lib/google_drive/session.rb:38:in `login&amp;#39; from /Users/markneedham/.rbenv/versions/1.9.3-p327/lib/ruby/gems/1.9.1/gems/google_drive-0.3.10/lib/google_drive.rb:18:in `login&amp;#39; from src/gdoc.rb:15:in `&amp;lt;main&amp;gt;&amp;#39; require &amp;#34;rubygems&amp;#34; require &amp;#34;google_drive&amp;#34; session = GoogleDrive.login(&amp;#34;me@mydomain.com&amp;#34;, &amp;#34;tuceuttkvxbvrblf&amp;#34;) </description>
    </item>
    
    <item>
      <title>Ruby: Regex - Matching the Trademark ™ character</title>
      <link>https://markhneedham.com/blog/2014/06/08/ruby-regex-matching-the-trademark-character/</link>
      <pubDate>Sun, 08 Jun 2014 01:34:03 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2014/06/08/ruby-regex-matching-the-trademark-character/</guid>
      <description>1930 FIFA World Cup Uruguay ™ p text.match(/\d{4} FIFA World Cup (.*?) ™/)[1] tm.rb:4: syntax error, unexpected $end, expecting &amp;#39;)&amp;#39; p text.match(/\d{4} FIFA World Cup (.*?) ™/)[1] ^ p text.match(/\d{4} FIFA World Cup (.*?) \u2122/)[1] # encoding: utf-8 # ... p text.match(/\d{4} FIFA World Cup (.*?) ™/)[1] # returns &amp;#34;Uruguay&amp;#34; </description>
    </item>
    
    <item>
      <title>Ruby: Calculating the orthodromic distance using the Haversine formula</title>
      <link>https://markhneedham.com/blog/2013/06/30/ruby-calculating-the-orthodromic-distance-using-the-haversine-formula/</link>
      <pubDate>Sun, 30 Jun 2013 22:53:14 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/06/30/ruby-calculating-the-orthodromic-distance-using-the-haversine-formula/</guid>
      <description>lat, long, distance = [&amp;#34;51.55786291569685&amp;#34;, &amp;#34;0.144195556640625&amp;#34;, 10] query = &amp;#34; START node = node:geom(&amp;#39;withinDistance:[#{lat}, #{long}, #{distance}]&amp;#39;)&amp;#34; query &amp;lt;&amp;lt; &amp;#34; RETURN node.name, node.team, node.lat, node.lon&amp;#34; rows = result[&amp;#34;data&amp;#34;].map do |row| { :team =&amp;gt; row[1], :stadium =&amp;gt; row[0], :lat =&amp;gt; row[2], :lon =&amp;gt; row[3] } p rows [{:team=&amp;gt;&amp;#34;Millwall&amp;#34;, :stadium=&amp;gt;&amp;#34;The Den&amp;#34;, :lat=&amp;gt;51.4859, :lon=&amp;gt;-0.050743}, {:team=&amp;gt;&amp;#34;Arsenal&amp;#34;, :stadium=&amp;gt;&amp;#34;Emirates Stadium&amp;#34;, :lat=&amp;gt;51.5549, :lon=&amp;gt;-0.108436}, {:team=&amp;gt;&amp;#34;Chelsea&amp;#34;, :stadium=&amp;gt;&amp;#34;Stamford Bridge&amp;#34;, :lat=&amp;gt;51.4816, :lon=&amp;gt;-0.191034}, {:team=&amp;gt;&amp;#34;Fulham&amp;#34;, :stadium=&amp;gt;&amp;#34;Craven Cottage&amp;#34;, :lat=&amp;gt;51.4749, :lon=&amp;gt;-0.221619}, {:team=&amp;gt;&amp;#34;Queens Park Rangers&amp;#34;, :stadium=&amp;gt;&amp;#34;Loftus Road&amp;#34;, :lat=&amp;gt;51.</description>
    </item>
    
    <item>
      <title>Ruby/Python: Constructing a taxonomy from an array using zip</title>
      <link>https://markhneedham.com/blog/2013/05/19/rubypython-constructing-a-taxonomy-from-an-array-using-zip/</link>
      <pubDate>Sun, 19 May 2013 22:44:40 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/05/19/rubypython-constructing-a-taxonomy-from-an-array-using-zip/</guid>
      <description>taxonomy = [&amp;#34;Cat&amp;#34;, &amp;#34;SubCat&amp;#34;, &amp;#34;SubSubCat&amp;#34;] # I wanted this to become [(&amp;#34;Cat&amp;#34;, &amp;#34;SubCat&amp;#34;), (&amp;#34;SubCat&amp;#34;, &amp;#34;SubSubCat&amp;#34;) &amp;gt;&amp;gt;&amp;gt; zip(taxonomy[:-1], taxonomy[1:]) [(&amp;#39;Cat&amp;#39;, &amp;#39;SubCat&amp;#39;), (&amp;#39;SubCat&amp;#39;, &amp;#39;SubSubCat&amp;#39;)] &amp;gt; taxonomy[..-1] SyntaxError: (irb):10: syntax error, unexpected tDOT2, expecting &amp;#39;]&amp;#39; taxonomy[..-1] ^ from /Users/markhneedham/.rbenv/versions/1.9.3-p327/bin/irb:12:in `&amp;lt;main&amp;gt;&amp;#39; &amp;gt; taxonomy[0..-2].zip(taxonomy[1..-1]) =&amp;gt; [[&amp;#34;Cat&amp;#34;, &amp;#34;SubCat&amp;#34;], [&amp;#34;SubCat&amp;#34;, &amp;#34;SubSubCat&amp;#34;]] </description>
    </item>
    
    <item>
      <title>Ruby 1.9.3 p0: Investigating weirdness with HTTP POST request in net/http</title>
      <link>https://markhneedham.com/blog/2013/04/30/ruby-1-9-3-p0-investigating-weirdness-with-http-post-request-in-nethttp/</link>
      <pubDate>Tue, 30 Apr 2013 21:37:11 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/04/30/ruby-1-9-3-p0-investigating-weirdness-with-http-post-request-in-nethttp/</guid>
      <description>* lib/net/http.rb, lib/net/protocol.rb: Allow to configure to wait server returning &#39;100 continue&#39; response before sending HTTP request body. See NEWS for more detail. See #3622. Original patch is made by Eric Hodel &amp;lt;drbrain@segment7.net&amp;gt;. * test/net/http/test_http.rb: test it. * NEWS: Add new feature.  </description>
    </item>
    
    <item>
      <title>Ruby/Haml: Conditionally/Optionally setting an attribute/class</title>
      <link>https://markhneedham.com/blog/2013/03/02/rubyhaml-conditionallyoptionally-setting-an-attributeclass/</link>
      <pubDate>Sat, 02 Mar 2013 23:22:50 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/03/02/rubyhaml-conditionallyoptionally-setting-an-attributeclass/</guid>
      <description>- correct = true %p{:class =&amp;gt; (correct ? &amp;quot;success&amp;quot; : nil) } important text &amp;lt;p class=&amp;quot;success&amp;quot;&amp;gt; important text &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; important text &amp;lt;/p&amp;gt; </description>
    </item>
    
    <item>
      <title>Ruby/Haml: Maintaining white space/indentation in a &amp;lt;pre&amp;gt; tag</title>
      <link>https://markhneedham.com/blog/2013/03/02/rubyhaml-maintaining-white-spaceindentation-in-a-pre-tag/</link>
      <pubDate>Sat, 02 Mar 2013 22:19:11 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/03/02/rubyhaml-maintaining-white-spaceindentation-in-a-pre-tag/</guid>
      <description>%pre{ :class =&amp;gt; &amp;quot;brush: cypher; gutter: false; toolbar: false;&amp;quot;} START player = node:players(&#39;name:&amp;quot;Gareth Bale&amp;quot;&#39;) RETURN player.name %pre{ :class =&amp;gt; &amp;quot;brush: cypher; gutter: false; toolbar: false;&amp;quot;} = preserve do START player = node:players(&#39;name:&amp;quot;Gareth Bale&amp;quot;&#39;) RETURN player.name </description>
    </item>
    
    <item>
      <title>Ruby: Stripping out a non breaking space character (&amp;amp;nbsp;)</title>
      <link>https://markhneedham.com/blog/2013/02/23/ruby-stripping-out-a-non-breaking-space-character-nbsp/</link>
      <pubDate>Sat, 23 Feb 2013 15:04:58 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/02/23/ruby-stripping-out-a-non-breaking-space-character-nbsp/</guid>
      <description>rows.each do |row| next if row.strip.empty? # other scraping code end # it&amp;#39;s hex representation is A0 &amp;gt; &amp;#34;\u00A0&amp;#34;.strip =&amp;gt; &amp;#34; &amp;#34; &amp;gt; &amp;#34;\u00A0&amp;#34;.strip.empty? =&amp;gt; false &amp;gt; &amp;#34;\u00A0&amp;#34;.gsub(/\s*/, &amp;#34;&amp;#34;) =&amp;gt; &amp;#34; &amp;#34; &amp;gt; &amp;#34;\u00A0&amp;#34;.gsub(/\s*/, &amp;#34;&amp;#34;).empty? =&amp;gt; false &amp;gt; &amp;#34;\u00A0&amp;#34;.gsub(/[[:space:]]+/, &amp;#34;&amp;#34;) =&amp;gt; &amp;#34;&amp;#34; &amp;gt; &amp;#34;\u00A0&amp;#34;.gsub(/[[:space:]]+/, &amp;#34;&amp;#34;).empty? =&amp;gt; true &amp;gt; &amp;#34;Mark Needham&amp;#34;.gsub(/[[:space:]]+/, &amp;#34;&amp;#34;) =&amp;gt; &amp;#34;MarkNeedham&amp;#34; &amp;gt; &amp;#34;\u00A0&amp;#34;.gsub(/\A[[:space:]]+|[[:space:]]+\z/, &amp;#39;&amp;#39;) =&amp;gt; &amp;#34;&amp;#34; &amp;gt; (&amp;#34;Mark&amp;#34; + &amp;#34;\u00A0&amp;#34; + &amp;#34;Needham&amp;#34;).gsub(/\A[[:space:]]+|[[:space:]]+\z/, &amp;#39;&amp;#39;) =&amp;gt; &amp;#34;Mark Needham&amp;#34; </description>
    </item>
    
    <item>
      <title>Ruby: invalid multibyte char (US-ASCII)</title>
      <link>https://markhneedham.com/blog/2013/01/27/ruby-invalid-multibyte-char-us-ascii/</link>
      <pubDate>Sun, 27 Jan 2013 15:14:01 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/01/27/ruby-invalid-multibyte-char-us-ascii/</guid>
      <description>blah.rubyamount = &amp;#34;£10.00&amp;#34; puts amount $ ruby blah.ruby blah.ruby:1: invalid multibyte char (US-ASCII) blah.ruby:1: invalid multibyte char (US-ASCII) # encoding: UTF-8 amount = &amp;#34;£10.00&amp;#34; puts amount $ ruby blah.ruby £10.00 </description>
    </item>
    
    <item>
      <title>Bitwise operations in Ruby and Haskell</title>
      <link>https://markhneedham.com/blog/2012/12/31/bitwise-operations-in-ruby-and-haskell/</link>
      <pubDate>Mon, 31 Dec 2012 13:14:42 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/12/31/bitwise-operations-in-ruby-and-haskell/</guid>
      <description>&amp;gt; &amp;#34;10000&amp;#34;.to_i(2) =&amp;gt; 16 &amp;gt; import Data.Char &amp;gt; (foldr (\c s -&amp;gt; s * 2 + c) 0 . reverse . map digitToInt) &amp;#34;10000&amp;#34; 16 &amp;#39;10000&amp;#39; XOR &amp;#39;10000&amp;#39; &amp;gt; 16 ^ 16 =&amp;gt; 0 &amp;gt; [0,1,2,4,16].map { |x| 16 ^ x } =&amp;gt; [16, 17, 18, 20, 0] &amp;gt; bits = 5 &amp;gt; offsets = (0..(bits - 1)).map { |x| 2 ** x } =&amp;gt; [1, 2, 4, 8, 16] &amp;gt; offsets = (0.</description>
    </item>
    
    <item>
      <title>Ruby: Finding where gems are</title>
      <link>https://markhneedham.com/blog/2012/08/25/ruby-finding-where-gems-are/</link>
      <pubDate>Sat, 25 Aug 2012 10:00:07 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/08/25/ruby-finding-where-gems-are/</guid>
      <description>In my infrequent travels into Ruby land I always seem to forget where the gems that I&amp;rsquo;ve installed actually live on the file system but my colleague Nickrecently showed me a neat way of figuring it out.
If I&amp;rsquo;m in the folder that contains all my ThoughtWorks graph code I&amp;rsquo;d just need to run the following command:
$ gem which rubygems /Users/mneedham/.rbenv/versions/jruby-1.6.7/lib/ruby/site_ruby/1.8/rubygems.rb I then loaded up irb and wrote a simple cypher query executed using neography:</description>
    </item>
    
    <item>
      <title>Ruby: neo4j gem - LoadError: no such file to load -- active_support/core_ext/class/inheritable_attributes</title>
      <link>https://markhneedham.com/blog/2012/04/14/ruby-neo4j-gem-loaderror-no-such-file-to-load-active_supportcore_extclassinheritable_attributes/</link>
      <pubDate>Sat, 14 Apr 2012 10:21:40 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/04/14/ruby-neo4j-gem-loaderror-no-such-file-to-load-active_supportcore_extclassinheritable_attributes/</guid>
      <description>I&amp;rsquo;ve been playing around with neo4j again over the past couple of days using the neo4j.rbgem to build up a graph.
I installed the gem but then ended up with the following error when I tried to &amp;lsquo;require neo4j&amp;rsquo; in &amp;lsquo;irb&amp;rsquo;:
LoadError: no such file to load -- active_support/core_ext/class/inheritable_attributes require at org/jruby/RubyKernel.java:1033 require at /Users/mneedham/.rbenv/versions/jruby-1.6.7/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:36 (root) at /Users/mneedham/.rbenv/versions/jruby-1.6.7/lib/ruby/gems/1.8/gems/neo4j-1.3.1-java/lib/neo4j.rb:9 require at org/jruby/RubyKernel.java:1033 require at /Users/mneedham/.rbenv/versions/jruby-1.6.7/lib/ruby/gems/1.8/gems/neo4j-1.3.1-java/lib/neo4j.rb:59 (root) at src/main/ruby/neo_test.rb:2 It seems a few others have come across this problem as welland the problem seems to be that ActiveSupport 3.</description>
    </item>
    
    <item>
      <title>Ruby: Refactoring from hash to object</title>
      <link>https://markhneedham.com/blog/2011/02/27/ruby-refactoring-from-hash-to-object/</link>
      <pubDate>Sun, 27 Feb 2011 20:10:50 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/02/27/ruby-refactoring-from-hash-to-object/</guid>
      <description>Something I&amp;rsquo;ve noticed when I play around with Ruby in my own time is that I nearly always end up with the situation where I&amp;rsquo;m passing hashes all over my code and to start with it&amp;rsquo;s not a big deal.
Unfortunately I eventually get to the stage where I&amp;rsquo;m effectively modelling an object inside a hash and it all gets very difficult to understand.
I&amp;rsquo;ve written a few times before about incrementally refactoringcode so this seemed like a pretty good chance for me to try that out.</description>
    </item>
    
    <item>
      <title>Ruby: Where to define the method?</title>
      <link>https://markhneedham.com/blog/2011/02/03/ruby-where-to-define-the-method/</link>
      <pubDate>Thu, 03 Feb 2011 19:37:17 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/02/03/ruby-where-to-define-the-method/</guid>
      <description>In our application we deal with items which can be put into a shopping cart.
An item is defined like so:
class Item &amp;lt; ActiveRecord::Base end One problem that we had to solve recently was working out how to display a message to the user if the item they wanted to buy was out of stock.
We can find out if items are out of stock by making a call to an external service:</description>
    </item>
    
    <item>
      <title>Rails: Using helpers inside a controller</title>
      <link>https://markhneedham.com/blog/2011/01/11/rails-using-helpers-inside-a-controller/</link>
      <pubDate>Tue, 11 Jan 2011 17:09:49 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/01/11/rails-using-helpers-inside-a-controller/</guid>
      <description>For about an hour or so this afternoon we were following the somewhat evil practice of using a method defined in a helper inside a controller.
The method was defined in the ApplicationHelper module:
module ApplicationHelper def foo # do something end end So we initially assumed that we&amp;rsquo;d just be able to reference that method inside any of our controllers since they all derive from ApplicationController.
That wasn&amp;rsquo;t the case so our next attempt was to try and add it as a helper:</description>
    </item>
    
    <item>
      <title>Ruby: Sorting by boolean fields</title>
      <link>https://markhneedham.com/blog/2011/01/08/ruby-sorting-by-boolean-fields/</link>
      <pubDate>Sat, 08 Jan 2011 13:15:19 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/01/08/ruby-sorting-by-boolean-fields/</guid>
      <description>We were doing a bit of work on RapidFTRin the ThoughtWorks Pune office today and one problem my pair and I were trying to solve was how to sort a collection of objects by a boolean field.
Therefore given the following array of values:
form_sections = [FormSection.new(:enabled =&amp;gt; false, :name =&amp;gt; &amp;#34;a&amp;#34;, :order =&amp;gt; 1), FormSection.new(:enabled =&amp;gt; true, :name =&amp;gt; &amp;#34;b&amp;#34;, :order =&amp;gt; 2)] We wanted to display those form sections which were disabled at the bottom of the page.</description>
    </item>
    
    <item>
      <title>Ruby: One method, two parameter types</title>
      <link>https://markhneedham.com/blog/2010/12/07/ruby-one-method-two-parameter-types/</link>
      <pubDate>Tue, 07 Dec 2010 05:01:44 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/12/07/ruby-one-method-two-parameter-types/</guid>
      <description>One interesting thing that I&amp;rsquo;ve noticed while coding in Ruby is that due to the dynamicness of the language it&amp;rsquo;s possible to pass values of different types into a given method as parameters.
For example, I&amp;rsquo;ve recently come across a few examples of methods designed like this:
def calculate_foo_prices(foos) ... [foos].flatten.each do |foo| # do something end end This allows us to use the method like this:
# foos would come in as an array from the UI foos = [Foo.</description>
    </item>
    
    <item>
      <title>Ruby: Exiting a &#39;loop&#39; early</title>
      <link>https://markhneedham.com/blog/2010/12/01/ruby-exiting-a-loop-early/</link>
      <pubDate>Wed, 01 Dec 2010 17:56:51 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/12/01/ruby-exiting-a-loop-early/</guid>
      <description>We recently had a problem to solve which at its core required us to iterate through a collection, look up a value for each key and then exit as soon as we&amp;rsquo;d found a value.
The original solution looped through the collection and then explicitly returned once a value had been found:
def iterative_version v = nil [1,2,3,4,5].each do |i| v = long_running_method i return v unless v.nil? end v end def long_running_method(value) puts &amp;#34;inside the long running method with #{value}&amp;#34; return nil if value &amp;gt; 3 value end Which we run like so:</description>
    </item>
    
    <item>
      <title>Ruby: Checking for environment variables in a script</title>
      <link>https://markhneedham.com/blog/2010/11/24/ruby-checking-for-environment-variables-in-a-script/</link>
      <pubDate>Wed, 24 Nov 2010 18:34:45 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/11/24/ruby-checking-for-environment-variables-in-a-script/</guid>
      <description>I&amp;rsquo;ve been working on a Ruby script to allow us to automate part of our Solrdata setup and part of the task was to check that some environment variables were set and throw an exception if not.
I got a bit stuck initially trying to work out how to return a message showing only the missing environment variables but it turned out to be pretty simple when I came back to it a couple of hours later.</description>
    </item>
    
    <item>
      <title>Capistrano, sed, escaping forward slashes and &#39;p&#39; is not &#39;puts&#39;!</title>
      <link>https://markhneedham.com/blog/2010/11/18/capistrano-sed-escaping-forward-slashes-and-p-is-not-puts/</link>
      <pubDate>Thu, 18 Nov 2010 18:40:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/11/18/capistrano-sed-escaping-forward-slashes-and-p-is-not-puts/</guid>
      <description>Priyankand I have been working on automating part of our deployment process and one task we needed to do as part of this is replace some variables used in one of our shell scripts.
All the variables in the script refer to production specific locations but we needed to change a couple of them in order to run the script in our QA environment.
We&amp;rsquo;re therefore written a sed command, which we call from Capistrano, to allow us to do this.</description>
    </item>
    
    <item>
      <title>Rails: A slightly misleading error</title>
      <link>https://markhneedham.com/blog/2010/11/16/rails-a-slightly-misleading-error/</link>
      <pubDate>Tue, 16 Nov 2010 21:17:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/11/16/rails-a-slightly-misleading-error/</guid>
      <description>We recently created a new project to handle the reporting part of our application and as with all our projects we decided not to checkin any configuration &amp;ldquo;.yml&amp;rsquo; files but rather &amp;lsquo;.yml.example&amp;rsquo; files which people can then customise for their own environments.
So in our config directory would look something like this when you first checkout the project:
And we&amp;rsquo;d need to copy those files to get &amp;lsquo;.yml&amp;rsquo; versions, changing any parameters that we need to for our local environment.</description>
    </item>
    
    <item>
      <title>Active Record: Nested attributes</title>
      <link>https://markhneedham.com/blog/2010/11/09/active-record-nested-attributes/</link>
      <pubDate>Tue, 09 Nov 2010 18:37:10 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/11/09/active-record-nested-attributes/</guid>
      <description>I recently learnt about quite a neat feature of Active Record called nested attributeswhich allows you to save attributes on associated records of a parent model.
It&amp;rsquo;s been quite useful for us as we have a few pages in our application where the user is able to update models like this.
We would typically end up with parameters coming into the controller like this:
class FoosController &amp;lt; ApplicationController def update # params = { :id =&amp;gt; &amp;#34;1&amp;#34;, :foo =&amp;gt; { :baz =&amp;gt; &amp;#34;new_baz&amp;#34;, :bar_attributes =&amp;gt; { :value =&amp;gt; &amp;#34;something&amp;#34; } } } Foo.</description>
    </item>
    
    <item>
      <title>Ruby: Getting Active Record validation errors twice</title>
      <link>https://markhneedham.com/blog/2010/10/29/ruby-getting-active-record-validation-errors-twice/</link>
      <pubDate>Fri, 29 Oct 2010 04:27:41 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/10/29/ruby-getting-active-record-validation-errors-twice/</guid>
      <description>I managed to create an interesting problem for myself while playing around with some code whereby I was ending up with validation errors appearing twice every time I called &amp;lsquo;valid?&amp;rsquo; on a specific model.
I figured I was probably doing something stupid and in fact a few replies by Aaron Baldwin on a mailing list thread on &amp;lsquo;rubyonrails-talk&#39;helped explain exactly what I&amp;rsquo;d done:
I&amp;rsquo;d put the following code into a controller elsewhere somewhat unnecessarily since it didn&amp;rsquo;t seem to be picking up the location of my model at the time:</description>
    </item>
    
    <item>
      <title>Ruby: Using a variable in a  regex</title>
      <link>https://markhneedham.com/blog/2010/10/27/ruby-using-a-variable-in-a-regex/</link>
      <pubDate>Wed, 27 Oct 2010 13:55:27 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/10/27/ruby-using-a-variable-in-a-regex/</guid>
      <description>We&amp;rsquo;re using Web Mock on my current project to stub out some of the external web requests in some of our integration tests and I managed to get myself very confused while trying to use a variable inside a regular expression that I was trying to pass to the &amp;lsquo;stub_request&amp;rsquo; method.
The code was roughly like this:
some_url = &amp;#34;http://service.com/method&amp;#34; stub_request(:any, /some_url/). to_return(:body =&amp;gt; File.new(&amp;#39;/path/to/some.xml&amp;#39;), :headers =&amp;gt; {&amp;#39;Content-Length&amp;#39; =&amp;gt; 666, &amp;#39;Content-Type&amp;#39; =&amp;gt; &amp;#39;text/xml&amp;#39;}, :status =&amp;gt; 200, :headers =&amp;gt; {&amp;#39;Content-Type&amp;#39; =&amp;gt; &amp;#39;text/xml&amp;#39;}) The request was being stubbed when I hard coded the url inside the regular expression but not being stubbed when I used the variable like in the example above.</description>
    </item>
    
    <item>
      <title>Ruby: Mocking or stubbing methods on the system under test</title>
      <link>https://markhneedham.com/blog/2010/10/24/ruby-mocking-or-stubbing-methods-on-the-system-under-test/</link>
      <pubDate>Sun, 24 Oct 2010 17:30:26 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/10/24/ruby-mocking-or-stubbing-methods-on-the-system-under-test/</guid>
      <description>An approach to testing which I haven&amp;rsquo;t seen before and am therefore assuming is more specific to Ruby is the idea of stubbing or mocking out functions on the system under test.
I&amp;rsquo;ve come across a couple of situations where this seems to be done:
I think the first approach is fine because typically we&amp;rsquo;ll have a direct test against that module&amp;rsquo;s methods elsewhere and it doesn&amp;rsquo;t make much sense to test the same thing again.</description>
    </item>
    
    <item>
      <title>Ruby: Using alias with &#39;indexers&#39;</title>
      <link>https://markhneedham.com/blog/2010/10/18/ruby-using-alias-with-indexers/</link>
      <pubDate>Mon, 18 Oct 2010 04:24:22 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/10/18/ruby-using-alias-with-indexers/</guid>
      <description>I&amp;rsquo;ve been browsing through some of the Rails routing code while following Jamis&amp;rsquo; Buck&amp;rsquo;s blog postand I came across something I hadn&amp;rsquo;t seen before while inside the &amp;lsquo;NamedRouteCollection&amp;rsquo; class.
The bit of code which initially confused me is in RouteSet.add_named_route:
module ActionController module Routing class RouteSet def initialize ... self.named_routes = NamedRouteCollection.new end def add_named_route(name, path, options = {}) # TODO - is options EVER used? name = options[:name_prefix] + name.</description>
    </item>
    
    <item>
      <title>Ruby: Hash default value</title>
      <link>https://markhneedham.com/blog/2010/10/16/ruby-hash-default-value/</link>
      <pubDate>Sat, 16 Oct 2010 14:02:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/10/16/ruby-hash-default-value/</guid>
      <description>I&amp;rsquo;ve been pairing a fair bit with Ashwinthis week and one thing he showed me which I hadn&amp;rsquo;t previously seen is the ability to set a default value for a hashwhich gets returned if we search for a key that doesn&amp;rsquo;t exist.
This is an idea that I originally came across while playing around with Clojure but with Clojure the default value was defined in the calling code rather than in the hash definition.</description>
    </item>
    
    <item>
      <title>RSpec: Testing Rails routes</title>
      <link>https://markhneedham.com/blog/2010/10/13/rspec-testing-rails-routes/</link>
      <pubDate>Wed, 13 Oct 2010 18:25:32 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/10/13/rspec-testing-rails-routes/</guid>
      <description>Something which I keep forgetting is how to write controller tests where I want to check whether an action correctly redirected to another action.
With most of the routes in our application we&amp;rsquo;ve created a &amp;lsquo;resourceful route&amp;rsquo; where each action maps to a CRUD operation in the database.
We can do that with this type of code in routes.rb:
ActionController::Routing::Routes.draw do |map| map.resources :foos end Several helper methods based on named rotes get created and included in our controllerswhen we do this and we have access to those inside our specs.</description>
    </item>
    
    <item>
      <title>Ruby: Active Record - Using &#39;exclusive_scope&#39; in IRB</title>
      <link>https://markhneedham.com/blog/2010/10/11/ruby-active-record-using-exclusive_scope-in-irb/</link>
      <pubDate>Mon, 11 Oct 2010 19:03:39 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/10/11/ruby-active-record-using-exclusive_scope-in-irb/</guid>
      <description>Ashwinand I have been working recently on a bit of code to make it possible to &amp;lsquo;soft delete&amp;rsquo; some objects in our system.
We&amp;rsquo;re doing this by creating an additional column in that table called &amp;lsquo;deleted_at_date&amp;rsquo; which we populate if a record is &amp;lsquo;deleted&amp;rsquo;.
As we wanted the rest of the application to ignore &amp;lsquo;deleted&amp;rsquo; records we added a default scopeto it:
class Foo &amp;lt; ActiveRecord::Base default_scope :conditions =&amp;gt; &amp;#34;deleted_at_date is null&amp;#34; end This works fine but we wanted to be able to see the status of all the records in IRB and with the default scope &amp;lsquo;Foo.</description>
    </item>
    
    <item>
      <title>Ruby: Getting the caller method with Kernel.caller</title>
      <link>https://markhneedham.com/blog/2010/10/08/ruby-getting-the-caller-method-with-kernel-caller/</link>
      <pubDate>Fri, 08 Oct 2010 13:19:56 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/10/08/ruby-getting-the-caller-method-with-kernel-caller/</guid>
      <description>One of the things I&amp;rsquo;ve been finding when debugging Cucumber specs is that due to the number of levels of indirection present in those examples it becomes quite difficult to work out exactly how certain pieces of code got called.
In one cuke we were trying to work out how 4 objects of the same type were ending up in the database when it seemed like there should only be two.</description>
    </item>
    
    <item>
      <title>Rails: before_filter, rescue_from and so on</title>
      <link>https://markhneedham.com/blog/2010/10/05/rails-before_filter-rescue_from-and-so-on/</link>
      <pubDate>Tue, 05 Oct 2010 08:53:48 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/10/05/rails-before_filter-rescue_from-and-so-on/</guid>
      <description>One thing I&amp;rsquo;ve noticed while browsing our Rails code base is that the first entry point inside a controller is much less frequently the method corresponding to the action than it would be with a C# ASP.NET MVC application.
The concept of filters exists in ASP.NET MVC but on the projects I&amp;rsquo;ve worked on they&amp;rsquo;ve been used significantly less than before filters would be in a Rails application.
As a result I&amp;rsquo;m getting much more in the habit of checking for the before filters in the ApplicationController when an action isn&amp;rsquo;t working as expected to try and figure out what&amp;rsquo;s going on.</description>
    </item>
    
    <item>
      <title>RSpec: Another newbie mistake</title>
      <link>https://markhneedham.com/blog/2010/09/30/rspec-another-newbie-mistake/</link>
      <pubDate>Thu, 30 Sep 2010 07:03:07 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/30/rspec-another-newbie-mistake/</guid>
      <description>We recently had a spec which was checking that we didn&amp;rsquo;t receive a call to a specific method on an object&amp;hellip;
describe &amp;#34;Our Object&amp;#34; do it &amp;#34;should not update property if user is not an admin&amp;#34; do our_user = Factory(&amp;#34;user_with_role_x) User.stub!(:find).and_return(our_user) user.stub!(:is_admin?).and_return(false) user.should_not_receive(:property) end end &amp;hellip;where &amp;lsquo;property&amp;rsquo; refers to a field in the users table. In the code &amp;lsquo;property&amp;rsquo; would get set like this:
class ObjectUnderTest def method_under_test user = User.</description>
    </item>
    
    <item>
      <title>Ruby: ActiveRecord 2.3.5 object equality</title>
      <link>https://markhneedham.com/blog/2010/09/30/ruby-activerecord-2-3-5-object-equality/</link>
      <pubDate>Thu, 30 Sep 2010 07:00:57 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/30/ruby-activerecord-2-3-5-object-equality/</guid>
      <description>We learnt something interesting about the equality of ActiveRecord objects today while comparing two user objects - one which was being provided to our application by Warden and the other that we&amp;rsquo;d retrieved by a &amp;lsquo;User.find&amp;rsquo; call.
Both objects referred to the same user in the database but were different instances in memory.
We needed to check that we were referring to the same user for one piece of functionality and were therefore able to make use of the &amp;lsquo;==&amp;rsquo; method defined on ActiveRecord::Base which is defined in the documentation like so:</description>
    </item>
    
    <item>
      <title>Ruby: Intersection/Difference/Concatenation with collections</title>
      <link>https://markhneedham.com/blog/2010/09/29/ruby-intersectiondifferenceconcatenation-with-collections/</link>
      <pubDate>Wed, 29 Sep 2010 03:28:40 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/29/ruby-intersectiondifferenceconcatenation-with-collections/</guid>
      <description>We came across a couple of situations yesterday where we wanted to perform operations on two different arrays.
My immediate thought was that there should be some methods available similar to what we have in C# which Mike Wagg and I spoke about in our talk about using functional programming techniques in C#.
I was expecting to find methods with names indicating the operation they perform but in actual fact the methods are more like operatorswhich makes for code that reads really well.</description>
    </item>
    
    <item>
      <title>FactoryGirl: &#39;has_and_belongs_to_many&#39; associations and the &#39;NoMethodError&#39;</title>
      <link>https://markhneedham.com/blog/2010/09/27/factorygirl-has_and_belongs_to_many-associations-and-the-nomethoderror/</link>
      <pubDate>Mon, 27 Sep 2010 14:18:48 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/27/factorygirl-has_and_belongs_to_many-associations-and-the-nomethoderror/</guid>
      <description>We ran into a somewhat frustrating problem while using Factory Girlto create an object which had a &amp;lsquo;has_and_belongs_to_many&amp;rsquo; association with another object.
The relevant code in the two classes was like this..
class Bar &amp;lt; ActiveRecord::Base has_and_belongs_to_many :foos, :class_name =&amp;gt; &amp;#34;Foo&amp;#34;, :join-table =&amp;gt; &amp;#34;bar_foos&amp;#34; end class Foo &amp;lt; ActiveRecord::Base has_many :bars end &amp;hellip;and we originally defined our &amp;lsquo;Bar&amp;rsquo; factory like so:
Factory.define :bar do |f| f.association(:foos, :factory =&amp;gt; :foo) end Factory.</description>
    </item>
    
    <item>
      <title>RSpec: Fooled by stub!...with</title>
      <link>https://markhneedham.com/blog/2010/09/26/rspec-fooled-by-stub-with/</link>
      <pubDate>Sun, 26 Sep 2010 19:03:24 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/26/rspec-fooled-by-stub-with/</guid>
      <description>We had an RSpec spec setup roughly like this the other day&amp;hellip;
describe &amp;#34;my stub test&amp;#34; do it &amp;#34;should be amazin&amp;#34; do Mark.stub!(:random).with(&amp;#34;some_wrong_argument&amp;#34;).and_return(&amp;#34;something&amp;#34;) Another.new.a_method end end &amp;hellip;where &amp;lsquo;Mark&amp;rsquo; and &amp;lsquo;Another&amp;rsquo; were defined like so:
class Mark def self.random(params) &amp;#34;do some amazing stuff&amp;#34; end end class Another def a_method random = Mark.random(&amp;#34;foo&amp;#34;) # use random for something end end When we ran the spec we would get the following error message which was initially a little baffling:</description>
    </item>
    
    <item>
      <title>RSpec: Causing ourselves much pain through &#39;attr&#39; misuse</title>
      <link>https://markhneedham.com/blog/2010/09/26/rspec-causing-ourselves-much-pain-through-attr-misuse/</link>
      <pubDate>Sun, 26 Sep 2010 18:57:53 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/26/rspec-causing-ourselves-much-pain-through-attr-misuse/</guid>
      <description>While testing some code that we were mixing into one of our controllers we made what I thought was an interesting mistake.
The module we wanted to test had some code a bit like this&amp;hellip;
module OurModule def some_method @User = User.find(params[:id]) # in the test code this is always true if @user == user ... end end end ..and we had the spec setup like so:
describe &amp;#39;OurController&amp;#39; do class TestController include OurModule attr_accessor :user end before(:each) do @controller = TestController.</description>
    </item>
    
    <item>
      <title>Ruby: Control flow using &#39;and&#39;</title>
      <link>https://markhneedham.com/blog/2010/09/23/ruby-control-flow-using-and/</link>
      <pubDate>Thu, 23 Sep 2010 14:33:29 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/23/ruby-control-flow-using-and/</guid>
      <description>Something I&amp;rsquo;ve noticed while reading Ruby code is that quite frequently the flow of a program is controlled by the &amp;lsquo;chaining&amp;rsquo; of different operations through use of the &amp;lsquo;and&amp;rsquo; keyword.
I&amp;rsquo;ve noticed that this pattern is used in Javascript code as welland it&amp;rsquo;s particularly prevalent when we want to get a status for those operations after they&amp;rsquo;ve all been executed.
For example we might have the following code&amp;hellip;
status = user.</description>
    </item>
    
    <item>
      <title>Ruby: Returning hashes using merge! and merge</title>
      <link>https://markhneedham.com/blog/2010/09/21/ruby-returning-hashes-using-merge-and-merge/</link>
      <pubDate>Tue, 21 Sep 2010 20:24:47 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/21/ruby-returning-hashes-using-merge-and-merge/</guid>
      <description>We came across an interesting problem today with some code which was unexpectedly returning nil.
The code that we had looked like this&amp;hellip;
class SomeClass def our_method	a_hash = { :a =&amp;gt; 2 } a_hash.merge!({:b =&amp;gt; 3}) unless some_condition.nil? end end &amp;hellip;and we didn&amp;rsquo;t notice the &amp;lsquo;unless&amp;rsquo; statement on the end which meant that if &amp;lsquo;some_condition&amp;rsquo; was nil then the return value of the method would be nil.
One way around it is to ensure that we explicitly return a_hash at the end of the method&amp;hellip;</description>
    </item>
    
    <item>
      <title>Rails: Faking a delete method with &#39;form_for&#39;</title>
      <link>https://markhneedham.com/blog/2010/09/20/rails-faking-a-delete-method-with-form_for/</link>
      <pubDate>Mon, 20 Sep 2010 18:52:15 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/20/rails-faking-a-delete-method-with-form_for/</guid>
      <description>We recently had a requirement to delete an item based on user input and wanting to adhere to the &amp;lsquo;RESTful&amp;rsquo; approach that Rails encourages we therefore needed to fake a HTTP Delete method request.
The documentation talks a little about this:
Rails works around this issue by emulating other methods over POST with a hidden input named &amp;ldquo;_method&amp;rdquo;, which is set to reflect the desired method:
The example provided is for the &amp;lsquo;form_tag&amp;rsquo; helper method where you just need to pass a hash containing an entry with a key &amp;lsquo;:method&amp;rsquo; and value &amp;lsquo;delete&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Ruby: Random Observations</title>
      <link>https://markhneedham.com/blog/2010/09/19/ruby-random-observations/</link>
      <pubDate>Sun, 19 Sep 2010 11:35:28 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/19/ruby-random-observations/</guid>
      <description>I thought it&amp;rsquo;d be interesting to write down some of my observations after working with Ruby and Rails for a couple more weeks so here are some more things I&amp;rsquo;ve come across and others that I&amp;rsquo;ve got confused with&amp;hellip;
I came across this while looking at some of the rails_warden codeto try to understand how that gem opens the ActionController::Base class to add helper methods to it.
The code reads as follows:</description>
    </item>
    
    <item>
      <title>Ruby: Testing declarative_authorization</title>
      <link>https://markhneedham.com/blog/2010/09/17/ruby-testing-declarative_authorization/</link>
      <pubDate>Fri, 17 Sep 2010 19:53:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/17/ruby-testing-declarative_authorization/</guid>
      <description>As I mentioned in a post earlier in the weekwe&amp;rsquo;re using the declarative_authorizationgem to control access to various parts of our application and as we&amp;rsquo;ve been migrating parts of the code base over to use that framework one thing we&amp;rsquo;ve noticed is that there seems to be a diminishing return in how much value we get from writing specs to cover each rule that we create.
We found that while it is possible to write a spec to cover every single rule it sometimes seems like the spec is just duplicating what the rule already describes.</description>
    </item>
    
    <item>
      <title>Ruby: Caught out by no type checking</title>
      <link>https://markhneedham.com/blog/2010/09/13/ruby-caught-out-by-no-type-checking/</link>
      <pubDate>Mon, 13 Sep 2010 17:44:04 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/13/ruby-caught-out-by-no-type-checking/</guid>
      <description>I got caught out for a little while today when comparing a value coming into a controller from &amp;lsquo;params&amp;rsquo; which we were then comparing with a collection of numbers.
The code was roughly like this&amp;hellip;
class SomeController def some_action some_collection = [1,2,3,4,5] selected_item = some_collection.find { |item| item == params[:id] } end end &amp;hellip;and since the &amp;lsquo;id&amp;rsquo; being passed in was &amp;lsquo;1&amp;rsquo; I was expected that we should have a selected item but we didn&amp;rsquo;t.</description>
    </item>
    
    <item>
      <title>Ruby: FactoryGirl &amp; declarative_authorization - Random thoughts</title>
      <link>https://markhneedham.com/blog/2010/09/12/ruby-factorygirl-declarative_authorization-random-thoughts/</link>
      <pubDate>Sun, 12 Sep 2010 14:25:06 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/12/ruby-factorygirl-declarative_authorization-random-thoughts/</guid>
      <description>Two other gems that we&amp;rsquo;re using on my current project are FactoryGirland declarative_authorization.
We use declarative_authorization for controlling access to various parts of the application and FactoryGirl allows us to build objects for use in our tests.
We wanted to be able to deactivate the authorization when creating test objects because otherwise our test wouldn&amp;rsquo;t have permission to create certain objects.
Our original approach was to create a &amp;lsquo;God&amp;rsquo; role which we could assign to the &amp;lsquo;current_user&amp;rsquo; in our tests therefore allowing us to create whatever objects we wanted.</description>
    </item>
    
    <item>
      <title>Rails: Polymorphism through &#39;constantize&#39;</title>
      <link>https://markhneedham.com/blog/2010/09/10/rails-polymorphism-through-constantize/</link>
      <pubDate>Fri, 10 Sep 2010 21:26:04 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/10/rails-polymorphism-through-constantize/</guid>
      <description>One interesting feature of Rails which Shishirpointed out the other day is the ability to take a user provided value and make use of Active Support&amp;rsquo;s &amp;lsquo;constantize&amp;rsquo; method to effectively achieve polymorphism directly from the user&amp;rsquo;s input.
As an example if we were creating different types of widgets from the same web page we might have several different forms that the user could submit.
We could have a hidden field representing the type of the widget like so:</description>
    </item>
    
    <item>
      <title>Ruby: Checking an array contains an item</title>
      <link>https://markhneedham.com/blog/2010/09/08/ruby-checking-an-array-contains-an-item/</link>
      <pubDate>Wed, 08 Sep 2010 18:54:50 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/08/ruby-checking-an-array-contains-an-item/</guid>
      <description>A couple of times in the past few days I&amp;rsquo;ve wanted to check if a particular item exists in an array and presumably influenced by working for too long with the .NET/Java APIs I keep expecting there to be a &amp;lsquo;contains&amp;rsquo; method that I can call on the array!
More as an attempt to help myself remember than anything else, the method we want is actually called &amp;lsquo;include?&#39;.
Therefore&amp;hellip;
[1,2,3].include?(2) =&amp;gt; true [1,2,3,4].</description>
    </item>
    
    <item>
      <title>Ruby: Hash ordering</title>
      <link>https://markhneedham.com/blog/2010/09/07/ruby-hash-ordering/</link>
      <pubDate>Tue, 07 Sep 2010 03:52:32 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/07/ruby-hash-ordering/</guid>
      <description>The application that I&amp;rsquo;m working on at the moment is deployed into production on JRuby but we also use the C Ruby 1.8.7 interpreter when developing locally since this allows us much quicker feedback.
As a result we sometimes come across interesting differences in the way that the two runtimes work.
One that we noticed yesterday is that if you create a hash, the order of the keys in the hash will be preserved when interpreted on JRuby but not with the C Ruby interpreter.</description>
    </item>
    
    <item>
      <title>Rails: Populating a dropdown list using &#39;form_for&#39;</title>
      <link>https://markhneedham.com/blog/2010/08/31/rails-populating-a-dropdown-list-using-form_for/</link>
      <pubDate>Tue, 31 Aug 2010 01:22:14 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/08/31/rails-populating-a-dropdown-list-using-form_for/</guid>
      <description>Last week we were trying to make use of Rails&amp;rsquo; &amp;lsquo;form_for&amp;rsquo; helperto populate a dropdown list with the values of a collection that we&amp;rsquo;d set to an instance variable in our controller.
My colleague pointed out that we&amp;rsquo;d need to use &amp;lsquo;collection_select&amp;rsquo; in order to do this.
We want to put the values in the &amp;lsquo;foos&amp;rsquo; collection onto the page. &amp;lsquo;foos&amp;rsquo; is a hash which defines some display values and their corresponding values like so:</description>
    </item>
    
    <item>
      <title>Ruby: &#39;method_missing&#39; and slightly misled by RubyMine</title>
      <link>https://markhneedham.com/blog/2010/08/23/ruby-method_missing-and-slightly-misled-by-rubymine/</link>
      <pubDate>Mon, 23 Aug 2010 21:07:46 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/08/23/ruby-method_missing-and-slightly-misled-by-rubymine/</guid>
      <description>Another library that we&amp;rsquo;re using on my project is ActionMailerand before reading through the documentation I was confused for quite a while with respect to how it actually worked.
We have something similar to the following piece of code&amp;hellip;
Emailer.deliver_some_email &amp;hellip;which when you click its definition in RubyMine takes you to this class definition:
class Emailer &amp;lt; ActionMailer::Base def some_email recipients &amp;#34;some@email.com&amp;#34; from &amp;#34;some_other_email@whatever.com&amp;#34; # and so on end end I initially thought that method was called &amp;lsquo;deliver_some_mail&amp;rsquo; but having realised that it wasn&amp;rsquo;t I was led to the &amp;lsquo;magic&amp;rsquo; that is &amp;lsquo;method_missing&amp;rsquo; on &amp;lsquo;ActionMailer::Base&amp;rsquo; which is defined as follows:</description>
    </item>
    
    <item>
      <title>Ruby: Accessing fields</title>
      <link>https://markhneedham.com/blog/2010/08/22/ruby-accessing-fields/</link>
      <pubDate>Sun, 22 Aug 2010 18:26:17 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/08/22/ruby-accessing-fields/</guid>
      <description>I&amp;rsquo;ve spent a little time browsing through some of the libraries used by my project and one thing which I noticed in ActiveSupportis that fields don&amp;rsquo;t seem to be accessed directly but rather are accessed through a method which effectively encapsulates them inside the object.
For example the following function is defined in &amp;lsquo;inheritable_attributes.rb&amp;rsquo;
def write_inheritable_attribute(key, value) if inheritable_attributes.equal?(EMPTY_INHERITABLE_ATTRIBUTES) @inheritable_attributes = {} end inheritable_attributes[key] = value end def inheritable_attributes @inheritable_attributes ||= EMPTY_INHERITABLE_ATTRIBUTES end EMPTY_INHERITABLE_ATTRIBUTES = {}.</description>
    </item>
    
    <item>
      <title>Bundler: Don&#39;t forget to call &#39;source&#39;</title>
      <link>https://markhneedham.com/blog/2010/07/25/bundler-dont-forget-to-call-source/</link>
      <pubDate>Sun, 25 Jul 2010 11:48:51 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/07/25/bundler-dont-forget-to-call-source/</guid>
      <description>Brian, Tejasand I (well mainly them) have been working on an application to give badges to people based on their GitHub activity at the Yahoo Open Hack Dayin Bangalore and we&amp;rsquo;ve been making use of Bundlerto pull in our dependencies.
Our Gemfile was originally like this:
gem &amp;#34;sinatra&amp;#34;, &amp;#34;1.0&amp;#34; gem &amp;#34;haml&amp;#34;, &amp;#34;3.0.13&amp;#34; gem &amp;#34;activesupport&amp;#34;, &amp;#34;3.0.0.beta4&amp;#34;, :require =&amp;gt; false gem &amp;#34;tzinfo&amp;#34;, &amp;#34;0.3.22&amp;#34; gem &amp;#34;nokogiri&amp;#34;, &amp;#34;1.4.2&amp;#34; ... For quite a while we were wondering why &amp;lsquo;bundle install&amp;rsquo; wasn&amp;rsquo;t actually resolving anything at all before we RTFMand realised that we needed to call &amp;lsquo;source&amp;rsquo; at the top so that bundler knows where to pull the dependencies from.</description>
    </item>
    
    <item>
      <title>Installing Ruby 1.9.2 with RVM on Snow Leopard</title>
      <link>https://markhneedham.com/blog/2010/07/08/installing-ruby-1-9-2-with-rvm-on-snow-leopard/</link>
      <pubDate>Thu, 08 Jul 2010 13:10:32 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/07/08/installing-ruby-1-9-2-with-rvm-on-snow-leopard/</guid>
      <description>Yesterday evening I decided to try and upgrade the Ruby installation on my Mac from 1.8.7 to 1.9.2 and went on the yak shaving mission which is doing just that.
RVMseems to be the way to install Ruby these days so I started off by installing that with the following command from the terminal:
bash &amp;lt; &amp;lt;( curl http://rvm.beginrescueend.com/releases/rvm-install-head ) That bit worked fine for me but there are further instructions on the RVM website if that doesn&amp;rsquo;t work.</description>
    </item>
    
    <item>
      <title>Iron Ruby: &#39;unitialized constant...NameError&#39;</title>
      <link>https://markhneedham.com/blog/2010/04/25/iron-ruby-unitialized-constant-nameerror/</link>
      <pubDate>Sun, 25 Apr 2010 17:27:25 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/04/25/iron-ruby-unitialized-constant-nameerror/</guid>
      <description>I&amp;rsquo;ve been playing around a bit with Iron Ruby and cucumber following Rupak Ganguly&amp;rsquo;s tutorialand I tried to change the .NET example provided in the 0.4.2 release of cucumberto call a class wrapping Castle&amp;rsquo;s WindsorContainer.
The feature file now looks like this:
# &amp;#39;MyAssembly.dll&amp;#39; is in the &amp;#39;C:/Ruby/lib/ruby/gems/1.8/gems/cucumber-0.6.4/examples/cs&amp;#39; folder require &amp;#39;MyAssembly&amp;#39; ... Before do @container = Our::Namespace::OurContainer.new.Container end The class is defined roughly like this:
public class OurContainer : IContainerAccessor { private WindsorContainer container = new WindsorContainer(); public SwintonContainer() { container.</description>
    </item>
    
    <item>
      <title>rspec - Invalid character &#39;\240&#39; in expression</title>
      <link>https://markhneedham.com/blog/2008/10/06/rspec-invalid-character-240-in-expression/</link>
      <pubDate>Mon, 06 Oct 2008 20:48:48 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/10/06/rspec-invalid-character-240-in-expression/</guid>
      <description>We have been using rspecon my project for the unit testing of our Ruby code and while running one of the specs last week I ended up getting this somewhat en-cryptic error message:
Invalid character &amp;#39;\240&amp;#39; in expression ... After convincing myself that this error wasn&amp;rsquo;t actually possible it turned out that I had somehow entered an &amp;lsquo;invisible to TextMate&amp;rsquo; character after one of the method definitions - on the editor it just looked like a space.</description>
    </item>
    
    <item>
      <title>Calling shell script from ruby script</title>
      <link>https://markhneedham.com/blog/2008/10/06/calling-shell-script-from-ruby-script/</link>
      <pubDate>Mon, 06 Oct 2008 20:12:49 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/10/06/calling-shell-script-from-ruby-script/</guid>
      <description>Damana and I previouslypostedabout our experiences with different Ruby LDAP solutions.
Having settled on Ruby-LDAP(although having read Ola and Steven&amp;rsquo;s comments we will now look at ruby-net-ldap) we then needed to put together the setup, installation and teardown into a ruby script file.
A quick bit of Googling revealed that we could use the Kernel.execmethod to do this.
For example, you could put the following in a ruby script file and it would execute and show you the current directory listing:</description>
    </item>
    
    <item>
      <title>Ruby LDAP Options</title>
      <link>https://markhneedham.com/blog/2008/10/05/ruby-ldap-options/</link>
      <pubDate>Sun, 05 Oct 2008 16:29:32 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/10/05/ruby-ldap-options/</guid>
      <description>As I mentioned in an earlier posta colleague and I spent a few days looking at how to connect to an OpenDSLDAP server using Ruby.
We ended up analysing four different solutions for solving the problem.
We had real problems trying to even connect to our OpenDS server using this library. We eventually found out that OpenDS is not actually listed as one of the supported interfaces.
The real benefit of this approach was that the library is written in Ruby meaning that getting permission to install it would be easier.</description>
    </item>
    
    <item>
      <title>Ruby: Ignore header line when parsing CSV file</title>
      <link>https://markhneedham.com/blog/2008/10/04/ruby-ignore-header-line-when-parsing-csv-file/</link>
      <pubDate>Sat, 04 Oct 2008 01:32:08 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/10/04/ruby-ignore-header-line-when-parsing-csv-file/</guid>
      <description>As my Ruby journey continues one of the things I wanted to do today was parse a CSV file.
This articleproved to be very useful for teaching the basics but it didn&amp;rsquo;t say how to ignore the header line that the CSV file contained.
The CSV file I was parsing was similar to this:
name, surname, location Mark, Needham, Sydney David, Smith, London I wanted to get the names of people originally to use them in my code.</description>
    </item>
    
    <item>
      <title>Ruby: Unzipping a file using rubyzip</title>
      <link>https://markhneedham.com/blog/2008/10/02/ruby-unzipping-a-file-using-rubyzip/</link>
      <pubDate>Thu, 02 Oct 2008 00:04:22 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/10/02/ruby-unzipping-a-file-using-rubyzip/</guid>
      <description>In the world of Ruby I&amp;rsquo;ve been working on a script which needs to unzip a file and then run an installer which is only available after unpacking it.
We&amp;rsquo;ve been using the rubyzipgem to do so but so far it hasn&amp;rsquo;t felt intuitive to me coming from the Java/C# world.
ZipFileis the class we need to use and at first glance I had thought that it would be possible to just pass the zip file name to the &amp;lsquo;extract&amp;rsquo; method and have it do all the work for me!</description>
    </item>
    
    <item>
      <title>Ruby: Parameterising with ActiveResource</title>
      <link>https://markhneedham.com/blog/2008/08/08/ruby-parameterising-with-activeresource/</link>
      <pubDate>Fri, 08 Aug 2008 22:16:02 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/08/08/ruby-parameterising-with-activeresource/</guid>
      <description>We&amp;rsquo;ve been using Ruby/Rails on my current project to create a RESTfulweb service. One of the problems we wanted to solve was making the data queried by this web service configurable from our build.
We started off with the following bit of code (which makes use of the recently added ActiveResourceclass):
Out of interest it has taken me ages to try and find a way to put the Ruby code on here in a readable format.</description>
    </item>
    
    <item>
      <title>Watching a master at work</title>
      <link>https://markhneedham.com/blog/2006/09/02/watching-a-master-at-work/</link>
      <pubDate>Sat, 02 Sep 2006 01:01:44 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2006/09/02/watching-a-master-at-work/</guid>
      <description>I&amp;rsquo;ve always found it fascinating watching people who really excel in their field going about business, be it footballers, tennis players, actors, whoever.
This week at TWU I&amp;rsquo;ve been playing around with some Ruby on Rails as I mentioned in the previous post, and yesterday I had the opportunity to watch one of the leading figures in the Ruby on Rails field at work. Take a bow Obie Fernandez, who gave several of the TWU attendees a demonstration of how to develop applications using Ruby on Rails.</description>
    </item>
    
    <item>
      <title>First thoughts on Ruby...</title>
      <link>https://markhneedham.com/blog/2006/08/29/first-thoughts-on-ruby/</link>
      <pubDate>Tue, 29 Aug 2006 20:01:05 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2006/08/29/first-thoughts-on-ruby/</guid>
      <description>I&amp;rsquo;ve heard a lot about Ruby on Railsover the last couple of years but I&amp;rsquo;d never really been intrigued to get it set up on my machine and &amp;lsquo;have a play&amp;rsquo; with it so to speak.
It turned out to be a relatively painless process and after following the instructions on the official siteI had it all setup within about half an hour which was a record for me for getting a development environment setup.</description>
    </item>
    
  </channel>
</rss>