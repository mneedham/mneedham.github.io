<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pair Programming on Mark Needham</title>
    <link>https://mneedham.github.io/blog/category/pair-programming/</link>
    <description>Recent content in Pair Programming on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Sep 2011 23:34:58 +0000</lastBuildDate>
    
	<atom:link href="https://mneedham.github.io/blog/category/pair-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pair Programming: The disadvantages of 100% pairing</title>
      <link>https://mneedham.github.io/blog/2011/09/06/pair-programming-the-disadvantages-of-100-pairing/</link>
      <pubDate>Tue, 06 Sep 2011 23:34:58 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2011/09/06/pair-programming-the-disadvantages-of-100-pairing/</guid>
      <description>I&amp;rsquo;ve written a lot of blog posts in the past about pair programming and the advantages that I&amp;rsquo;ve seen from using this technique but lately I find myself increasingly frustrated at the need to pair 100% of the time which happens on most teams I work on.
From my experience it&amp;rsquo;s certainly useful as a coaching tool, as I&amp;rsquo;ve mentioned before I think it&amp;rsquo;s a very useful for increasing the amount of collaboration between team members and an excellent way for ensuring that knowledge of the code base is spread across the team.</description>
    </item>
    
    <item>
      <title>Pair Programming: Doodling</title>
      <link>https://mneedham.github.io/blog/2011/02/26/pair-programming-doodling/</link>
      <pubDate>Sat, 26 Feb 2011 05:20:32 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2011/02/26/pair-programming-doodling/</guid>
      <description>Another interesting pair programming &amp;lsquo;technique&amp;rsquo; which I rediscovered while pairing with Priyank is that of doodling or drawing various parts of the solution when your pair is writing code. I find that this helps to stop my brain wondering off and lets me reflect on what we&amp;rsquo;re doing from a higher level.
As an added bonus it also seems to allow me to listen more effectively to my pair.
From what I&amp;rsquo;ve noticed it works most effectively when the other person is reasonably comfortable with the code base and language which was certainly the case when I was pairing with Priyank.</description>
    </item>
    
    <item>
      <title>Pair Programming: &#34;What are you trying to learn?&#34;</title>
      <link>https://mneedham.github.io/blog/2011/02/23/pair-programming-what-are-you-trying-to-learn/</link>
      <pubDate>Wed, 23 Feb 2011 02:58:51 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2011/02/23/pair-programming-what-are-you-trying-to-learn/</guid>
      <description>I&amp;rsquo;ve noticed recently that while pairing with various different people that I frequently ask my pair what they&amp;rsquo;re trying to learn through the approach that they&amp;rsquo;re about to take.
I tend to use it when I don&amp;rsquo;t really understand what my pair is doing and want to find out so that I can stay engaged.
It seems to be a more effective and less confrontational way of finding out than saying &amp;ldquo;What are you doing?</description>
    </item>
    
    <item>
      <title>Parallel Pair Programming</title>
      <link>https://mneedham.github.io/blog/2010/03/16/parallel-pair-programming/</link>
      <pubDate>Tue, 16 Mar 2010 23:56:47 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/03/16/parallel-pair-programming/</guid>
      <description>I&amp;rsquo;ve spent a bit of time working with Les recently and it&amp;rsquo;s been quite interesting working out the best way for us to pair together as he&amp;rsquo;s working as a front end developer on the team which means he&amp;rsquo;s best utilised working on the CSS/JavaScript/HTML side of things.
Having said that there are often features which require both front end and backend collaboration and we&amp;rsquo;ve been trying to drive these features from the front end through to the backend rather than working on the backend code separately and then working with Les later on to hook it all up to the frontend.</description>
    </item>
    
    <item>
      <title>Pair Programming: Some thoughts</title>
      <link>https://mneedham.github.io/blog/2010/03/09/pair-programming-some-thoughts/</link>
      <pubDate>Tue, 09 Mar 2010 23:04:29 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/03/09/pair-programming-some-thoughts/</guid>
      <description>Mark Wilden pointed me to a post he&amp;rsquo;s written about his experience pair programming at Pivotal Labs where he makes some interesting although not uncommon observations.
 When you pair program, you&#39;re effectively joined at the hip with your pair. You can&#39;t pair if only one of you is there.  I&amp;rsquo;ve previously written wondering what we should do if our pair isn&amp;rsquo;t around where I was leaning more towards the opinion that we should try to continue along the same path that we were on when working with our pair if they&amp;rsquo;re gone for a short amount of time and to find a new pair or work alone if they&amp;rsquo;re gone for longer.</description>
    </item>
    
    <item>
      <title>Pair Programming: In interviews</title>
      <link>https://mneedham.github.io/blog/2010/02/25/pair-programming-in-interviews/</link>
      <pubDate>Thu, 25 Feb 2010 08:03:12 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2010/02/25/pair-programming-in-interviews/</guid>
      <description>I came across a couple of quite interesting blog posts recently which described some approaches to interviewing which suggest a more empirical approach to interviewing whereby the interview is treated more like an audition for the person being interviewed.
I like this idea and it&amp;rsquo;s something that we do when recruiting developers in a pair programming interview.
The general idea is that we pair with the candidate as they go through a coding problem.</description>
    </item>
    
    <item>
      <title>Pair Programming/Helping/Working Collaboratively</title>
      <link>https://mneedham.github.io/blog/2009/11/22/pair-programminghelpingworking-collaboratively/</link>
      <pubDate>Sun, 22 Nov 2009 16:43:24 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/11/22/pair-programminghelpingworking-collaboratively/</guid>
      <description>Dan North has been presenting his &amp;lsquo;Pimp my architecture&amp;rsquo; talk again at QCon San Francisco this week and after reading the hugely positive feedback on Twitter I decided to watch some of it again.
The idea of getting people to help each other rather than pair program is what stood out for me this time, something which Brian Guthrie also pointed out:
 &#34;We didn&#39;t do pairing, we did &#39;helping&#39;. You can&#39;t get alpha progs to &#39;pair&#39; but they&#39;ll tell you what they know.</description>
    </item>
    
    <item>
      <title>Pair Programming: API exploration</title>
      <link>https://mneedham.github.io/blog/2009/10/11/pair-programming-api-exploration/</link>
      <pubDate>Sun, 11 Oct 2009 14:49:21 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/10/11/pair-programming-api-exploration/</guid>
      <description>A colleague and I were working on some code a couple of weeks ago which mostly revolved around investigating the C# reflection API to work out which methods we needed to use.
My colleague was driving while we were doing this and our progress seemed very much based on intuition about the API rather than being gradual.
In fact it was quite similar to one of the situations in which Uncle Bob suggests TDD doesn&amp;rsquo;t work so well:</description>
    </item>
    
    <item>
      <title>Pair Programming: Observations on anti-patterns</title>
      <link>https://mneedham.github.io/blog/2009/08/27/pair-programming-observations-on-anti-patterns/</link>
      <pubDate>Thu, 27 Aug 2009 00:02:50 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/08/27/pair-programming-observations-on-anti-patterns/</guid>
      <description>I&amp;rsquo;ve been pairing a bit more regularly recently after more sporadic pairing sessions over the last 9 or 10 months and I&amp;rsquo;ve noticed that I&amp;rsquo;ve picked up some habits which aren&amp;rsquo;t really that effective when pairing so I&amp;rsquo;m on a mission to sort that out.
Moving around the code too quickly One thing that I often forget is that when you&amp;rsquo;re driving you know exactly where you&amp;rsquo;re going with the mouse or keyboard just before you do it whereas the other person doesn&amp;rsquo;t know until you&amp;rsquo;ve done it.</description>
    </item>
    
    <item>
      <title>Pair Programming: Keeping both people engaged</title>
      <link>https://mneedham.github.io/blog/2009/08/24/pair-programming-keeping-both-people-engaged/</link>
      <pubDate>Mon, 24 Aug 2009 18:18:09 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/08/24/pair-programming-keeping-both-people-engaged/</guid>
      <description>I&amp;rsquo;ve written a few times previously about pair programming and how I think it&amp;rsquo;s one of the best practices I&amp;rsquo;ve seen used on agile teams but in order to ensure that we&amp;rsquo;re making the best use of this practice it&amp;rsquo;s important to ensure that both people are engaged.
It is often quite difficult to persuade people who aren&amp;rsquo;t used to extreme programming that having two people working at the same machine is actually beneficial and this task can be made even more difficult if one person is losing focus or interest and therefore isn&amp;rsquo;t actually adding much value in that pairing session.</description>
    </item>
    
    <item>
      <title>Pair Programming: So you don&#39;t want to do it...</title>
      <link>https://mneedham.github.io/blog/2009/06/08/pair-programming-so-you-dont-want-to-do-it/</link>
      <pubDate>Mon, 08 Jun 2009 17:05:46 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/06/08/pair-programming-so-you-dont-want-to-do-it/</guid>
      <description>I&amp;rsquo;ve worked on several software development teams over the last few years - some that pair programmed all the time and some that didn&amp;rsquo;t - and one of the key things that I&amp;rsquo;ve noticed is that the level of collaboration on these teams was significantly higher when pair programming was being done on a regular basis.
The following are some of the observations I have noticed in teams which don&amp;rsquo;t pair program frequently.</description>
    </item>
    
    <item>
      <title>Pair Programming: Refactoring</title>
      <link>https://mneedham.github.io/blog/2009/05/26/pair-programming-refactoring/</link>
      <pubDate>Tue, 26 May 2009 23:44:36 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/05/26/pair-programming-refactoring/</guid>
      <description>One area of development where I have sometimes wondered about the value that we can get from pair programming is when we&amp;rsquo;re spending time doing some major refactoring of our code base.
The reason I felt that pairing on big refactoring tasks might be difficult compared to when working on a story together is that with a story there tends to be a more defined goal and the business have defined that goal whereas with a refactoring task that goal is often less clear and people have much wider ranging differing opinions about the approach that should be taken.</description>
    </item>
    
    <item>
      <title>Pair Programming: It&#39;s not about equal keyboard time</title>
      <link>https://mneedham.github.io/blog/2009/05/23/its-not-about-equal-keyboard-time/</link>
      <pubDate>Sat, 23 May 2009 16:35:56 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/05/23/its-not-about-equal-keyboard-time/</guid>
      <description>My colleague Nick Carroll recently blogged some ideas about what to do if your pair is hogging the keyboard, suggesting using a timer which keeps track of how long each person has had at the keyboard as a useful way of ensuring that both people in the pair stay more engaged.
While I can see the thinking behind this I think it is addressing the wrong problem.
From my experience we don&amp;rsquo;t always want to be moving the keyboard between the two people quickly at all times - I have certainly seen times where it makes sense for one person to be spending more time at the keyboard than the other.</description>
    </item>
    
    <item>
      <title>Pair Programming: When your pair steps away</title>
      <link>https://mneedham.github.io/blog/2009/05/03/pair-programming-when-your-pair-steps-away/</link>
      <pubDate>Sun, 03 May 2009 19:08:27 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/05/03/pair-programming-when-your-pair-steps-away/</guid>
      <description>I&amp;rsquo;ve been having a bit of a discussion recently with some of my colleagues about what we should do when pair programming and one of the people in the pair has to step away to go and help someone else or to take part in an estimation session or whatever it happens to be.
If we&amp;rsquo;re pairing in an effective way then it should be possible for the person still at the computer to keep on going on the story/task that the pair were working on alone.</description>
    </item>
    
    <item>
      <title>Pair Programming: The Code Fairy</title>
      <link>https://mneedham.github.io/blog/2009/04/10/pair-programming-the-code-fairy/</link>
      <pubDate>Fri, 10 Apr 2009 19:28:18 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/04/10/pair-programming-the-code-fairy/</guid>
      <description>One of the hardest situations that comes up when pair programming is when you want to solve a problem in a certain way but you can&amp;rsquo;t persuade your pair that it&amp;rsquo;s the approach you should take.
The temptation in these situations is to wait until your pair isn&amp;rsquo;t around, maybe by staying late at the end of the day or coming in early the next day and then making the changes to the code that you wanted to make but didn&amp;rsquo;t when you were pairing with them.</description>
    </item>
    
    <item>
      <title>Pair Programming: Slowly but surely</title>
      <link>https://mneedham.github.io/blog/2009/03/31/pair-programming-slowly-but-surely/</link>
      <pubDate>Tue, 31 Mar 2009 23:15:28 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/03/31/pair-programming-slowly-but-surely/</guid>
      <description>I recently watched a video recorded by Uncle Bob at the Chicago Alt.NET meeting where amongst other things he talked about the importance of going slowly but surely when we&amp;rsquo;re developing code i.e. spending the time to get it right first time instead of rushing through and having to go back and fix our mistakes.
While pairing with a colleague recently it became clear to me that pair programming, when done well, drives you towards a state where you are being much more careful about the work being produced.</description>
    </item>
    
    <item>
      <title>Pair Programming: From a Lean angle</title>
      <link>https://mneedham.github.io/blog/2009/03/29/pair-programming-from-a-lean-angle/</link>
      <pubDate>Sun, 29 Mar 2009 16:54:05 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2009/03/29/pair-programming-from-a-lean-angle/</guid>
      <description>I recently watched a presentation about lean thinking and I started seeing parallels in a lot of what they were saying with the benefits that I believe we see in projects when the team pair programs.
Big Picture vs Local Optimisations One of the biggest arguments used against pair programming is that we get half as much work done because we have two people working on one computer.
Even if we ignore the immediate flaws in that argument I think this is a case of looking at individual productivity when in fact what we really care about is the team&amp;rsquo;s productivity i.</description>
    </item>
    
    <item>
      <title>Pair Programming: What works for me</title>
      <link>https://mneedham.github.io/blog/2008/12/17/pair-programming-what-works-for-me/</link>
      <pubDate>Wed, 17 Dec 2008 22:09:08 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/12/17/pair-programming-what-works-for-me/</guid>
      <description>My colleague Chris Johnston recently posted about his experiences with pair programming, eventually ending up asking for other people&amp;rsquo;s experiences in doing so.
Several of my colleagues have replied citing some of their best practices and I have previously posted about what I think makes pair programming more effective so for this post I thought I&amp;rsquo;d try and also identify the approaches that make pair programming work for me.
Keep it productive This is the area which has been written about the most, perhaps because it&#39;s the most visible to others.</description>
    </item>
    
    <item>
      <title>Pair Programming: The Over Eager Driver</title>
      <link>https://mneedham.github.io/blog/2008/11/05/pair-programming-the-over-eager-driver/</link>
      <pubDate>Wed, 05 Nov 2008 23:48:54 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/11/05/pair-programming-the-over-eager-driver/</guid>
      <description>One of the interesting situations that can arise when pair programming is that one person dominates the driving and their pair can hardly get a look in.
This is not necessarily because they are hogging the keyboard - it is often just the case that they are the stronger technically in the pair and the other person isn&amp;rsquo;t willing to ask for the keyboard.
A big part of the value in pair programming comes from having both people taking turns at driving and navigating from my experience and there are several ideas that I have come across for trying to encourage a more collaborative approach to pair programming.</description>
    </item>
    
    <item>
      <title>Pair Programming: Benefits of the pair switch mid story</title>
      <link>https://mneedham.github.io/blog/2008/11/04/pair-programming-benefits-of-the-pair-switch-mid-story/</link>
      <pubDate>Tue, 04 Nov 2008 00:00:26 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/11/04/pair-programming-benefits-of-the-pair-switch-mid-story/</guid>
      <description>On my current project we&amp;rsquo;ve been having some discussions around the frequency with which we rotate pairs, the feeling being that we probably keep the same pairs for a bit too long.
We discussed using techniques such as promiscuous pairing, which takes the idea of pair rotation to an extreme, but have settled on making our rotations more or less daily.
One interesting thing I noticed from some recent pair switching was the immediate benefit we can realise from the pair rotation.</description>
    </item>
    
    <item>
      <title>Pair Programming: Driving quickly</title>
      <link>https://mneedham.github.io/blog/2008/11/02/pair-programming-driving-quickly/</link>
      <pubDate>Sun, 02 Nov 2008 22:13:33 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/11/02/pair-programming-driving-quickly/</guid>
      <description>In order to experience the full benefits of pair programming it is important to try and reduce the chance of the navigator getting bored and losing focus.
One of the main ways that we can do this is by ensuring that we have a quick turnaround between the driver and navigator, and this can be done by ensuring that when we are driving we are doing so as quickly as possible.</description>
    </item>
    
    <item>
      <title>Pair Programming: Pair Flow</title>
      <link>https://mneedham.github.io/blog/2008/10/17/pair-programming-pair-flow/</link>
      <pubDate>Fri, 17 Oct 2008 00:18:39 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/10/17/pair-programming-pair-flow/</guid>
      <description>In an earlier post about Team Productivity I stumbled upon the idea that while pair programming there could be such a concept as pair flow.
The term &amp;lsquo;flow&amp;rsquo; is used to describe a situation where you are totally immersed in the work you&amp;rsquo;re doing and where time seems to go by without you even noticing.
This can also happen when pair programming and I think there are some factors which can make it more likely.</description>
    </item>
    
    <item>
      <title>Pair Programming: Why would I pair on this?</title>
      <link>https://mneedham.github.io/blog/2008/10/09/pair-programming-why-would-i-pair-on-this/</link>
      <pubDate>Thu, 09 Oct 2008 00:38:43 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/10/09/pair-programming-why-would-i-pair-on-this/</guid>
      <description>In the comments of my previous post on pairing Vivek made the following comment about when we should pair:
 The simplest principle I have is to use &#34;conscious&#34; pairing vs. &#34;unconscious&#34; pairing. A pair should always *know* why they are pairing.  On previous projects I have worked on there have been several tasks where it has been suggested that there is little value in pairing. I decided to try and apply Vivek&amp;rsquo;s principle of knowing why we might pair on these tasks to see if there is actually any value in doing so.</description>
    </item>
    
    <item>
      <title>Pair Programming: What do we gain from it?</title>
      <link>https://mneedham.github.io/blog/2008/09/28/pair-programming-what-do-we-gain-from-it/</link>
      <pubDate>Sun, 28 Sep 2008 22:19:30 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/09/28/pair-programming-what-do-we-gain-from-it/</guid>
      <description>My former colleague Vivek Vaid has an interesting post about parallel-paired programming where he talks about introducing lean concepts into deciding when we should pair to get maximum productivity.
Midway through the post he mentions that the original reason that we starting pairing was for &amp;lsquo;collaborative design&amp;rsquo; which got me thinking whether there are reasons beyond this why we would want to pair.
I have often worked on clients where the value of pair programming has been questioned and it has been suggested that we should only adhere to this practice for tasks where it adds most value.</description>
    </item>
    
    <item>
      <title>Pair Programming: Junior/Junior pair</title>
      <link>https://mneedham.github.io/blog/2008/08/13/pair-programming-juniorjunior-pair/</link>
      <pubDate>Wed, 13 Aug 2008 23:18:24 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/08/13/pair-programming-juniorjunior-pair/</guid>
      <description>When it comes to Pair Programming the Junior/Junior pairing is considered the most likely to lead to disaster. The old joke being that if you pair two Junior Developers together then you&amp;rsquo;d better hope you have a revert function on your repository. But is this fair?
Certainly pairing two Junior Developers together means that you automatically lose the value of the experience and mentoring skills that you would get if there was a Senior Developer as part of the pair.</description>
    </item>
    
    <item>
      <title>Pair Programming: Pairing with a QA</title>
      <link>https://mneedham.github.io/blog/2008/08/11/pair-programming-pairing-with-a-qa/</link>
      <pubDate>Mon, 11 Aug 2008 22:10:19 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/08/11/pair-programming-pairing-with-a-qa/</guid>
      <description>I&amp;rsquo;ve talked about pair programming in some of my previous posts as I find the dynamic it creates quite intriguing.
One idea which was suggested around the time I wrote those posts by my project manager at the time was developers pairing with the QA or BA on certain tasks. I didn&amp;rsquo;t get to experience it on that particular project but over the last week I&amp;rsquo;ve been doing quick a bit of build work and for some of that I was pairing with our QA.</description>
    </item>
    
    <item>
      <title>Pair Programming: The Non Driving Pair</title>
      <link>https://mneedham.github.io/blog/2008/02/14/pair-programming-the-non-driving-pair/</link>
      <pubDate>Thu, 14 Feb 2008 01:27:58 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/02/14/pair-programming-the-non-driving-pair/</guid>
      <description>One of the intriguing aspects of pair programming for me is that of the non driving person in the pair – what are they supposed to do?!
Obviously there are fairly well known strategies for more interactive pairing, such as Ping Pong and Ball and Board (which is where one person controls the mouse and the other the keyboard), but neither of these strategies suggest what to do when you are not driving</description>
    </item>
    
    <item>
      <title>Pair Programming: Introduction</title>
      <link>https://mneedham.github.io/blog/2008/02/10/pair-programming-introduction/</link>
      <pubDate>Sun, 10 Feb 2008 01:47:25 +0000</pubDate>
      
      <guid>https://mneedham.github.io/blog/2008/02/10/pair-programming-introduction/</guid>
      <description>I’ve had the opportunity to have worked with many different people pair programming wise over the last year or so, and having seen it done in several different ways thought it would be interesting to work through some of my thoughts about this Extreme Programming (XP) originated practice.
First of all it seems to me that pair programming is a technique that is used with a lot more frequency at ThoughtWorks than at any other IT organisation.</description>
    </item>
    
  </channel>
</rss>