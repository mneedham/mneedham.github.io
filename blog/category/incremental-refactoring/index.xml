<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Incremental Refactoring on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/category/incremental-refactoring/</link>
    <description>Recent content in Incremental Refactoring on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Feb 2011 20:10:50 +0000</lastBuildDate>
    
	<atom:link href="https://www.markhneedham.com/blog/category/incremental-refactoring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ruby: Refactoring from hash to object</title>
      <link>https://www.markhneedham.com/blog/2011/02/27/ruby-refactoring-from-hash-to-object/</link>
      <pubDate>Sun, 27 Feb 2011 20:10:50 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2011/02/27/ruby-refactoring-from-hash-to-object/</guid>
      <description>Something I&amp;#8217;ve noticed when I play around with Ruby in my own time is that I nearly always end up with the situation where I&amp;#8217;m passing hashes all over my code and to start with it&amp;#8217;s not a big deal.
 Unfortunately I eventually get to the stage where I&amp;#8217;m effectively modelling an object inside a hash and it all gets very difficult to understand.
 I&amp;#8217;ve written a few times before about incrementally refactoring code so this seemed like a pretty good chance for me to try that out.</description>
    </item>
    
    <item>
      <title>Incremental Refactoring: Create factory method</title>
      <link>https://www.markhneedham.com/blog/2010/06/17/incremental-refactoring-create-factory-method/</link>
      <pubDate>Thu, 17 Jun 2010 00:43:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/17/incremental-refactoring-create-factory-method/</guid>
      <description>Dermot and I spent a bit of time today refactoring some code where the logic had ended up in the wrong place.
 The code originally looked a bit like this:
 public class LookupService { public LookUp Find(UserData userData) { var param1 = GetParam1From(userData); var param2 = GetParam2From(userData); var param3 = GetParam3From(userData); var lookupKey = new LookUpKey(param1, param2, param3); return lookupRepository.Find(lookupKey); } }   public class LookUpKey { private readonly string param1; private readonly string param2; private readonly string param3; public LookUpKey(string param1, string param2, string param3) { this.</description>
    </item>
    
    <item>
      <title>Consistency in the code base and incremental refactoring</title>
      <link>https://www.markhneedham.com/blog/2010/05/05/consistency-in-the-code-base-and-incremental-refactoring/</link>
      <pubDate>Wed, 05 May 2010 22:34:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/05/consistency-in-the-code-base-and-incremental-refactoring/</guid>
      <description>I wrote a post a while ago about keeping consistency in the code base where I covered some of the reasons that you might want to rewrite parts of a code base and the potential impact of those changes but an interesting side to this discussion which I didn&amp;#8217;t cover that much but which seems to play a big role is the role of incremental refactoring.
 In our code base we recently realised that the naming of the fields in some parts of a form don&amp;#8217;t really make sense and I wanted to start naming new fields with the new naming style and then go back and change the existing ones incrementally when it was a good time to do so.</description>
    </item>
    
    <item>
      <title>Small step refactoring: Overload constructor</title>
      <link>https://www.markhneedham.com/blog/2010/04/25/small-step-refactoring-overload-constructor/</link>
      <pubDate>Sun, 25 Apr 2010 22:48:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/25/small-step-refactoring-overload-constructor/</guid>
      <description>I&amp;#8217;ve previously written about some approaches that I&amp;#8217;ve been taught with respect to taking small steps when refactoring code and another approach which a couple of colleagues have been using recently is the idea of overloading the constructor when refactoring objects.
 On a couple of occasions we&amp;#8217;ve been trying to completely change the way an object was designed and changing the current constructor would mean that we&amp;#8217;d have to change all the tests against that object before checking if the new design was actually going to work or not.</description>
    </item>
    
    <item>
      <title>Refactoring: Small steps to pull out responsibilities</title>
      <link>https://www.markhneedham.com/blog/2010/02/24/refactoring-small-steps-to-pull-out-responsibilities/</link>
      <pubDate>Wed, 24 Feb 2010 00:45:38 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/24/refactoring-small-steps-to-pull-out-responsibilities/</guid>
      <description>I wrote previously about how I&amp;#8217;ve been using effect sketches to identify responsibilities in objects so that I can pull them out into other objects and once I&amp;#8217;ve done this I often find that I can&amp;#8217;t see a small next step to take.
 At this stage in the past I&amp;#8217;ve often then stopped and left the refactoring until I have more time to complete it but this hasn&amp;#8217;t really worked and a lot of the time I end up only seeing the code change in my mind and not in the actual code.</description>
    </item>
    
    <item>
      <title>Consistency in the code base</title>
      <link>https://www.markhneedham.com/blog/2009/11/04/consistency-in-the-code-base/</link>
      <pubDate>Wed, 04 Nov 2009 21:39:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/11/04/consistency-in-the-code-base/</guid>
      <description>I&amp;#8217;ve had quite a few discussions with various different colleagues about coding consistency over the last year or so and Pat Kuaand Frank Trindade have both written posts suggesting that we should look to have coding standards on projects in order to avoid the type of pain that having an inconsistent approach can lead to.
 From what I&amp;#8217;ve noticed there seem to be two reasons that we end up with inconsistent code on projects:</description>
    </item>
    
    <item>
      <title>Safe refactoring: Removing object initializer, introducing builder</title>
      <link>https://www.markhneedham.com/blog/2009/06/26/safe-refactoring-removing-object-initializer-introducing-builder/</link>
      <pubDate>Fri, 26 Jun 2009 00:02:45 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/26/safe-refactoring-removing-object-initializer-introducing-builder/</guid>
      <description>I previously wrote about an approach we took to safely remove some duplication and I recently followed a similar mantra to replace an object initializer call which had around 40 properties being setup with a builder to try and make the code a bit easier to understand.
 We did have tests checking the values being setup by the object initializer so I was already able to refactor with some degree of safety - it would probably have been possible to just create the builder and build the object from that and then delete the old code and replace it with the new but I&amp;#8217;ve caused myself too many problems from doing that before that I decided to try a more incremental approach.</description>
    </item>
    
    <item>
      <title>Refactoring: Removing duplication more safely</title>
      <link>https://www.markhneedham.com/blog/2009/05/26/refactoring-removing-duplication-more-safely/</link>
      <pubDate>Tue, 26 May 2009 13:20:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/05/26/refactoring-removing-duplication-more-safely/</guid>
      <description>One of the most important things that I&amp;#8217;ve learnt from the coding dojo sessions that we&amp;#8217;ve been running over the last six months is the importance of small step refactorings.
 Granted we have been trying to take some of the practices to the extreme but the basic idea of trying to keep the tests green for as much time as well as keeping our code in a state where it still compiles (in a static language) is very useful no matter what code we&amp;#8217;re working on.</description>
    </item>
    
    <item>
      <title>Refactoring: Comment it out vs small steps removal</title>
      <link>https://www.markhneedham.com/blog/2009/02/08/refactoring-comment-it-out-vs-small-steps-removal/</link>
      <pubDate>Sun, 08 Feb 2009 09:10:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/08/refactoring-comment-it-out-vs-small-steps-removal/</guid>
      <description>One refactoring I was doing last week was to try and remove the use of some getters/setters on one of our objects so that it was better encapsulated and all the behaviour related to it happened in one place.
 The change involved introducing a constructor to initialise the object rather than doing so using the new object initialiser syntax and initalising it using the properties.
 My initial approach was to find all the usages of these properties and then remove each usage one by one, running our suite of tests against the code after each change to ensure that nothing had broken as a result of the change.</description>
    </item>
    
  </channel>
</rss>