<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wikidata on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/category/wikidata/</link>
    <description>Recent content in Wikidata on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Feb 2020 00:21:00 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/category/wikidata/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SPARQL: OR conditions in a WHERE clause using the UNION clause</title>
      <link>https://www.markhneedham.com/blog/2020/02/07/sparql-or-conditions-where-union-query/</link>
      <pubDate>Fri, 07 Feb 2020 00:21:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2020/02/07/sparql-or-conditions-where-union-query/</guid>
      <description>This is part 4 of my series of posts about querying the Wikidata API, in which I learn how to use SPARQL’s UNION clause to handle an OR condition in a WHERE clause.
Figure 1. Using SPARQL’s UNION clause But first, some context!
After running queries against the Wikidata SPARQL API to pull the date of birth and nationality of tennis players into the Australian Open Graph, I noticed that several players hadn’t actually been updated.</description>
    </item>
    
    <item>
      <title>Neo4j: Enriching an existing graph by querying the Wikidata SPARQL API</title>
      <link>https://www.markhneedham.com/blog/2020/02/04/neo4j-enriching-existing-graph-wikidata-sparql-api/</link>
      <pubDate>Tue, 04 Feb 2020 00:21:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2020/02/04/neo4j-enriching-existing-graph-wikidata-sparql-api/</guid>
      <description>This is the third post in a series about querying Wikidata’s SPARQL API. In the first post we wrote some basic queries, in the second we learnt about the SELECT and CONSTRUCT clauses, and in this post we’re going to import query results into an existing Neo4j graph.
Figure 1. Enriching a Neo4j Graph with Wikidata Setting up Neo4j We’re going to use the following Docker Compose configuration in this blog post:</description>
    </item>
    
    <item>
      <title>Neo4j: Cross database querying with Neo4j Fabric</title>
      <link>https://www.markhneedham.com/blog/2020/02/03/neo4j-cross-database-querying-fabric/</link>
      <pubDate>Mon, 03 Feb 2020 00:21:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2020/02/03/neo4j-cross-database-querying-fabric/</guid>
      <description>A couple of weeks ago I wrote a QuickGraph blog post about the Australian Open, in which I showed how to use Neo4j 4.0’s multi database feature.
In that post we focused on queries that could be run on one database, but the 4.0 release also contains another feature for doing cross database querying - Neo4j Fabric - and we’re going to learn how to use that in this post.</description>
    </item>
    
    <item>
      <title>Querying Wikidata: SELECT vs CONSTRUCT</title>
      <link>https://www.markhneedham.com/blog/2020/02/02/querying-wikidata-construct-select/</link>
      <pubDate>Sun, 02 Feb 2020 00:21:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2020/02/02/querying-wikidata-construct-select/</guid>
      <description>In this blog post we’re going to build upon the newbie’s guide to querying Wikidata, and learn all about the CONSTRUCT clause.
Figure 1. SPARQL’s CONSTRUCT and SELECT clauses In the newbie’s guide, we wrote the following query to find a tennis player with the name &amp;#34;Nick Kyrgios&amp;#34; and return their date of birth:
SELECT * WHERE { ?person wdt:P106 wd:Q10833314 ; rdfs:label &amp;#39;Nick Kyrgios&amp;#39;@en ; wdt:P569 ?dateOfBirth } where:</description>
    </item>
    
    <item>
      <title>A newbie&#39;s guide to querying Wikidata</title>
      <link>https://www.markhneedham.com/blog/2020/01/29/newbie-guide-querying-wikidata/</link>
      <pubDate>Wed, 29 Jan 2020 00:21:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2020/01/29/newbie-guide-querying-wikidata/</guid>
      <description>After reading one of Jesús Barrasa’s recent QuickGraph posts about enriching a knowledge graph with data from Wikidata, I wanted to learn how to query the Wikidata API so that I could pull in the data for my own QuickGraphs.
I want to look up information about tennis players, and one of my favourite players is Nick Kyrgios, so this blog post is going to be all about him.</description>
    </item>
    
  </channel>
</rss>
