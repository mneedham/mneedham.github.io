<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Mark Needham</title>
    <link>https://markhneedham.com/blog/category/java/</link>
    <description>Recent content in Java on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Dec 2017 17:35:03 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/category/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IntelliJ 14.1.5: Unable to import maven project</title>
      <link>https://markhneedham.com/blog/2015/09/30/intellij-14-1-5-unable-to-import-maven-project/</link>
      <pubDate>Wed, 30 Sep 2015 05:54:54 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2015/09/30/intellij-14-1-5-unable-to-import-maven-project/</guid>
      <description>-Didea.maven3.use.compat.resolver </description>
    </item>
    
    <item>
      <title>Java: Jersey - java.lang.NoSuchMethodError: com.sun.jersey.core.reflection.ReflectionHelper. getContextClassLoaderPA()Ljava/security/PrivilegedAction;</title>
      <link>https://markhneedham.com/blog/2015/08/11/java-jersey-java-lang-nosuchmethoderror-com-sun-jersey-core-reflection-reflectionhelper-getcontextclassloaderpaljavasecurityprivilegedaction/</link>
      <pubDate>Tue, 11 Aug 2015 06:59:50 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2015/08/11/java-jersey-java-lang-nosuchmethoderror-com-sun-jersey-core-reflection-reflectionhelper-getcontextclassloaderpaljavasecurityprivilegedaction/</guid>
      <description>public class ExampleResourceTest { @Rule public Neo4jRule neo4j = new Neo4jRule() .withFixture(&amp;#34;CREATE (:Person {name: &amp;#39;Mark&amp;#39;})&amp;#34;) .withFixture(&amp;#34;CREATE (:Person {name: &amp;#39;Nicole&amp;#39;})&amp;#34;) .withExtension( &amp;#34;/unmanaged&amp;#34;, ExampleResource.class ); @Test public void shouldReturnAllTheNodes() { // Given  URI serverURI = neo4j.httpURI(); // When  HTTP.Response response = HTTP.GET(serverURI.resolve(&amp;#34;/unmanaged/example/people&amp;#34;).toString()); // Then  assertEquals(200, response.status()); List content = response.content(); assertEquals(2, content.size()); } } 07:51:32.985 [main] WARN o.e.j.u.component.AbstractLifeCycle - FAILED o.e.j.s.ServletContextHandler@29eda4f8{/unmanaged,null,STARTING}: java.lang.NoSuchMethodError: com.sun.jersey.core.reflection.ReflectionHelper.getContextClassLoaderPA()Ljava/security/PrivilegedAction; java.lang.NoSuchMethodError: com.sun.jersey.core.reflection.ReflectionHelper.getContextClassLoaderPA()Ljava/security/PrivilegedAction; at com.sun.jersey.spi.scanning.AnnotationScannerListener.&amp;lt;init&amp;gt;(AnnotationScannerListener.java:94) ~[jersey-server-1.19.jar:1.19] at com.</description>
    </item>
    
    <item>
      <title>Netty: Testing encoders/decoders</title>
      <link>https://markhneedham.com/blog/2015/06/05/netty-testing-encodersdecoders/</link>
      <pubDate>Fri, 05 Jun 2015 21:25:25 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2015/06/05/netty-testing-encodersdecoders/</guid>
      <description>// Examples uses Netty 4.0.28.Final public static class MessageEncoder extends MessageToMessageEncoder&amp;lt;Foo&amp;gt; { @Override protected void encode( ChannelHandlerContext ctx, Foo msg, List&amp;lt;Object&amp;gt; out ) throws Exception { ByteBuf buf = ctx.alloc().buffer(); buf.writeInt( msg.value() ); out.add( buf ); } } public static class Foo { private Integer value; public Foo(Integer value) { this.value = value; } public int value() { return value; } } @Test public void shouldEncodeAndDecodeVoteRequest() { // given  EmbeddedChannel channel = new EmbeddedChannel( new MessageEncoder(), new MessageDecoder() ); // when  Foo foo = new Foo( 42 ); channel.</description>
    </item>
    
    <item>
      <title>Coding: Visualising a bitmap</title>
      <link>https://markhneedham.com/blog/2015/05/03/coding-visualising-a-bitmap/</link>
      <pubDate>Sun, 03 May 2015 00:19:51 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2015/05/03/coding-visualising-a-bitmap/</guid>
      <description>java&amp;gt; (1 &amp;lt;&amp;lt; 31) &amp;amp; 0x80000000 java.lang.Integer res5 = -2147483648 java&amp;gt; (1 &amp;lt;&amp;lt; 0) &amp;amp; 0x00000001 java.lang.Integer res7 = 0 java&amp;gt; (1 &amp;lt;&amp;lt; 0) &amp;amp; 0x00000001 java.lang.Integer res8 = 1 private String asString( int bitmap ) { StringBuilder sb = new StringBuilder(); sb.append( &amp;#34;[&amp;#34; ); for ( int i = Integer.SIZE - 1; i &amp;gt;= 0; i-- ) { int bitMask = 1 &amp;lt;&amp;lt; i; boolean bitIsSet = (bitmap &amp;amp; bitMask) !</description>
    </item>
    
    <item>
      <title>Java: Determining the status of data import using kill signals</title>
      <link>https://markhneedham.com/blog/2014/07/23/java-determining-the-status-of-data-import-using-kill-signals/</link>
      <pubDate>Wed, 23 Jul 2014 22:20:25 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2014/07/23/java-determining-the-status-of-data-import-using-kill-signals/</guid>
      <description>class Kill3Handler implements SignalHandler { private AtomicInteger linesProcessed; private AtomicReference&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; lastRowProcessed; public Kill3Handler( AtomicInteger linesProcessed, AtomicReference&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; lastRowProcessed ) { this.linesProcessed = linesProcessed; this.lastRowProcessed = lastRowProcessed; } @Override public void handle( Signal signal ) { System.out.println(&amp;#34;Last Line Processed: &amp;#34; + linesProcessed.get() + &amp;#34; &amp;#34; + lastRowProcessed.get()); } } AtomicInteger linesProcessed = new AtomicInteger( 0 ); AtomicReference&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; lastRowProcessed = new AtomicReference&amp;lt;&amp;gt;( ); Kill3Handler kill3Handler = new Kill3Handler( linesProcessed, lastRowProcessed ); Signal.</description>
    </item>
    
    <item>
      <title>Jersey/Jax RS: Streaming JSON</title>
      <link>https://markhneedham.com/blog/2014/04/30/jerseyjax-rs-streaming-json/</link>
      <pubDate>Wed, 30 Apr 2014 01:24:33 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2014/04/30/jerseyjax-rs-streaming-json/</guid>
      <description>@Path(&amp;#34;/resource&amp;#34;) public class MadeUpResource { private final ObjectMapper objectMapper; public MadeUpResource() { objectMapper = new ObjectMapper(); } @GET @Produces(MediaType.APPLICATION_JSON) public Response loadHierarchy(@PathParam( &amp;#34;pkPerson&amp;#34; ) String pkPerson) { final Map&amp;lt;Integer, String&amp;gt; people = new HashMap&amp;lt;&amp;gt;(); people.put(1, &amp;#34;Michael&amp;#34;); people.put(2, &amp;#34;Mark&amp;#34;); StreamingOutput stream = new StreamingOutput() { @Override public void write(OutputStream os) throws IOException, WebApplicationException { JsonGenerator jg = objectMapper.getJsonFactory().createJsonGenerator( os, JsonEncoding.UTF8 ); jg.writeStartArray(); for ( Map.Entry&amp;lt;Integer, String&amp;gt; person : people.entrySet() ) { jg.</description>
    </item>
    
    <item>
      <title>Java 8: Lambda Expressions vs Auto Closeable</title>
      <link>https://markhneedham.com/blog/2014/02/26/java-8-lambda-expressions-vs-auto-closeable/</link>
      <pubDate>Wed, 26 Feb 2014 07:32:14 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2014/02/26/java-8-lambda-expressions-vs-auto-closeable/</guid>
      <description>public class StylesOfTx { public static void main( String[] args ) throws IOException { String path = &amp;#34;/tmp/tx-style-test&amp;#34;; FileUtils.deleteRecursively(new File(path)); GraphDatabaseService db = new GraphDatabaseFactory().newEmbeddedDatabase( path ); Transaction tx = db.beginTx(); try { db.createNode(); tx.success(); } finally { tx.close(); } } } public class StylesOfTx { public static void main( String[] args ) throws IOException { String path = &amp;#34;/tmp/tx-style-test&amp;#34;; FileUtils.deleteRecursively(new File(path)); GraphDatabaseService db = new GraphDatabaseFactory().newEmbeddedDatabase( path ); try ( Transaction tx = db.</description>
    </item>
    
    <item>
      <title>Jersey: Ignoring SSL certificate - javax.net.ssl.SSLHandshakeException: java.security.cert.CertificateException</title>
      <link>https://markhneedham.com/blog/2014/02/26/jersey-ignoring-ssl-certificate-javax-net-ssl-sslhandshakeexception-java-security-cert-certificateexception/</link>
      <pubDate>Wed, 26 Feb 2014 00:12:01 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2014/02/26/jersey-ignoring-ssl-certificate-javax-net-ssl-sslhandshakeexception-java-security-cert-certificateexception/</guid>
      <description>Client client = Client.create(); client.resource(&amp;#34;https://some-aws-host.compute-1.amazonaws.com&amp;#34;).post(); // and so on com.sun.jersey.api.client.ClientHandlerException: javax.net.ssl.SSLHandshakeException: java.security.cert.CertificateException: No subject alternative DNS name matching some-aws-host.compute-1.amazonaws.com found. at com.sun.jersey.client.urlconnection.URLConnectionClientHandler.handle(URLConnectionClientHandler.java:149) at com.sun.jersey.api.client.Client.handle(Client.java:648) at com.sun.jersey.api.client.WebResource.handle(WebResource.java:670) at com.sun.jersey.api.client.WebResource.post(WebResource.java:241) at com.neotechnology.testlab.manager.bootstrap.ManagerAdmin.takeBackup(ManagerAdmin.java:33) at com.neotechnology.testlab.manager.bootstrap.ManagerAdminTest.foo(ManagerAdminTest.java:11) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222) at org.junit.runners.ParentRunner.run(ParentRunner.java:300) at org.junit.runner.JUnitCore.run(JUnitCore.java:157) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74) at com.</description>
    </item>
    
    <item>
      <title>Java 8: Group by with collections</title>
      <link>https://markhneedham.com/blog/2014/02/23/java-8-group-by-with-collections/</link>
      <pubDate>Sun, 23 Feb 2014 19:16:27 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2014/02/23/java-8-group-by-with-collections/</guid>
      <description>static class Person { private String name; private int age; Person(String name, int age) { this.name = name; this.age = age; } @Override public String toString() { return String.format(&amp;#34;Person{name=&amp;#39;%s&amp;#39;, age=%d}&amp;#34;, name, age); } } Stream&amp;lt;Person&amp;gt; people = Stream.of(new Person(&amp;#34;Paul&amp;#34;, 24), new Person(&amp;#34;Mark&amp;#34;, 30), new Person(&amp;#34;Will&amp;#34;, 28)); Map&amp;lt;Integer, List&amp;lt;String&amp;gt;&amp;gt; peopleByAge = people .collect(groupingBy(p -&amp;gt; p.age, mapping((Person p) -&amp;gt; p.name, toList()))); System.out.println(peopleByAge); {24=[Paul], 28=[Will], 30=[Mark]} &amp;gt; people = [ {:name =&amp;gt; &amp;#34;Paul&amp;#34;, :age =&amp;gt; 24}, {:name =&amp;gt; &amp;#34;Mark&amp;#34;, :age =&amp;gt; 30}, {:name =&amp;gt; &amp;#34;Will&amp;#34;, :age =&amp;gt; 28}] &amp;gt; people.</description>
    </item>
    
    <item>
      <title>Java 8: Sorting values in collections</title>
      <link>https://markhneedham.com/blog/2014/02/23/java-8-sorting-values-in-collections/</link>
      <pubDate>Sun, 23 Feb 2014 14:43:47 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2014/02/23/java-8-sorting-values-in-collections/</guid>
      <description>static class Person { private String name; private int age; Person(String name, int age) { this.name = name; this.age = age; } @Override public String toString() { return String.format(&amp;#34;Person{name=&amp;#39;%s&amp;#39;, age=%d}&amp;#34;, name, age); } } List&amp;lt;Person&amp;gt; people = Arrays.asList(new Person(&amp;#34;Paul&amp;#34;, 24), new Person(&amp;#34;Mark&amp;#34;, 30), new Person(&amp;#34;Will&amp;#34;, 28)); people.stream().sorted((p1, p2) -&amp;gt; p1.age - p2.age).forEach(System.out::println); Person{name=&amp;#39;Paul&amp;#39;, age=24} Person{name=&amp;#39;Will&amp;#39;, age=28} Person{name=&amp;#39;Mark&amp;#39;, age=30} Collections.sort(people, new Comparator&amp;lt;Person&amp;gt;() { @Override public int compare(Person o1, Person o2) { return o1.</description>
    </item>
    
    <item>
      <title>Java: Handling a RuntimeException in a Runnable</title>
      <link>https://markhneedham.com/blog/2014/01/31/java-handling-a-runtimeexception-in-a-runnable/</link>
      <pubDate>Fri, 31 Jan 2014 23:59:58 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2014/01/31/java-handling-a-runtimeexception-in-a-runnable/</guid>
      <description>import java.util.ArrayList; import java.util.List; import java.util.concurrent.*; public class RunnableBlog { public static void main(String[] args) throws ExecutionException, InterruptedException { ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(); executor.scheduleAtFixedRate(new Runnable() { @Override public void run() { System.out.println(Thread.currentThread().getName() + &amp;#34; -&amp;gt; &amp;#34; + System.currentTimeMillis()); throw new RuntimeException(&amp;#34;game over&amp;#34;); } }, 0, 1000, TimeUnit.MILLISECONDS).get(); System.out.println(&amp;#34;exit&amp;#34;); executor.shutdown(); } } Exception in thread &amp;#34;main&amp;#34; pool-1-thread-1 -&amp;gt; 1391212558074 java.util.concurrent.ExecutionException: java.lang.RuntimeException: game over at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:252) at java.util.concurrent.FutureTask.get(FutureTask.java:111) at RunnableBlog.main(RunnableBlog.java:11) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.</description>
    </item>
    
    <item>
      <title>Java: Work out the serialVersionUID of a class</title>
      <link>https://markhneedham.com/blog/2014/01/31/java-work-out-the-serialversionuid-of-a-class/</link>
      <pubDate>Fri, 31 Jan 2014 06:51:06 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2014/01/31/java-work-out-the-serialversionuid-of-a-class/</guid>
      <description>import java.io.Serializable; public class SerialiseMe implements Serializable { } $ serialver -classpath target/serialiser-0.0.1-SNAPSHOT.jar SerialiseMe SerialiseMe: static final long serialVersionUID = -6060222249255158490L; public class Serialiser { public static void main( String[] args ) throws IOException, ClassNotFoundException { ByteArrayOutputStream bout = new ByteArrayOutputStream( ); ObjectOutputStream oout = new ObjectOutputStream( bout ); Object value = new SerialiseMe(); oout.writeObject( value ); oout.close(); byte[] bytes = bout.toByteArray(); FileOutputStream fileOuputStream = new FileOutputStream(&amp;#34;/tmp/foo.txt&amp;#34;); fileOuputStream.write(bytes); fileOuputStream.close(); } } public class Deserialiser { public static void main( String[] args ) throws IOException, ClassNotFoundException { FileInputStream fileInputStream = new FileInputStream( new File( &amp;#34;/tmp/foo.</description>
    </item>
    
    <item>
      <title>RxJava: From Future to Observable</title>
      <link>https://markhneedham.com/blog/2013/12/28/rxjava-from-future-to-observable/</link>
      <pubDate>Sat, 28 Dec 2013 21:46:42 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/12/28/rxjava-from-future-to-observable/</guid>
      <description>public class MergeTimeRx { public static void main( final String[] args ) throws InterruptedException, IOException { String pathToDb = &amp;#34;/tmp/foo&amp;#34;; FileUtils.deleteRecursively( new File( pathToDb ) ); GraphDatabaseService db = new GraphDatabaseFactory().newEmbeddedDatabase( pathToDb ); final ExecutionEngine engine = new ExecutionEngine( db ); int numberOfThreads = 50; int numberOfUsers = 10; int numberOfEvents = 50; int iterations = 100; Observable&amp;lt;ExecutionResult&amp;gt; events = processEvents( engine, numberOfUsers, numberOfEvents, numberOfThreads, iterations ); events.subscribe( new Action1&amp;lt;ExecutionResult&amp;gt;() { @Override public void call( ExecutionResult result ) { for ( Map&amp;lt;String, Object&amp;gt; row : result ) { } } } ); .</description>
    </item>
    
    <item>
      <title>Java: Schedule a job to run on a time interval</title>
      <link>https://markhneedham.com/blog/2013/11/17/java-schedule-a-job-to-run-on-a-time-interval/</link>
      <pubDate>Sun, 17 Nov 2013 22:58:35 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/11/17/java-schedule-a-job-to-run-on-a-time-interval/</guid>
      <description>public class MyUpgradeTest { @Test public void shouldUpgradeFromOneVersionToAnother() throws InterruptedException { ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(); scheduledExecutorService.scheduleAtFixedRate( new LogAllTheThings(), 0, 1, TimeUnit.SECONDS ); Thread.sleep(10000); // do upgrade of cluster  scheduledExecutorService.shutdown(); } static class LogAllTheThings implements Runnable { @Override public void run() { Date time = new Date( System.currentTimeMillis() ); try { Map&amp;lt;String, Object&amp;gt; masterProperties = selectedProperties( client(), URI.create( &amp;#34;http://localhost:7474/&amp;#34; ) ); System.out.println( String.format( &amp;#34;%s: %s&amp;#34;, time, masterProperties ) ); } catch ( Exception ignored ) { ignored.</description>
    </item>
    
    <item>
      <title>Java: Incrementally read/stream a CSV file</title>
      <link>https://markhneedham.com/blog/2013/10/14/java-incrementally-readstream-a-csv-file/</link>
      <pubDate>Mon, 14 Oct 2013 07:27:10 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/10/14/java-incrementally-readstream-a-csv-file/</guid>
      <description>public class ParseCSVFile { public static void main(String[] args) throws IOException { final CSVReader csvReader = new CSVReader( new BufferedReader( new FileReader( &amp;#34;/path/to/file.csv&amp;#34; ) ), &amp;#39;\t&amp;#39; ); final String[] fields = csvReader.readNext(); Iterator&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt;() lazilyLoadedFile = return new Iterator&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt;() { String[] data = csvReader.readNext(); @Override public boolean hasNext() { return data != null; } @Override public Map&amp;lt;String, Object&amp;gt; next() { final Map&amp;lt;String, Object&amp;gt; properties = new HashMap&amp;lt;String, Object&amp;gt;(); for ( int i = 0; i &amp;lt; data.</description>
    </item>
    
    <item>
      <title>jackson-core-asl - java.lang.AbstractMethodError: org.codehaus.jackson.JsonNode.getValueAsText()Ljava/lang/String;</title>
      <link>https://markhneedham.com/blog/2013/09/14/jackson-core-asl-java-lang-abstractmethoderror-org-codehaus-jackson-jsonnode-getvalueastextljavalangstring/</link>
      <pubDate>Sat, 14 Sep 2013 00:06:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/09/14/jackson-core-asl-java-lang-abstractmethoderror-org-codehaus-jackson-jsonnode-getvalueastextljavalangstring/</guid>
      <description>2013-09-13 11:01:50 +0000: Exception while handling {MessageId: 7e695fb3-549a-4b 40-b1cf-9dbc5e97a8df, ... } java.lang.AbstractMethodError: org.codehaus.jackson.JsonNode.getValueAsText()Lja va/lang/String; ... at com.amazonaws.services.sqs.AmazonSQSAsyncClient$20.call(AmazonSQSAsyn cClient.java:1200) at com.amazonaws.services.sqs.AmazonSQSAsyncClient$20.call(AmazonSQSAsyn cClient.java:1191) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334) at java.util.concurrent.FutureTask.run(FutureTask.java:166) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor. java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor .java:615) at java.lang.Thread.run(Thread.java:724) $ mvn dependency:tree ... [INFO] --- maven-dependency-plugin:2.1:tree (default-cli) @ load-generator --- [INFO] +- com.amazonaws:aws-java-sdk:jar:1.5.6:compile [INFO] | +- commons-logging:commons-logging:jar:1.1.1:compile [INFO] | +- org.apache.httpcomponents:httpclient:jar:4.2.2:compile (version managed from 4.2) [INFO] | +- commons-codec:commons-codec:jar:1.6:compile [INFO] | \- org.codehaus.jackson:jackson-core-asl:jar:1.8.9:compile ... [INFO] +- org.</description>
    </item>
    
    <item>
      <title>Jersey Client: java.net.ProtocolException: Server redirected too many times/Setting cookies on request</title>
      <link>https://markhneedham.com/blog/2013/08/17/jersey-client-java-net-protocolexception-server-redirected-too-many-timessetting-cookies-on-request/</link>
      <pubDate>Sat, 17 Aug 2013 20:25:28 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/08/17/jersey-client-java-net-protocolexception-server-redirected-too-many-timessetting-cookies-on-request/</guid>
      <description>Client = Client.create(); ClientResponse response = client.resource( &amp;#34;http://localhost:59680&amp;#34; ).get( ClientResponse.class ); com.sun.jersey.api.client.ClientHandlerException: java.net.ProtocolException: Server redirected too many times (20) at com.sun.jersey.client.urlconnection.URLConnectionClientHandler.handle(URLConnectionClientHandler.java:151) at com.sun.jersey.api.client.Client.handle(Client.java:648) at com.sun.jersey.api.client.WebResource.handle(WebResource.java:680) at com.sun.jersey.api.client.WebResource.get(WebResource.java:191) at com.neotechnology.testlab.manager.webapp.AuthenticationIntegrationTest.shouldRedirectToGitHubForAuthentication(AuthenticationIntegrationTest.java:81) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20) at com.neotechnology.kirkaldy.testing.Resources$1.evaluate(Resources.java:84) at com.neotechnology.kirkaldy.testing.FailureOutput$2.evaluate(FailureOutput.java:37) at org.junit.rules.RunRules.evaluate(RunRules.java:18) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222) at org.junit.runners.ParentRunner.run(ParentRunner.java:300) at org.junit.runner.JUnitCore.run(JUnitCore.java:157) at com.</description>
    </item>
    
    <item>
      <title>Jersey Client: com.sun.jersey.api.client.UniformInterfaceException</title>
      <link>https://markhneedham.com/blog/2013/08/11/jersey-client-com-sun-jersey-api-client-uniforminterfaceexception/</link>
      <pubDate>Sun, 11 Aug 2013 08:07:01 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/08/11/jersey-client-com-sun-jersey-api-client-uniforminterfaceexception/</guid>
      <description>public class HaSpike { public static void main(String[] args) { String response = client() .resource(&amp;#34;http://localhost:7474/db/manage/server/ha/slave&amp;#34;) .accept(MediaType.TEXT_PLAIN) .get(String.class); System.out.println(&amp;#34;response = &amp;#34; + response); } private static Client client() { DefaultClientConfig defaultClientConfig = new DefaultClientConfig(); defaultClientConfig.getClasses().add(JacksonJsonProvider.class); return Client.create(defaultClientConfig); } } response = true Exception in thread &amp;#34;main&amp;#34; com.sun.jersey.api.client.UniformInterfaceException: GET http://localhost:7474/db/manage/server/ha/slave returned a response status of 404 Not Found at com.sun.jersey.api.client.WebResource.handle(WebResource.java:686) at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74) at com.sun.jersey.api.client.WebResource$Builder.get(WebResource.java:507) at HaSpike.main(HaSpike.java:10) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.</description>
    </item>
    
    <item>
      <title>Jersey Client: Testing external calls</title>
      <link>https://markhneedham.com/blog/2013/07/28/jersey-client-testing-external-calls/</link>
      <pubDate>Sun, 28 Jul 2013 20:43:24 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/07/28/jersey-client-testing-external-calls/</guid>
      <description>class Neo4jInstance { private Client httpClient; private URI hostname; public Neo4jInstance(Client httpClient, URI hostname) { this.httpClient = httpClient; this.hostname = hostname; } public Boolean isSlave() { String slaveURI = hostname.toString() + &amp;#34;:7474/db/manage/server/ha/slave&amp;#34;; ClientResponse response = httpClient.resource(slaveURI).accept(TEXT_PLAIN).get(ClientResponse.class); return Boolean.parseBoolean(response.getEntity(String.class)); } } @Test public void shouldIndicateInstanceIsSlave() { Client client = mock( Client.class ); WebResource webResource = mock( WebResource.class ); WebResource.Builder builder = mock( WebResource.Builder.class ); ClientResponse clientResponse = mock( ClientResponse.class ); when( builder.</description>
    </item>
    
    <item>
      <title>Jersey: Listing all resources, paths, verbs to build an entry point/index for an API</title>
      <link>https://markhneedham.com/blog/2013/07/21/jersey-listing-all-resources-paths-verbs-to-build-an-entry-pointindex-for-an-api/</link>
      <pubDate>Sun, 21 Jul 2013 11:07:11 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/07/21/jersey-listing-all-resources-paths-verbs-to-build-an-entry-pointindex-for-an-api/</guid>
      <description>AbstractResource resource = IntrospectionModeller.createResource(JacksonResource.class); System.out.println(&amp;#34;Path is &amp;#34; + resource.getPath().getValue()); String uriPrefix = resource.getPath().getValue(); for (AbstractSubResourceMethod srm :resource.getSubResourceMethods()) { String uri = uriPrefix + &amp;#34;/&amp;#34; + srm.getPath().getValue(); System.out.println(srm.getHttpMethod() + &amp;#34; at the path &amp;#34; + uri + &amp;#34; return &amp;#34; + srm.getReturnType().getName()); } Path is /jackson GET at the path /jackson/{who} return com.g414.j4.minimal.JacksonResource$Greeting GET at the path /jackson/awesome/{who} return javax.ws.rs.core.Response @Path(&amp;#34;/&amp;#34;) public class ResourceListingResource { @GET @Produces(MediaType.APPLICATION_JSON) public Response showAll( @Context Application application, @Context HttpServletRequest request) { String basePath = request.</description>
    </item>
    
    <item>
      <title>Jersey Server: com.sun.jersey.api.MessageException: A message body writer for Java class org.codehaus.jackson.node.ObjectNode and MIME media type application/json was not found</title>
      <link>https://markhneedham.com/blog/2013/07/21/jersey-server-com-sun-jersey-api-messageexception-a-message-body-writer-for-java-class-org-codehaus-jackson-node-objectnode-and-mime-media-type-applicationjson-was-not-found/</link>
      <pubDate>Sun, 21 Jul 2013 10:37:45 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/07/21/jersey-server-com-sun-jersey-api-messageexception-a-message-body-writer-for-java-class-org-codehaus-jackson-node-objectnode-and-mime-media-type-applicationjson-was-not-found/</guid>
      <description>@Path(&amp;#34;/jackson&amp;#34;) public class JacksonResource { @GET @Produces( { MediaType.APPLICATION_JSON }) @Path(&amp;#34;/awesome/{who}&amp;#34;) public Response sayOtherGreeting(@PathParam(&amp;#34;who&amp;#34;) String name) { ObjectNode result = JsonNodeFactory.instance.objectNode(); result.put(&amp;#34;name&amp;#34;, name); return Response.ok().entity(result).build(); } } SEVERE: The registered message body writers compatible with the MIME media type are: application/json -&amp;gt; com.sun.jersey.json.impl.provider.entity.JSONJAXBElementProvider$App com.sun.jersey.json.impl.provider.entity.JSONArrayProvider$App com.sun.jersey.json.impl.provider.entity.JSONObjectProvider$App com.sun.jersey.json.impl.provider.entity.JSONRootElementProvider$App com.sun.jersey.json.impl.provider.entity.JSONListElementProvider$App */* -&amp;gt; com.sun.jersey.core.impl.provider.entity.FormProvider com.sun.jersey.server.impl.template.ViewableMessageBodyWriter com.sun.jersey.core.impl.provider.entity.StringProvider com.sun.jersey.core.impl.provider.entity.ByteArrayProvider com.sun.jersey.core.impl.provider.entity.FileProvider com.sun.jersey.core.impl.provider.entity.InputStreamProvider com.sun.jersey.core.impl.provider.entity.DataSourceProvider com.sun.jersey.core.impl.provider.entity.XMLJAXBElementProvider$General com.sun.jersey.core.impl.provider.entity.ReaderProvider com.sun.jersey.core.impl.provider.entity.DocumentProvider com.sun.jersey.core.impl.provider.entity.StreamingOutputProvider com.sun.jersey.core.impl.provider.entity.SourceProvider$SourceWriter com.sun.jersey.json.impl.provider.entity.JSONJAXBElementProvider$General com.sun.jersey.json.impl.provider.entity.JSONArrayProvider$General com.sun.jersey.json.impl.provider.entity.JSONObjectProvider$General com.sun.jersey.json.impl.provider.entity.JSONWithPaddingProvider com.sun.jersey.core.impl.provider.entity.XMLRootElementProvider$General com.sun.jersey.core.impl.provider.entity.XMLListElementProvider$General com.sun.jersey.json.impl.provider.entity.JSONRootElementProvider$General com.sun.jersey.json.impl.provider.entity.JSONListElementProvider$General com.sun.jersey.json.impl.provider.entity.JacksonProviderProxy Jul 21, 2013 11:11:17 AM com.</description>
    </item>
    
    <item>
      <title>Java: Finding/Setting JDK/$JAVA_HOME on Mac OS X</title>
      <link>https://markhneedham.com/blog/2013/06/15/java-findingsetting-jdkjava_home-on-mac-os-x/</link>
      <pubDate>Sat, 15 Jun 2013 10:28:28 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/06/15/java-findingsetting-jdkjava_home-on-mac-os-x/</guid>
      <description>$ ls -alh /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK -&amp;gt; /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents $ java -version java version &amp;#34;1.7.0_09&amp;#34; Java(TM) SE Runtime Environment (build 1.7.0_09-b05) Java HotSpot(TM) 64-Bit Server VM (build 23.5-b02, mixed mode) $ /usr/libexec/java_home -v 1.7 /Library/Java/JavaVirtualMachines/jdk1.7.0_09.jdk/Contents/Home $ /usr/libexec/java_home -v 1.6 /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home $ /usr/libexec/java_home -V Matching Java Virtual Machines (3): 1.7.0_09, x86_64:	&amp;#34;Java SE 7&amp;#34;	/Library/Java/JavaVirtualMachines/jdk1.7.0_09.jdk/Contents/Home 1.6.0_45-b06-451, x86_64:	&amp;#34;Java SE 6&amp;#34;	/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home 1.6.0_45-b06-451, i386:	&amp;#34;Java SE 6&amp;#34;	/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home /Library/Java/JavaVirtualMachines/jdk1.7.0_09.jdk/Contents/Home </description>
    </item>
    
    <item>
      <title>Jersey: com.sun.jersey.api.client.ClientHandlerException: A message body reader for Java class [...] and MIME media type application/json was not found</title>
      <link>https://markhneedham.com/blog/2012/11/28/jersey-com-sun-jersey-api-client-clienthandlerexception-a-message-body-reader-for-java-class-and-mime-media-type-applicationjson-was-not-found/</link>
      <pubDate>Wed, 28 Nov 2012 06:03:55 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/11/28/jersey-com-sun-jersey-api-client-clienthandlerexception-a-message-body-reader-for-java-class-and-mime-media-type-applicationjson-was-not-found/</guid>
      <description>We&amp;rsquo;ve used the Jerseylibrary on the last couple of Java based applications that I&amp;rsquo;ve worked on and one thing we&amp;rsquo;ve done on both of them is write services that communicate with each other using JSON.
On both occasions we didn&amp;rsquo;t quite setup the Jersey client correctly and ended up with an error along these lines when making a call to an end point:
com.sun.jersey.api.client.ClientHandlerException: A message body reader for Java class java.</description>
    </item>
    
    <item>
      <title>Java: java.lang.UnsupportedClassVersionError - Unsupported major.minor version 51.0</title>
      <link>https://markhneedham.com/blog/2012/11/24/java-java-lang-unsupportedclassversionerror-unsupported-major-minor-version-51-0/</link>
      <pubDate>Sat, 24 Nov 2012 08:49:28 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/11/24/java-java-lang-unsupportedclassversionerror-unsupported-major-minor-version-51-0/</guid>
      <description>On my current project we&amp;rsquo;ve spent the last day or so setting up an environment where we can deploy a couple of micro services to.
Although the machines are Windows based we&amp;rsquo;re deploying the application onto a vagrantmanaged VM since the production environment will be a flavour of Linux.
Initially I was getting quite confused about whether or not we were in the VM or not and ended up with this error when trying to run the compiled JAR:</description>
    </item>
    
    <item>
      <title>Java: Parsing CSV files</title>
      <link>https://markhneedham.com/blog/2012/09/23/java-parsing-csv-files/</link>
      <pubDate>Sun, 23 Sep 2012 22:46:09 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/09/23/java-parsing-csv-files/</guid>
      <description>As I mentioned in a previous post I recently moved a bunch of neo4j data loading code from Ruby to Javaand as part of that process I needed to parse some CSV files.
In Ruby I was using FasterCSVwhich became the standard CSV library from Ruby 1.9but it&amp;rsquo;s been a while since I had to parse CSV files in Java so I wasn&amp;rsquo;t sure which library to use.
I needed a library which could parse a comma separated file where there might be commas in the values of one of the fields.</description>
    </item>
    
    <item>
      <title>Functional Programming: Handling the Options</title>
      <link>https://markhneedham.com/blog/2012/03/21/functional-programming-handling-the-options/</link>
      <pubDate>Wed, 21 Mar 2012 00:50:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/03/21/functional-programming-handling-the-options/</guid>
      <description>A couple of weeks ago Channing Walton tweeted the following:
As Channing points out in the comments he was referring to unguarded calls to &amp;lsquo;get&amp;rsquo; which would lead to an exception if the Option was empty, therefore pretty much defeating the point of using an Option in the first place!
We&amp;rsquo;re using Dan Bodart&amp;rsquo;s totallylazylibrary on the application I&amp;rsquo;m currently working on and in fact were calling &amp;lsquo;get&amp;rsquo; on an Option so I wanted to see if we could get rid of it.</description>
    </item>
    
    <item>
      <title>Java: Faking a closure with a factory to create a domain object</title>
      <link>https://markhneedham.com/blog/2012/02/26/java-faking-a-closure-with-a-factory-to-create-a-domain-object/</link>
      <pubDate>Sun, 26 Feb 2012 00:09:03 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/02/26/java-faking-a-closure-with-a-factory-to-create-a-domain-object/</guid>
      <description>Recently we wanted to create a domain object which needed to have an external dependency in order to do a calculation and we wanted to be able to stub out that dependency in our tests.
Originally we were just new&amp;rsquo;ing up the dependency inside the domain class but that makes it impossible to control it&amp;rsquo;s value in a test.
Equally it didn&amp;rsquo;t seem like we should be passing that dependency into the constructor of the domain object since it&amp;rsquo;s not a piece of state which defines the object, just something that it uses.</description>
    </item>
    
    <item>
      <title>Java: Fooled by java.util.Arrays.asList</title>
      <link>https://markhneedham.com/blog/2012/02/11/java-fooled-by-java-util-arrays-aslist/</link>
      <pubDate>Sat, 11 Feb 2012 10:29:15 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/02/11/java-fooled-by-java-util-arrays-aslist/</guid>
      <description>I&amp;rsquo;ve been playing around with the boilerpipecode base by writing some tests around it to check my understanding but ran into an interesting problem using java.util.Arrays.asListto pass a list into one of the functions.
I was testing the BlockProximityFusionclass which is used to merge together adjacent text blocks.
I started off calling that class like this:
import static java.util.Arrays.asList; @Test public void willCallBlockProximityFustion() throws Exception { TextDocument document = new TextDocument(asList(contentBlock(&amp;#34;some words&amp;#34;), contentBlock(&amp;#34;followed by more words&amp;#34;))); BlockProximityFusion.</description>
    </item>
    
    <item>
      <title>Java/Scala: Runtime.exec hanging/in &#39;pipe_w&#39; state</title>
      <link>https://markhneedham.com/blog/2011/11/20/javascala-runtime-exec-hangingin-pipe_w-state/</link>
      <pubDate>Sun, 20 Nov 2011 20:20:08 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/11/20/javascala-runtime-exec-hangingin-pipe_w-state/</guid>
      <description>On the system that I&amp;rsquo;m currently working on we have a data ingestion process which needs to take zip files, unzip them and then import their contents into the database.
As a result we delegate from Scala code to the system unzip command like so:
def extract { var command = &amp;#34;unzip %s -d %s&amp;#34; format(&amp;#34;/file/to/unzip.zip&amp;#34;, &amp;#34;/place/to/unzip/to&amp;#34;) var process: Process = null try { process = Runtime.getRuntime.exec(command) val exitCode = process.</description>
    </item>
    
    <item>
      <title>Java: Faking System.in</title>
      <link>https://markhneedham.com/blog/2011/03/24/java-faking-system-in/</link>
      <pubDate>Thu, 24 Mar 2011 21:58:31 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/03/24/java-faking-system-in/</guid>
      <description>We ran a refactoring dojoa couple of days ago at ThoughtWorks University and in preparation I wrote some system level tests around the coding problemthat we were going to use during the session.
It&amp;rsquo;s a command line application which is called through the main method of &amp;lsquo;Program&amp;rsquo; and since there&amp;rsquo;s no dependency injection we need to be able to set System.in and System.out in order to do any testing.
My initial thinking was that it should be possible to fake System.</description>
    </item>
    
    <item>
      <title>Writing a Java function in Clojure</title>
      <link>https://markhneedham.com/blog/2009/11/23/writing-a-java-function-in-clojure/</link>
      <pubDate>Mon, 23 Nov 2009 20:08:20 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/11/23/writing-a-java-function-in-clojure/</guid>
      <description>A function that we had to write in Java on a project that I worked on recently needed to indicate whether there was a gap in a series of data points or not.
If there were gaps at the beginning or end of the sequence then that was fine but gaps in the middle of the sequence were not.
null, 1, 2, 3 =&amp;gt; no gaps 1, 2, 3, null =&amp;gt; no gaps 1, null, 2, 3 =&amp;gt; gaps The Java version looked a bit like this:</description>
    </item>
    
    <item>
      <title>F# vs C# vs Java: Functional Collection Parameters</title>
      <link>https://markhneedham.com/blog/2009/01/19/f-vs-c-vs-java-functional-collection-parameters/</link>
      <pubDate>Mon, 19 Jan 2009 19:24:25 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/01/19/f-vs-c-vs-java-functional-collection-parameters/</guid>
      <description>I wrote a post about a month ago on using functional collection parametersin C# and over the weekend Fabioand I decided to try and contrast the way you would do this in Java, C# and then F# just for fun.
Map evaluates a high order function on all the elements in a collection and then returns a new collection containing the results of the function evaluation.
Given the numbers 1-5, return the square of each number</description>
    </item>
    
    <item>
      <title>Coding Dojo #5: Uno</title>
      <link>https://markhneedham.com/blog/2009/01/08/coding-dojo-5-uno/</link>
      <pubDate>Thu, 08 Jan 2009 23:41:57 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/01/08/coding-dojo-5-uno/</guid>
      <description>We ran our 5th coding dojo on Thursday night, writing the card game Unoin Java. We didn&amp;rsquo;t all know the rules so this videoexplained it - surely a parody but you never know!
We used the Randoriapproach again with 6 people participating for the majority of the session. Everyone paired with everyone else at least once and sometimes a couple of times.
We had the pair driving at the front of the room and everyone else further back to stop the tendency of observers to whiteboard stuff.</description>
    </item>
    
    <item>
      <title>JUnit Theories: First Thoughts</title>
      <link>https://markhneedham.com/blog/2008/12/12/junit-theories-first-thoughts/</link>
      <pubDate>Fri, 12 Dec 2008 00:34:17 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/12/12/junit-theories-first-thoughts/</guid>
      <description>One of my favourite additions to JUnit 4.4was the @Theory annotation which allows us to write parameterised tests rather than having to recreate the same test multiple times with different data values or creating one test and iterating through our own collection of data values.
Previously, as far as I&amp;rsquo;m aware, it was only possible to parameterise tests by using the TestNGlibrary which has some nice ideas around grouping tests but had horrible reporting the last time I used it.</description>
    </item>
    
    <item>
      <title>Logging with Pico Container</title>
      <link>https://markhneedham.com/blog/2008/11/11/logging-with-pico-container/</link>
      <pubDate>Tue, 11 Nov 2008 00:08:16 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/11/11/logging-with-pico-container/</guid>
      <description>One thing that we&amp;rsquo;ve been working on recently is the logging for our current code base.
Nearly all the objects in our system are being created by Pico Containerso we decided that writing an interceptor that hooked into Pico Container would be the easiest way to intercept and log any exceptions throw from our code.
Our initial Googling led us to the AOP Style Interceptionpage on the Pico website which detailed how we could create a static proxy for a class that we put in the container.</description>
    </item>
    
    <item>
      <title>Hamcrest Matchers - Make the error message clear</title>
      <link>https://markhneedham.com/blog/2008/11/08/hamcrest-matchers-make-the-error-message-clear/</link>
      <pubDate>Sat, 08 Nov 2008 02:46:59 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/11/08/hamcrest-matchers-make-the-error-message-clear/</guid>
      <description>We have been making good use of Hamcrestmatchers on my current project for making assertions, and have moved almost entirely away from the more traditional JUnit assertEquals approach.
There are several reasons why I find the Hamcrest matcher approach to be more productive - it&amp;rsquo;s more flexible, more expressive and when an assertion fails we have a much better idea about why it has failed than if we use a JUnit assertion for example.</description>
    </item>
    
    <item>
      <title>Keep Java checked exceptions in a bounded context</title>
      <link>https://markhneedham.com/blog/2008/10/23/keep-java-checked-exceptions-in-a-bounded-context/</link>
      <pubDate>Thu, 23 Oct 2008 21:22:26 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/10/23/keep-java-checked-exceptions-in-a-bounded-context/</guid>
      <description>One of the features that I dislike in Java compared to C# is checked exceptions.
For me an exception is about a situation which is exceptional, and if we know that there is a possibility of it happening and even have that possibility defined in our code then it doesn&amp;rsquo;t seem all that exceptional to me.
Having said that they do at least provide information which you can&amp;rsquo;t help but notice about what can go wrong when you make a call to a particular method.</description>
    </item>
    
    <item>
      <title>Tomcat - No caching of RESTlet resources for Firefox</title>
      <link>https://markhneedham.com/blog/2008/10/22/tomcat-no-caching-of-pages-for-firefox/</link>
      <pubDate>Wed, 22 Oct 2008 22:00:33 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/10/22/tomcat-no-caching-of-pages-for-firefox/</guid>
      <description>One problem that we&amp;rsquo;ve been trying to solve today is how to make a RESTletresource non cacheable.
The reason for this is that when a user logs out of the system and then hits the back button they shouldn&amp;rsquo;t be able to see that page, but instead should see the login form.
After several hours of trawling Google and trying out various different suggestions we came across the ideaof setting &amp;lsquo;cache-control&amp;rsquo; with the value &amp;lsquo;no-store&amp;rsquo; in the response headers.</description>
    </item>
    
    <item>
      <title>Java vs .NET: An Overview</title>
      <link>https://markhneedham.com/blog/2008/10/15/java-vs-net-an-overview/</link>
      <pubDate>Wed, 15 Oct 2008 00:09:05 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/10/15/java-vs-net-an-overview/</guid>
      <description>A couple of months ago my colleague Mark Thomas posted about working on a C# project after 10 years working in Java, and being someone who has worked on projects in both languages fairly consistently (3 Java projects, 2 .NET projects) over the last two years I thought it would be interesting to do a comparison between the two.
The standard ThoughtWorks joke is that you just need to remember to capitalise the first letter of method names in C# and then you&amp;rsquo;re good to go but I think there&amp;rsquo;s more to it than that.</description>
    </item>
    
    <item>
      <title>Connecting to LDAP server using OpenDS in Java</title>
      <link>https://markhneedham.com/blog/2008/09/29/connecting-to-ldap-server-using-opends-in-java/</link>
      <pubDate>Mon, 29 Sep 2008 23:27:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/09/29/connecting-to-ldap-server-using-opends-in-java/</guid>
      <description>A colleague and I have spent the past couple of days spiking solutions for connecting to LDAP servers from Ruby.
We decided that the easiest way to do this is by using OpenDS, an open source directory service based on LDAP.
One option we came up with for doing this was to make use of the Java libraries for connecting to the LDAP server and then calling through to these from our Ruby code using the Ruby Java Bridge.</description>
    </item>
    
    <item>
      <title>My dislike of Java&#39;s static import</title>
      <link>https://markhneedham.com/blog/2008/09/24/my-dislike-of-javas-static-import/</link>
      <pubDate>Wed, 24 Sep 2008 23:59:54 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/09/24/my-dislike-of-javas-static-import/</guid>
      <description>While playing around with JBehaveI was reminded of my dislike of the import staticfeature which was introduced in Java 1.5.
Using import static allows us to access static members defined in another class without referencing the class name. For example suppose we want to use the following method in our code:
Math.max(1,2); Normally we would need to include the class name (Math) that the static function (max) belongs to. By using the import static we can reference max like so:</description>
    </item>
    
    <item>
      <title>Testing with Joda Time</title>
      <link>https://markhneedham.com/blog/2008/09/24/testing-with-joda-time/</link>
      <pubDate>Wed, 24 Sep 2008 05:11:20 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/09/24/testing-with-joda-time/</guid>
      <description>The alternative to dealing with java.util.Date which I wrote about in a previous postis to make use of the Joda Timelibrary. I&amp;rsquo;m led to believe that a lot of the ideas from Joda Time will in fact be in Java 7.
Nevertheless when testing with Joda Time there are times when it would be useful for us to have control over the time our code is using.
Given that, there are two approaches which I have seen to allow us to do this:</description>
    </item>
    
    <item>
      <title>Using java.util.Date safely</title>
      <link>https://markhneedham.com/blog/2008/09/18/using-javautildate-safely/</link>
      <pubDate>Thu, 18 Sep 2008 11:01:54 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/09/18/using-javautildate-safely/</guid>
      <description>Assuming that you are unable to use Joda Timeon your project, there are some simple ways that I have come across that allow you to not suffer at the hands of java.util.Date.
This means that you can do an operation like the following, for example:
import java.util.Date; import java.util.Calendar; public class DateTest { public static void main(String[] args) { Date aDate = createDate(1, 0, 2008); System.out.println(aDate); aDate.setTime(createDate(1, 0, 2009).getTime()); System.out.println(aDate); } private static Date createDate(int date, int month, int year) { Calendar calendar = Calendar.</description>
    </item>
    
  </channel>
</rss>