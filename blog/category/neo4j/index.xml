<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>neo4j on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/category/neo4j/</link>
    <description>Recent content in neo4j on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Feb 2021 00:44:37 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/category/neo4j/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Neo4j Graph Data Science 1.5: Exploring the Speaker-Listener LPA Overlapping Community Detection Algorithm</title>
      <link>https://www.markhneedham.com/blog/2021/02/08/neo4j-gdsl-overlapping-community-detection-sllpa/</link>
      <pubDate>Mon, 08 Feb 2021 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2021/02/08/neo4j-gdsl-overlapping-community-detection-sllpa/</guid>
      <description>The Neo4j Graph Data Science Library provides efficiently implemented, parallel versions of common graph algorithms for Neo4j, exposed as Cypher procedures. It recently published version 1.5, which introduces some fun new algorithms.
In this blog post, we’re going to explore the newly added Speaker-Listener Label Propagation algorithm with the help of a twitter dataset.
Launching Neo4j We’re going to run Neo4j with the Graph Data Science Library using the following Docker Compose configuration:</description>
    </item>
    
    <item>
      <title>Neo4j Graph Data Science 1.5: Exploring the HITS Algorithm</title>
      <link>https://www.markhneedham.com/blog/2021/02/03/neo4j-gdsl-hits-algorithm/</link>
      <pubDate>Wed, 03 Feb 2021 00:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2021/02/03/neo4j-gdsl-hits-algorithm/</guid>
      <description>The Neo4j Graph Data Science Library provides efficiently implemented, parallel versions of common graph algorithms for Neo4j, exposed as Cypher procedures. It recently published version 1.5, which has lots of goodies to play with.
In this blog post, we’re going to explore the newly added HITS algorithm with the help of a citations dataset.
Launching Neo4j We’re going to run Neo4j with the Graph Data Science Library using the following Docker Compose configuration:</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - FOREACH vs CALL {} (subquery)</title>
      <link>https://www.markhneedham.com/blog/2020/10/29/neo4j-foreach-call-subquery/</link>
      <pubDate>Thu, 29 Oct 2020 00:21:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2020/10/29/neo4j-foreach-call-subquery/</guid>
      <description>I recently wanted to create a graph based on an adjacency list, and in this post we’ll learn how to do that using the FOREACH clause and then with the new CALL {} subquery clause.
We’ll start with the following map of ids → arrays of ids:
:param list =&amp;gt; ({`0`: [7, 9], `1`: [2, 4, 5, 6, 8, 9], `2`: [0, 6, 8, 9], `3`: [1, 2, 6, 9], `4`: [1, 2, 3, 7], `5`: [8, 9], `6`: [2, 4, 5, 7, 8, 9], `7`: [0, 3, 4, 6, 8, 9], `8`: [1, 6, 9], `9`: [0, 1, 3, 5]}) We want to create one node per id and create a relationship from each node to the nodes in its array.</description>
    </item>
    
    <item>
      <title>QuickGraph #7: An entity graph of TWIN4j using APOC NLP</title>
      <link>https://www.markhneedham.com/blog/2020/05/05/quick-graph-building-entity-graph-twin4j-apoc-nlp/</link>
      <pubDate>Tue, 05 May 2020 00:21:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2020/05/05/quick-graph-building-entity-graph-twin4j-apoc-nlp/</guid>
      <description>One of the most popular use cases for Neo4j is knowledge graphs, and part of that process involves using NLP to create a graph structure from raw text. If we were doing a serious NLP project we’d want to use something like GraphAware Hume, but in this blog post we’re going to learn how to add basic NLP functionality to our graph applications.
Figure 1. Building an entity graph of TWIN4j using APOC NLP APOC NLP The big cloud providers (AWS, GCP, and Azure) all have Natural Language Processing APIs and, although their APIs aren’t identical, they all let us extract entities, key phrases, and sentiment from text documents.</description>
    </item>
    
    <item>
      <title>Neo4j: Finding the longest path</title>
      <link>https://www.markhneedham.com/blog/2020/01/29/neo4j-finding-longest-path/</link>
      <pubDate>Wed, 29 Jan 2020 15:21:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2020/01/29/neo4j-finding-longest-path/</guid>
      <description>One on my favourite things about storing data in a graph database is executing path based queries against that data. I’ve been trying to find a way to write such queries against the Australian Open QuickGraph, and in this blog post we’re going to write what I think of as longest path queries against this graph.
Figure 1. Finding longest paths in Neo4j Setting up Neo4j We’re going to use the following Docker Compose configuration in this blog post:</description>
    </item>
    
    <item>
      <title>Neo4j: Exporting a subset of data from one database to another</title>
      <link>https://www.markhneedham.com/blog/2020/01/27/neo4j-exporting-subset-database/</link>
      <pubDate>Mon, 27 Jan 2020 00:21:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2020/01/27/neo4j-exporting-subset-database/</guid>
      <description>As part of the preparation for another blog post, I wanted to export a subset of data from one Neo4j database to another one, which seemed like a blog post in its own right.
Figure 1. Exporting data using APOC’s Export JSON Setting up Neo4j We’re going to use the following Docker Compose configuration in this blog post:
Dockerfile version: &amp;#39;3.7&amp;#39; services: neo4j: image: neo4j:4.0.0-enterprise container_name: &amp;#34;quickgraph-aus-open&amp;#34; volumes: - .</description>
    </item>
    
    <item>
      <title>Creating an Interactive UK Official Charts Data App with Streamlit and Neo4j</title>
      <link>https://www.markhneedham.com/blog/2020/01/16/interactive-uk-charts-quickgraph-neo4j-streamlit/</link>
      <pubDate>Thu, 16 Jan 2020 00:21:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2020/01/16/interactive-uk-charts-quickgraph-neo4j-streamlit/</guid>
      <description>I recently came across Streamlit, a tool that makes it easy to build data based single page web applications. I wanted to give it a try, and the UK Charts QuickGraph that I recently wrote about seemed like a good opportunity for that.
This blog post starts from where we left off. The data is loaded into Neo4j and we’ve written some queries to explore different aspects of the dataset.</description>
    </item>
    
    <item>
      <title>Graphing Brexit: Did the threat work?</title>
      <link>https://www.markhneedham.com/blog/2019/09/27/graphing-brexit-did-the-threat-work/</link>
      <pubDate>Fri, 27 Sep 2019 00:47:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2019/09/27/graphing-brexit-did-the-threat-work/</guid>
      <description>Following on from the blog post where we compared how MPs and parties voted on Brexit indicative measures, in this post we’re going to explore how Conservative MPs have voted with respect to a no deal exit from the European Union. In particular we’d like to know whether the threat to have the party whip removed had an impact on how they voted in the recent motion to request an extension to work out a deal.</description>
    </item>
    
    <item>
      <title>Graphing Brexit: MPs vs Parties</title>
      <link>https://www.markhneedham.com/blog/2019/09/23/graphing-brexit-mps-vs-parties/</link>
      <pubDate>Mon, 23 Sep 2019 00:47:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2019/09/23/graphing-brexit-mps-vs-parties/</guid>
      <description>In the previous post of the Graphing Brexit series we computed the average vote by party. In this post we’re going to take those average party scores and compare them against the votes placed by individual MPs. The goal is to determine whether, Brexit wise, MPs are representing the right party!
It won’t be perfect since we know that not everyone in a party voted the same way, but it should still give us some fun results.</description>
    </item>
    
    <item>
      <title>Graphing Brexit: Plotting how the parties voted</title>
      <link>https://www.markhneedham.com/blog/2019/09/20/graphing-brexit-charting-how-the-parties-voted/</link>
      <pubDate>Fri, 20 Sep 2019 00:47:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2019/09/20/graphing-brexit-charting-how-the-parties-voted/</guid>
      <description>Over the last week I’ve revisited the Brexit Graph that I created in March 2019, this time looking at how the parties voted on average on each of the indicative votes.
To recap, we have a graph that has the following schema:
Since the initial post I’ve slightly changed how the MEMBER_OF relationship works. As several MPs have switched MPs in the intervening months, we’re now storing a start property to indicate when they started representing a party and an end property to indicate when they stopped representing a party.</description>
    </item>
    
    <item>
      <title>Neo4j: Approximate string matching/similarity</title>
      <link>https://www.markhneedham.com/blog/2019/09/18/neo4j-string-matching-similarity/</link>
      <pubDate>Wed, 18 Sep 2019 00:47:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2019/09/18/neo4j-string-matching-similarity/</guid>
      <description>I’ve been playing with the Brexit Graph over the last few days, and wanted to map the MPs that I got from CommonsVotes with data from the TheyWorkForYou API.
I already had voting records loaded into Neo4j, but to recap, this is how I did that:
UNWIND [655,656,657,658,659,660,661,662,711, 669, 668, 667, 666, 664] AS division LOAD CSV FROM &amp;#34;https://github.com/mneedham/graphing-brexit/raw/master/data/commonsvotes/Division&amp;#34; + division + &amp;#34;.csv&amp;#34; AS row // Create motion nodes WITH division, collect(row) AS rows MERGE (motion:Motion {division: trim(split(rows[0][0], &amp;#34;:&amp;#34;)[1]) }) SET motion.</description>
    </item>
    
    <item>
      <title>Neo4j: apoc.load.csv - Neo.ClientError.Statement.SyntaxError: Type mismatch: expected Float, Integer, Number or String but was Any </title>
      <link>https://www.markhneedham.com/blog/2019/09/05/neo4j-apoc-load-csv-type-mismatch-expected-float-integer-number-string/</link>
      <pubDate>Thu, 05 Sep 2019 00:47:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2019/09/05/neo4j-apoc-load-csv-type-mismatch-expected-float-integer-number-string/</guid>
      <description>The Neo4j APOC library&amp;#39;s Load CSV procedure is very useful if you want more control over the import process than the LOAD CSV clause allows. I found myself using it last week to import a CSV file of embeddings, because I wanted to know the line number of the row in the CSV file while importing the data.
I had a file that looked like this, which I put into the import directory:</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Nested Path Comprehensions vs OPTIONAL MATCH</title>
      <link>https://www.markhneedham.com/blog/2019/08/23/neo4j-cypher-path-comprehensions-optional-match/</link>
      <pubDate>Fri, 23 Aug 2019 00:47:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2019/08/23/neo4j-cypher-path-comprehensions-optional-match/</guid>
      <description>While writing my previous post about Cypher nested path comprehensions, I realised that for this particular problem, the OPTIONAL MATCH clause is a better choice.
To recap, we have the following graph:
MERGE (club:Club {name: &amp;#34;Man Utd&amp;#34;}) MERGE (league:League {name: &amp;#34;Premier League&amp;#34;}) MERGE (country:Country {name: &amp;#34;England&amp;#34;}) MERGE (club)-[:IN_LEAGUE]-&amp;gt;(league) MERGE (league)-[:IN_COUNTRY]-&amp;gt;(country) MERGE (club2:Club {name: &amp;#34;Juventus&amp;#34;}) MERGE (league2:League {name: &amp;#34;Serie A&amp;#34;}) MERGE (club2)-[:IN_LEAGUE]-&amp;gt;(league2) We started the post with the following query that returns (club)-[:IN_LEAGUE]→(league)-[:IN_COUNTRY]→(country) paths:</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Nested Path Comprehensions</title>
      <link>https://www.markhneedham.com/blog/2019/08/22/neo4j-cypher-nested-pattern-comprehensions/</link>
      <pubDate>Thu, 22 Aug 2019 11:08:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2019/08/22/neo4j-cypher-nested-pattern-comprehensions/</guid>
      <description>I’ve recently been building an application using the GRANDstack, which uses nested Cypher path comprehensions to translate GraphQL queries to Cypher ones. I’d not done this before, so I was quite curious how this feature worked. We’ll explore it using the following dataset:
MERGE (club:Club {name: &amp;#34;Man Utd&amp;#34;}) MERGE (league:League {name: &amp;#34;Premier League&amp;#34;}) MERGE (country:Country {name: &amp;#34;England&amp;#34;}) MERGE (club)-[:IN_LEAGUE]-&amp;gt;(league) MERGE (league)-[:IN_COUNTRY]-&amp;gt;(country) MERGE (club2:Club {name: &amp;#34;Juventus&amp;#34;}) MERGE (league2:League {name: &amp;#34;Serie A&amp;#34;}) MERGE (club2)-[:IN_LEAGUE]-&amp;gt;(league2) If we want to return a path containing a club, the league they play in, and the country that the league belongs to, we could write the following query:</description>
    </item>
    
    <item>
      <title>Neo4j: Conditional WHERE clause with APOC</title>
      <link>https://www.markhneedham.com/blog/2019/07/31/neo4j-conditional-where-query-apoc/</link>
      <pubDate>Wed, 31 Jul 2019 11:08:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2019/07/31/neo4j-conditional-where-query-apoc/</guid>
      <description>Sometimes we want to be able to vary our Cypher queries based on the value of a parameter. I came across such a situation today, and thought I’d share how I solved it using the APOC library.
Let’s first setup some sample data:
UNWIND range(0, 5) AS id CREATE (:Person {name: &amp;#34;person-&amp;#34; + id}) Now, if we want to get all pairs of people, we could write the following query:</description>
    </item>
    
    <item>
      <title>Twint: Loading tweets into Kafka and Neo4j</title>
      <link>https://www.markhneedham.com/blog/2019/05/29/loading-tweets-twint-kafka-neo4j/</link>
      <pubDate>Wed, 29 May 2019 06:50:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2019/05/29/loading-tweets-twint-kafka-neo4j/</guid>
      <description>In this post we’re going to load tweets via the twint library into Kafka, and once we’ve got them in there we’ll use the Kafka Connect Neo4j Sink Plugin to get them into Neo4j.
What is twint? Twitter data has always been some of the most fun to play with, but over the years the official API has become more and more restritive, and it now takes a really long time to download enough data to do anything interesting.</description>
    </item>
    
    <item>
      <title>Neo4j: keep/filter keys in a map using APOC</title>
      <link>https://www.markhneedham.com/blog/2019/05/12/neo4j-keep-filter-keys-map-apoc/</link>
      <pubDate>Sun, 12 May 2019 17:58:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2019/05/12/neo4j-keep-filter-keys-map-apoc/</guid>
      <description>In this post we’ll learn how to write a Cypher query to create a node in Neo4j containing some of the keys from a map. This post assumes that the APOC library is installed.
We’ll start by creating a map that contains data from my twitter profile:
:param document =&amp;gt; { id: 14707949, name: &amp;#34;Mark Needham&amp;#34;, username: &amp;#34;markhneedham&amp;#34;, bio: &amp;#34;Developer Relations @neo4j&amp;#34;, location: &amp;#34;London, United Kingdom&amp;#34;, url: &amp;#34;http://www.markhneedham.com&amp;#34;, join_date: &amp;#34;8 May 2008&amp;#34;, join_time: &amp;#34;5:58 PM&amp;#34;, tweets: 24710, following: 2479, followers: 5054, likes: 1014 }; We want to create a User node based on this data, but we don’t want to use all of the keys in the map.</description>
    </item>
    
    <item>
      <title>Neo4j: Delete all nodes</title>
      <link>https://www.markhneedham.com/blog/2019/04/14/neo4j-delete-all-nodes/</link>
      <pubDate>Sun, 14 Apr 2019 12:52:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2019/04/14/neo4j-delete-all-nodes/</guid>
      <description>When experimenting with a new database, at some stage we’ll probably want to delete all our data and start again. I was trying to do this with Neo4j over the weekend and it didn’t work as I expected, so I thought I’d write the lessons I learned.
We’ll be using Neo4j via the Neo4j Desktop with the default settings. This means that we have a maximum heap size of 1GB.</description>
    </item>
    
    <item>
      <title>Neo4j: From Graph Model to Neo4j Import</title>
      <link>https://www.markhneedham.com/blog/2019/03/27/from-graph-model-to-neo4j-import/</link>
      <pubDate>Wed, 27 Mar 2019 06:42:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2019/03/27/from-graph-model-to-neo4j-import/</guid>
      <description>In this post we’re going to learn how to import the DBLP citation network into Neo4j using the Neo4j Import Tool.
In case you haven’t come across this dataset before, Tomaz Bratanic has a great blog post explaining it.
The tl;dr is that we have articles, authors, and venues. Authors can write articles, articles can reference other articles, and articles are presented at a venue. Below is the graph model for this dataset:</description>
    </item>
    
    <item>
      <title>Neo4j: Delete/Remove dynamic properties</title>
      <link>https://www.markhneedham.com/blog/2019/03/14/neo4j-delete-dynamic-properties/</link>
      <pubDate>Thu, 14 Mar 2019 06:42:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2019/03/14/neo4j-delete-dynamic-properties/</guid>
      <description>Irfan and I were playing with a dataset earlier today, and having run a bunch of graph algorithms, we had a lot of properties that we wanted to clear out.
The following Cypher query puts Neo4j into the state that we were dealing with.
CREATE (:Node {name: &amp;#34;Mark&amp;#34;, pagerank: 2.302, louvain: 1, lpa: 4 }) CREATE (:Node {name: &amp;#34;Michael&amp;#34;, degree: 23, triangles: 12, betweeness: 48.70 }) CREATE (:Node {name: &amp;#34;Ryan&amp;#34;, eigenvector: 2.</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Date ranges</title>
      <link>https://www.markhneedham.com/blog/2019/01/13/neo4j-cypher-date-ranges/</link>
      <pubDate>Sun, 13 Jan 2019 06:42:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2019/01/13/neo4j-cypher-date-ranges/</guid>
      <description>As part of a dataset I’ve been working with this week, I wanted to generate a collection of a range of dates using the Cypher query language.
I’ve previously used the duration function, which lets you add (or subtract) from a specific date, so I thought I’d start from there. If we want to find the day after 1st January 2019, we could write the following query:
neo4j&amp;gt; WITH date(&amp;#34;2019-01-01&amp;#34;) AS startDate RETURN startDate + duration({days: 1}) AS date; +------------+ | date | +------------+ | 2019-01-02 | +------------+ We can extend this code sample to find the next 5 dates from 1st January 2019 by using the range function:</description>
    </item>
    
    <item>
      <title>Neo4j: APOC - Caused by: java.io.RuntimeException: Can&#39;t read url or key file (No such file or directory)</title>
      <link>https://www.markhneedham.com/blog/2019/01/12/neo4j-apoc-file-not-found-exception-no-such-file-directory/</link>
      <pubDate>Sat, 12 Jan 2019 19:05:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2019/01/12/neo4j-apoc-file-not-found-exception-no-such-file-directory/</guid>
      <description>I’ve been using Neo4j’s APOC library to load some local JSON files this week, and ran into an interesting problem.
The LOAD CSV tool assumes that any files you load locally are in the import directory, so I’ve got into the habit of putting my data there. Let’s check what I’m trying to import by opening the import directory:
What’s in there?
Just the one JSON file needs processing. If we want to import local files we need to add the following property to our Neo4j configuration file:</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Remove consecutive duplicates from a list</title>
      <link>https://www.markhneedham.com/blog/2019/01/12/neo4j-cypher-remove-consecutive-duplicates/</link>
      <pubDate>Sat, 12 Jan 2019 04:32:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2019/01/12/neo4j-cypher-remove-consecutive-duplicates/</guid>
      <description>I was playing with a dataset this week and wanted to share how I removes duplicate consecutive elements from a list using the Cypher query language.
For simplicity’s sake, imagine that we have this list:
neo4j&amp;gt; return [1,2,3,3,4,4,4,5,3] AS values; +-----------------------------+ | values | +-----------------------------+ | [1, 2, 3, 3, 4, 4, 4, 5, 3] | +-----------------------------+ We want to remove the duplicate 3’s and 4’s, such that our end result should be:</description>
    </item>
    
    <item>
      <title>Neo4j: Pruning transaction logs more aggressively</title>
      <link>https://www.markhneedham.com/blog/2018/12/24/neo4j-prune-transaction-logs-more-aggressively/</link>
      <pubDate>Mon, 24 Dec 2018 21:09:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/12/24/neo4j-prune-transaction-logs-more-aggressively/</guid>
      <description>One thing that new users of Neo4j when playing around with it locally is how much space the transaction logs can take up, especially when we’re creating and deleting lots of data while we get started. We can see this by running the following query a few times:
UNWIND range(0, 1000) AS id CREATE (:Foo {id: id}); MATCH (f:Foo) DELETE f This query creates a bunch of data before immediately deleting it.</description>
    </item>
    
    <item>
      <title>Neo4j: Storing inferred relationships with APOC triggers</title>
      <link>https://www.markhneedham.com/blog/2018/11/05/neo4j-inferred-relationships-apoc-triggers/</link>
      <pubDate>Mon, 05 Nov 2018 06:15:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/11/05/neo4j-inferred-relationships-apoc-triggers/</guid>
      <description>One of my favourite things about modelling data in graphs is how easy it makes it to infer relationships between pieces of data based on other relationships. In this post we’re going to learn how to compute and store those inferred relationships using the triggers feature from the APOC library.
Meetup Graph Before we get to that, let’s first understand what we mean when we say inferred relationship. We’ll create a small graph containing Person, Meetup, and Topic nodes with the following query:</description>
    </item>
    
    <item>
      <title>Neo4j Graph Algorithms: Visualising Projected Graphs</title>
      <link>https://www.markhneedham.com/blog/2018/10/31/neo4j-graph-algorithms-visualise-projected-graph/</link>
      <pubDate>Wed, 31 Oct 2018 18:12:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/10/31/neo4j-graph-algorithms-visualise-projected-graph/</guid>
      <description>A few weeks ago I wrote a blog post showing how to work out the best tennis player of all time using the Weighted PageRank algorithm, and in the process created a projected credibility graph which I want to explore in more detail in this post.
As I pointed out in that post, sometimes the graph model doesn’t fit well with what the algorithm expects, so we need to project the graph on which we run graph algorithms.</description>
    </item>
    
    <item>
      <title>Neo4j: Using LOAD CSV to process csv.gz files from S3</title>
      <link>https://www.markhneedham.com/blog/2018/09/05/neo4j-load-csv-gz-s3/</link>
      <pubDate>Wed, 05 Sep 2018 07:26:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/09/05/neo4j-load-csv-gz-s3/</guid>
      <description>I’ve been building some training material for the GraphConnect conference that happens in a couple of weeks time and I wanted to load gzipped CSV files. I got this working using Cypher’s LOAD CSV command with the file stored locally, but when I uploaded it to S3 it didn’t work as I expected.
I uploaded the file to an S3 bucket and then tried to read it back like this:</description>
    </item>
    
    <item>
      <title>Neo4j 3.4: Grouping Datetimes</title>
      <link>https://www.markhneedham.com/blog/2018/07/10/neo4j-grouping-datetimes/</link>
      <pubDate>Tue, 10 Jul 2018 04:21:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/07/10/neo4j-grouping-datetimes/</guid>
      <description>In my continued analysis of Strava runs I wanted to try and find my best runs grouped by different time components, which was actually much easier than I was expecting.
Importing the dataset If you want to try out the examples below you can execute the following LOAD CSV commands to load the data:
LOAD CSV WITH HEADERS FROM &amp;#34;https://github.com/mneedham/strava/raw/master/runs.csv&amp;#34; AS row MERGE (run:Run {id: toInteger(row.id)}) SET run.distance = toFloat(row.</description>
    </item>
    
    <item>
      <title>Neo4j 3.4: Syntax Error - Text cannot be parsed to a Duration (aka dealing with empty durations)</title>
      <link>https://www.markhneedham.com/blog/2018/07/09/neo4j-text-cannot-be-parsed-to-duration/</link>
      <pubDate>Mon, 09 Jul 2018 18:21:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/07/09/neo4j-text-cannot-be-parsed-to-duration/</guid>
      <description>As I continued with my travels with Neo4j 3.4’s temporal data type I came across some fun edge cases when dealing with empty durations while importing data.
Imagine we’re trying to create 3 nodes from the following array of input data. Two of the rows have invalid durations!
UNWIND [ {id: 12345, duration: &amp;#34;PT2M20S&amp;#34;}, {id: 12346, duration: &amp;#34;&amp;#34;}, {id: 12347, duration: null} ] AS row MERGE (run:Run {id: row.id}) SET run.</description>
    </item>
    
    <item>
      <title>Neo4j: Querying the Strava Graph using Py2neo</title>
      <link>https://www.markhneedham.com/blog/2018/06/15/neo4j-querying-strava-graph-py2neo/</link>
      <pubDate>Fri, 15 Jun 2018 13:45:21 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/06/15/neo4j-querying-strava-graph-py2neo/</guid>
      <description>Last week Nigel released v4 of Py2neo and given I was just getting ready to write some queries against my Strava activity graph I thought I’d give it a try.
If you want to learn how to create your own Strava graph you should read my previous post, but just to recap, this is the graph model that we created:
Let’s get to it!
tl;dr the code in this post is available as a Jupyter notebook so if you want the code and nothing but the code head over there!</description>
    </item>
    
    <item>
      <title>Neo4j: Building a graph of Strava activities</title>
      <link>https://www.markhneedham.com/blog/2018/06/12/neo4j-building-strava-graph/</link>
      <pubDate>Tue, 12 Jun 2018 05:30:21 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/06/12/neo4j-building-strava-graph/</guid>
      <description>In my last post I showed how to import activities from Strava’s API into Neo4j using only the APOC library, but that was only part of the graph so I thought I’d share the rest of what I’ve done.
The Graph Model In the previous post I showed how to import nodes with Run label, but there are some other pieces of data that I wanted to import as well.</description>
    </item>
    
    <item>
      <title>Neo4j APOC: Importing data from Strava&#39;s paginated JSON API</title>
      <link>https://www.markhneedham.com/blog/2018/06/05/neo4j-apoc-loading-data-strava-paginated-json-api/</link>
      <pubDate>Tue, 05 Jun 2018 05:30:21 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/06/05/neo4j-apoc-loading-data-strava-paginated-json-api/</guid>
      <description>Over the weekend I’ve been playing around with loading data from the Strava API into Neo4j and I started with the following Python script which creates a node with a Run label for each of my activities.
If you want to follow along on your own data you’ll need to get an API key via the &amp;#39;My API Application&amp;#39; section of the website. Once you’ve got that put it in the TOKEN environment variable and you should be good to go.</description>
    </item>
    
    <item>
      <title>Neo4j 3.4: Gotchas when working with Durations</title>
      <link>https://www.markhneedham.com/blog/2018/06/03/neo4j-3.4-gotchas-working-with-durations/</link>
      <pubDate>Sun, 03 Jun 2018 20:11:21 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/06/03/neo4j-3.4-gotchas-working-with-durations/</guid>
      <description>Continuing with my explorations of Strava data in Neo4j I wanted to share some things I learnt while trying to work out my pace for certain distances.
Before we get into the pace calculations let’s first understand how the duration function works. If we run the following query we might expect to get back the same value that we put in…​
RETURN duration({seconds: 413.77}).seconds AS seconds ╒═════════╕ │&amp;#34;seconds&amp;#34;│ ╞═════════╡ │413 │ └─────────┘ …​but as you can see the value gets rounded down to the nearest number, losing us some accuracy.</description>
    </item>
    
    <item>
      <title>Neo4j 3.4: Formatting instances of the Duration and Datetime date types</title>
      <link>https://www.markhneedham.com/blog/2018/06/03/neo4j-3.4-formatting-instances-durations-dates/</link>
      <pubDate>Sun, 03 Jun 2018 04:08:21 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/06/03/neo4j-3.4-formatting-instances-durations-dates/</guid>
      <description>In my last blog post I showed how to compare instances of Neo4j’s Duration data type, and in the middle of the post I realised that I needed to use the APOC library to return the value in the format I wanted. This was the solution I ended up with:
WITH duration({seconds: 100}) AS duration RETURN apoc.text.lpad(toString(duration.minutes), 2, &amp;#34;0&amp;#34;) + &amp;#34;:&amp;#34; + apoc.text.lpad(toString(duration.secondsOfMinute), 2, &amp;#34;0&amp;#34;) If we run that query this is the output:</description>
    </item>
    
    <item>
      <title>Neo4j 3.4: Comparing durations</title>
      <link>https://www.markhneedham.com/blog/2018/06/02/neo4j-3.4-comparing-durations/</link>
      <pubDate>Sat, 02 Jun 2018 03:24:21 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/06/02/neo4j-3.4-comparing-durations/</guid>
      <description>Neo4j 3.4 saw the introduction of the temporal date type, which my colleague Adam Cowley covered in his excellent blog post, and in this post I want to share my experience using durations from my Strava runs.
I’ll show how to load the whole Strava dataset in another blog post but for now we’ll just manually create some durations based on the elapsed time in seconds that Strava provides. We can run the following query to convert duration in seconds into the duration type:</description>
    </item>
    
    <item>
      <title>Neo4j Desktop: undefined: Unable to extract host from undefined</title>
      <link>https://www.markhneedham.com/blog/2018/03/20/neo4j-undefined-unable-to-extract-host-from-undefined/</link>
      <pubDate>Tue, 20 Mar 2018 17:51:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/03/20/neo4j-undefined-unable-to-extract-host-from-undefined/</guid>
      <description>During a training session I facilitated today one of the attendees got the following error message while trying to execute a query inside the Neo4j Desktop.
This error message happens if we try to run a query when the database hasn’t been started, and would usually be accompanied by this screen:
On this occasion that wasn’t happening, but we can easily fix it by going back to the project screen and starting the database:</description>
    </item>
    
    <item>
      <title>Neo4j: Using the Neo4j Import Tool with the Neo4j Desktop</title>
      <link>https://www.markhneedham.com/blog/2018/03/19/neo4j-using-neo4j-import-tool-with-neo4j-desktop/</link>
      <pubDate>Mon, 19 Mar 2018 21:38:13 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/03/19/neo4j-using-neo4j-import-tool-with-neo4j-desktop/</guid>
      <description>Last week as part of a modelling and import webinar I showed how to use the Neo4j Import Tool to create a graph of the Yelp Open Dataset:
Afterwards I realised that I didn’t show how to use the tool if you already have an existing database in place so this post will show how to do that.
Imagine we have a Neo4j Desktop project that looks like this:</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Neo.ClientError.Statement.TypeError: Don&#39;t know how to add Double and String</title>
      <link>https://www.markhneedham.com/blog/2018/03/14/neo4j-cypher-neo-clienterror-statement-typeerror-dont-know-add-double-string/</link>
      <pubDate>Wed, 14 Mar 2018 16:53:33 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/03/14/neo4j-cypher-neo-clienterror-statement-typeerror-dont-know-add-double-string/</guid>
      <description>I recently upgraded a Neo4j backed application from Neo4j 3.2 to Neo4j 3.3 and came across an interesting change in behaviour around type coercion which led to my application throwing a bunch of errors.
In Neo4j 3.2 and earlier if you added a String to a Double it would coerce the Double to a String and concatenate the values. The following would therefore be valid Cypher:
RETURN toFloat(&amp;#34;1.0&amp;#34;) + &amp;#34; Mark&amp;#34; ╒══════════╕ │&amp;#34;result&amp;#34; │ ╞══════════╡ │&amp;#34;1.</description>
    </item>
    
    <item>
      <title>Neo4j Import: java.lang.IllegalStateException: Mixing specified and unspecified group belongings in a single import isn&#39;t supported</title>
      <link>https://www.markhneedham.com/blog/2018/03/07/neo4j-import-java-lang-illegalstateexception-mixing-specified-unspecified-group-belongings-single-import-isnt-supported/</link>
      <pubDate>Wed, 07 Mar 2018 03:11:12 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2018/03/07/neo4j-import-java-lang-illegalstateexception-mixing-specified-unspecified-group-belongings-single-import-isnt-supported/</guid>
      <description>I’ve been working with the Neo4j Import Tool recently after a bit of a break and ran into an interesting error message that I initially didn’t understand.
I had some CSV files containing nodes that I wanted to import into Neo4j. Their contents look like this:
$ cat people_header.csv name:ID(Person) $ cat people.csv &amp;#34;Mark&amp;#34; &amp;#34;Michael&amp;#34; &amp;#34;Ryan&amp;#34; &amp;#34;Will&amp;#34; &amp;#34;Jennifer&amp;#34; &amp;#34;Karin&amp;#34; $ cat companies_header.csv name:ID(Company) $ cat companies.csv &amp;#34;Neo4j&amp;#34; I find it easier to use separate header files because I often make typos with my column names and it’s easier to update a single line file than to open a multi-million line file and change the first line.</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Property values can only be of primitive types or arrays thereof.</title>
      <link>https://www.markhneedham.com/blog/2017/12/01/neo4j-cypher-property-values-can-primitive-types-arrays-thereof/</link>
      <pubDate>Fri, 01 Dec 2017 22:09:17 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/12/01/neo4j-cypher-property-values-can-primitive-types-arrays-thereof/</guid>
      <description>I ran into an interesting Cypher error message earlier this week while trying to create an array property on a node which I thought I’d share.
This was the Cypher query I wrote:
CREATE (:Person {id: [1, &amp;#34;mark&amp;#34;, 2.0]}) which results in this error:
Neo.ClientError.Statement.TypeError Property values can only be of primitive types or arrays thereof. We actually are storing an array of primitives but we have a mix of different types which isn’t allowed.</description>
    </item>
    
    <item>
      <title>Kubernetes: Copy a dataset to a StatefulSet&#39;s PersistentVolume</title>
      <link>https://www.markhneedham.com/blog/2017/11/18/kubernetes-copy-a-dataset-to-a-statefulsets-persistentvolume/</link>
      <pubDate>Sat, 18 Nov 2017 12:44:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/11/18/kubernetes-copy-a-dataset-to-a-statefulsets-persistentvolume/</guid>
      <description>In this post we’ll learn how to copy an existing dataset to the PersistentVolumes used by a Neo4j cluster running on Kubernetes.
Neo4j Clusters on Kubernetes This posts assumes that we’re familiar with deploying Neo4j on Kubernetes. I wrote an article on the Neo4j blog explaining this in more detail.
The StatefulSet we create for our core servers require persistent storage, achieved via the PersistentVolumeClaim (PVC) primitive. A Neo4j cluster containing 3 core servers would have the following PVCs:</description>
    </item>
    
    <item>
      <title>Kubernetes 1.8: Using Cronjobs to take Neo4j backups</title>
      <link>https://www.markhneedham.com/blog/2017/11/17/kubernetes-1-8-using-cronjobs-take-neo4j-backups/</link>
      <pubDate>Fri, 17 Nov 2017 18:10:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/11/17/kubernetes-1-8-using-cronjobs-take-neo4j-backups/</guid>
      <description>With the release of Kubernetes 1.8 Cronjobs have graduated to beta, which means we can now more easily run Neo4j backup jobs against Kubernetes clusters.
Before we learn how to write a Cronjob let’s first create a local Kubernetes cluster and deploy Neo4j.
Spinup Kubernetes &amp;amp; Helm minikube start --memory 8192 helm init &amp;amp;&amp;amp; kubectl rollout status -w deployment/tiller-deploy --namespace=kube-system Deploy a Neo4j cluster helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/ helm install incubator/neo4j --name neo-helm --wait --set authEnabled=false,core.</description>
    </item>
    
    <item>
      <title>Neo4j Browser: Expected entity id to be an integral value</title>
      <link>https://www.markhneedham.com/blog/2017/11/06/neo4j-browser-expected-entity-id-integral-value/</link>
      <pubDate>Mon, 06 Nov 2017 16:17:35 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/11/06/neo4j-browser-expected-entity-id-integral-value/</guid>
      <description>I came across an interesting error while writing a Cypher query that used parameters in the Neo4j browser which I thought I should document for future me.
We’ll start with a graph that has 1,000 people:
unwind range(0,1000) AS id create (:Person {id: id}) Now we’ll try and retrieve some of those people via a parameter lookup:
:param ids: [0] match (p:Person) where p.id in {ids} return p ╒════════╕ │&amp;#34;p&amp;#34; │ ╞════════╡ │{&amp;#34;id&amp;#34;:0}│ └────────┘ All good so far.</description>
    </item>
    
    <item>
      <title>Neo4j: Traversal query timeout</title>
      <link>https://www.markhneedham.com/blog/2017/10/31/neo4j-traversal-query-timeout/</link>
      <pubDate>Tue, 31 Oct 2017 21:43:17 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/10/31/neo4j-traversal-query-timeout/</guid>
      <description>I’ve been spending some of my spare time over the last few weeks creating an application that generates running routes from Open Roads data - transformed and imported into Neo4j of course!
I’ve created a user defined procedure which combines several shortest path queries, but I wanted to exit any of these shortest path searches if they were taking too long. My code without a timeout looks like this:</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Deleting duplicate nodes</title>
      <link>https://www.markhneedham.com/blog/2017/10/06/neo4j-cypher-deleting-duplicate-nodes/</link>
      <pubDate>Fri, 06 Oct 2017 16:13:33 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/10/06/neo4j-cypher-deleting-duplicate-nodes/</guid>
      <description>I had a problem on a graph I was working on recently where I’d managed to create duplicate nodes because I hadn’t applied any unique constraints.
I wanted to remove the duplicates, and came across Jimmy Ruts&amp;#39; excellent post which shows some ways to do this.
Let’s first create a graph with some duplicate nodes to play with:
UNWIND range(0, 100) AS id CREATE (p1:Person {id: toInteger(rand() * id)}) MERGE (p2:Person {id: toInteger(rand() * id)}) MERGE (p3:Person {id: toInteger(rand() * id)}) MERGE (p4:Person {id: toInteger(rand() * id)}) CREATE (p1)-[:KNOWS]-&amp;gt;(p2) CREATE (p1)-[:KNOWS]-&amp;gt;(p3) CREATE (p1)-[:KNOWS]-&amp;gt;(p4) Added 173 labels, created 173 nodes, set 173 properties, created 5829 relationships, completed after 408 ms.</description>
    </item>
    
    <item>
      <title>AWS: Spinning up a Neo4j instance with APOC installed</title>
      <link>https://www.markhneedham.com/blog/2017/09/30/aws-spinning-up-a-neo4j-instance-with-apoc-installed/</link>
      <pubDate>Sat, 30 Sep 2017 21:23:11 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/09/30/aws-spinning-up-a-neo4j-instance-with-apoc-installed/</guid>
      <description>One of the first things I do after installing Neo4j is install the APOC library, but I find it’s a bit of a manual process when spinning up a server on AWS so I wanted to simplify it a bit.
There’s already a Neo4j AMI which installs Neo4j 3.2.0 and my colleague Michael pointed out that we could download APOC into the correct folder by writing a script and sending it as UserData.</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Create Cypher map with dynamic keys</title>
      <link>https://www.markhneedham.com/blog/2017/09/19/neo4j-cypher-create-cypher-map-with-dynamic-keys/</link>
      <pubDate>Tue, 19 Sep 2017 19:30:09 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/09/19/neo4j-cypher-create-cypher-map-with-dynamic-keys/</guid>
      <description>I was recently trying to create a map in a Cypher query but wanted to have dynamic keys in that map. I started off with this query:
WITH &amp;#34;a&amp;#34; as dynamicKey, &amp;#34;b&amp;#34; as dynamicValue RETURN { dynamicKey: dynamicValue } AS map ╒══════════════════╕ │&amp;#34;map&amp;#34; │ ╞══════════════════╡ │{&amp;#34;dynamicKey&amp;#34;:&amp;#34;b&amp;#34;}│ └──────────────────┘ Not quite what we want! We want dynamicKey to be evaluated rather than treated as a literal. As usual, APOC comes to the rescue!</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Rounding of floating point numbers/BigDecimals</title>
      <link>https://www.markhneedham.com/blog/2017/08/13/neo4j-cypher-rounding-of-floating-point-numbersbigdecimals/</link>
      <pubDate>Sun, 13 Aug 2017 07:23:46 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/08/13/neo4j-cypher-rounding-of-floating-point-numbersbigdecimals/</guid>
      <description>I was doing some data cleaning a few days ago and wanting to multiply a value by 1 million. My Cypher code to do this looked like this:
with &amp;#34;8.37&amp;#34; as rawNumeric RETURN toFloat(rawNumeric) * 1000000 AS numeric ╒═════════════════╕ │&amp;#34;numeric&amp;#34; │ ╞═════════════════╡ │8369999.999999999│ └─────────────────┘ Unfortunately that suffers from the classic rounding error when working with floating point numbers. I couldn’t figure out a way to solve it using pure Cypher, but there tends to be an APOC function to solve every problem and this was no exception.</description>
    </item>
    
    <item>
      <title>Docker: Building custom Neo4j images on Mac OS X</title>
      <link>https://www.markhneedham.com/blog/2017/07/26/docker-building-custom-neo4j-images-on-mac-os-x/</link>
      <pubDate>Wed, 26 Jul 2017 22:20:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/07/26/docker-building-custom-neo4j-images-on-mac-os-x/</guid>
      <description>I sometimes needs to create custom Neo4j Docker images to try things out and wanted to share my work flow, mostly for future Mark but also in case it’s useful to someone else.
There’s already a docker-neo4j repository so we’ll just tweak the files in there to achieve what we want.
$ git clone git@github.com:neo4j/docker-neo4j.git $ cd docker-neo4j If we want to build a Docker image for Neo4j Enterprise Edition we can run the following build target:</description>
    </item>
    
    <item>
      <title>Neo4j: apoc.date.parse - java.lang.IllegalArgumentException: Illegal pattern character &#39;T&#39; / java.text.ParseException: Unparseable date: &#34;2012-11-12T08:46:15Z&#34;</title>
      <link>https://www.markhneedham.com/blog/2017/03/06/neo4j-apoc-date-parse-java-lang-illegalargumentexception-illegal-pattern-character-t-java-text-parseexception-unparseable-date-2012-11-12t084615z/</link>
      <pubDate>Mon, 06 Mar 2017 20:52:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/03/06/neo4j-apoc-date-parse-java-lang-illegalargumentexception-illegal-pattern-character-t-java-text-parseexception-unparseable-date-2012-11-12t084615z/</guid>
      <description>I often find myself wanting to convert date strings into Unix timestamps using Neo4j’s APOC library and unfortunately some sources don’t use the format that apoc.date.parse expects.
e.g.
return apoc.date.parse(&amp;#34;2012-11-12T08:46:15Z&amp;#34;,&amp;#39;s&amp;#39;) AS ts Failed to invoke function `apoc.date.parse`: Caused by: java.lang.IllegalArgumentException: java.text.ParseException: Unparseable date: &amp;#34;2012-11-12T08:46:15Z&amp;#34; We need to define the format explicitly so the SimpleDataFormat documentation comes in handy. I tried the following:
return apoc.date.parse(&amp;#34;2012-11-12T08:46:15Z&amp;#34;,&amp;#39;s&amp;#39;,&amp;#34;yyyy-MM-ddTHH:mm:ssZ&amp;#34;) AS ts Failed to invoke function `apoc.</description>
    </item>
    
    <item>
      <title>Neo4j: Graphing the &#39;My name is...I work&#39; Twitter meme</title>
      <link>https://www.markhneedham.com/blog/2017/02/28/neo4j-graphing-name-work-twitter-meme/</link>
      <pubDate>Tue, 28 Feb 2017 15:50:27 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/02/28/neo4j-graphing-name-work-twitter-meme/</guid>
      <description>Over the last few days I’ve been watching the chain of &amp;#39;My name is...&amp;#39; tweets kicked off by DHH with interest. As I understand it, the idea is to show that coding interview riddles/hard tasks on a whiteboard are ridiculous.
Hello, my name is David. I would fail to write bubble sort on a whiteboard. I look code up on the internet all the time. I don&amp;#39;t do riddles. __</description>
    </item>
    
    <item>
      <title>Neo4j: How do null values even work?</title>
      <link>https://www.markhneedham.com/blog/2017/02/22/neo4j-null-values-even-work/</link>
      <pubDate>Wed, 22 Feb 2017 23:28:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/02/22/neo4j-null-values-even-work/</guid>
      <description>Every now and then I find myself wanting to import a CSV file into Neo4j and I always get confused with how to handle the various null values that can lurk within.
Let’s start with an example that doesn’t have a CSV file in sight. Consider the following list and my attempt to only return null values:
WITH [null, &amp;#34;null&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;Mark&amp;#34;] AS values UNWIND values AS value WITH value WHERE value = null RETURN value (no changes, no records) Hmm that’s weird.</description>
    </item>
    
    <item>
      <title>Neo4j: Analysing a CSV file using LOAD CSV and Cypher</title>
      <link>https://www.markhneedham.com/blog/2017/02/19/neo4j-analysing-csv-file-using-load-csv-cypher/</link>
      <pubDate>Sun, 19 Feb 2017 22:39:05 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2017/02/19/neo4j-analysing-csv-file-using-load-csv-cypher/</guid>
      <description>Last week we ran our first online meetup for several years and I wanted to wanted to analyse the stats that YouTube lets you download for an event.
The file I downloaded looked like this:
$ cat ~/Downloads/youtube_stats_pW9boJoUxO0.csv Video IDs:, pW9boJoUxO0, Start time:, Wed Feb 15 08:57:55 2017, End time:, Wed Feb 15 10:03:10 2017 Playbacks, Peak concurrent viewers, Total view time (hours), Average session length (minutes) 348, 112, 97.</description>
    </item>
    
    <item>
      <title>Neo4j: Graphing the ThoughtWorks Technology Radar</title>
      <link>https://www.markhneedham.com/blog/2016/12/23/neo4j-graphing-the-thoughtworks-technology-radar/</link>
      <pubDate>Fri, 23 Dec 2016 17:40:45 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/12/23/neo4j-graphing-the-thoughtworks-technology-radar/</guid>
      <description>For a bit of Christmas holiday fun I thought it’d be cool to create a graph of the different blips on the ThoughtWorks Technology Radar and how the recommendations have changed over time.
I wrote a script to extract each blip (e.g. .NET Core) and the recommendation made in each radar that it appeared in. I ended up with a CSV file:
|----------------------------------------------+----------+-------------| | technology | date | suggestion | |----------------------------------------------+----------+-------------| | AppHarbor | Mar 2012 | Trial | | Accumulate-only data | Nov 2015 | Assess | | Accumulate-only data | May 2015 | Assess | | Accumulate-only data | Jan 2015 | Assess | | Buying solutions you can only afford one of | Mar 2012 | Hold | |----------------------------------------------+----------+-------------| I then wrote a Cypher script to create the following graph model:</description>
    </item>
    
    <item>
      <title>Kubernetes: Simulating a network partition</title>
      <link>https://www.markhneedham.com/blog/2016/12/04/kubernetes-simulating-a-network-partition/</link>
      <pubDate>Sun, 04 Dec 2016 12:37:49 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/12/04/kubernetes-simulating-a-network-partition/</guid>
      <description>A couple of weeks ago I wrote a post explaining how to create a Neo4j causal cluster using Kubernetes and ... the I wanted to work out how to simulate a network partition which would put the leader on the minority side and force an election.
We’ve done this on our internal tooling on AWS using the https://en.wikipedia.org/wiki/Iptables command but unfortunately that isn’t available in my container, which only has the utilities provided by BusyBox.</description>
    </item>
    
    <item>
      <title>Kubernetes: Spinning up a Neo4j 3.1 Causal Cluster</title>
      <link>https://www.markhneedham.com/blog/2016/11/25/kubernetes-spinning-up-a-neo4j-3-1-causal-cluster/</link>
      <pubDate>Fri, 25 Nov 2016 16:55:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/11/25/kubernetes-spinning-up-a-neo4j-3-1-causal-cluster/</guid>
      <description>A couple of weeks ago I wrote a blog post explaining how I’d created a Neo4j causal cluster using docker containers directly and for my next pet project I wanted to use Kubernetes as an orchestration layer so that I could declaratively change the number of servers in my cluster.
I’d never used Kubernetes before but I saw a presentation showing how to use it to create an Elastic cluster at the GDG Cloud meetup a couple of months ago.</description>
    </item>
    
    <item>
      <title>Neo4j 3.1 beta3 &#43; docker: Creating a Causal Cluster</title>
      <link>https://www.markhneedham.com/blog/2016/11/13/neo4j-3-1-beta3-docker-creating-a-causal-cluster/</link>
      <pubDate>Sun, 13 Nov 2016 12:30:08 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/11/13/neo4j-3-1-beta3-docker-creating-a-causal-cluster/</guid>
      <description>Over the weekend I’ve been playing around with docker and learning how to spin up a Neo4j Causal Cluster.
Causal Clustering is Neo4j’s new clustering architecture which makes use of Diego Ongaro’s Raft consensus algorithm to ensure writes are committed on a majority of servers. It’ll be available in the 3.1 series of Neo4j which is currently in beta. I’ll be using BETA3 in this post.
I don’t know much about docker but luckily my colleague Kevin Van Gundy wrote a blog post a couple of weeks ago explaining how to spin up Neo4j inside a docker container which was very helpful for getting me started.</description>
    </item>
    
    <item>
      <title>Neo4j: Find the intermediate point between two lat/longs</title>
      <link>https://www.markhneedham.com/blog/2016/11/01/neo4j-find-the-intermediate-point-between-two-latlongs/</link>
      <pubDate>Tue, 01 Nov 2016 22:10:57 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/11/01/neo4j-find-the-intermediate-point-between-two-latlongs/</guid>
      <description>Yesterday I wrote a blog post showing how to find the midpoint between two lat/longs using Cypher which worked well as a first attempt at filling in missing locations, but I realised I could do better.
As I mentioned in the last post, when I find a stop that’s missing lat/long coordinates I can usually find two nearby stops that allow me to triangulate this stop’s location.
I also have train routes which indicate the number of seconds it takes to go from one stop to another, which allows me to indicate whether the location-less stop is closer to one stop than the other.</description>
    </item>
    
    <item>
      <title>Neo4j: Find the midpoint between two lat/longs</title>
      <link>https://www.markhneedham.com/blog/2016/10/31/neo4j-find-the-midpoint-between-two-latlongs/</link>
      <pubDate>Mon, 31 Oct 2016 19:31:46 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/10/31/neo4j-find-the-midpoint-between-two-latlongs/</guid>
      <description>Over the last couple of weekends I’ve been playing around with some transport data and I wanted to run the A* algorithm to find the quickest route between two stations.
The A* algorithm takes an estimateEvaluator as one of its parameters and the evaluator looks at lat/longs of nodes to work out whether a path is worth following or not. I therefore needed to add lat/longs for each station and I found it surprisingly hard to find this location date for all the points in the dataset.</description>
    </item>
    
    <item>
      <title>Neo4j: Create dynamic relationship type</title>
      <link>https://www.markhneedham.com/blog/2016/10/30/neo4j-create-dynamic-relationship-type/</link>
      <pubDate>Sun, 30 Oct 2016 22:12:50 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/10/30/neo4j-create-dynamic-relationship-type/</guid>
      <description>One of the things I’ve often found frustrating when importing data using Cypher, Neo4j’s query language, is that it’s quite difficult to create dynamic relationship types.
Say we have a CSV file structured like this:
load csv with headers from &amp;#34;file:///people.csv&amp;#34; AS row RETURN row ╒═══════════════════════════════════════════════════════╕ │row │ ╞═══════════════════════════════════════════════════════╡ │{node1: Mark, node2: Reshmee, relationship: MARRIED_TO}│ ├───────────────────────────────────────────────────────┤ │{node1: Mark, node2: Alistair, relationship: FRIENDS} │ └───────────────────────────────────────────────────────┘ We want to create nodes with the relationship type specified in the file.</description>
    </item>
    
    <item>
      <title>Neo4j: Dynamically add property/Set dynamic property</title>
      <link>https://www.markhneedham.com/blog/2016/10/27/neo4j-dynamically-add-property/</link>
      <pubDate>Thu, 27 Oct 2016 05:29:30 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/10/27/neo4j-dynamically-add-property/</guid>
      <description>I’ve been playing around with a dataset which has the timetable for the national rail in the UK and they give you departure and arrival times of each train in a textual format.
For example, the node to represent a stop could be created like this:
CREATE (stop:Stop {arrival: &amp;#34;0802&amp;#34;, departure: &amp;#34;0803H&amp;#34;}) That time format isn’t particular amenable to querying so I wanted to add another property which indicated the number of seconds since the start of the day.</description>
    </item>
    
    <item>
      <title>Neo4j: Detecting rogue spaces in CSV headers with LOAD CSV</title>
      <link>https://www.markhneedham.com/blog/2016/10/19/neo4j-detecting-rogue-spaces-in-csv-headers-with-load-csv/</link>
      <pubDate>Wed, 19 Oct 2016 05:16:07 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/10/19/neo4j-detecting-rogue-spaces-in-csv-headers-with-load-csv/</guid>
      <description>Last week I was helping someone load the data from a CSV file into Neo4j and we were having trouble filtering out rows which contained a null value in one of the columns.
This is what the data looked like:
load csv with headers from &amp;#34;file:///foo.csv&amp;#34; as row RETURN row ╒══════════════════════════════════╕ │row │ ╞══════════════════════════════════╡ │{key1: a, key2: (null), key3: c}│ ├──────────────────────────────────┤ │{key1: d, key2: e, key3: f} │ └──────────────────────────────────┘ We’d like to filter out any rows which have &amp;#39;key2&amp;#39; as null, so let’s tweak our query to do that:</description>
    </item>
    
    <item>
      <title>Neo4j: requirement failed</title>
      <link>https://www.markhneedham.com/blog/2016/10/04/neo4j-requirement-failed/</link>
      <pubDate>Tue, 04 Oct 2016 22:33:43 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/10/04/neo4j-requirement-failed/</guid>
      <description>Last week during a hands on Cypher meetup, using Neo4j’s built in movie dataset, one of the attendees showed me the following query which wasn’t working as expected:
MATCH (p:Person)-[:ACTED_IN]-&amp;gt;(movie) RETURN p, COLLECT(movie.title) AS movies ORDER BY COUNT(movies) DESC LIMIT 10 requirement failed We can get a full stack trace in logs/debug.log if we run the same query from the cypher-shell, which was introduced during one fo the Neo4j 3.</description>
    </item>
    
    <item>
      <title>Neo4j: Procedure call inside a query does not support passing arguments implicitly (pass explicitly after procedure name instead)</title>
      <link>https://www.markhneedham.com/blog/2016/10/02/neo4j-procedure-call-inside-a-query-does-not-support-passing-arguments-implicitly-pass-explicitly-after-procedure-name-instead/</link>
      <pubDate>Sun, 02 Oct 2016 10:13:26 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/10/02/neo4j-procedure-call-inside-a-query-does-not-support-passing-arguments-implicitly-pass-explicitly-after-procedure-name-instead/</guid>
      <description>A couple of days I was trying to write a Cypher query to filter the labels in my database.
I started with the following procedure call to get the list of all the labels:
CALL db.labels ╒══════════╕ │label │ ╞══════════╡ │Airport │ ├──────────┤ │Flight │ ├──────────┤ │Airline │ ├──────────┤ │Movie │ ├──────────┤ │AirportDay│ ├──────────┤ │Person │ ├──────────┤ │Engineer │ └──────────┘ I was only interested in labels that contained the letter &amp;#39;a&amp;#39; so I tweaked the query to filter the output of the procedure:</description>
    </item>
    
    <item>
      <title>Neo4j/scikit-learn: Calculating the cosine similarity of Game of Thrones episodes</title>
      <link>https://www.markhneedham.com/blog/2016/08/22/neo4jscikit-learn-calculating-the-cosine-similarity-of-game-of-thrones-episodes/</link>
      <pubDate>Mon, 22 Aug 2016 21:12:54 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/08/22/neo4jscikit-learn-calculating-the-cosine-similarity-of-game-of-thrones-episodes/</guid>
      <description>A couple of months ago Praveena and I created a Game of Thrones dataset to use in a workshop and I thought it’d be fun to run it through some machine learning algorithms and hopefully find some interesting insights.
The dataset is available as CSV files but for this analysis I’m assuming that it’s already been imported into neo4j. If you want to import the data you can run the tutorial by typing the following into the query bar of the neo4j browser:</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Detecting duplicates using relationships</title>
      <link>https://www.markhneedham.com/blog/2016/07/20/neo4j-cypher-detecting-duplicates-using-relationships/</link>
      <pubDate>Wed, 20 Jul 2016 17:32:19 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/07/20/neo4j-cypher-detecting-duplicates-using-relationships/</guid>
      <description>I’ve been building a graph of computer science papers on and off for a couple of months and now that I’ve got a few thousand loaded in I realised that there are quite a few duplicates.
They’re not duplicates in the sense that there are multiple entries with the same identifier but rather have different identifiers but seem to be the same paper!
e.g. there are a couple of papers titled &amp;#39;Authentication in the Taos operating system&amp;#39;:</description>
    </item>
    
    <item>
      <title>Neo4j 3.0 Drivers - Failed to save the server ID and the certificate received from the server</title>
      <link>https://www.markhneedham.com/blog/2016/07/11/neo4j-3-0-drivers-failed-to-save-the-server-id-and-the-certificate-received-from-the-server/</link>
      <pubDate>Mon, 11 Jul 2016 05:21:43 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/07/11/neo4j-3-0-drivers-failed-to-save-the-server-id-and-the-certificate-received-from-the-server/</guid>
      <description>I’ve been using the Neo4j Java Driver on various local databases over the past week and ran into the following certificate problem a few times:
org.neo4j.driver.v1.exceptions.ClientException: Unable to process request: General SSLEngine problem at org.neo4j.driver.internal.connector.socket.SocketClient.start(SocketClient.java:88) at org.neo4j.driver.internal.connector.socket.SocketConnection.&amp;lt;init&amp;gt;(SocketConnection.java:63) at org.neo4j.driver.internal.connector.socket.SocketConnector.connect(SocketConnector.java:52) at org.neo4j.driver.internal.pool.InternalConnectionPool.acquire(InternalConnectionPool.java:113) at org.neo4j.driver.internal.InternalDriver.session(InternalDriver.java:53) Caused by: javax.net.ssl.SSLHandshakeException: General SSLEngine problem at sun.security.ssl.Handshaker.checkThrown(Handshaker.java:1431) at sun.security.ssl.SSLEngineImpl.checkTaskThrown(SSLEngineImpl.java:535) at sun.security.ssl.SSLEngineImpl.writeAppRecord(SSLEngineImpl.java:1214) at sun.security.ssl.SSLEngineImpl.wrap(SSLEngineImpl.java:1186) at javax.net.ssl.SSLEngine.wrap(SSLEngine.java:469) at org.neo4j.driver.internal.connector.socket.TLSSocketChannel.wrap(TLSSocketChannel.java:270) at org.neo4j.driver.internal.connector.socket.TLSSocketChannel.runHandshake(TLSSocketChannel.java:131) at org.neo4j.driver.internal.connector.socket.TLSSocketChannel.&amp;lt;init&amp;gt;(TLSSocketChannel.java:95) at org.neo4j.driver.internal.connector.socket.TLSSocketChannel.&amp;lt;init&amp;gt;(TLSSocketChannel.java:77) at org.neo4j.driver.internal.connector.socket.TLSSocketChannel.&amp;lt;init&amp;gt;(TLSSocketChannel.java:70) at org.</description>
    </item>
    
    <item>
      <title>Neo4j vs Relational: Refactoring - Extracting node/table</title>
      <link>https://www.markhneedham.com/blog/2016/05/22/neo4j-vs-relational-refactoring-extracting-nodetable/</link>
      <pubDate>Sun, 22 May 2016 09:58:38 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/05/22/neo4j-vs-relational-refactoring-extracting-nodetable/</guid>
      <description>In my previous blog post I showed how to add a new property/field to a node with a label/record in a table for a football transfers dataset that I’ve been playing with.
After introducing this &amp;#39;nationality&amp;#39; property I realised that I now had some duplication in the model:
&amp;lt;/p&amp;gt;
players.nationality and clubs.country are referring to the same countries but they’ve both got them stored as strings so we can’t ensure the integrity of our countries and ensure that we’re referring to the same country.</description>
    </item>
    
    <item>
      <title>Neo4j vs Relational: Refactoring - Add a new field/property</title>
      <link>https://www.markhneedham.com/blog/2016/05/22/neo4j-vs-relational-refactoring-add-a-new-fieldproperty/</link>
      <pubDate>Sun, 22 May 2016 09:09:27 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/05/22/neo4j-vs-relational-refactoring-add-a-new-fieldproperty/</guid>
      <description>A couple of months ago I presented a webinar comparing how you’d model and evolve a data model using a Postgres SQL database and Neo4j.
This is what the two data models looked like after the initial data import and before any refactoring/migration had been done:
Relational
Graph
I wanted to add a &amp;#39;nationality&amp;#39; property to the players table in the SQL schema and to the nodes with the &amp;#39;Player&amp;#39; label in the graph.</description>
    </item>
    
    <item>
      <title>Neo4j: A procedure for the SLM clustering algorithm</title>
      <link>https://www.markhneedham.com/blog/2016/02/28/neo4j-a-procedure-for-the-slm-clustering-algorithm/</link>
      <pubDate>Sun, 28 Feb 2016 20:40:11 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/02/28/neo4j-a-procedure-for-the-slm-clustering-algorithm/</guid>
      <description>In the middle of last year I blogged about the Smart Local Moving algorithmwhich is used for community detection in networks and with the upcoming introduction of procedures in Neo4j I thought it’d be fun to make that code accessible as one.
If you want to grab the code and follow along it’s sitting on the SLM repository on my github.
At the moment the procedure is hard coded to work with a KNOWS relationship between two nodes but that could easily be changed.</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - avoid duplicate calls to NOT patterns</title>
      <link>https://www.markhneedham.com/blog/2016/01/17/neo4j-cypher-avoid-duplicate-calls-to-not-patterns/</link>
      <pubDate>Sun, 17 Jan 2016 12:19:35 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2016/01/17/neo4j-cypher-avoid-duplicate-calls-to-not-patterns/</guid>
      <description>I’ve been reacquainting myself with the meetup.com dataset ahead of Wednesday’s meetup in London and wanted to write a collaborative filtering type query to work out which groups people in my groups were in.
This started simple enough:
MATCH (member:Member {name: &amp;#34;Mark Needham&amp;#34;})-[:MEMBER_OF]-&amp;gt;(group:Group)&amp;lt;-[:MEMBER_OF]-(other:Member)-[:MEMBER_OF]-&amp;gt;(otherGroup:Group) RETURN otherGroup, COUNT(*) AS commonMembers ORDER BY commonMembers DESC LIMIT 5 And doesn’t take too long to run:
Cypher version: CYPHER 2.3, planner: COST. 1084378 total db hits in 1103 ms.</description>
    </item>
    
    <item>
      <title>2015: A year in the life of the Neo4j London meetup group</title>
      <link>https://www.markhneedham.com/blog/2015/12/31/2015-a-year-in-the-life-of-the-neo4j-london-meetup-group/</link>
      <pubDate>Thu, 31 Dec 2015 13:58:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/12/31/2015-a-year-in-the-life-of-the-neo4j-london-meetup-group/</guid>
      <description>Given we’ve only got a few more hours left of 2015 I thought it’d be fun to do a quick overview of how things have been going in the London chapter of the Neo4j meetup using Neo4j with a bit of R mixed in.
We’re going to be using the RNeo4j library to interact with the database along with a few other libraries which will help us out with different tasks:</description>
    </item>
    
    <item>
      <title>Neo4j: Specific relationship vs Generic relationship &#43; property</title>
      <link>https://www.markhneedham.com/blog/2015/12/13/neo4j-specific-relationship-vs-generic-relationship-property/</link>
      <pubDate>Sun, 13 Dec 2015 21:22:07 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/12/13/neo4j-specific-relationship-vs-generic-relationship-property/</guid>
      <description>For optimal traversal speed in Neo4j queries we should make our relationship types as specific as possible.
Let’s take a look at an example from the &amp;#39;modelling a recommendations engine&amp;#39; talk I presented at Skillsmatter a couple of weeks ago.
I needed to decided how to model the &amp;#39;RSVP&amp;#39; relationship between a Member and an Event. A person can RSVP &amp;#39;yes&amp;#39; or &amp;#39;no&amp;#39; to an event and I’d like to capture both of these responses.</description>
    </item>
    
    <item>
      <title>Neo4j: Facts as nodes</title>
      <link>https://www.markhneedham.com/blog/2015/12/04/neo4j-facts-as-nodes/</link>
      <pubDate>Fri, 04 Dec 2015 07:52:34 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/12/04/neo4j-facts-as-nodes/</guid>
      <description>On Tuesday I spoke at the Neo4j London user group about incrementally building a recommendation engine and described the &amp;#39;facts as nodes&amp;#39; modeling pattern, defined as follows in the Graph Databases book:
When two or more domain entities interact for a period of time, a fact emerges. We represent a fact as a separate node with connections to each of the entities engaged in that fact. Modeling an action in terms of its product—​that is, in terms of the thing that results from the action—​produces a similar structure: an intermediate node that represents the outcome of an interaction between two or more entities.</description>
    </item>
    
    <item>
      <title>Neo4j: Summarising neo4j-shell output</title>
      <link>https://www.markhneedham.com/blog/2015/08/21/neo4j-summarising-neo4j-shell-output/</link>
      <pubDate>Fri, 21 Aug 2015 20:59:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/08/21/neo4j-summarising-neo4j-shell-output/</guid>
      <description>&amp;lt;/p&amp;gt;
I frequently find myself trying to optimise a set of cypher queries and I tend to group them together in a script that I fed to the Neo4j shell. &amp;lt;/p&amp;gt;
When tweaking the queries it’s easy to make a mistake and end up not creating the same data so I decided to write a script which will show me the aggregates of all the commands executed.
I want to see the number of constraints created, indexes added, nodes, relationships and properties created.</description>
    </item>
    
    <item>
      <title>Neo4j 2.2.3: Unmanaged extensions - Creating gzipped streamed responses with Jetty</title>
      <link>https://www.markhneedham.com/blog/2015/08/10/neo4j-2-2-3-unmanaged-extensions-creating-gzipped-streamed-responses-with-jetty/</link>
      <pubDate>Mon, 10 Aug 2015 23:57:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/08/10/neo4j-2-2-3-unmanaged-extensions-creating-gzipped-streamed-responses-with-jetty/</guid>
      <description>Back in 2013 I wrote a couple of blog posts showing examples of an unmanaged extension which had a streamed and gzipped response but two years on I realised they were a bit out of date and deserved a refresh.
When writing unmanaged extensions in Neo4j a good rule of thumb is to try and reduce the amount of objects you keep hanging around. In this context this means that we should stream our response to the client as quickly as possible rather than building it up in memory and sending it in one go.</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Removing consecutive duplicates</title>
      <link>https://www.markhneedham.com/blog/2015/07/30/neo4j-cypher-removing-consecutive-duplicates/</link>
      <pubDate>Thu, 30 Jul 2015 06:23:03 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/07/30/neo4j-cypher-removing-consecutive-duplicates/</guid>
      <description>When writing Cypher queries I sometimes find myself wanting to remove consecutive duplicates in collections that I’ve joined together.
e.g we might start with the following query where 1 and 7 appear consecutively:
RETURN [1,1,2,3,4,5,6,7,7,8] AS values ==&amp;gt; +-----------------------+ ==&amp;gt; | values | ==&amp;gt; +-----------------------+ ==&amp;gt; | [1,1,2,3,4,5,6,7,7,8] | ==&amp;gt; +-----------------------+ ==&amp;gt; 1 row We want to end up with [1,2,3,4,5,6,7,8]. We can start by exploding our array and putting consecutive elements next to each other:</description>
    </item>
    
    <item>
      <title>Neo4j: MERGE&#39;ing on super nodes</title>
      <link>https://www.markhneedham.com/blog/2015/07/28/neo4j-mergeing-on-super-nodes/</link>
      <pubDate>Tue, 28 Jul 2015 21:04:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/07/28/neo4j-mergeing-on-super-nodes/</guid>
      <description>In my continued playing with the Chicago crime data set I wanted to connect the crimes committed to their position in the FBI crime type hierarchy.
These are the sub graphs that I want to connect:
We have a &amp;#39;fbiCode&amp;#39; on each &amp;#39;Crime&amp;#39; node which indicates which &amp;#39;Crime Sub Category&amp;#39; the crime belongs to.
I started with the following query to connect the nodes together:
MATCH (crime:Crime) WITH crime SKIP {skip} LIMIT 10000 MATCH (subCat:SubCategory {code: crime.</description>
    </item>
    
    <item>
      <title>Neo4j: From JSON to CSV to LOAD CSV via jq</title>
      <link>https://www.markhneedham.com/blog/2015/07/25/neo4j-from-json-to-csv-to-load-csv-via-jq/</link>
      <pubDate>Sat, 25 Jul 2015 23:05:33 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/07/25/neo4j-from-json-to-csv-to-load-csv-via-jq/</guid>
      <description>In my last blog post I showed how to import a Chicago crime categories &amp;amp; sub categories JSON document using Neo4j’s cypher query language via the py2neo driver. While this is a good approach for people with a developer background, many of the users I encounter aren’t developers and favour using Cypher via the Neo4j browser.
If we’re going to do this we’ll need to transform our JSON document into a CSV file so that we can use the LOAD CSV command on it.</description>
    </item>
    
    <item>
      <title>Neo4j: Loading JSON documents with Cypher</title>
      <link>https://www.markhneedham.com/blog/2015/07/23/neo4j-loading-json-documents-with-cypher/</link>
      <pubDate>Thu, 23 Jul 2015 06:15:11 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/07/23/neo4j-loading-json-documents-with-cypher/</guid>
      <description>One of the most commonly asked questions I get asked is how to load JSON documents into Neo4j and although Cypher doesn’t have a &amp;#39;LOAD JSON&amp;#39; command we can still get JSON data into the graph.
Michael shows how to do this from various languages in this blog post and I recently wanted to load a JSON document that I generated from Chicago crime types.
This is a snippet of the JSON document:</description>
    </item>
    
    <item>
      <title>Neo4j 2.2.3: neo4j-import - Encoder StringEncoder[2] returned an illegal encoded value 0</title>
      <link>https://www.markhneedham.com/blog/2015/07/21/neo4j-2-2-3-neo4j-import-encoder-stringencoder2-returned-an-illegal-encoded-value-0/</link>
      <pubDate>Tue, 21 Jul 2015 06:11:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/07/21/neo4j-2-2-3-neo4j-import-encoder-stringencoder2-returned-an-illegal-encoded-value-0/</guid>
      <description>I’ve been playing around with the Chicago crime data set again while preparing for a Neo4j webinar next week and while running the import tool ran into the following exception:
Importing the contents of these files into tmp/crimes.db: Nodes: /Users/markneedham/projects/neo4j-spark-chicago/tmp/crimes.csv /Users/markneedham/projects/neo4j-spark-chicago/tmp/beats.csv /Users/markneedham/projects/neo4j-spark-chicago/tmp/primaryTypes.csv /Users/markneedham/projects/neo4j-spark-chicago/tmp/locations.csv Relationships: /Users/markneedham/projects/neo4j-spark-chicago/tmp/crimesBeats.csv /Users/markneedham/projects/neo4j-spark-chicago/tmp/crimesPrimaryTypes.csv /Users/markneedham/projects/neo4j-spark-chicago/tmp/crimesLocationsCleaned.csv Available memory: Free machine memory: 263.17 MB Max heap memory : 3.56 GB Nodes [*&amp;gt;:17.41 MB/s-------------------------|PROPERTIES(3)=|NODE:3|LABEL SCAN----|v:36.30 MB/s(2)===] 3MImport error: Panic called, so exiting java.</description>
    </item>
    
    <item>
      <title>Neo4j: The football transfers graph</title>
      <link>https://www.markhneedham.com/blog/2015/07/16/neo4j-the-football-transfers-graph/</link>
      <pubDate>Thu, 16 Jul 2015 06:40:26 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/07/16/neo4j-the-football-transfers-graph/</guid>
      <description>Given we’re still in pre season transfer madness as far as European football is concerned I thought it’d be interesting to put together a football transfers graph to see whether there are any interesting insights to be had.
It took me a while to find an appropriate source but I eventually came across transfermarkt.co.uk which contains transfers going back at least as far as the start of the Premier League in 1992.</description>
    </item>
    
    <item>
      <title>Northwind: Finding direct/transitive Reports in SQL and Neo4j&#39;s Cypher</title>
      <link>https://www.markhneedham.com/blog/2015/06/15/northwind-finding-directtransitive-reports-in-sql-and-neo4js-cypher/</link>
      <pubDate>Mon, 15 Jun 2015 22:53:33 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/06/15/northwind-finding-directtransitive-reports-in-sql-and-neo4js-cypher/</guid>
      <description>Every few months we run a relational to graph meetup at the Neo London office where we go through how to take your data from a relational database and into the graph.
We use the Northwind dataset which often comes as a demo dataset on relational databases and come up with some queries which seem graph in nature.
My favourite query is one which finds out how employees are organised and who reports to whom.</description>
    </item>
    
    <item>
      <title>Neo4j: Using LOAD CSV to help explore CSV files</title>
      <link>https://www.markhneedham.com/blog/2015/06/11/neo4j-using-load-csv-to-help-explore-csv-files/</link>
      <pubDate>Thu, 11 Jun 2015 23:15:06 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/06/11/neo4j-using-load-csv-to-help-explore-csv-files/</guid>
      <description>During the Neo4j How I met your mother hackathon that we ran last week one of the attendees noticed that one of the CSV files we were importing wasn’t creating as many records as they expected it to.
This is typically the case when there’s some odd quoting in the CSV file but we decided to look into it.
The file in question was one containing references made in HIMYM.</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Step by step to creating a linked list of adjacent nodes using UNWIND</title>
      <link>https://www.markhneedham.com/blog/2015/06/04/neo4j-cypher-step-by-step-to-creating-a-linked-list-of-adjacent-nodes-using-unwind/</link>
      <pubDate>Thu, 04 Jun 2015 22:17:34 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/06/04/neo4j-cypher-step-by-step-to-creating-a-linked-list-of-adjacent-nodes-using-unwind/</guid>
      <description>In late 2013 I wrote a post showing how to create a linked list connecting different football seasons together using Neo4j’s Cypher query language, a post I’ve frequently copy &amp;amp; pasted from!
Now 18 months later, and using Neo4j 2.2 rather than 2.0, we can actually solve this problem in what I believe is a more intuitive way using the http://neo4j.com/docs/stable/query-unwind.html function. Credit for the idea goes to Michael, I’m just the messenger.</description>
    </item>
    
    <item>
      <title>Neo4j: The BBC Champions League graph</title>
      <link>https://www.markhneedham.com/blog/2015/05/30/neo4j-the-bbc-champions-league-graph/</link>
      <pubDate>Sat, 30 May 2015 21:45:07 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/05/30/neo4j-the-bbc-champions-league-graph/</guid>
      <description>A couple of weekends ago I started scraping the BBC live text feed of the Bayern Munich/Barcelona match, initially starting out with just the fouls and building the foul graph.
I’ve spent a bit more time on it since then and have managed to model several other events as well including attempts, goals, cards and free kicks.
I started doing this just for the Bayern Munich/Barcelona match but realised it wasn’t particularly difficult to extend this out and graph the events for every match in the Champions League 2014/2015.</description>
    </item>
    
    <item>
      <title>Neo4j: The foul revenge graph</title>
      <link>https://www.markhneedham.com/blog/2015/05/26/neo4j-the-foul-revenge-graph/</link>
      <pubDate>Tue, 26 May 2015 07:03:36 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/05/26/neo4j-the-foul-revenge-graph/</guid>
      <description>Last week I was showing the foul graph to my colleague Alistair who came up with the idea of running a &amp;#39;foul revenge&amp;#39; query to find out which players gained revenge for a foul with one of their own later in them match.
Queries like this are very path centric and therefore work well in a graph. To recap, this is what the foul graph looks like:
The first thing that we need to do is connect the fouls in a linked list based on time so that we can query their order more easily.</description>
    </item>
    
    <item>
      <title>Neo4j: Finding all shortest paths</title>
      <link>https://www.markhneedham.com/blog/2015/05/19/neo4j-finding-all-shortest-paths/</link>
      <pubDate>Tue, 19 May 2015 22:45:48 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/05/19/neo4j-finding-all-shortest-paths/</guid>
      <description>One of the Cypher language features we show in Neo4j training courses is the shortest path function which allows you to find the shortest path in terms of number of relationships between two nodes.
Using the movie graph, which you can import via the &amp;#39;:play movies&amp;#39; command in the browser, we’ll first create a &amp;#39;KNOWS&amp;#39; relationship between any people that have appeared in the same movie:
MATCH (p1:Person)-[:ACTED_IN]-&amp;gt;()&amp;lt;-[:ACTED_IN]-(p2:Person) MERGE (p1)-[:KNOWS]-(p2) Now that we’ve got that relationship we can easily find the shortest path between two people, say Tom Cruise and Tom Hanks:</description>
    </item>
    
    <item>
      <title>Neo4j: Refactoring the BBC football live text fouls graph</title>
      <link>https://www.markhneedham.com/blog/2015/05/17/neo4j-refactoring-the-bbc-football-live-text-fouls-graph/</link>
      <pubDate>Sun, 17 May 2015 11:04:59 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/05/17/neo4j-refactoring-the-bbc-football-live-text-fouls-graph/</guid>
      <description>Yesterday I wrote about a Neo4j graph I’ve started building which contains all the fouls committed in the Champions League game between Barcelona &amp;amp; Bayern Munich and surrounding meta data.
While adding other events into the graph I realised that I’d added some duplication in the model and the model could do with some refactoring to make it easier to use.
To recap, this is the model that we designed in the previous blog post:</description>
    </item>
    
    <item>
      <title>Neo4j: BBC football live text fouls graph</title>
      <link>https://www.markhneedham.com/blog/2015/05/16/neo4j-bbc-football-live-text-fouls-graph/</link>
      <pubDate>Sat, 16 May 2015 21:13:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/05/16/neo4j-bbc-football-live-text-fouls-graph/</guid>
      <description>I recently came across the Partially Derivative podcast and in episode 17 they describe how Kirk Goldsberry scraped a bunch of data about shots in basketball matches then ran some analysis on that data.
It got me thinking that we might be able to do something similar for football matches and although event based data for football matches only comes from Opta, the BBC does expose some of them in live text feeds.</description>
    </item>
    
    <item>
      <title>R: ggplot - Displaying multiple charts with a for loop</title>
      <link>https://www.markhneedham.com/blog/2015/05/14/r-ggplot-displaying-multiple-charts-with-a-for-loop/</link>
      <pubDate>Thu, 14 May 2015 00:17:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/05/14/r-ggplot-displaying-multiple-charts-with-a-for-loop/</guid>
      <description>Continuing with my analysis of the Neo4j London user group I wanted to drill into some individual meetups and see the makeup of the people attending those meetups with respect to the cohort they belong to.
I started by writing a function which would take in an event ID and output a bar chart showing the number of people who attended that event from each cohort. &amp;lt;?p&amp;gt;
We can work out the cohort that a member belongs to by querying for the first event they attended.</description>
    </item>
    
    <item>
      <title>Neo4j: LOAD CSV - java.io.InputStreamReader there&#39;s a field starting with a quote and whereas it ends that quote there seems  to be character in that field after that ending quote. That isn&#39;t supported.</title>
      <link>https://www.markhneedham.com/blog/2015/05/04/neo4j-load-csv-java-io-inputstreamreader-theres-a-field-starting-with-a-quote-and-whereas-it-ends-that-quote-there-seems-to-be-character-in-that-field-after-that-ending-quote-that-isnt-suppor/</link>
      <pubDate>Mon, 04 May 2015 09:56:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/05/04/neo4j-load-csv-java-io-inputstreamreader-theres-a-field-starting-with-a-quote-and-whereas-it-ends-that-quote-there-seems-to-be-character-in-that-field-after-that-ending-quote-that-isnt-suppor/</guid>
      <description>I recently came across the last.fm dataset via Ben Frederickson’s blog and thought it’d be an interesting one to load into Neo4j and explore.
I started with a simple query to parse the CSV file and count the number of rows:
LOAD CSV FROM &amp;#34;file:///Users/markneedham/projects/neo4j-recommendations/lastfm-dataset-360K/usersha1-artmbid-artname-plays.tsv&amp;#34; AS row FIELDTERMINATOR &amp;#34;\t&amp;#34; return COUNT(*) At java.io.InputStreamReader@4d307fda:6484 there&amp;#39;s a field starting with a quote and whereas it ends that quote there seems to be character in that field after that ending quote.</description>
    </item>
    
    <item>
      <title>Neo4j: The learning to cycle dependency graph</title>
      <link>https://www.markhneedham.com/blog/2015/04/07/neo4j-the-learning-to-cycle-dependency-graph/</link>
      <pubDate>Tue, 07 Apr 2015 20:59:49 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/04/07/neo4j-the-learning-to-cycle-dependency-graph/</guid>
      <description>Over the past couple of weeks I’ve been reading about skill building and the break down of skills into more manageable chunks, and recently had a chance to break down the skills required to learn to cycle.
I initially sketched out the skill progression but quickly realised I had drawn a dependency graph and thought that putting it into Neo4j would simplify things.
I started out with the overall goal for cycling which was to &amp;#39;Be able to cycle through a public park&amp;#39;:</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Building the query for a movie&#39;s profile page</title>
      <link>https://www.markhneedham.com/blog/2015/04/01/neo4j-cypher-building-the-query-for-a-movies-profile-page/</link>
      <pubDate>Wed, 01 Apr 2015 11:54:03 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/04/01/neo4j-cypher-building-the-query-for-a-movies-profile-page/</guid>
      <description>Yesterday I spent the day in Berlin delivering a workshop as part of the Data Science Retreat and one of the exercises we did was write a query that would pull back all the information you’d need to create the IMDB page for a movie.
Scanning the page we can see that need to get some basic meta data including the title. Next we’ll need to pull in the actors, directors, producers and finally a recommendation for some other movies the viewer might like to see.</description>
    </item>
    
    <item>
      <title>Neo4j: Generating real time recommendations with Cypher</title>
      <link>https://www.markhneedham.com/blog/2015/03/27/neo4j-generating-real-time-recommendations-with-cypher/</link>
      <pubDate>Fri, 27 Mar 2015 06:59:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/03/27/neo4j-generating-real-time-recommendations-with-cypher/</guid>
      <description>One of the most common uses of Neo4j is for building real time recommendation engines and a common theme is that they make use of lots of different bits of data to come up with an interesting recommendation.
For example in this video Amanda shows how dating websites build real time recommendation engines by starting with social connections and then introducing passions, location and a few other things.
Graph Aware have a neat framework that helps you to build your own recommendation engine using Java and I was curious what a Cypher version would look like.</description>
    </item>
    
    <item>
      <title>Neo4j: Detecting potential typos using EXPLAIN</title>
      <link>https://www.markhneedham.com/blog/2015/03/17/neo4j-detecting-potential-typos-using-explain/</link>
      <pubDate>Tue, 17 Mar 2015 22:46:13 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/03/17/neo4j-detecting-potential-typos-using-explain/</guid>
      <description>I’ve been running a few intro to Neo4j training sessions recently using Neo4j 2.2.0 RC1 and at some stage in every session somebody will make a typo when writing out of the example queries.
For example one of the queries that we do about half way finds the actors and directors who have worked together and aggregates the movies they were in.
This is the correct query:
MATCH (actor:Person)-[:ACTED_IN]-&amp;gt;(movie)&amp;lt;-[:DIRECTED]-(director) RETURN actor.</description>
    </item>
    
    <item>
      <title>Python/Neo4j: Finding interesting computer sciency people to follow on Twitter</title>
      <link>https://www.markhneedham.com/blog/2015/03/11/pythonneo4j-finding-interesting-computer-sciency-people-to-follow-on-twitter/</link>
      <pubDate>Wed, 11 Mar 2015 21:13:26 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/03/11/pythonneo4j-finding-interesting-computer-sciency-people-to-follow-on-twitter/</guid>
      <description>At the beginning of this year I moved from Neo4j’s field team to dev team and since the code we write there is much lower level than I’m used to I thought I should find some people to follow on twitter whom I can learn from.
My technique for finding some of those people was to pick a person from the Neo4j kernel team who’s very good at systems programming and uses twitter which led me to Mr Chris Vest.</description>
    </item>
    
    <item>
      <title>Neo4j: TF/IDF (and variants) with cypher</title>
      <link>https://www.markhneedham.com/blog/2015/03/08/neo4j-tfidf-and-variants-with-cypher/</link>
      <pubDate>Sun, 08 Mar 2015 13:24:19 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/03/08/neo4j-tfidf-and-variants-with-cypher/</guid>
      <description>A few weeks ago I wrote a blog post on running TF/IDF over HIMYM transcripts using scikit-learn to find the most important phrases by episode and afterwards I was curious how difficult it’d be to do in Neo4j.
I started by translating one of wikipedia’s TF/IDF examples to cypher to see what the algorithm would look like:
WITH 3 as termFrequency, 2 AS numberOfDocuments, 1 as numberOfDocumentsWithTerm WITH termFrequency, log10(numberOfDocuments / numberOfDocumentsWithTerm) AS inverseDocumentFrequency return termFrequency * inverseDocumentFrequency 0.</description>
    </item>
    
    <item>
      <title>Python&#39;s pandas vs Neo4j&#39;s cypher: Exploring popular phrases in How I met your mother transcripts</title>
      <link>https://www.markhneedham.com/blog/2015/02/19/pythons-pandas-vs-neo4js-cypher-exploring-popular-phrases-in-how-i-met-your-mother-transcripts/</link>
      <pubDate>Thu, 19 Feb 2015 00:52:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/02/19/pythons-pandas-vs-neo4js-cypher-exploring-popular-phrases-in-how-i-met-your-mother-transcripts/</guid>
      <description>I’ve previously written about extracting TF/IDF scores for phrases in documents using scikit-learn and the final step in that post involved writing the words into a CSV file for analysis later on.
I wasn’t sure what the most appropriate tool of choice for that analysis was so I decided to explore the data using Python’s pandas library and load it into Neo4j and write some Cypher queries.
To do anything with Neo4j we need to first load the CSV file into the database.</description>
    </item>
    
    <item>
      <title>Neo4j: Building a topic graph with Prismatic Interest Graph API</title>
      <link>https://www.markhneedham.com/blog/2015/02/13/neo4j-building-a-topic-graph-with-prismatic-interest-graph-api/</link>
      <pubDate>Fri, 13 Feb 2015 23:38:43 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/02/13/neo4j-building-a-topic-graph-with-prismatic-interest-graph-api/</guid>
      <description>Over the last few weeks I’ve been using various NLP libraries to derive topics for my corpus of How I met your mother episodes without success and was therefore enthused to see the release of Prismatic’s Interest Graph API
The Interest Graph API exposes a web service to which you feed a block of text and get back a set of topics and associated score.
It has been trained over the last few years with millions of articles that people share on their social media accounts and in my experience using Prismatic the topics have been very useful for finding new material to read.</description>
    </item>
    
    <item>
      <title>Python NLTK/Neo4j: Analysing the transcripts of How I Met Your Mother</title>
      <link>https://www.markhneedham.com/blog/2015/01/10/python-nltkneo4j-analysing-the-transcripts-of-how-i-met-your-mother/</link>
      <pubDate>Sat, 10 Jan 2015 01:22:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2015/01/10/python-nltkneo4j-analysing-the-transcripts-of-how-i-met-your-mother/</guid>
      <description>After reading Emil’s blog post about dark data a few weeks ago I became intrigued about trying to find some structure in free text data and I thought How I met your mother’s transcripts would be a good place to start.
I found a website which has the transcripts for all the episodes and then having manually downloaded the two pages which listed all the episodes, wrote a script to grab each of the transcripts so I could use them on my machine.</description>
    </item>
    
    <item>
      <title>Neo4j 2.1.6 - Cypher: FOREACH slowness</title>
      <link>https://www.markhneedham.com/blog/2014/12/28/neo4j-2-1-6-cypher-foreach-slowness/</link>
      <pubDate>Sun, 28 Dec 2014 04:28:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/12/28/neo4j-2-1-6-cypher-foreach-slowness/</guid>
      <description>A common problem that people have when using Neo4j for social network applications is updating a person with their newly imported friends.
We’ll have an array of friends that we want to connect to a single Person node. Assuming the following schema…​
$ schema Indexes ON :Person(id) ONLINE No constraints …​a simplified version would look like this:
WITH range (2,1002) AS friends MERGE (p:Person {id: 1}) FOREACH(f IN friends | MERGE (friend:Person {id: f}) MERGE (friend)-[:FRIENDS]-&amp;gt;p); If we execute that on an empty database we’ll see something like this:</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Avoiding the Eager</title>
      <link>https://www.markhneedham.com/blog/2014/10/23/neo4j-cypher-avoiding-the-eager/</link>
      <pubDate>Thu, 23 Oct 2014 05:56:57 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/10/23/neo4j-cypher-avoiding-the-eager/</guid>
      <description>Although I love how easy Cypher’s LOAD CSV command makes it to get data into Neo4j, it currently breaks the rule of least surprise in the way it eagerly loads in all rows for some queries even those using periodic commit.
This is something that my colleague Michael noted in the second of his blog posts explaining how to use LOAD CSV successfully:
The biggest issue that people ran into, even when following the advice I gave earlier, was that for large imports of more than one million rows, Cypher ran into an out-of-memory situation.</description>
    </item>
    
    <item>
      <title>Neo4j: Modelling sub types</title>
      <link>https://www.markhneedham.com/blog/2014/10/20/neo4j-modelling-sub-types/</link>
      <pubDate>Mon, 20 Oct 2014 23:08:45 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/10/20/neo4j-modelling-sub-types/</guid>
      <description>A question which sometimes comes up when discussing graph data modelling is how you go about modelling sub/super types.
In my experience there are two reasons why we might want to do this:
To ensure that certain properties exist on bits of data
To write drill down queries based on those types
At the moment the former isn’t built into Neo4j and you’d only be able to achieve it by wiring up some code in a pre commit hook of a transaction event handler so we’ll focus on the latter.</description>
    </item>
    
    <item>
      <title>Lessons from running Neo4j based &#39;hackathons&#39;</title>
      <link>https://www.markhneedham.com/blog/2014/10/11/lessons-from-running-neo4j-based-hackathons/</link>
      <pubDate>Sat, 11 Oct 2014 10:52:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/10/11/lessons-from-running-neo4j-based-hackathons/</guid>
      <description>Over the last 6 months my colleagues and I have been running hands on Neo4j based sessions every few weeks and I was recently asked if I could write up the lessons we’ve learned.
So in no particular order here are some of the things that we’ve learnt:
Have a plan but don’t stick to it rigidly Something we learnt early on is that it’s helpful to have a rough plan of how you’re going to spend the session otherwise it can feel quite chaotic for attendees.</description>
    </item>
    
    <item>
      <title>Neo4j: Generic/Vague relationship names</title>
      <link>https://www.markhneedham.com/blog/2014/09/30/neo4j-genericvague-relationship-names/</link>
      <pubDate>Tue, 30 Sep 2014 16:47:29 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/09/30/neo4j-genericvague-relationship-names/</guid>
      <description>An approach to modelling that I often see while working with Neo4j users is creating very generic relationships (e.g. HAS, CONTAINS, IS) and filtering on a relationship property or on a property/label at the end node.
Intuitively this doesn’t seem to make best use of the graph model as it means that you have to evaluate many relationships and nodes that you’re not interested in.
However, I’ve never actually tested the performance differences between the approaches so I thought I’d try it out.</description>
    </item>
    
    <item>
      <title>Neo4j: COLLECTing multiple values (Too many parameters for function &#39;collect&#39;)</title>
      <link>https://www.markhneedham.com/blog/2014/09/26/neo4j-collecting-multiple-values-too-many-parameters-for-function-collect/</link>
      <pubDate>Fri, 26 Sep 2014 20:46:50 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/09/26/neo4j-collecting-multiple-values-too-many-parameters-for-function-collect/</guid>
      <description>One of my favourite functions in Neo4j’s cypher query language is COLLECT which allows us to group items into an array for later consumption.
However, I’ve noticed that people sometimes have trouble working out how to collect multiple items with COLLECT and struggle to find a way to do so.
Consider the following data set:
create (p:Person {name: &amp;#34;Mark&amp;#34;}) create (e1:Event {name: &amp;#34;Event1&amp;#34;, timestamp: 1234}) create (e2:Event {name: &amp;#34;Event2&amp;#34;, timestamp: 4567}) create (p)-[:EVENT]-&amp;gt;(e1) create (p)-[:EVENT]-&amp;gt;(e2) If we wanted to return each person along with a collection of the event names they’d participated in we could write the following:</description>
    </item>
    
    <item>
      <title>Neo4j: LOAD CSV - Column is null</title>
      <link>https://www.markhneedham.com/blog/2014/09/24/neo4j-load-csv-column-is-null/</link>
      <pubDate>Wed, 24 Sep 2014 20:21:59 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/09/24/neo4j-load-csv-column-is-null/</guid>
      <description>One problem I’ve seen a few people have recently when using Neo4j’s LOAD CSV function is dealing with CSV files that have dodgy hidden characters at the beginning of the header line.
For example, consider an import of this CSV file:
$ cat ~/Downloads/dodgy.csv userId,movieId 1,2 We might start by checking which columns it has:
$ load csv with headers from &amp;#34;file:/Users/markneedham/Downloads/dodgy.csv&amp;#34; as line return line; +----------------------------------+ | line | +----------------------------------+ | {userId -&amp;gt; &amp;#34;1&amp;#34;, movieId -&amp;gt; &amp;#34;2&amp;#34;} | +----------------------------------+ 1 row Looks good so far but what about if we try to return just &amp;#39;userId&amp;#39;?</description>
    </item>
    
    <item>
      <title>Neo4j: LOAD CSV - Handling empty columns</title>
      <link>https://www.markhneedham.com/blog/2014/08/22/neo4j-load-csv-handling-empty-columns/</link>
      <pubDate>Fri, 22 Aug 2014 12:51:36 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/08/22/neo4j-load-csv-handling-empty-columns/</guid>
      <description>A common problem that people encounter when trying to import CSV files into Neo4j using Cypher’s LOAD CSV command is how to handle empty or &amp;#39;null&amp;#39; entries in said files.
For example let’s try and import the following file which has 3 columns, 1 populated, 2 empty:
$ cat /tmp/foo.csv a,b,c mark,, load csv with headers from &amp;#34;file:/tmp/foo.csv&amp;#34; as row MERGE (p:Person {a: row.a}) SET p.b = row.b, p.c = row.</description>
    </item>
    
    <item>
      <title>Neo4j 2.1.2: Finding where I am in a linked list</title>
      <link>https://www.markhneedham.com/blog/2014/07/20/neo4j-2-1-2-finding-where-i-am-in-a-linked-list/</link>
      <pubDate>Sun, 20 Jul 2014 15:13:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/07/20/neo4j-2-1-2-finding-where-i-am-in-a-linked-list/</guid>
      <description>I was recently asked how to calculate the position of a node in a linked list and realised that as the list increases in size this is one of the occasions when we should write an unmanaged extension rather than using cypher.
I wrote a quick bit of code to create a linked list with 10,000 elements in it:
public class Chains { public static void main(String[] args) { String simpleChains = &amp;#34;/tmp/longchains&amp;#34;; populate( simpleChains, 10000 ); } private static void populate( String path, int chainSize ) { GraphDatabaseService db = new GraphDatabaseFactory().</description>
    </item>
    
    <item>
      <title>Neo4j: LOAD CSV - Processing hidden arrays in your CSV documents</title>
      <link>https://www.markhneedham.com/blog/2014/07/10/neo4j-load-csv-processing-hidden-arrays-in-your-csv-documents/</link>
      <pubDate>Thu, 10 Jul 2014 14:54:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/07/10/neo4j-load-csv-processing-hidden-arrays-in-your-csv-documents/</guid>
      <description>I was recently asked how to process an &amp;#39;array&amp;#39; of values inside a column in a CSV file using Neo4j’s LOAD CSV tool and although I initially thought this wouldn’t be possible as every cell is treated as a String, Michael showed me a way of working around this which I thought was pretty neat.
Let’s say we have a CSV file representing people and their friends. It might look like this:</description>
    </item>
    
    <item>
      <title>Neo4j/R: Grouping meetup members by join timestamp</title>
      <link>https://www.markhneedham.com/blog/2014/06/30/neo4jr-grouping-meetup-members-by-join-timestamp/</link>
      <pubDate>Mon, 30 Jun 2014 00:06:54 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/06/30/neo4jr-grouping-meetup-members-by-join-timestamp/</guid>
      <description>I wanted to do some ad-hoc analysis on the join date of members of the Neo4j London meetup group and since cypher doesn’t yet have functions for dealings with dates I thought I’d give R a try.
I started off by executing a cypher query which returned the join timestamp of all the group members using Nicole White’s RNeo4j package:
&amp;gt; library(Rneo4j) &amp;gt; query = &amp;#34;match (:Person)-[:HAS_MEETUP_PROFILE]-&amp;gt;()-[:HAS_MEMBERSHIP]-&amp;gt;(membership)-[:OF_GROUP]-&amp;gt;(g:Group {name: \&amp;#34;Neo4j - London User Group\&amp;#34;}) RETURN membership.</description>
    </item>
    
    <item>
      <title>Neo4j: Set Based Operations with the experimental Cypher optimiser</title>
      <link>https://www.markhneedham.com/blog/2014/06/29/neo4j-set-based-operations-with-the-experimental-cypher-optimiser/</link>
      <pubDate>Sun, 29 Jun 2014 08:45:34 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/06/29/neo4j-set-based-operations-with-the-experimental-cypher-optimiser/</guid>
      <description>A few months ago I wrote about cypher queries which look for a missing relationship and showed how you could optimise them by re-working the query slightly.
To refresh, we wanted to find all the people in the London office that I hadn’t worked with given this model...
&amp;lt;/img&amp;gt;
...and this initial query:
MATCH (p:Person {name: &amp;#34;me&amp;#34;})-[:MEMBER_OF]-&amp;gt;(office {name: &amp;#34;London Office&amp;#34;})&amp;lt;-[:MEMBER_OF]-(colleague) WHERE NOT (p-[:COLLEAGUES]-&amp;gt;(colleague)) RETURN COUNT(colleague) This took on average 7.</description>
    </item>
    
    <item>
      <title>Neo4j&#39;s Cypher vs Clojure - Group by and Sorting</title>
      <link>https://www.markhneedham.com/blog/2014/06/29/neo4j-cypher-vs-clojure-for-group-by-and-sorting/</link>
      <pubDate>Sun, 29 Jun 2014 02:56:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/06/29/neo4j-cypher-vs-clojure-for-group-by-and-sorting/</guid>
      <description>One of the points that I emphasised during my talk on building Neo4j backed applications using Clojure last week is understanding when to use Cypher to solve a problem and when to use the programming language.
A good example of this is in the meetup application I’ve been working on. I have a collection of events and want to display past events in descending order and future events in ascending order.</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Finding movies by decade</title>
      <link>https://www.markhneedham.com/blog/2014/06/28/neo4j-cypher-finding-movies-by-decade/</link>
      <pubDate>Sat, 28 Jun 2014 11:12:30 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/06/28/neo4j-cypher-finding-movies-by-decade/</guid>
      <description>I was recently asked how to find the number of movies produced per decade in the movie data set that comes with the Neo4j browser and can be imported with the following command:
:play movies We want to get one row per decade and have a count alongside so the easiest way is to start with one decade and build from there.
MATCH (movie:Movie) WHERE movie.released &amp;gt;= 1990 and movie.</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Separation of concerns</title>
      <link>https://www.markhneedham.com/blog/2014/06/27/neo4j-cypher-separation-of-concerns/</link>
      <pubDate>Fri, 27 Jun 2014 10:51:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/06/27/neo4j-cypher-separation-of-concerns/</guid>
      <description>While preparing my talk on building Neo4j backed applications with Clojure I realised that some of the queries I’d written were incredibly complicated and went against anything I’d learnt about separating different concerns.
One example of this was the query I used to generate the data for the following page of the meetup application I’ve been working on:
Depending on the selected tab you can choose to see the people signed up for the meetup and the date that they signed up or the topics that those people are interested in.</description>
    </item>
    
    <item>
      <title>Neo4j: LOAD CSV - Handling conditionals</title>
      <link>https://www.markhneedham.com/blog/2014/06/17/neo4j-load-csv-handling-conditionals/</link>
      <pubDate>Tue, 17 Jun 2014 23:41:35 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/06/17/neo4j-load-csv-handling-conditionals/</guid>
      <description>While building up the Neo4j World Cup Graph I’ve been making use of the http://neo4j.com/blog/neo4j-2-1-graph-etl function and I frequently found myself needing to do different things depending on the value in one of the columns.
For example I have one CSV file which contains the different events that can happen in a football match:
match_id,player,player_id,time,type &amp;#34;1012&amp;#34;,&amp;#34;Antonin Panenka&amp;#34;,&amp;#34;174835&amp;#34;,21,&amp;#34;penalty&amp;#34; &amp;#34;1012&amp;#34;,&amp;#34;Faisal Al Dakhil&amp;#34;,&amp;#34;2204&amp;#34;,57,&amp;#34;goal&amp;#34; &amp;#34;102&amp;#34;,&amp;#34;Roger Milla&amp;#34;,&amp;#34;79318&amp;#34;,106,&amp;#34;goal&amp;#34; &amp;#34;102&amp;#34;,&amp;#34;Roger Milla&amp;#34;,&amp;#34;79318&amp;#34;,108,&amp;#34;goal&amp;#34; &amp;#34;102&amp;#34;,&amp;#34;Bernardo Redin&amp;#34;,&amp;#34;44555&amp;#34;,115,&amp;#34;goal&amp;#34; &amp;#34;102&amp;#34;,&amp;#34;Andre Kana-biyik&amp;#34;,&amp;#34;174649&amp;#34;,44,&amp;#34;yellow&amp;#34; If the type is &amp;#39;penalty&amp;#39;, &amp;#39;owngoal&amp;#39; or &amp;#39;goal&amp;#39; then I want to create a SCORED_GOAL relationship whereas if it’s &amp;#39;yellow&amp;#39;, &amp;#39;yellowred&amp;#39; or &amp;#39;red&amp;#39; then I want to create a RECEIVED_CARD relationship instead.</description>
    </item>
    
    <item>
      <title>Neo4j Meetup Coding Dojo Style</title>
      <link>https://www.markhneedham.com/blog/2014/05/31/neo4j-meetup-coding-dojo-style/</link>
      <pubDate>Sat, 31 May 2014 22:55:33 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/05/31/neo4j-meetup-coding-dojo-style/</guid>
      <description>A few weeks ago we ran a http://www.meetup.com/graphdb-london/events/179211972/ meetup in the Neo4j London office during which we worked with the meta data around 1 million images recently released into the public domain by the British Library.
Feedback from previous meetups had indicated that attendees wanted to practice modelling a domain from scratch and understand the options for importing said model into the database. This data set seemed perfect for this purpose.</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - UNWIND vs FOREACH</title>
      <link>https://www.markhneedham.com/blog/2014/05/31/neo4j-cypher-unwind-vs-foreach/</link>
      <pubDate>Sat, 31 May 2014 14:19:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/05/31/neo4j-cypher-unwind-vs-foreach/</guid>
      <description>I’ve written a couple of posts about the new UNWIND clause in Neo4j’s cypher query language but I forgot about my favourite use of UNWIND, which is to get rid of some uses of FOREACH from our queries.
Let’s say we’ve created a timetree up front and now have a series of events coming in that we want to create in the database and attach to the appropriate part of the timetree.</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Neo.ClientError.Statement.ParameterMissing and neo4j-shell</title>
      <link>https://www.markhneedham.com/blog/2014/05/31/neo4j-cypher-neo-clienterror-statement-parametermissing-and-neo4j-shell/</link>
      <pubDate>Sat, 31 May 2014 12:44:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/05/31/neo4j-cypher-neo-clienterror-statement-parametermissing-and-neo4j-shell/</guid>
      <description>Every now and then I get sent Neo4j cypher queries to look at and more often than not they’re parameterised which means you can’t easily run them in the Neo4j browser.
For example let’s say we have a database which has a user called &amp;#39;Mark&amp;#39;:
CREATE (u:User {name: &amp;#34;Mark&amp;#34;}) Now we write a query to find &amp;#39;Mark&amp;#39; with the name parameterised so we can easily search for a different user in future:</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Rounding a float value to decimal places</title>
      <link>https://www.markhneedham.com/blog/2014/05/25/neo4j-cypher-rounding-a-float-value-to-decimal-places/</link>
      <pubDate>Sun, 25 May 2014 22:17:35 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/05/25/neo4j-cypher-rounding-a-float-value-to-decimal-places/</guid>
      <description>About 6 months ago Jacqui Read created a github issue explaining how she wanted to round a float value to a number of decimal places but was unable to do so due to the http://docs.neo4j.org/chunked/stable/query-functions-mathematical.html#functions-round function not taking the appropriate parameter.
I found myself wanting to do the same thing last week where I initially had the following value:
RETURN toFloat(&amp;#34;12.336666&amp;#34;) AS value I wanted to round that to 2 decimal places and Wes suggested multiplying the value before using ROUND and then dividing afterwards to achieve that.</description>
    </item>
    
    <item>
      <title>Neo4j 2.1:  Passing around node ids vs UNWIND</title>
      <link>https://www.markhneedham.com/blog/2014/05/25/neo4j-2-1-passing-around-node-ids-vs-unwind/</link>
      <pubDate>Sun, 25 May 2014 10:48:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/05/25/neo4j-2-1-passing-around-node-ids-vs-unwind/</guid>
      <description>When Neo4j 2.1 is released we’ll have the UNWIND clause which makes working with collections of things easier.
In my blog post about creating adjacency matrices we wanted to show how many people were members of the first 5 meetup groups ordered alphabetically and then check how many were members of each of the other groups.
Without the UNWIND clause we’d have to do this:
MATCH (g:Group) WITH g ORDER BY g.</description>
    </item>
    
    <item>
      <title>Neo4j 2.1: Creating adjacency matrices</title>
      <link>https://www.markhneedham.com/blog/2014/05/20/neo4j-2-0-creating-adjacency-matrices/</link>
      <pubDate>Tue, 20 May 2014 23:14:07 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/05/20/neo4j-2-0-creating-adjacency-matrices/</guid>
      <description>About 9 months ago I wrote a blog post showing how to export an adjacency matrix from a Neo4j 1.9 database using the cypher query language and I thought it deserves an update to use 2.0 syntax.
I’ve been spending some of my free time working on an application that runs on top of meetup.com’s API and one of the queries I wanted to write was to find the common members between 2 meetup groups.</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Flatten a collection</title>
      <link>https://www.markhneedham.com/blog/2014/04/23/neo4j-cypher-flatten-a-collection/</link>
      <pubDate>Wed, 23 Apr 2014 22:02:19 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/04/23/neo4j-cypher-flatten-a-collection/</guid>
      <description>Every now and then in Cypher land we’ll end up with a collection of arrays, often created via the COLLECT function, that we want to squash down into one array.
For example let’s say we have the following array of arrays...
$ RETURN [[1,2,3], [4,5,6], [7,8,9]] AS result; ==&amp;gt; +---------------------------+ ==&amp;gt; | result | ==&amp;gt; +---------------------------+ ==&amp;gt; | [[1,2,3],[4,5,6],[7,8,9]] | ==&amp;gt; +---------------------------+ ==&amp;gt; 1 row ...and we want to return the array .</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Creating a time tree down to the day</title>
      <link>https://www.markhneedham.com/blog/2014/04/19/neo4j-cypher-creating-a-time-tree-down-to-the-day/</link>
      <pubDate>Sat, 19 Apr 2014 21:15:21 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/04/19/neo4j-cypher-creating-a-time-tree-down-to-the-day/</guid>
      <description>Michael recently wrote a blog post showing how to create a time tree representing time down to the second using Neo4j’s Cypher query language, something I built on top of for a side project I’m working on.
The domain I want to model is RSVPs to meetup invites - I want to understand how much in advance people respond and how likely they are to drop out at a later stage.</description>
    </item>
    
    <item>
      <title>Neo4j 2.0.1: Cypher - Concatenating an empty collection / Type mismatch: expected Integer, Collection&lt;Integer&gt; or Collection&lt;Collection&lt;Integer&gt;&gt; but was Collection&lt;Any&gt;</title>
      <link>https://www.markhneedham.com/blog/2014/04/19/neo4j-2-0-1-cypher-concatenating-an-empty-collection-type-mismatch-expected-integer-collection-or-collection-but-was-collection/</link>
      <pubDate>Sat, 19 Apr 2014 19:51:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/04/19/neo4j-2-0-1-cypher-concatenating-an-empty-collection-type-mismatch-expected-integer-collection-or-collection-but-was-collection/</guid>
      <description>Last weekend I was playing around with some collections using Neo4j’s Cypher query language and I wanted to concatenate two collections.
This was easy enough when both collections contained values...
$ RETURN [1,2,3,4] + [5,6,7]; ==&amp;gt; +---------------------+ ==&amp;gt; | [1,2,3,4] + [5,6,7] | ==&amp;gt; +---------------------+ ==&amp;gt; | [1,2,3,4,5,6,7] | ==&amp;gt; +---------------------+ ==&amp;gt; 1 row ...but I ended up with the following exception when I tried to concatenate with an empty collection:</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Creating relationships between a collection of nodes / Invalid input &#39;[&#39;:</title>
      <link>https://www.markhneedham.com/blog/2014/04/19/neo4j-cypher-creating-relationships-between-a-collection-of-nodes-invalid-input/</link>
      <pubDate>Sat, 19 Apr 2014 06:33:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/04/19/neo4j-cypher-creating-relationships-between-a-collection-of-nodes-invalid-input/</guid>
      <description>When working with graphs we’ll frequently find ourselves wanting to create relationships between collections of nodes.
A common example of this would be creating a linked list of days so that we can quickly traverse across a time tree. Let’s say we start with just 3 days:
MERGE (day1:Day {day:1 }) MERGE (day2:Day {day:2 }) MERGE (day3:Day {day:3 }) RETURN day1, day2, day3 And we want to create a &amp;#39;NEXT&amp;#39; relationship between adjacent days:</description>
    </item>
    
    <item>
      <title>Neo4j 2.0.0: Query not prepared correctly / Type mismatch: expected Map</title>
      <link>https://www.markhneedham.com/blog/2014/04/13/neo4j-2-0-0-query-not-prepared-correctly-type-mismatch-expected-map/</link>
      <pubDate>Sun, 13 Apr 2014 17:40:05 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/04/13/neo4j-2-0-0-query-not-prepared-correctly-type-mismatch-expected-map/</guid>
      <description>I was playing around with Neo4j’s Cypher last weekend and found myself accidentally running some queries against an earlier version of the Neo4j 2.0 series (2.0.0).
My first query started with a map and I wanted to create a person from an identifier inside the map:
WITH {person: {id: 1}} AS params MERGE (p:Person {id: params.person.id}) RETURN p When I ran the query I got this error:
==&amp;gt; SyntaxException: Type mismatch: expected Map but was Boolean, Number, String or Collection&amp;lt;Any&amp;gt; (line 1, column 62) ==&amp;gt; &amp;#34;WITH {person: {id: 1}} AS params MERGE (p:Person {id: params.</description>
    </item>
    
    <item>
      <title>Remote profiling Neo4j using yourkit</title>
      <link>https://www.markhneedham.com/blog/2014/03/24/remote-profiling-neo4j-using-yourkit/</link>
      <pubDate>Mon, 24 Mar 2014 23:44:29 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/03/24/remote-profiling-neo4j-using-yourkit/</guid>
      <description>yourkit is my favourite JVM profiling tool and whilst it’s really easy to profile a local JVM process, sometimes I need to profile a process on a remote machine.
In that case we need to first have the remote JVM started up with a yourkit agent parameter passed as one of the args to the Java program.
Since I’m mostly working with Neo4j this means we need to add the following to conf/neo4j-wrapper.</description>
    </item>
    
    <item>
      <title>Neo4j 2.1.0-M01: LOAD CSV with Rik Van Bruggen&#39;s Tube Graph</title>
      <link>https://www.markhneedham.com/blog/2014/03/03/neo4j-2-1-0-m01-load-csv-with-rik-van-bruggens-tube-graph/</link>
      <pubDate>Mon, 03 Mar 2014 16:34:18 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/03/03/neo4j-2-1-0-m01-load-csv-with-rik-van-bruggens-tube-graph/</guid>
      <description>Last week we released the first milestone of Neo4j 2.1.0 and one its features is a new function in cypher - LOAD CSV - which aims to make it easier to get data into Neo4j.
I thought I’d give it a try to import the London tube graph - something that my colleague Rik wrote about a few months ago.
I’m using the same data set as Rik but I had to tweak it a bit as there were naming differences when describing the connection from Kennington to Waterloo and Kennington to Oval.</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Finding directors who acted in their own movie</title>
      <link>https://www.markhneedham.com/blog/2014/02/28/neo4j-cypher-finding-directors-who-acted-in-their-own-movie/</link>
      <pubDate>Fri, 28 Feb 2014 22:57:59 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/02/28/neo4j-cypher-finding-directors-who-acted-in-their-own-movie/</guid>
      <description>I’ve been doing quite a few Intro to Neo4j sessions recently and since it contains a lot of problems for the attendees to work on I get to see how first time users of Cypher actually use it.
A couple of hours in we want to write a query to find directors who acted in their own film based on the following model.
A common answer is the following:</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Set Based Operations</title>
      <link>https://www.markhneedham.com/blog/2014/02/20/neo4j-cypher-set-based-operations/</link>
      <pubDate>Thu, 20 Feb 2014 18:22:43 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/02/20/neo4j-cypher-set-based-operations/</guid>
      <description>I was recently reminded of a Neo4j cypher query that I wrote a couple of years ago to find the colleagues that I hadn’t worked with in the ThoughtWorks London office.
The model looked like this:
And I created the following fake data set of the aforementioned model:
public class SetBasedOperations { private static final Label PERSON = DynamicLabel.label( &amp;#34;Person&amp;#34; ); private static final Label OFFICE = DynamicLabel.label( &amp;#34;Office&amp;#34; ); private static final DynamicRelationshipType COLLEAGUES = DynamicRelationshipType.</description>
    </item>
    
    <item>
      <title>Neo4j: Creating nodes and relationships from a list of maps</title>
      <link>https://www.markhneedham.com/blog/2014/02/17/neo4j-creating-nodes-and-relationships-from-a-list-of-maps/</link>
      <pubDate>Mon, 17 Feb 2014 14:11:07 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/02/17/neo4j-creating-nodes-and-relationships-from-a-list-of-maps/</guid>
      <description>Last week Alistair and I were porting some Neo4j cypher queries from 1.8 to 2.0 and one of the queries we had to change was an interesting one that created a bunch of relationships from a list/array of maps.
In the query we had a user &amp;#39;Mark&amp;#39; and wanted to create &amp;#39;FRIENDS_WITH&amp;#39; relationships to Peter and Michael.
The application passed in a list of maps representing Peter and Michael as a parameter but if we remove the parameters the query looked like this:</description>
    </item>
    
    <item>
      <title>Neo4j: Value in relationships, but value in nodes too!</title>
      <link>https://www.markhneedham.com/blog/2014/02/13/neo4j-value-in-relationships-but-value-in-nodes-too/</link>
      <pubDate>Thu, 13 Feb 2014 00:10:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/02/13/neo4j-value-in-relationships-but-value-in-nodes-too/</guid>
      <description>I’ve recently spent a bit of time working with people on their graph commons and a common pattern I’ve come across is that although the models have lots of relationships there are often missing nodes.
Emails We’ll start with a model which represents the emails that people send between each other. A first cut might look like this:
The problem with this approach is that we haven’t modelled the concept of an email - that’s been implicitly modelled via a relationship.</description>
    </item>
    
    <item>
      <title>Jython/Neo4j: java.lang.ExceptionInInitializerError: java.lang.ExceptionInInitializerError</title>
      <link>https://www.markhneedham.com/blog/2014/02/05/jythonneo4j-java-lang-exceptionininitializererror-java-lang-exceptionininitializererror/</link>
      <pubDate>Wed, 05 Feb 2014 12:21:30 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/02/05/jythonneo4j-java-lang-exceptionininitializererror-java-lang-exceptionininitializererror/</guid>
      <description>I’ve been playing around with calling Neo4j’s Java API from Python via Jython and immediately ran into the following exception when trying to create an embedded instance:
$ jython -Dpython.path /path/to/neo4j.jar Jython 2.5.3 (2.5:c56500f08d34+, Aug 13 2012, 14:48:36) [Java HotSpot(TM) 64-Bit Server VM (Oracle Corporation)] on java1.7.0_45 Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information. &amp;gt;&amp;gt;&amp;gt; import org.neo4j.graphdb.factory &amp;gt;&amp;gt;&amp;gt; org.neo4j.graphdb.factory.GraphDatabaseFactory().newEmbeddedDatabase(&amp;#34;/tmp/foo&amp;#34;) Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; at org.</description>
    </item>
    
    <item>
      <title>Neo4j 2.0.0: Optimising a football query</title>
      <link>https://www.markhneedham.com/blog/2014/01/31/neo4j-2-0-0-optimising-a-football-query/</link>
      <pubDate>Fri, 31 Jan 2014 22:41:57 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/01/31/neo4j-2-0-0-optimising-a-football-query/</guid>
      <description>A couple of months ago I wrote a blog post explaining how I’d applied Wes Freeman’s Cypher optimisation patterns to a query - since then Neo4j 2.0.0 has been released and I’ve extended the model so I thought I’d try again.
The updated model looks like this:
The query is similar to before - I want to calculate the top away goal scorers in the 2012-2013 season. I started off with this:</description>
    </item>
    
    <item>
      <title>Neo4j 2.0.0: Cypher - Index Hints and Neo.ClientError.Schema.NoSuchIndex</title>
      <link>https://www.markhneedham.com/blog/2014/01/31/neo4j-2-0-0-cypher-index-hints-and-neo-clienterror-schema-nosuchindex/</link>
      <pubDate>Fri, 31 Jan 2014 07:14:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/01/31/neo4j-2-0-0-cypher-index-hints-and-neo-clienterror-schema-nosuchindex/</guid>
      <description>One of the features added into the more recent versions of Neo4j’s cypher query language is the ability to tell Cypher which index you’d like to use in your queries.
We’ll use the football dataset, so let’s start by creating an index on the &amp;#39;name&amp;#39; property of nodes labelled &amp;#39;Player&amp;#39;:
CREATE INDEX ON :Player(name) Let’s say we want to write a query to find &amp;#39;Wayne Rooney&amp;#39; while explicitly using this index.</description>
    </item>
    
    <item>
      <title>Neo4j: org.eclipse.jetty.io.EofException - Caused by: java.io.IOException: Broken pipe</title>
      <link>https://www.markhneedham.com/blog/2014/01/27/neo4j-org-eclipse-jetty-io-eofexception-caused-by-java-io-ioexception-broken-pipe/</link>
      <pubDate>Mon, 27 Jan 2014 11:32:03 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/01/27/neo4j-org-eclipse-jetty-io-eofexception-caused-by-java-io-ioexception-broken-pipe/</guid>
      <description>From scouring the Neo4j google group and Stack Overflow I’ve noticed that a few people have been hitting the following exception when executing queries against Neo4j server:
SEVERE: The response of the WebApplicationException cannot be utilized as the response is already committed. Re-throwing to the HTTP container javax.ws.rs.WebApplicationException: javax.ws.rs.WebApplicationException: org.eclipse.jetty.io.EofException at org.neo4j.server.rest.repr.OutputFormat$1.write(OutputFormat.java:174) at com.sun.jersey.core.impl.provider.entity.StreamingOutputProvider.writeTo(StreamingOutputProvider.java:71) at com.sun.jersey.core.impl.provider.entity.StreamingOutputProvider.writeTo(StreamingOutputProvider.java:57) at com.sun.jersey.spi.container.ContainerResponse.write(ContainerResponse.java:306) at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1437) at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1349) at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1339) at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:416) at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:537) at com.</description>
    </item>
    
    <item>
      <title>Neo4j HA: org.neo4j.graphdb.TransactionFailureException: Timeout waiting for database to allow new transactions. Blocking components (1): []</title>
      <link>https://www.markhneedham.com/blog/2014/01/27/neo4j-ha-org-neo4j-graphdb-transactionfailureexception-timeout-waiting-for-database-to-allow-new-transactions-blocking-components-1/</link>
      <pubDate>Mon, 27 Jan 2014 09:42:18 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/01/27/neo4j-ha-org-neo4j-graphdb-transactionfailureexception-timeout-waiting-for-database-to-allow-new-transactions-blocking-components-1/</guid>
      <description>As I mentioned in my previous post, I’ve been spending quite a bit of time working with Neo4j HA and recently came across the following exception in data/graph.db/messages.log:
org.neo4j.graphdb.TransactionFailureException: Timeout waiting for database to allow new transactions. Blocking components (1): [] at org.neo4j.kernel.ha.HighlyAvailableGraphDatabase.beginTx(HighlyAvailableGraphDatabase.java:199) at org.neo4j.kernel.TransactionBuilderImpl.begin(TransactionBuilderImpl.java:43) at org.neo4j.kernel.InternalAbstractGraphDatabase.beginTx(InternalAbstractGraphDatabase.java:949) at org.neo4j.server.rest.transactional.TransactionalRequestDispatcher.dispatch(TransactionalRequestDispatcher.java:52) at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:288) at com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:108) at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147) at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84) at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1469) at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1400) at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1349) at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1339) at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:416) at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:537) at com.</description>
    </item>
    
    <item>
      <title>Neo4j HA: Election could not pick a winner</title>
      <link>https://www.markhneedham.com/blog/2014/01/24/neo4j-ha-election-could-not-pick-a-winner/</link>
      <pubDate>Fri, 24 Jan 2014 10:30:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/01/24/neo4j-ha-election-could-not-pick-a-winner/</guid>
      <description>Recently I’ve been spending a reasonable chunk of my time helping people get up and running with their Neo4j High Availability cluster and there’s sometimes confusion around how it should be configured.
A Neo4j cluster typically consists of a master and two slaves and you’d usually have it configured so that any machine can be the master.
However, there is a configuration parameter &amp;#39;ha.slave_only&amp;#39; which can be set to &amp;#39;true&amp;#39; to ensure that a machine will never be elected as master when an election takes place.</description>
    </item>
    
    <item>
      <title>Neo4j Backup: Store copy and consistency check</title>
      <link>https://www.markhneedham.com/blog/2014/01/22/neo4j-backup-store-copy-and-consistency-check/</link>
      <pubDate>Wed, 22 Jan 2014 17:36:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/01/22/neo4j-backup-store-copy-and-consistency-check/</guid>
      <description>One of the lesser known things about the Neo4j online backup tool, which I wrote about last week, is that conceptually there are two parts to it:
Copying the store files to a location of your choice
Verifying that those store files are consistent.
By default both of these run when you run the &amp;#39;neo4j-backup&amp;#39; script but sometimes it’s useful to be able to run them separately.
If we want to just run the copying the store files part of the process we can tell the backup tool to skip the consistency check by using the &amp;#39;verify&amp;#39; flag:</description>
    </item>
    
    <item>
      <title>Neo4j Backup: java.lang.ClassCastException: org.jboss.netty.buffer.BigEndianHeapChannelBuffer cannot be cast to org.neo4j.cluster.com.message.Message</title>
      <link>https://www.markhneedham.com/blog/2014/01/19/neo4j-backup-java-lang-classcastexception-org-jboss-netty-buffer-bigendianheapchannelbuffer-cannot-be-cast-to-org-neo4j-cluster-com-message-message/</link>
      <pubDate>Sun, 19 Jan 2014 19:29:16 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2014/01/19/neo4j-backup-java-lang-classcastexception-org-jboss-netty-buffer-bigendianheapchannelbuffer-cannot-be-cast-to-org-neo4j-cluster-com-message-message/</guid>
      <description>(as Gabriel points out in the comments the ability to do a &amp;#39;HA backup&amp;#39; doesn’t exist in more recent versions of Neo4j. I’ll leave this post here for people still running on older versions who encounter the error.)
When using Neo4j’s online backup facility there are two ways of triggering it, either by using the &amp;#39;single://&amp;#39; or &amp;#39;ha://&amp;#39; syntax and these behave slightly differently.
If you’re using the &amp;#39;single://&amp;#39; syntax and don’t specify a port then it will connect to &amp;#39;6362&amp;#39; by default:</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Using MERGE with schema indexes/constraints</title>
      <link>https://www.markhneedham.com/blog/2013/12/23/neo4j-cypher-using-merge-with-schema-indexesconstraints/</link>
      <pubDate>Mon, 23 Dec 2013 13:30:38 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/12/23/neo4j-cypher-using-merge-with-schema-indexesconstraints/</guid>
      <description>A couple of weeks about I wrote about cypher’s MERGE function and over the last few days I’ve been exploring how it works when used with schema indexes and unique constraints.
A common use case with Neo4j is to model users and events where an event could be a tweet, Facebook post or Pinterest pin. The model might look like this:
We’d have a stream of (user, event) pairs and a cypher statement like the following to get the data into Neo4j:</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Getting the hang of MERGE</title>
      <link>https://www.markhneedham.com/blog/2013/12/10/neo4j-cypher-getting-the-hang-of-merge/</link>
      <pubDate>Tue, 10 Dec 2013 23:46:46 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/12/10/neo4j-cypher-getting-the-hang-of-merge/</guid>
      <description>I’ve been trying to get the hang of cypher’s MERGE function and started out by writing a small file to import some people with random properties using the java-faker library.
public class Merge { private static Label PERSON = DynamicLabel.label(&amp;#34;Person&amp;#34;); public static void main(String[] args) throws IOException { File dbFile = new File(&amp;#34;/tmp/test-db&amp;#34;); FileUtils.deleteRecursively(dbFile); Faker faker = new Faker(); Random random = new Random(); GraphDatabaseService db = new GraphDatabaseFactory().newEmbeddedDatabase(dbFile.getPath()); Transaction tx = db.</description>
    </item>
    
    <item>
      <title>Neo4j: What is a node?</title>
      <link>https://www.markhneedham.com/blog/2013/11/29/neo4j-what-is-a-node/</link>
      <pubDate>Fri, 29 Nov 2013 19:50:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/11/29/neo4j-what-is-a-node/</guid>
      <description>One of the first things I needed to learn when I started using Neo4j was how to model my domain using nodes and relationships and it wasn’t initially obvious to me what things should be nodes.
Luckily Ian Robinson showed me a mini-algorithm which I found helpful for getting started. The steps are as follows:
Write out the questions you want to ask
Highlight/underline the nouns
Those are your nodes!</description>
    </item>
    
    <item>
      <title>Neo4j: The case of neo4j-shell and the invisible text ft. Windows and the neo4j-desktop </title>
      <link>https://www.markhneedham.com/blog/2013/11/29/neo4j-the-case-of-windows-neo4j-desktop-and-the-invisible-text/</link>
      <pubDate>Fri, 29 Nov 2013 17:08:49 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/11/29/neo4j-the-case-of-windows-neo4j-desktop-and-the-invisible-text/</guid>
      <description>I’ve been playing around with Neo4j on a Windows VM recently and I wanted to launch neo4j-shell to run a few queries.
The neo4j-shell script isn’t shipped with Neo4j desktop which I used to install Neo4j on my VM but we can still launch it from the Windows Command Prompt with the following command:&amp;lt;/p ~bash C:\Users\Mark&amp;gt; cd &amp;#34;C:\Program Files\Neo4j Community&amp;#34; C:\Program Files\Neo4j Community&amp;gt;jre\bin\java -cp bin\neo4j-desktop-2.0.0-RC1.jar org.neo4j.shell.StartClient Welcome to the Neo4j Shell!</description>
    </item>
    
    <item>
      <title>Neo4j: Modelling &#39;series&#39; of events</title>
      <link>https://www.markhneedham.com/blog/2013/11/29/neo4j-modelling-series-of-events/</link>
      <pubDate>Fri, 29 Nov 2013 00:51:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/11/29/neo4j-modelling-series-of-events/</guid>
      <description>One of the things I’ve never worked out how to model in my football graph is series of matches so that I could answer questions like the following:
How many goals has Robin Van Persie scored in his last 10 matches in the Barclays Premier League?
A brute force approach would be to get all the matches featuring Robin Van Persie in a certain competition, order them by date and take the top ten which would work but doesn’t feel very graph.</description>
    </item>
    
    <item>
      <title>Neo4j: The &#39;thinking in graphs&#39; curve</title>
      <link>https://www.markhneedham.com/blog/2013/11/27/neo4j-the-thinking-in-graphs-curve/</link>
      <pubDate>Wed, 27 Nov 2013 23:09:31 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/11/27/neo4j-the-thinking-in-graphs-curve/</guid>
      <description>In a couple of Neo4j talks I’ve done recently I’ve been asked how long it takes to get used to modelling data in graphs and whether I felt it’s simpler than alternative approaches.
My experience of &amp;#39;thinking in graphs&amp;#39;™ closely mirrors what I believe is a fairly common curve when learning technologies which change the way you think:
There is an initial stage where it seems really hard because it’s different to what we’re used to and at this stage we might want to go back to what we’re used to.</description>
    </item>
    
    <item>
      <title>Neo4j: Using aliases to handle messy data</title>
      <link>https://www.markhneedham.com/blog/2013/11/26/neo4j-using-aliases-to-handle-messy-data/</link>
      <pubDate>Tue, 26 Nov 2013 00:12:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/11/26/neo4j-using-aliases-to-handle-messy-data/</guid>
      <description>One of the common problems when building data heavy applications is that names of things in the domain are often named differently depending on which system you get the data from.
This means that we’ll typically end up running the data from different sources through a normalisation process to ensure that we have consistent naming in the database:
I’ve recently started linking the football stadium a match was played in to the match in my football graph but unfortunately different match compilers use different spellings or even names for the same stadium.</description>
    </item>
    
    <item>
      <title>Neo4j 2.0.0-M06 \-&gt; 2.0.0-RC1: Optional relationships with OPTIONAL MATCH</title>
      <link>https://www.markhneedham.com/blog/2013/11/23/neo4j-2-0-0-m06-2-0-0-rc1-optional-relationships-with-optional-match/</link>
      <pubDate>Sat, 23 Nov 2013 22:54:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/11/23/neo4j-2-0-0-m06-2-0-0-rc1-optional-relationships-with-optional-match/</guid>
      <description>One of the breaking changes in Neo4j 2.0.0-RC1 compared to previous versions is that the -[?]-&amp;gt; syntax for matching optional relationships has been retired and replaced with the http://docs.neo4j.org/chunked/milestone/query-optional-match.html construct.
An example where we might want to match an optional relationship could be if we want to find colleagues that we haven’t worked with given the following model:
Suppose we have the following data set:
CREATE (steve:Person {name: &amp;#34;Steve&amp;#34;}) CREATE (john:Person {name: &amp;#34;John&amp;#34;}) CREATE (david:Person {name: &amp;#34;David&amp;#34;}) CREATE (paul:Person {name: &amp;#34;Paul&amp;#34;}) CREATE (sam:Person {name: &amp;#34;Sam&amp;#34;}) CREATE (londonOffice:Office {name: &amp;#34;London Office&amp;#34;}) CREATE UNIQUE (steve)-[:WORKS_IN]-&amp;gt;(londonOffice) CREATE UNIQUE (john)-[:WORKS_IN]-&amp;gt;(londonOffice) CREATE UNIQUE (david)-[:WORKS_IN]-&amp;gt;(londonOffice) CREATE UNIQUE (paul)-[:WORKS_IN]-&amp;gt;(londonOffice) CREATE UNIQUE (sam)-[:WORKS_IN]-&amp;gt;(londonOffice) CREATE UNIQUE (steve)-[:COLLEAGUES_WITH]-&amp;gt;(john) CREATE UNIQUE (steve)-[:COLLEAGUES_WITH]-&amp;gt;(david) We might write the following query to find people from the same office as Steve but that he hasn’t worked with:</description>
    </item>
    
    <item>
      <title>Neo4j 2.0.0-M06 \-&gt; 2.0.0-RC1: Working with path expressions</title>
      <link>https://www.markhneedham.com/blog/2013/11/23/neo4j-2-0-0-m06-2-0-0-rc1-working-with-path-expressions/</link>
      <pubDate>Sat, 23 Nov 2013 10:30:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/11/23/neo4j-2-0-0-m06-2-0-0-rc1-working-with-path-expressions/</guid>
      <description>We recently released Neo4j 2.0.0-RC1 and since there were some breaking changes from Neo4j 2.0.0-M06 I decided to check if I needed to update any of my football graph queries.
On query which no longer worked as I expected was the following one which calculated the top goal scorers for televised games:
MATCH (player:Player)-[:played|subbed_on]-&amp;gt;stats WITH stats.goals AS goals, player, stats-[:in]-&amp;gt;()-[:on_tv]-() as onTv RETURN player.name, SUM(CASE WHEN onTv = FALSE THEN goals ELSE 0 END) as nonTvGoals, SUM(CASE WHEN onTv = TRUE THEN goals ELSE 0 END) as tvGoals, SUM(goals) as allGoals ORDER BY tvGoals DESC LIMIT 10 This is what that section of the graph looks like visually:</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Creating relationships between nodes from adjacent rows in a query</title>
      <link>https://www.markhneedham.com/blog/2013/11/22/neo4j-cypher-creating-relationships-between-nodes-from-adjacent-rows-in-a-query/</link>
      <pubDate>Fri, 22 Nov 2013 22:45:32 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/11/22/neo4j-cypher-creating-relationships-between-nodes-from-adjacent-rows-in-a-query/</guid>
      <description>I want to introduce the concept of a season into my graph so I can have import matches for multiple years and then vary the time period which queries take into account.
I started by creating season nodes like this:
CREATE (:Season {name: &amp;#34;2013/2014&amp;#34;, timestamp: 1375315200}) CREATE (:Season {name: &amp;#34;2012/2013&amp;#34;, timestamp: 1343779200}) CREATE (:Season {name: &amp;#34;2011/2012&amp;#34;, timestamp: 1312156800}) CREATE (:Season {name: &amp;#34;2010/2011&amp;#34;, timestamp: 1280620800}) CREATE (:Season {name: &amp;#34;2009/2010&amp;#34;, timestamp: 1249084800}) I wanted to add a &amp;#39;NEXT&amp;#39; relationship between the seasons so that I could have an in graph season index which would allow me to write queries like the following:</description>
    </item>
    
    <item>
      <title>Neo4j 2.0.0-M06: Applying Wes Freeman&#39;s Cypher Optimisation tricks</title>
      <link>https://www.markhneedham.com/blog/2013/11/08/neo4j-2-0-0-m06-applying-wes-freemans-cypher-optimisation-tricks/</link>
      <pubDate>Fri, 08 Nov 2013 09:40:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/11/08/neo4j-2-0-0-m06-applying-wes-freemans-cypher-optimisation-tricks/</guid>
      <description>Wes has been teaching me some of his tricks for tuning Neo4j cypher queries over the last few weeks so I thought I should write up a few examples of the master’s advice in action.
I’ve created a mini benchmarking tool using Python’s timeit and numpy to run different queries multiple times and return the mean, min, max and 95th percentile times.
I’ve made my football data set available in case you want to follow along and we’ll start with a query to find the top goal scorers away from home.</description>
    </item>
    
    <item>
      <title>Neo4j: A first attempt at retail product substitution</title>
      <link>https://www.markhneedham.com/blog/2013/11/01/neo4j-a-first-attempt-at-retail-product-substitution/</link>
      <pubDate>Fri, 01 Nov 2013 20:41:18 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/11/01/neo4j-a-first-attempt-at-retail-product-substitution/</guid>
      <description>One of the interesting problems in the world of online shopping from the perspective of the retailer is working out whether there is a suitable substitute product if an ordered item isn’t currently in stock.
Since this problem brings together three types of data - order history, stock levels and products - it seems like it should be a nice fit for Neo4j so I &amp;#39;graphed up&amp;#39; a quick example.</description>
    </item>
    
    <item>
      <title>Neo4j: Cypher - Profiling ORDER BY LIMIT vs LIMIT</title>
      <link>https://www.markhneedham.com/blog/2013/10/27/neo4j-cypher-profiling-order-by-limit-vs-limit/</link>
      <pubDate>Sun, 27 Oct 2013 00:33:54 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/10/27/neo4j-cypher-profiling-order-by-limit-vs-limit/</guid>
      <description>Something I’ve seen people get confused by when writing queries using Neo4j’s cypher query language is the sometimes significant difference in query execution time when using &amp;#39;LIMIT&amp;#39; on its own compared to using it in combination with &amp;#39;ORDER BY&amp;#39;.
The confusion is centred around the fact that at first glance it seems like the only thing different between these queries is the sorting of the rows but there’s actually more to it.</description>
    </item>
    
    <item>
      <title>Neo4j: Making implicit relationships explicit &amp; bidirectional relationships</title>
      <link>https://www.markhneedham.com/blog/2013/10/25/neo4j-making-implicit-relationships-explicit-bidirectional-relationships/</link>
      <pubDate>Fri, 25 Oct 2013 16:03:48 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/10/25/neo4j-making-implicit-relationships-explicit-bidirectional-relationships/</guid>
      <description>I recently read Michal Bachman’s post about bidirectional relationships in Neo4j in which he suggests that for some relationship types we’re not that interested in the relationship’s direction and can therefore ignore it when querying.
He uses the following example showing the partnership between Neo Technology and GraphAware:
Both companies are partners with each other but since we can just as quickly find incoming and outgoing relationships we may as well just have one relationship between the two companies/nodes.</description>
    </item>
    
    <item>
      <title>Neo4j: Modelling hyper edges in a property graph</title>
      <link>https://www.markhneedham.com/blog/2013/10/22/neo4j-modelling-hyper-edges-in-a-property-graph/</link>
      <pubDate>Tue, 22 Oct 2013 22:02:14 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/10/22/neo4j-modelling-hyper-edges-in-a-property-graph/</guid>
      <description>At the Graph Database meet up in Antwerp last week we discussed how you would model a hyper edge in a property graph like Neo4j and I realised that I’d done this in my football graph without realising.
A hyper edge is defined as follows:
A hyperedge is a connection between two or more vertices, or nodes, of a hypergraph. A hypergraph is a graph in which generalized edges (called hyperedges) may connect more than two nodes with discrete properties.</description>
    </item>
    
    <item>
      <title>Neo4j 2.0: Labels, indexes and the like</title>
      <link>https://www.markhneedham.com/blog/2013/10/22/neo4j-2-0-labels-indexes-and-the-like/</link>
      <pubDate>Tue, 22 Oct 2013 20:20:30 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/10/22/neo4j-2-0-labels-indexes-and-the-like/</guid>
      <description>Last week I did a couple of talks about modelling with Neo4j meet ups in Amsterdam and Antwerp and there were a few questions about how indexing works with labels that are being introduced in Neo4j 2.0
As well as defining properties on nodes we can also assign them a label which can be used to categorise different groups of nodes.
For example in the football graph we might choose to tag player nodes with the label &amp;#39;Player&amp;#39;:</description>
    </item>
    
    <item>
      <title>Neo4j: Testing an unmanaged extension using CommunityServerBuilder</title>
      <link>https://www.markhneedham.com/blog/2013/10/20/neo4j-testing-an-unmanaged-extension-using-communitserverbuilder/</link>
      <pubDate>Sun, 20 Oct 2013 21:46:16 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/10/20/neo4j-testing-an-unmanaged-extension-using-communitserverbuilder/</guid>
      <description>I’ve been playing around with Neo4j unmanaged extensions recently and I wanted to be able to check that it worked properly without having to deploy it to a real Neo4j server.
I’d previously used http://grepcode.com/file/repo1.maven.org/maven2/org.neo4j/neo4j-kernel/1.2-1.2/org/neo4j/kernel/ImpermanentGraphDatabase.java when using Neo4j embedded and Ian pointed me towards CommunityServerBuilder which allows us to do a similar thing in Neo4j server world.
I’ve created an example of a dummy unmanaged extension and test showing this approach but it’s reasonably simple.</description>
    </item>
    
    <item>
      <title>Neo4j: Accessing JMX beans via HTTP</title>
      <link>https://www.markhneedham.com/blog/2013/10/20/neo4j-accessing-jmx-beans-via-http/</link>
      <pubDate>Sun, 20 Oct 2013 11:13:54 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/10/20/neo4j-accessing-jmx-beans-via-http/</guid>
      <description>One of the additional features that Neo4j enterprise provides is access to various JMX properties which describe various aspects of the database.
These would typically be accessed by using jConsole or similar but some monitoring tools aren’t able to use the JMX hook and a HTTP interface would work better.
Luckily Neo4j server does expose the JMX beans and we can get a list of URIs to query by hitting the following URI:</description>
    </item>
    
    <item>
      <title>Neo4j: Exploring new data sets with help from Neo4j browser</title>
      <link>https://www.markhneedham.com/blog/2013/10/18/neo4j-exploring-new-data-sets-with-help-from-neo4j-browser/</link>
      <pubDate>Fri, 18 Oct 2013 11:43:59 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/10/18/neo4j-exploring-new-data-sets-with-help-from-neo4j-browser/</guid>
      <description>One of the things that I’ve found difficult when looking at a new Neo4j database is working out the structure of the data it contains.
I’m used to relational databases where you can easily get a list of the table and the foreign keys that allow you to join them to each other.
This has traditionally been difficult when using Neo4j but with the release of the Neo4j browser we can now easily get this type of overview by clicking on the Neo4j icon at the top left of the browser.</description>
    </item>
    
    <item>
      <title>neo4j: Setting query timeout</title>
      <link>https://www.markhneedham.com/blog/2013/10/17/neo4j-setting-query-timeout/</link>
      <pubDate>Thu, 17 Oct 2013 06:47:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/10/17/neo4j-setting-query-timeout/</guid>
      <description>Updated December 2015 When I initially wrote this post in 2013 this was an experimental feature that worked using the Neo4j 1.9 series but no longer does in more recent Neo4j versions (2.2, 2.3). The terminating a running transaction page in the docs describes the supported way of terminating queries.
- - - - - - - - - -
When I was first learning cypher, neo4j’s query language, I frequently wrote queries which traversed the whole graph multiple times and &amp;#39;hung&amp;#39; for hours as they were evaluated.</description>
    </item>
    
    <item>
      <title>neo4j/cypher: Getting rid of an optional match</title>
      <link>https://www.markhneedham.com/blog/2013/10/13/neo4jcypher-getting-rid-of-an-optional-match/</link>
      <pubDate>Sun, 13 Oct 2013 21:59:51 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/10/13/neo4jcypher-getting-rid-of-an-optional-match/</guid>
      <description>I was looking back over some of the queries I wrote for my football data set and I came across one I’d written to work out how many goals players scored in matches that were televised.
The data model looks like this:
My initial query to work out the top 10 scorers in televised games was as follows:
MATCH (player:Player) WITH player MATCH player-[:played|subbed_on]-&amp;gt;stats-[:in]-&amp;gt;game-[t?:on_tv]-&amp;gt;channel WITH COLLECT({goals: stats.goals, type: TYPE(t)}) AS games, player RETURN player.</description>
    </item>
    
    <item>
      <title>neo4j/cypher: Converting queries from 1.9 to 2.0 -  &#39;Can&#39;t use optional patterns without explicit START clause&#39;</title>
      <link>https://www.markhneedham.com/blog/2013/10/03/neo4jcypher-converting-queries-from-1-9-to-2-0-cant-use-optional-patterns-without-explicit-start-clause/</link>
      <pubDate>Thu, 03 Oct 2013 16:16:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/10/03/neo4jcypher-converting-queries-from-1-9-to-2-0-cant-use-optional-patterns-without-explicit-start-clause/</guid>
      <description>I’ve been playing around with the most recent Neo4j 2.0 milestone release - 2.0.0-M05 - and one of the first things I did was translate the queries from my football data set which were written against Neo4j 1.9.
The following query calculates the number of goals scored by players in matches that were shown on television, not on television and in total.
START player=node:players(&amp;#39;name:*&amp;#39;) MATCH player-[:played|subbed_on]-&amp;gt;stats-[:in]-&amp;gt;game-[t?:on_tv]-&amp;gt;channel WITH COLLECT([stats.goals, TYPE(t)]) AS games, player RETURN player.</description>
    </item>
    
    <item>
      <title>neo4j/cypher: Translating 1.9 FILTER queries to use 2.0 list comprehensions</title>
      <link>https://www.markhneedham.com/blog/2013/09/30/neo4jcypher-translating-1-9-filter-queries-to-use-2-0-list-comprehensions/</link>
      <pubDate>Mon, 30 Sep 2013 21:34:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/09/30/neo4jcypher-translating-1-9-filter-queries-to-use-2-0-list-comprehensions/</guid>
      <description>I was looking back over some cypher queries I’d written earlier in the year against my football data set to find some examples of where list comprehensions could be useful and I came across this query which is used to work out which teams were the most badly behaved in terms of accumulating red and yellow cards:
START team = node:teams(&amp;#39;name:*&amp;#39;) MATCH team&amp;lt;-[:for]-like_this&amp;lt;-[:started|as_sub]-player-[r?:sent_off_in|booked_in]-&amp;gt;game&amp;lt;-[:in]-like_this WITH team, COLLECT(r) AS cards WITH team, FILTER(x IN cards: TYPE(x) = &amp;#34;sent_off_in&amp;#34;) AS reds, FILTER(x IN cards: TYPE(x) = &amp;#34;booked_in&amp;#34;) AS yellows RETURN team.</description>
    </item>
    
    <item>
      <title>Neo4j&#39;s Graph Café London - 28th August 2013</title>
      <link>https://www.markhneedham.com/blog/2013/08/31/neo4js-graph-cafe-london-28th-august-2013/</link>
      <pubDate>Sat, 31 Aug 2013 10:52:14 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/08/31/neo4js-graph-cafe-london-28th-august-2013/</guid>
      <description>On Wednesday evening I attended an interesting spin on the monthly Neo4j meetup, where instead of the usual &amp;#39;talk then go to the pub afterwards&amp;#39; format my colleagues Rik and Arturas organised Graph Café in the Doggetts Coat and Badge pub in Blackfriars.
The format was changed as well - the evening consisted of ~10 lightening talks which were spread out over about 3 hours, an approach Rik has used at similar events in Belgium and Holland earlier in the year.</description>
    </item>
    
    <item>
      <title>Model to answer your questions rather than modelling reality</title>
      <link>https://www.markhneedham.com/blog/2013/08/22/model-to-answer-your-questions-rather-than-modelling-reality/</link>
      <pubDate>Thu, 22 Aug 2013 21:26:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/08/22/model-to-answer-your-questions-rather-than-modelling-reality/</guid>
      <description>On the recommendation of Ian Robinson I’ve been reading the 2nd edition of William’s Kent’s &amp;#39;Data and Reality&amp;#39; and the author makes an interesting observation at the end of the first chapter which resonated with me:
Once more: we are not modelling reality, but the way information about reality is processed, by people.
It reminds me of similar advice in Eric Evans&amp;#39; Domain Driven Design and it’s advice which I believe is helpful when designing a model in a graph database.</description>
    </item>
    
    <item>
      <title>neo4j: Extracting a subgraph as an adjacency matrix and calculating eigenvector centrality with JBLAS</title>
      <link>https://www.markhneedham.com/blog/2013/08/11/neo4j-extracting-a-subgraph-as-an-adjacency-matrix-and-calculating-eigenvector-centrality-with-jblas/</link>
      <pubDate>Sun, 11 Aug 2013 07:23:31 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/08/11/neo4j-extracting-a-subgraph-as-an-adjacency-matrix-and-calculating-eigenvector-centrality-with-jblas/</guid>
      <description>Earlier in the week I wrote a blog post showing how to calculate the eigenvector centrality of an adjacency matrix using JBLAS and the next step was to work out the eigenvector centrality of a neo4j sub graph.
There were 3 steps involved in doing this:
Export the neo4j sub graph as an adjacency matrix
Run JBLAS over it to get eigenvector centrality scores for each node
Write those scores back into neo4j</description>
    </item>
    
    <item>
      <title>Graph Processing: Betweeness Centrality - neo4j&#39;s cypher vs graphstream</title>
      <link>https://www.markhneedham.com/blog/2013/07/27/graph-processing-betweeness-centrality-neo4js-cypher-vs-graphstream/</link>
      <pubDate>Sat, 27 Jul 2013 11:21:52 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/07/27/graph-processing-betweeness-centrality-neo4js-cypher-vs-graphstream/</guid>
      <description>Last week I wrote about the betweenness centrality algorithm and my attempts to understand it using graphstream and while reading the source I realised that I might be able to put something together using neo4j’s all shortest paths algorithm.
To recap, the betweenness centrality algorithm is used to determine the load and importance of a node in a graph.
While talking about this with Jen she pointed out that calculating the betweenness centrality of nodes across the whole graph often doesn’t make sense.</description>
    </item>
    
    <item>
      <title>neo4j/cypher: Getting the hang of query parameters</title>
      <link>https://www.markhneedham.com/blog/2013/07/27/neo4jcypher-getting-the-hang-of-query-parameters/</link>
      <pubDate>Sat, 27 Jul 2013 09:30:26 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/07/27/neo4jcypher-getting-the-hang-of-query-parameters/</guid>
      <description>For as long as I’ve been using neo4j&amp;#39;s cypher query language Michael has been telling me to use parameters in my queries but the performance of the queries was always acceptable so I didn’t feel the need.
However, recently I was playing around with a data set and I created ~500 nodes using code similar to this:
require &amp;#39;open-uri&amp;#39; open(&amp;#34;data/people.cyp&amp;#34;, &amp;#39;w&amp;#39;) { |f| (1..500).each do |value| f.puts(&amp;#34;CREATE (p:Person{name: \&amp;#34;#{value}\&amp;#34;})&amp;#34;) end } That creates a file of cypher statements that look like this:</description>
    </item>
    
    <item>
      <title>neo4j Unmanaged Extension: Creating gzipped streamed responses with Jetty</title>
      <link>https://www.markhneedham.com/blog/2013/07/08/neo4j-unmanaged-extension-creating-gzipped-streamed-responses-with-jetty/</link>
      <pubDate>Mon, 08 Jul 2013 23:48:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/07/08/neo4j-unmanaged-extension-creating-gzipped-streamed-responses-with-jetty/</guid>
      <description>I recently wrote a blog post describing how we created a streamed response and the next thing we wanted to do was gzip the response to shrink it’s size a bit.
A bit of searching led to GZIPContentEncodingFilter popping up a lot of times but this is actually needed for a client processing a gripped response rather than helping us to gzip a response from the server.
I noticed that there was a question about this on the mailing list from about a year ago although Michael pointed out that the repository has now moved and the example is available here instead.</description>
    </item>
    
    <item>
      <title>neo4j/cypher: Aggregating relationships within a path</title>
      <link>https://www.markhneedham.com/blog/2013/06/27/neo4jcypher-aggregating-relationships-within-a-path/</link>
      <pubDate>Thu, 27 Jun 2013 10:32:18 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/06/27/neo4jcypher-aggregating-relationships-within-a-path/</guid>
      <description>I recently came across an interesting use case of paths in a graph where we wanted to calculate the frequency of communication between two people by showing how frequently each emailed the other.
The model looked like this:
which we can create with the following cypher statements:
CREATE (email1 { name: &amp;#39;Email 1&amp;#39;, title: &amp;#39;Some stuff&amp;#39; }) CREATE (email2 { name: &amp;#39;Email 2&amp;#39;, title: &amp;#34;Absolutely irrelevant&amp;#34; }) CREATE (email3 { name: &amp;#39;Email 3&amp;#39;, title: &amp;#34;Something else&amp;#34; }) CREATE (person1 { name: &amp;#39;Mark&amp;#39; }) CREATE (person2 { name: &amp;#39;Jim&amp;#39; }) CREATE (person3 { name: &amp;#39;Alistair&amp;#39; }) CREATE (person1)-[:SENT]-&amp;gt;(email1) CREATE (person2)-[:RECEIVED]-&amp;gt;(email1) CREATE (person3)-[:RECEIVED]-&amp;gt;(email1) CREATE (person1)-[:SENT]-&amp;gt;(email2) CREATE (person2)-[:RECEIVED]-&amp;gt;(email2) CREATE (person2)-[:SENT]-&amp;gt;(email3) CREATE (person1)-[:RECEIVED]-&amp;gt;(email3) We want to return a list containing pairs of people and how many times they emailed each other, so in this case we want to return a table showing the following:</description>
    </item>
    
    <item>
      <title>neo4j Spatial: Indexing football stadiums using the REST API</title>
      <link>https://www.markhneedham.com/blog/2013/06/24/neo4j-spatial-indexing-football-stadiums-using-the-rest-api/</link>
      <pubDate>Mon, 24 Jun 2013 07:17:15 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/06/24/neo4j-spatial-indexing-football-stadiums-using-the-rest-api/</guid>
      <description>Late last week my colleague Peter wrote up some documentation about creating spatial indexes in neo4j via HTTP, something I hadn’t realised was possible until then.
I previously wrote about indexing football stadiums using neo4j spatial but the annoying thing about the approach I described was that I was using neo4j in embedded mode which restricts you to using a JVM language.
The rest of my code is in Ruby so I thought I’d translate that code.</description>
    </item>
    
    <item>
      <title>neo4j: A simple example using the JDBC driver</title>
      <link>https://www.markhneedham.com/blog/2013/06/20/neo4j-a-simple-example-using-the-jdbc-driver/</link>
      <pubDate>Thu, 20 Jun 2013 07:21:46 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/06/20/neo4j-a-simple-example-using-the-jdbc-driver/</guid>
      <description>Michael recently pointed me to the neo4j JDBC driver which he and Rickard have written so I thought I’d try and port the code from my previous post to use that instead of the console.
To start with I added the following dependencies to my POM file:
&amp;lt;dependencies&amp;gt; ... &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.neo4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;neo4j-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.9&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;repositories&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;neo4j-maven&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;neo4j maven&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://m2.neo4j.org&amp;lt;/url&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;/repositories&amp;gt; I then tried to create a connection to a local neo4j server instance that I had running on port 7474:</description>
    </item>
    
    <item>
      <title>neo4j/cypher: CREATE with optional properties</title>
      <link>https://www.markhneedham.com/blog/2013/06/20/neo4jcypher-create-with-optional-properties/</link>
      <pubDate>Thu, 20 Jun 2013 06:31:11 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/06/20/neo4jcypher-create-with-optional-properties/</guid>
      <description>I’ve written before about using the cypher CREATE statement to add inferred information to a neo4j graph and sometimes we want to do that but have to deal with optional properties while creating our new relationships.
For example let’s say we have the following people in our graph with the &amp;#39;started&amp;#39; and &amp;#39;left&amp;#39; properties representing their tenure at a company:
CREATE (person1 { personId: 1, started: 1361708546 }) CREATE (person2 { personId: 2, started: 1361708546, left: 1371708646 }) CREATE (company { companyId: 1 }) We want to create a &amp;#39;TENURE&amp;#39; link from them to the company including the &amp;#39;started&amp;#39; and &amp;#39;left&amp;#39; properties when applicable and might start with the following query:</description>
    </item>
    
    <item>
      <title>neo4j: WrappingNeoServerBootstrapper and the case of the /webadmin 404</title>
      <link>https://www.markhneedham.com/blog/2013/06/19/neo4j-wrappingneoserverbootstrapper-and-the-case-of-the-webadmin-404/</link>
      <pubDate>Wed, 19 Jun 2013 05:32:50 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/06/19/neo4j-wrappingneoserverbootstrapper-and-the-case-of-the-webadmin-404/</guid>
      <description>When people first use neo4j they frequently start out by embedding it in a Java application but eventually they want to explore the graph in a more visual way.
One simple way to do this is to start neo4j in server mode and use the web console.
Our initial code might read like this:
public class GraphMeUp { public static void main(String[] args) { GraphDatabaseService graphDb = new EmbeddedGraphDatabase(&amp;#34;/path/to/data/graph.db&amp;#34;); } } or:</description>
    </item>
    
    <item>
      <title>neo4j/cypher: Finding single hop paths</title>
      <link>https://www.markhneedham.com/blog/2013/06/15/neo4jcypher-finding-single-hop-paths/</link>
      <pubDate>Sat, 15 Jun 2013 13:04:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/06/15/neo4jcypher-finding-single-hop-paths/</guid>
      <description>The neo4j docs have a few examples explaining how to to write cypher queries dealing with path ranges but an interesting variation that I came across recently is where we want to find the individual hops in a path.
I thought the managers that Chelsea have had since Roman Abramovich took over would serve as a useful data set to show how this works.
So we create all the managers and a &amp;#39;SUCCEEDED_BY&amp;#39; relationship between them as follows:</description>
    </item>
    
    <item>
      <title>neo4j/cypher/Lucene: Dealing with special characters</title>
      <link>https://www.markhneedham.com/blog/2013/06/15/neo4jcypherlucene-dealing-with-special-characters/</link>
      <pubDate>Sat, 15 Jun 2013 09:53:15 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/06/15/neo4jcypherlucene-dealing-with-special-characters/</guid>
      <description>neo4j uses Lucene to handle indexing of nodes and relationships in the graph but something that can be a bit confusing at first is how to handle special characters in Lucene queries.
For example let’s say we set up a database with the following data:
CREATE ({name: &amp;#34;-one&amp;#34;}) CREATE ({name: &amp;#34;-two&amp;#34;}) CREATE ({name: &amp;#34;-three&amp;#34;}) CREATE ({name: &amp;#34;four&amp;#34;}) And for whatever reason we only wanted to return the nodes that begin with a hyphen.</description>
    </item>
    
    <item>
      <title>neo4j.rb HA: NameError: cannot load Java class org.neo4j.graphdb.factory.HighlyAvailableGraphDatabaseFactory</title>
      <link>https://www.markhneedham.com/blog/2013/06/09/neo4j-rb-ha-nameerror-cannot-load-java-class-org-neo4j-graphdb-factory-highlyavailablegraphdatabasefactory/</link>
      <pubDate>Sun, 09 Jun 2013 16:57:35 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/06/09/neo4j-rb-ha-nameerror-cannot-load-java-class-org-neo4j-graphdb-factory-highlyavailablegraphdatabasefactory/</guid>
      <description>neo4.rb is a JRuby gem that allows you to create an embedded neo4j database and last week I was working out how to setup a neo4j 1.8.2 HA cluster using the gem.
There is an example showing how to create a HA cluster using neo4j.rb so I thought I could adapt that to do what I wanted.
I had the following Gemfile:
source &amp;#39;http://rubygems.org&amp;#39; gem &amp;#39;neo4j&amp;#39;, &amp;#39;2.2.4&amp;#39; gem &amp;#39;neo4j-community&amp;#39;, &amp;#39;1.</description>
    </item>
    
    <item>
      <title>neo4j/cypher 2.0: The CASE statement</title>
      <link>https://www.markhneedham.com/blog/2013/06/09/neo4jcypher-2-0-the-case-statement/</link>
      <pubDate>Sun, 09 Jun 2013 14:02:27 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/06/09/neo4jcypher-2-0-the-case-statement/</guid>
      <description>I’ve been playing around with how you might model Premier League managers tenures at different clubs in neo4j and eventually decided on the following model:
The date modelling is based on an approach I first came across in a shutl presentation and is described in more detail in the docs.
I created a dummy data set with some made up appointments and dismissals and then tried to write a query to show me who was the manager for a team on a specific date.</description>
    </item>
    
    <item>
      <title>neo4j/cypher: 400 response - Paths can&#39;t be created inside of foreach</title>
      <link>https://www.markhneedham.com/blog/2013/05/31/neo4jcypher-400-response-paths-cant-be-created-inside-of-foreach/</link>
      <pubDate>Fri, 31 May 2013 00:37:57 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/05/31/neo4jcypher-400-response-paths-cant-be-created-inside-of-foreach/</guid>
      <description>In the neo4j 1.9 milestone releases if we wanted to create multiple relationships from a node we could use the following cypher syntax:
require &amp;#39;neography&amp;#39; neo = Neography::Rest.new neo.execute_query(&amp;#34;create (me {name: &amp;#39;Mark&amp;#39;})&amp;#34;) query = &amp;#34; START n=node:node_auto_index(name={name})&amp;#34; query &amp;lt;&amp;lt; &amp;#34; FOREACH (friend in {friends} : CREATE f=friend, n-[:FRIEND]-&amp;gt;f)&amp;#34; neo.execute_query(query, {&amp;#34;name&amp;#34; =&amp;gt; &amp;#34;Mark&amp;#34;, &amp;#34;friends&amp;#34; =&amp;gt; [{ &amp;#34;name&amp;#34; =&amp;gt; &amp;#34;Will&amp;#34;}, {&amp;#34;name&amp;#34; =&amp;gt; &amp;#34;Paul&amp;#34;}]}) To check that the &amp;#39;FRIEND&amp;#39; relationships have been created we’d write the following query:</description>
    </item>
    
    <item>
      <title>neo4j/cypher: Properties or relationships? It&#39;s easy to switch</title>
      <link>https://www.markhneedham.com/blog/2013/05/25/neo4jcypher-properties-or-relationships-its-easy-to-switch/</link>
      <pubDate>Sat, 25 May 2013 12:21:55 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/05/25/neo4jcypher-properties-or-relationships-its-easy-to-switch/</guid>
      <description>I’ve written previously about how I’ve converted properties on nodes into relationships and over the past week there was an interesting discussion on the neo4j mailing list about where each is appropriate.
Jim gives quite a neat summary of the difference between the two on the thread:
Properties are the data that an entity like a node [or relationship] holds. Relationships simply form the semantic glue (type, direction, cardinality) between nodes.</description>
    </item>
    
    <item>
      <title>neo4j/cypher: Keep longest path when finding taxonomy</title>
      <link>https://www.markhneedham.com/blog/2013/05/19/neo4jcypher-keep-longest-path-when-finding-taxonomy/</link>
      <pubDate>Sun, 19 May 2013 22:15:06 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/05/19/neo4jcypher-keep-longest-path-when-finding-taxonomy/</guid>
      <description>I’ve been playing around with modelling a product taxonomy and one thing that I wanted to do was find out the full path where a product sits under the tree.
I created a simple data set to show the problem:
CREATE (cat { name: &amp;#34;Cat&amp;#34; }) CREATE (subcat1 { name: &amp;#34;SubCat1&amp;#34; }) CREATE (subcat2 { name: &amp;#34;SubCat2&amp;#34; }) CREATE (subsubcat1 { name: &amp;#34;SubSubCat1&amp;#34; }) CREATE (product1 { name: &amp;#34;Product1&amp;#34; }) CREATE (cat)-[:CHILD]-subcat1-[:CHILD]-subsubcat1 CREATE (product1)-[:HAS_CATEGORY]-(subsubcat1) I wanted to write a query which would return &amp;#39;product1&amp;#39; and the tree &amp;#39;Cat -&amp;gt; SubCat1 -&amp;gt; SubSubCat1&amp;#39; and initially wrote the following query:</description>
    </item>
    
    <item>
      <title>neo4j: When the web console returns nothing...use the data browser!</title>
      <link>https://www.markhneedham.com/blog/2013/05/17/neo4j-when-the-web-console-returns-nothinguse-the-data-browser/</link>
      <pubDate>Fri, 17 May 2013 00:00:16 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/05/17/neo4j-when-the-web-console-returns-nothinguse-the-data-browser/</guid>
      <description>In my time playing around with neo4j I’ve run into a problem a few times where I executed a query using the web console (usually accessible @ http://localhost:7474/webadmin/#/console/) and have got absolutely no response.
I noticed a similar thing today when Rickard and I were having a look at why a Lucene index query wasn’t behaving as we expected.
I setup some data in a neo4j database using neography with the following code:</description>
    </item>
    
    <item>
      <title>neo4j/cypher: Returning a row with zero count when no relationship exists</title>
      <link>https://www.markhneedham.com/blog/2013/04/30/neo4jcypher-returning-a-row-with-zero-count-when-no-relationship-exists/</link>
      <pubDate>Tue, 30 Apr 2013 07:02:09 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/04/30/neo4jcypher-returning-a-row-with-zero-count-when-no-relationship-exists/</guid>
      <description>I’ve been trying to see if I can match some of the football stats that OptaJoe posts on twitter and one that I was looking at yesterday was around the number of red cards different teams have received.
1 - Sunderland have picked up their first PL red card of the season. The only team without one now are Man Utd. Angels.
To refresh this is the sub graph that we’ll need to look at to work it out:</description>
    </item>
    
    <item>
      <title>neo4j/cypher: Redundant relationships</title>
      <link>https://www.markhneedham.com/blog/2013/04/16/neo4jcypher-redundant-relationships/</link>
      <pubDate>Tue, 16 Apr 2013 21:41:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/04/16/neo4jcypher-redundant-relationships/</guid>
      <description>Last week I was writing a query to find the top scorers in the Premier League so far this season alongside the number of games they’ve played in which initially read like this:
START player = node:players(&amp;#39;name:*&amp;#39;) MATCH player-[:started|as_sub]-playedLike-[:in]-game-[r?:scored_in]-player WITH player, COUNT(DISTINCT game) AS games, COLLECT(r) AS allGoals RETURN player.name, games, LENGTH(allGoals) AS goals ORDER BY goals DESC LIMIT 5 +------------------------------------+ | player.name | games | goals | +------------------------------------+ | &amp;#34;Luis Suárez&amp;#34; | 30 | 22 | | &amp;#34;Robin Van Persie&amp;#34; | 30 | 19 | | &amp;#34;Gareth Bale&amp;#34; | 27 | 17 | | &amp;#34;Michu&amp;#34; | 29 | 16 | | &amp;#34;Demba Ba&amp;#34; | 28 | 15 | +------------------------------------+ 5 rows 1 ms I modelled whether a player started a game or came on as a substitute with separate relationship types &amp;#39;started&amp;#39; and &amp;#39;as_sub&amp;#39; but in this query we’re not interested in that, we just want to know whether they played.</description>
    </item>
    
    <item>
      <title>neo4j/cypher: Playing around with time</title>
      <link>https://www.markhneedham.com/blog/2013/03/31/neo4jcypher-playing-around-with-time/</link>
      <pubDate>Sun, 31 Mar 2013 21:08:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/03/31/neo4jcypher-playing-around-with-time/</guid>
      <description>I’ve done a bit of modelling with years and months in neo4j graphs that I’ve worked on previously but I haven’t ever done anything with time so I thought it’d be interesting to have a go with my football graph.
I came across this StackOverflow post on my travels which suggested that indexing nodes by time would be helpful and since I have a bunch of football matches with associated times I thought I’d try it out.</description>
    </item>
    
    <item>
      <title>neo4j/cypher: CypherTypeException: Failed merging Number with Relationship</title>
      <link>https://www.markhneedham.com/blog/2013/03/24/neo4jcypher-cyphertypeexception-failed-merging-number-with-relationship/</link>
      <pubDate>Sun, 24 Mar 2013 13:00:29 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/03/24/neo4jcypher-cyphertypeexception-failed-merging-number-with-relationship/</guid>
      <description>The latest thing that I added to my football graph was the matches that are shown on TV as I have the belief that players who score on televised games get more attention than players who score in other games.
I thought it’d be interesting to work out who the top scorers are on each of these game types.
I added the following relationship type to allow me to do this:</description>
    </item>
    
    <item>
      <title>neo4j/cypher: WITH, COLLECT &amp; EXTRACT</title>
      <link>https://www.markhneedham.com/blog/2013/03/20/neo4jcypher-with-collect-extract/</link>
      <pubDate>Wed, 20 Mar 2013 02:54:43 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/03/20/neo4jcypher-with-collect-extract/</guid>
      <description>As I mentioned in my last post I’m trying to get the hang of the http://docs.neo4j.org/chunked/milestone/query-with.html statement in neo4j’s cypher query language and I found another application when trying to work out which opponents teams played on certain days.
I started out with a query which grouped the data set by day and showed the opponents that were played on that day:
START team = node:teams(&amp;#39;name:&amp;#34;Manchester United&amp;#34;&amp;#39;) MATCH team-[h:home_team|away_team]-game-[:on_day]-day RETURN DISTINCT day.</description>
    </item>
    
    <item>
      <title>neo4j/cypher: Getting the hang of the WITH statement</title>
      <link>https://www.markhneedham.com/blog/2013/03/20/neo4jcypher-getting-the-hang-of-the-with-statement/</link>
      <pubDate>Wed, 20 Mar 2013 00:25:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/03/20/neo4jcypher-getting-the-hang-of-the-with-statement/</guid>
      <description>I wrote a post a few weeks ago showing an example of a cypher query which made use of the WITH statement but I still don’t completely understand how it works so I thought I’d write some more queries that use it.
I wanted to find out whether Luis Suárez has a better scoring record depending on which day a match is played on.
We start out by finding all the matches that he’s played in and which days those matches were on:</description>
    </item>
    
    <item>
      <title>neo4j/cypher: SQL style GROUP BY WITH LIMIT query</title>
      <link>https://www.markhneedham.com/blog/2013/03/18/neo4jcypher-sql-style-group-by-with-limit-query/</link>
      <pubDate>Mon, 18 Mar 2013 23:19:36 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/03/18/neo4jcypher-sql-style-group-by-with-limit-query/</guid>
      <description>A few weeks ago I wrote a blog post where I described how we could construct a SQL GROUP BY style query in cypher and last week I wanted to write a similar query but with what I think would be a LIMIT clause in SQL.
I wanted to find the maximum number of goals that players had scored in a match for a specific team and started off with the following query to find all the matches that players had scored in:</description>
    </item>
    
    <item>
      <title>clojure/Java Interop - Importing neo4j spatial data</title>
      <link>https://www.markhneedham.com/blog/2013/03/17/clojurejava-interop-importing-neo4j-spatial-data/</link>
      <pubDate>Sun, 17 Mar 2013 18:56:36 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/03/17/clojurejava-interop-importing-neo4j-spatial-data/</guid>
      <description>I wrote a post about a week ago where I described how I’d added football stadiums to my football graph using neo4j spatial and after I’d done that I wanted to put it into my import script along with the rest of the data.
I thought leiningen would probably work quite well for this as you can point it at a Java class and have it be executed.
To start with I had to change the import code slightly to link stadiums to teams which have already been added to the graph:</description>
    </item>
    
    <item>
      <title>neo4j/cypher: Finding football stadiums near a city using spatial</title>
      <link>https://www.markhneedham.com/blog/2013/03/10/neo4jcypher-finding-football-stadiums-near-a-city-using-spatial/</link>
      <pubDate>Sun, 10 Mar 2013 22:13:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/03/10/neo4jcypher-finding-football-stadiums-near-a-city-using-spatial/</guid>
      <description>One of the things that I wanted to add to my football graph was something location related so I could try out neo4j spatial and I thought the easiest way to do that was to model the location of football stadiums.
To start with I needed to add spatial as an unmanaged extension to my neo4j plugins folder which involved doing the following:
$ git clone git://github.com/neo4j/spatial.git spatial $ cd spatial $ mvn clean package -Dmaven.</description>
    </item>
    
    <item>
      <title>neo4j: Make properties relationships</title>
      <link>https://www.markhneedham.com/blog/2013/03/06/neo4j-make-properties-relationships/</link>
      <pubDate>Wed, 06 Mar 2013 00:59:36 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/03/06/neo4j-make-properties-relationships/</guid>
      <description>I spent some of the weekend working my way through Jim, Ian &amp;amp; Emil&amp;#39;s book &amp;#39;Graph Databases&amp;#39; and one of the things that they emphasise is that graphs allow us to make relationships first class citizens in our model.
Looking back on a couple of the graphs that I modelled last year I realise that I didn’t quite get this and although the graphs I modelled had some relationships a lot of the time I was defining things as properties on nodes.</description>
    </item>
    
    <item>
      <title>neo4j: Loading data - REST API vs Batch Import</title>
      <link>https://www.markhneedham.com/blog/2013/02/28/neo4j-loading-data-rest-api-vs-batch-import/</link>
      <pubDate>Thu, 28 Feb 2013 23:36:13 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/02/28/neo4j-loading-data-rest-api-vs-batch-import/</guid>
      <description>A couple of weeks ago when I first started playing around with my football data set I was loading all the data into neo4j using the REST API via neography which was taking around 4 minutes to load.
The data set consisted of just over 250 matches which translated into 8,000 nodes &amp;amp; 30,000 relationships so it’s very small by all means.
Ashok and I were discussing how that could be quicker and the first thing we tried was to store inserted nodes in an in memory hash map and look them up from there rather than doing an index lookup each time.</description>
    </item>
    
    <item>
      <title>neo4j/cypher: Combining COUNT and COLLECT in one query</title>
      <link>https://www.markhneedham.com/blog/2013/02/24/neo4jcypher-combining-count-and-collect-in-one-query/</link>
      <pubDate>Sun, 24 Feb 2013 19:19:59 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/02/24/neo4jcypher-combining-count-and-collect-in-one-query/</guid>
      <description>In my continued playing around with football data I wanted to write a cypher query against neo4j which would show me which teams had missed the most penalties this season and who missed them.
I started off with a query that returned all the penalties that have been missed this season and the games those misses happened in:
START player = node:players(&amp;#39;name:*&amp;#39;) MATCH player-[:missed_penalty_in]-game, player-[:played|subbed_on]-stats-[:in]-game, stats-[:for]-team, game-[:home_team]-home, game-[:away_team]-away RETURN player.</description>
    </item>
    
    <item>
      <title>neo4j/cypher: Using a WHERE clause to filter paths</title>
      <link>https://www.markhneedham.com/blog/2013/02/19/neo4jcypher-using-a-where-clause-to-filter-paths/</link>
      <pubDate>Tue, 19 Feb 2013 00:03:18 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/02/19/neo4jcypher-using-a-where-clause-to-filter-paths/</guid>
      <description>One of the cypher queries that I wanted to write recently was one to find all the players that have started matches for Arsenal this season and the number of matches that they’ve played in.
The data model that I’m querying looks like this:
I started off with the following query which traverses from Arsenal to all the games that they’ve taken part in and finds all the players who’ve played in those games:</description>
    </item>
    
    <item>
      <title>neo4j/cypher: SQL style GROUP BY functionality</title>
      <link>https://www.markhneedham.com/blog/2013/02/17/neo4jcypher-sql-style-group-by-functionality/</link>
      <pubDate>Sun, 17 Feb 2013 21:05:27 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/02/17/neo4jcypher-sql-style-group-by-functionality/</guid>
      <description>As I mentioned in a previous post I’ve been playing around with some football related data over the last few days and one query I ran (using cypher) was to find all the players who’ve been sent off this season in the Premiership.
The model in the graph around sending offs looks like this:
My initial query looked like this:
START player = node:players(&amp;#39;name:*&amp;#39;) MATCH player-[:sent_off_in]-game-[:in_month]-month RETURN player.name, month.name First we get the names of all the players which are stored in an index and then we follow relationships to the games they were sent off in and then find which months those games were played in.</description>
    </item>
    
    <item>
      <title>neo4j: Handling SUM&#39;s scientific notation</title>
      <link>https://www.markhneedham.com/blog/2012/09/30/neo4j-handling-sums-scientific-notation/</link>
      <pubDate>Sun, 30 Sep 2012 19:47:32 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/09/30/neo4j-handling-sums-scientific-notation/</guid>
      <description>In some of the recent work I’ve been doing with neo4j the queries I’ve written have been summing up the values from multiple nodes and after a certain number is reached the value returned used scientific notation.
For example in a cypher query like this:
START category = node:categories(&amp;#39;category_id:1&amp;#39;) MATCH p = category-[:has_child*1..5]-&amp;gt;subCategory-[:has_product]-&amp;gt;product-[:sold]-&amp;gt;sales RETURN EXTRACT(n in NODES(p) : n.category_id?),subCategory.category_id, SUM(sales.sales) I might get a result set like this:
+------------------------------------------------------------------------------------------------+ | EXTRACT(n in NODES(p) : n.</description>
    </item>
    
    <item>
      <title>neo4j: The Batch Inserter and the sunk cost fallacy</title>
      <link>https://www.markhneedham.com/blog/2012/09/23/neo4j-the-batch-inserter-and-the-sunk-cost-fallacy/</link>
      <pubDate>Sun, 23 Sep 2012 10:29:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/09/23/neo4j-the-batch-inserter-and-the-sunk-cost-fallacy/</guid>
      <description>About a year and a half ago I wrote about the sunk cost fallacy which is defined like so:
The Misconception: You make rational decisions based on the future value of objects, investments and experiences. The Truth: Your decisions are tainted by the emotional investments you accumulate, and the more you invest in something the harder it becomes to abandon it.
Over the past few weeks Ashok and I have been doing some exploration of one of our client’s data by modelling it in a neo4j graph and seeing what interesting things the traversals reveal.</description>
    </item>
    
    <item>
      <title>neo4j/cypher: CREATE UNIQUE - &#34;SyntaxException: string matching regex ``$&#39; expected but ``p&#39; found&#34;</title>
      <link>https://www.markhneedham.com/blog/2012/09/09/neo4jcypher-create-unique-syntaxexception-string-matching-regex-expected-but-p-found/</link>
      <pubDate>Sun, 09 Sep 2012 22:29:33 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/09/09/neo4jcypher-create-unique-syntaxexception-string-matching-regex-expected-but-p-found/</guid>
      <description>I’ve been playing around with the mutating cypher syntax of neo4j which allows you to make changes to the graph as well as query it, a feature introduced into cypher in May in release 1.8 M01.
I was trying to make use of the &amp;#39;CREATE UNIQUE&amp;#39; syntax which allows you to create nodes/relationships if they’re missing but won’t do anything if they already exists.
I had something like the following:</description>
    </item>
    
    <item>
      <title>neo4j: Creating a custom index with neo4j.rb</title>
      <link>https://www.markhneedham.com/blog/2012/08/05/neo4j-creating-a-custom-index-with-neo4j-rb/</link>
      <pubDate>Sun, 05 Aug 2012 09:45:08 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/08/05/neo4j-creating-a-custom-index-with-neo4j-rb/</guid>
      <description>As I mentioned in my last post I’ve been playing around with the TFL Bus stop location and routes API and one thing I wanted to do was load all the bus stops into a neo4j database using the neo4j.rb gem.
I initially populated the database via neography but it was taking around 20 minutes each run and I figured it’d probably be much quicker to populate it directly rather than using the REST API.</description>
    </item>
    
    <item>
      <title>neo4j: Multiple starting nodes by index lookup</title>
      <link>https://www.markhneedham.com/blog/2012/07/28/neo4j-multiple-starting-nodes-by-index-lookup/</link>
      <pubDate>Sat, 28 Jul 2012 23:32:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/07/28/neo4j-multiple-starting-nodes-by-index-lookup/</guid>
      <description>I spent a bit of time this evening extracting some data from the ThoughtWorks graph for our marketing team who were interested in anything related to our three European offices in London, Manchester and Hamburg.
The most interesting things we can explore relate to the relationship between people and the offices.
The model around people and offices looks like this:
I added a &amp;#39;current_home_office&amp;#39; relationship to make it easier to quickly get to the nodes of people who are currently working in a specific office.</description>
    </item>
    
    <item>
      <title>neo4j: Graph Global vs Graph Local queries</title>
      <link>https://www.markhneedham.com/blog/2012/07/23/neo4j-graph-global-vs-graph-local-queries/</link>
      <pubDate>Mon, 23 Jul 2012 22:23:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/07/23/neo4j-graph-global-vs-graph-local-queries/</guid>
      <description>A few weeks ago I did a presentation at the ThoughtWorks EU away day on the graph I’ve been developing using neo4j and I wanted to show who the most connected people in each of our European offices were.
I started with the following cypher query:
START n = node(*) MATCH n-[r:colleagues*1..2]-&amp;gt;c, n-[r2:member_of]-&amp;gt;office WHERE n.type? = &amp;#39;person&amp;#39; AND (NOT(HAS(r2.end_date))) AND office.name = &amp;#39;London - UK South&amp;#39; AND (NOT(HAS(c.thoughtquitter))) RETURN n.</description>
    </item>
    
    <item>
      <title>neo4j: Embracing the sub graph</title>
      <link>https://www.markhneedham.com/blog/2012/07/21/neo4j-embracing-the-sub-graph/</link>
      <pubDate>Sat, 21 Jul 2012 22:46:06 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/07/21/neo4j-embracing-the-sub-graph/</guid>
      <description>In May I wrote a blog post explaining how I’d been designing a neo4j graph by thinking about what questions I wanted to answer about the data.
In the comments Josh Adell gave me the following advice:
The neat things about graphs is that multiple subgraphs can live in the same data-space. ... Keep your data model rich! Don’t be afraid to have as many relationships as you need. The power of graph databases comes from finding surprising results when you have strongly interconnected data.</description>
    </item>
    
    <item>
      <title>neo4j: Shortest Path with and without cypher</title>
      <link>https://www.markhneedham.com/blog/2012/07/19/neo4j-shortest-path-with-and-without-cypher/</link>
      <pubDate>Thu, 19 Jul 2012 19:57:31 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/07/19/neo4j-shortest-path-with-and-without-cypher/</guid>
      <description>I was looking back at some code I wrote a few months ago to query a neo4j database to find the shortest path between two people via the colleagues relationships that exist.
&amp;lt;/img&amp;gt;
The initial code, written using neography, looked like this:
neo = Neography::Rest.new start_node = neo.get_node(start_node_id) destination_node = neo.get_node(destination_node_id) neo.get_paths(start_node, destination_node, { &amp;#34;type&amp;#34; =&amp;gt; &amp;#34;colleagues&amp;#34; }, depth = 3, algorithm = &amp;#34;shortestPath&amp;#34;) The neography code eventually makes a POST request to /node/{start_id}/paths and provides a JSON payload containing the other information about the query.</description>
    </item>
    
    <item>
      <title>neo4j: java.security.NoSuchAlgorithmException: Algorithm [JKS] of type [KeyStore] from provider [org.bouncycastle.jce.provider.BouncyCastleProvider: name=BC version=1.4]</title>
      <link>https://www.markhneedham.com/blog/2012/07/17/neo4j-java-security-nosuchalgorithmexception-algorithm-jks-of-type-keystore-from-provider-org-bouncycastle-jce-provider-bouncycastleprovider-namebc-version1-4/</link>
      <pubDate>Tue, 17 Jul 2012 00:02:51 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/07/17/neo4j-java-security-nosuchalgorithmexception-algorithm-jks-of-type-keystore-from-provider-org-bouncycastle-jce-provider-bouncycastleprovider-namebc-version1-4/</guid>
      <description>I’ve spent the last couple of hours moving my neo4j graph from my own machine onto a vanilla CentOS VM and initially tried to run neo using a non Sun version of Java which I installed like so:
yum install java This is the version of Java that was installed:
$ java -version java version &amp;#34;1.5.0&amp;#34; gij (GNU libgcj) version 4.4.6 20120305 (Red Hat 4.4.6-4) When I tried to start neo4j:</description>
    </item>
    
    <item>
      <title>neo4j: Handling optional relationships</title>
      <link>https://www.markhneedham.com/blog/2012/06/24/neo4j-handling-optional-relationships/</link>
      <pubDate>Sun, 24 Jun 2012 23:32:17 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/06/24/neo4j-handling-optional-relationships/</guid>
      <description>On my ThoughtWorks neo4j there are now two different types of relationships between people nodes - they can either be colleagues or one can be the sponsor of the other.
The graph looks like this:
I wanted to get a list of all the sponsor pairs but also have some indicator of whether the two people have worked together.
I started off by getting all of the sponsor pairs:</description>
    </item>
    
    <item>
      <title>Visualising a neo4j graph using gephi</title>
      <link>https://www.markhneedham.com/blog/2012/06/21/visualising-a-neo4j-graph-using-gephi/</link>
      <pubDate>Thu, 21 Jun 2012 05:02:32 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/06/21/visualising-a-neo4j-graph-using-gephi/</guid>
      <description>At ThoughtWorks we don’t have line managers but people can choose to have a sponsor - typically someone who has worked in the company for longer/has more experience in the industry than them - who can help them navigate the organisation better.
From hearing people talk about sponsors over the last 6 years it seemed like quite a few people sponsored the majority and there were probably a few people who didn’t have a sponsor.</description>
    </item>
    
    <item>
      <title>neo4j/Cypher: Finding the most connected node on the graph</title>
      <link>https://www.markhneedham.com/blog/2012/06/16/neo4jcypher-finding-the-most-connected-node-on-the-graph/</link>
      <pubDate>Sat, 16 Jun 2012 10:41:03 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/06/16/neo4jcypher-finding-the-most-connected-node-on-the-graph/</guid>
      <description>As I mentioned in another post about a month ago I’ve been playing around with a neo4j graph in which I have the following relationship between nodes:
One thing I wanted to do was work out which node is the most connected on the graph, which would tell me who’s worked with the most people.
I started off with the following cypher query:
query = &amp;#34; START n = node(*)&amp;#34; query &amp;lt;&amp;lt; &amp;#34; MATCH n-[r:colleagues]-&amp;gt;c&amp;#34; query &amp;lt;&amp;lt; &amp;#34; WHERE n.</description>
    </item>
    
    <item>
      <title>neo4j/Cypher: Finding the shortest path between two nodes while applying predicates</title>
      <link>https://www.markhneedham.com/blog/2012/05/12/neo4jcypher-finding-the-shortest-path-between-two-nodes-while-applying-predicates/</link>
      <pubDate>Sat, 12 May 2012 14:55:30 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/05/12/neo4jcypher-finding-the-shortest-path-between-two-nodes-while-applying-predicates/</guid>
      <description>As I mentioned in a blog post about a week ago I decided to restructure the ThoughtWorks graph I’ve modelled in neo4j so that I could explicitly model projects and clients.
As a result I had to update a traversal I’d written for finding the shortest path between two people in the graph.
The original traversal query I had was really simple because I had a direct connection between the people nodes:</description>
    </item>
    
    <item>
      <title>neo4j: What question do you want to answer?</title>
      <link>https://www.markhneedham.com/blog/2012/05/05/neo4j-what-question-do-you-want-to-answer/</link>
      <pubDate>Sat, 05 May 2012 13:20:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/05/05/neo4j-what-question-do-you-want-to-answer/</guid>
      <description>Over the past few weeks I’ve been modelling ThoughtWorks project data in neo4j and I realised that the way that I’ve been doing this is by considering what question I want to answer and then building a graph to answer it.
When I first started doing this the main question I wanted to answer was &amp;#39;how connected are people to each other&amp;#39; which led to me modelling the data like this:</description>
    </item>
    
    <item>
      <title>gephi: Centring a graph around an individual node</title>
      <link>https://www.markhneedham.com/blog/2012/04/30/gephi-centring-a-graph-around-an-individual-node/</link>
      <pubDate>Mon, 30 Apr 2012 22:20:45 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/04/30/gephi-centring-a-graph-around-an-individual-node/</guid>
      <description>I spent some time recently playing around with gephi - an open source platform for creating visualisations of graphs - to get a bit more insight into the ThoughtWorks graph which I’ve created in neo4j.
I followed Max De Marxi’s blog post to create a GEFX (Graph Exchange XML Format) file to use in gephi although I later learned that you can import directly from neo4j into gephi which I haven’t tried yet.</description>
    </item>
    
    <item>
      <title>neo4J: Searching for nodes by name</title>
      <link>https://www.markhneedham.com/blog/2012/04/20/neo4j-searching-for-nodes-by-name/</link>
      <pubDate>Fri, 20 Apr 2012 07:10:57 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/04/20/neo4j-searching-for-nodes-by-name/</guid>
      <description>As I mentioned in a post a few days ago I’ve been graphing connections between ThoughtWorks people using neo4j and wanted to build auto complete functionality so I can search for the names of people in the graph.
The solution I came up was to create a Lucene index with an entry for each node and a common property on each document in the index so that I’d be able to get all the index entries easily.</description>
    </item>
    
    <item>
      <title>Ruby: neo4j gem - LoadError: no such file to load -- active_support/core_ext/class/inheritable_attributes</title>
      <link>https://www.markhneedham.com/blog/2012/04/14/ruby-neo4j-gem-loaderror-no-such-file-to-load-active_supportcore_extclassinheritable_attributes/</link>
      <pubDate>Sat, 14 Apr 2012 10:21:40 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2012/04/14/ruby-neo4j-gem-loaderror-no-such-file-to-load-active_supportcore_extclassinheritable_attributes/</guid>
      <description>I’ve been playing around with neo4j again over the past couple of days using the neo4j.rb gem to build up a graph.
I installed the gem but then ended up with the following error when I tried to &amp;#39;require neo4j&amp;#39; in &amp;#39;irb&amp;#39;:
LoadError: no such file to load -- active_support/core_ext/class/inheritable_attributes require at org/jruby/RubyKernel.java:1033 require at /Users/mneedham/.rbenv/versions/jruby-1.6.7/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:36 (root) at /Users/mneedham/.rbenv/versions/jruby-1.6.7/lib/ruby/gems/1.8/gems/neo4j-1.3.1-java/lib/neo4j.rb:9 require at org/jruby/RubyKernel.java:1033 require at /Users/mneedham/.rbenv/versions/jruby-1.6.7/lib/ruby/gems/1.8/gems/neo4j-1.3.1-java/lib/neo4j.rb:59 (root) at src/main/ruby/neo_test.rb:2 It seems a few others have come across this problem as well and the problem seems to be that ActiveSupport 3.</description>
    </item>
    
  </channel>
</rss>
