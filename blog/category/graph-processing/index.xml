<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graph Processing on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/category/graph-processing/</link>
    <description>Recent content in Graph Processing on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Aug 2013 22:12:37 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/category/graph-processing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java/JBLAS: Calculating eigenvector centrality of an adjacency matrix</title>
      <link>https://www.markhneedham.com/blog/2013/08/05/javajblas-calculating-eigenvector-centrality-of-an-adjacency-matrix/</link>
      <pubDate>Mon, 05 Aug 2013 22:12:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/08/05/javajblas-calculating-eigenvector-centrality-of-an-adjacency-matrix/</guid>
      <description>I recently came across a very interesting post by Kieran Healy where he runs through a bunch of graph algorithms to see whether he can detect the most influential people behind the American Revolution based on their membership of various organisations.
The first algorithm he looked at was betweenness centrality which I’ve looked at previously and is used to determine the load and importance of a node in a graph.</description>
    </item>
    
    <item>
      <title>Graph Processing: Betweeness Centrality - neo4j&#39;s cypher vs graphstream</title>
      <link>https://www.markhneedham.com/blog/2013/07/27/graph-processing-betweeness-centrality-neo4js-cypher-vs-graphstream/</link>
      <pubDate>Sat, 27 Jul 2013 11:21:52 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2013/07/27/graph-processing-betweeness-centrality-neo4js-cypher-vs-graphstream/</guid>
      <description>Last week I wrote about the betweenness centrality algorithm and my attempts to understand it using graphstream and while reading the source I realised that I might be able to put something together using neo4j’s all shortest paths algorithm.
To recap, the betweenness centrality algorithm is used to determine the load and importance of a node in a graph.
While talking about this with Jen she pointed out that calculating the betweenness centrality of nodes across the whole graph often doesn’t make sense.</description>
    </item>
    
  </channel>
</rss>
