<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graph Processing on Mark Needham</title>
    <link>https://markhneedham.com/blog/category/graph-processing/</link>
    <description>Recent content in Graph Processing on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Aug 2013 22:12:37 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/category/graph-processing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java/JBLAS: Calculating eigenvector centrality of an adjacency matrix</title>
      <link>https://markhneedham.com/blog/2013/08/05/javajblas-calculating-eigenvector-centrality-of-an-adjacency-matrix/</link>
      <pubDate>Mon, 05 Aug 2013 22:12:37 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/08/05/javajblas-calculating-eigenvector-centrality-of-an-adjacency-matrix/</guid>
      <description>Google&amp;rsquo;s PageRankis a variant of the Eigenvector centrality measure.
DoubleMatrix matrix = new DoubleMatrix(new double[][] { {1,1,0,0,1,0,0}, {1,1,0,0,1,0,0}, {0,0,1,1,1,0,0}, {0,0,1,1,1,0,0}, {1,1,1,1,1,1,1}, {0,0,0,0,1,1,1}, {0,0,0,0,1,1,1}, }); ComplexDoubleMatrix eigenvalues = Eigen.eigenvalues(matrix); for (ComplexDouble eigenvalue : eigenvalues.toArray()) { System.out.print(String.format(&amp;#34;%.2f &amp;#34;, eigenvalue.abs())); } 4.00 2.00 0.00 1.00 2.00 0.00 0.00 List&amp;lt;Double&amp;gt; principalEigenvector = getPrincipalEigenvector(matrix); System.out.println(&amp;#34;principalEigenvector = &amp;#34; + principalEigenvector); private static List&amp;lt;Double&amp;gt; getPrincipalEigenvector(DoubleMatrix matrix) { int maxIndex = getMaxIndex(matrix); ComplexDoubleMatrix eigenVectors = Eigen.eigenvectors(matrix)[0]; return getEigenVector(eigenVectors, maxIndex); } private static int getMaxIndex(DoubleMatrix matrix) { ComplexDouble[] doubleMatrix = Eigen.</description>
    </item>
    
    <item>
      <title>Graph Processing: Betweeness Centrality - neo4j&#39;s cypher vs graphstream</title>
      <link>https://markhneedham.com/blog/2013/07/27/graph-processing-betweeness-centrality-neo4js-cypher-vs-graphstream/</link>
      <pubDate>Sat, 27 Jul 2013 11:21:52 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/07/27/graph-processing-betweeness-centrality-neo4js-cypher-vs-graphstream/</guid>
      <description>A -&amp;gt; B: Direct Path Exists A -&amp;gt; C: B A -&amp;gt; D: E A -&amp;gt; E: Direct Path Exists B -&amp;gt; A: No Path Exists B -&amp;gt; C: Direct Path Exists B -&amp;gt; D: E or C B -&amp;gt; E: Direct Path Exists C -&amp;gt; A: No Path Exists C -&amp;gt; B: No Path Exists C -&amp;gt; D: Direct Path Exists C -&amp;gt; E: No Path Exists D -&amp;gt; A: No Path Exists D -&amp;gt; B: No Path Exists D -&amp;gt; C: No Path Exists D -&amp;gt; E: No Path Exists E -&amp;gt; A: No Path Exists E -&amp;gt; B: No Path Exists E -&amp;gt; C: No Path Exists E -&amp;gt; D: Direct Path Exists A: 0 B: 1 C: 0.</description>
    </item>
    
  </channel>
</rss>