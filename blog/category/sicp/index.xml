<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SICP on Mark Needham</title>
    <link>https://markhneedham.com/blog/category/sicp/</link>
    <description>Recent content in SICP on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Sep 2010 18:48:31 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/category/sicp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SICP: Iterative process vs Recursive process functions</title>
      <link>https://markhneedham.com/blog/2010/09/16/sicp-iterative-process-vs-recursive-process-functions/</link>
      <pubDate>Thu, 16 Sep 2010 18:48:31 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/16/sicp-iterative-process-vs-recursive-process-functions/</guid>
      <description>I was working my way through some of the exercises in SICPover the weekend and one that I found particularly interesting was 1.11where you have to write a function by means of a recursive process and then by means of an iterative process.
To write that function recursively is relatively straight forward:
(in Clojure)
(defn f [n] (if (&amp;lt; n 3) n (+ (f (- n 1)) (* 2 (f (- n 2))) (* 3 (f (- n 3)))))) The solution to this problem by means of an iterative process will still use recursion but we won&amp;rsquo;t need to keep a track of all the previous calls to the function on the stack because we will keep the current state of the calculation in parameters that we pass to the function.</description>
    </item>
    
  </channel>
</rss>