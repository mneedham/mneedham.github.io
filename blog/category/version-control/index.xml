<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Version Control on Mark Needham</title>
    <link>https://markhneedham.com/blog/category/version-control/</link>
    <description>Recent content in Version Control on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Nov 2013 21:58:08 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/category/version-control/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git: Viewing the last commit on all the tags</title>
      <link>https://markhneedham.com/blog/2013/11/16/git-viewing-the-last-commit-on-all-the-tags/</link>
      <pubDate>Sat, 16 Nov 2013 21:58:08 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/11/16/git-viewing-the-last-commit-on-all-the-tags/</guid>
      <description>A couple of days ago I was curious when different versions of Neo4j had been released and although the release notes page was helpful I thought I&#39;d find more detailed information if I looked up the git tags.
Assuming that we&#39;ve already got a clone of the repository on our machine:
$ git clone git@github.com:neo4j/neo4j.git  We can pull down the latest tags by calling git fetch --tags or git fetch -t</description>
    </item>
    
    <item>
      <title>Git: Commit squashing made even easier using &#39;git branch --set-upstream&#39;</title>
      <link>https://markhneedham.com/blog/2013/07/16/git-commit-squashing-made-even-easier-using-git-branch-set-upstream/</link>
      <pubDate>Tue, 16 Jul 2013 08:13:02 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/07/16/git-commit-squashing-made-even-easier-using-git-branch-set-upstream/</guid>
      <description>A few days ago I wrote a blog post describing how I wanted to squash a series of commits into one bigger one before making a pull request and in the comments Rob Hunter showed me an even easier way to do so.
To recap, by the end of the post I had the following git config:
$ cat .git/config [remote &amp;quot;origin&amp;quot;] fetch = +refs/heads/*:refs/remotes/origin/* url = git@github.com:mneedham/neo4j-shell-tools.git [branch &amp;quot;master&amp;quot;] remote = origin merge = refs/heads/master [remote &amp;quot;base&amp;quot;] url = git@github.</description>
    </item>
    
    <item>
      <title>Git/GitHub: Squashing all commits before sending a pull request</title>
      <link>https://markhneedham.com/blog/2013/07/13/gitgithub-squashing-all-commits-before-sending-a-pull-request/</link>
      <pubDate>Sat, 13 Jul 2013 18:47:49 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/07/13/gitgithub-squashing-all-commits-before-sending-a-pull-request/</guid>
      <description>My colleague Michael has been doing some work to make it easier for people to import data into neo4j and his latest attempt is neo4j-shell-tools which adds some additional commands to the neo4j-shell.
I&#39;ve spent a bit of time refactoring the readme which I&#39;d done on a branch of my fork of the repository and consisted of 46 commits, most changing 2 or 3 lines.
I wanted to send Michael a pull request on Github but first I needed to squash all my commits down into a single one.</description>
    </item>
    
    <item>
      <title>git: Having a branch/tag with the same name (error: dst refspec matches more than one.)</title>
      <link>https://markhneedham.com/blog/2013/06/13/git-having-a-branchtag-with-the-same-name-error-dst-refspec-matches-more-than-one/</link>
      <pubDate>Thu, 13 Jun 2013 22:18:31 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/06/13/git-having-a-branchtag-with-the-same-name-error-dst-refspec-matches-more-than-one/</guid>
      <description>Andres and I recently found ourselves wanting to delete a remote branch which had the same name as a tag and therefore the normal way of doing that wasn&#39;t worked out as well as we&#39;d hoped.
I created a dummy repository to recreate the state we&#39;d got ourselves into:
$ echo &amp;quot;mark&amp;quot; &amp;gt; README $ git commit -am &amp;quot;readme&amp;quot; $ echo &amp;quot;for the branch&amp;quot; &amp;gt;&amp;gt; README $ git commit -am &amp;quot;for the branch&amp;quot; $ git checkout -b same Switched to a new branch &#39;same&#39; $ git push origin same Counting objects: 5, done.</description>
    </item>
    
    <item>
      <title>Mercurial: hg push to Google Code</title>
      <link>https://markhneedham.com/blog/2012/03/14/mercurial-hg-push-to-google-code/</link>
      <pubDate>Wed, 14 Mar 2012 21:25:40 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/03/14/mercurial-hg-push-to-google-code/</guid>
      <description>I wanted to make a change to add flatMap to Option in totallylazy so I had to clone the repository and make the change.
I thought I&amp;rsquo;d then be able to just push the change using my Google user name and password but instead ended up with the following error:
âžœ mhneedham-totally-lazy hg push pushing to https://m.h.needham@code.google.com/r/mhneedham-totally-lazy/ searching for changes 1 changesets found http authorization required realm: Google Code hg Repository user: m.</description>
    </item>
    
    <item>
      <title>git: Only pushing some changes from local repository</title>
      <link>https://markhneedham.com/blog/2011/10/20/git-only-pushing-some-changes-from-local-repository/</link>
      <pubDate>Thu, 20 Oct 2011 06:50:01 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/10/20/git-only-pushing-some-changes-from-local-repository/</guid>
      <description>Something that we want to do reasonable frequently on my current project is to push some changes which have been committed to our local repository to master but not all of them.
For example we might end up with 3 changes we haven&amp;rsquo;t pushed:
&amp;gt;&amp;gt; ~/github/local$ git status # On branch master # Your branch is ahead of &#39;origin/master&#39; by 3 commits. # nothing to commit (working directory clean)  &amp;gt;&amp;gt; ~/github/local$ git hist * bb7b139 Thu, 20 Oct 2011 07:37:11 +0100 | mark: one last time (HEAD, master) [Mark Needham] * 1cef99a Thu, 20 Oct 2011 07:36:35 +0100 | mark:another new line [Mark Needham] * 850e105 Thu, 20 Oct 2011 07:36:01 +0100 | mark: new line [Mark Needham] * 2b25622 Thu, 20 Oct 2011 07:32:43 +0100 | mark: adding file for first time (origin/master) [Mark Needham]  And we only want to push the commit with hash 850e105 for example.</description>
    </item>
    
    <item>
      <title>Git: Getting the history of a deleted file</title>
      <link>https://markhneedham.com/blog/2011/10/04/git-getting-the-history-of-a-deleted-file/</link>
      <pubDate>Tue, 04 Oct 2011 22:33:09 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/10/04/git-getting-the-history-of-a-deleted-file/</guid>
      <description>We recently wanted to get the Git history of a file which we knew existed but had now been deleted so we could find out what had happened to it.
Using a simple git log didn&amp;rsquo;t work:
git log deletedFile.txt fatal: ambiguous argument &#39;deletedFile.txt&#39;: unknown revision or path not in the working tree. ~~~	We eventually came across &amp;lt;a href=&amp;quot;http://feeding.cloud.geek.nz/2010/07/querying-deleted-content-in-git.html&amp;quot;&amp;gt;Francois Marier&#39;s blog post&amp;lt;/a&amp;gt; which points out that you need to use the following command instead: ~~~text git log -- deletedFile.</description>
    </item>
    
    <item>
      <title>Git: Deleting a remote branch on a gitolite configured repository</title>
      <link>https://markhneedham.com/blog/2011/06/28/git-deleting-a-remote-branch-on-a-gitolite-configured-repository/</link>
      <pubDate>Tue, 28 Jun 2011 22:09:18 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/06/28/git-deleting-a-remote-branch-on-a-gitolite-configured-repository/</guid>
      <description>We&amp;rsquo;ve had an xsbt branch on our gitolite powered repository for the last couple of weeks while we worked out how to move our build from sbt 0.7 to sbt 0.10 but having finally done that we needed to delete it.
I originally tried running the following command from one of our developer workstations:
git push origin :xsbt  But ended up with the following error:
 remote: error: denying ref deletion for regs/head/xsbt !</description>
    </item>
    
    <item>
      <title>Mercurial: Only pushing some local changes</title>
      <link>https://markhneedham.com/blog/2010/06/25/mercurial-only-pushing-some-local-changes/</link>
      <pubDate>Fri, 25 Jun 2010 23:32:36 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/06/25/mercurial-only-pushing-some-local-changes/</guid>
      <description>One problem we&amp;rsquo;ve come across a few times over the last couple of months while using Mercurial is the situation where we want to quickly commit a local change without committing other local changes that we&amp;rsquo;ve made.
The example we came across today was where we wanted to make a change to the build file as we&amp;rsquo;d made a mistake in the target that runs on our continuous integration server and hadn&amp;rsquo;t noticed for a while during which time we&amp;rsquo;d accumulated other local changes.</description>
    </item>
    
    <item>
      <title>Git/Mercurial: Pushing regularly</title>
      <link>https://markhneedham.com/blog/2010/06/19/gitmercurial-pushing-regularly/</link>
      <pubDate>Sat, 19 Jun 2010 22:14:06 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/06/19/gitmercurial-pushing-regularly/</guid>
      <description>I was reading a recent blog post by Gabriel Schenker where he discusses how his team is making use of Git and about half way through he says the following:
When using Git as your SCM it is normal to work for quite a while â€“ maybe for a couple of days â€“ in a local branch and without ever pushing the changes to the origin. Usually we only push when a feature is done or a defect is completely resolved.</description>
    </item>
    
    <item>
      <title>hg: Reverting committed changes</title>
      <link>https://markhneedham.com/blog/2010/04/15/hg-reverting-committed-changes/</link>
      <pubDate>Thu, 15 Apr 2010 22:35:53 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/04/15/hg-reverting-committed-changes/</guid>
      <description>Continuing with our learning with Mercurial, yesterday we wanted to revert a couple of change sets that we had previously committed and go back to an old version of the code and continue working from there.
As an example, say we wanted to go back to Revision 1 and had the following changes committed:
Revision 3 Revision 2 Revision 1 Revision 0  My original thought was that we could merge revision 1 with the current tip:</description>
    </item>
    
    <item>
      <title>Mercurial: Early thoughts</title>
      <link>https://markhneedham.com/blog/2010/04/10/mercurial-early-thoughts/</link>
      <pubDate>Sat, 10 Apr 2010 11:43:23 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/04/10/mercurial-early-thoughts/</guid>
      <description>We&amp;rsquo;re using Mercurial as our source control system on the project I&amp;rsquo;m working on at the moment and since I&amp;rsquo;ve not yet used a distributed source control system on a team I thought it&amp;rsquo;d be interesting to note some of my initial thoughts.
One of the neat things about having a local repository and a central one is that you can check in lots of times locally and then push those changes to the central repository when you want everyone else to get the changes that you&amp;rsquo;ve made.</description>
    </item>
    
    <item>
      <title>Mercurial: hg bisect</title>
      <link>https://markhneedham.com/blog/2009/11/14/mercurial-hg-bisec/</link>
      <pubDate>Sat, 14 Nov 2009 11:20:13 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/11/14/mercurial-hg-bisec/</guid>
      <description>We&amp;rsquo;ve been using Mercurial locally on the project I&amp;rsquo;ve been working on and Phil showed me a cool feature called &amp;lsquo;bisect&amp;rsquo; a couple of weeks ago which can be helpful for working out which revision we managed to break our code in.
It&amp;rsquo;s been ported across from Git and is included in Mercurial from version 1.0.0 rather than just being an extension.
From the bisect extension page:  Its behaviour is fairly simple: it takes a first revision known to be correct (i.</description>
    </item>
    
    <item>
      <title>Pulling from github on Windows</title>
      <link>https://markhneedham.com/blog/2009/08/18/pulling-from-github-on-windows/</link>
      <pubDate>Tue, 18 Aug 2009 00:33:11 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/08/18/pulling-from-github-on-windows/</guid>
      <description>My colleague Dave Cameron has been telling me about his adventures playing around with Git Sharp (a C# port of the Java Git implementation jGit) so I thought I&amp;rsquo;d get a copy of the code and have a look as well.
I tend to check out all code bases from my host machine instead of virtual machine so I got the code all checked out on the Mac and accessed it via a shared folder on my VM.</description>
    </item>
    
    <item>
      <title>Mercurial: Pulling from behind a proxy</title>
      <link>https://markhneedham.com/blog/2009/05/13/mercurial-pulling-from-behind-a-proxy/</link>
      <pubDate>Wed, 13 May 2009 07:49:44 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/05/13/mercurial-pulling-from-behind-a-proxy/</guid>
      <description>I&amp;rsquo;ve been playing around with Mercurial and the mercurial hosting website bitbucket a bit this year and recently wanted to pull from a repository from behind a proxy server.
With a bit of help from the mercurial mailing list and the documentation this is how I was able to pull the repository for the Hambread project I&amp;rsquo;ve been doing a bit of work on:
~~~text
hg &amp;ndash;config http_proxy.host=ipOfYourProxyServer:portOfYourProxyServer &amp;ndash;config http_proxy.user=user &amp;ndash;config http_proxy.</description>
    </item>
    
    <item>
      <title>Ignore file in Svn</title>
      <link>https://markhneedham.com/blog/2008/10/02/ignore-file-in-svn/</link>
      <pubDate>Thu, 02 Oct 2008 21:10:27 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/10/02/ignore-file-in-svn/</guid>
      <description>I spent a bit of time this afternoon marveling at the non intuitiveness of working out how to ignore files in Svn.
Normally I&amp;rsquo;d just use Tortoise SVN as it makes it so easy for you but I really wanted to know how to do it from the shell!
After a bit of Googling and conversation with a colleague I think I have it figured out to some extent.
Ignoring just one file or pattern If you only have one pattern or file that you want to ignore then the following command should do the trick.</description>
    </item>
    
    <item>
      <title>Getting latest tagged revision in SVN from DOS/Batch script</title>
      <link>https://markhneedham.com/blog/2008/08/16/getting-latest-tagged-revision-in-svn-from-dosbatch-script/</link>
      <pubDate>Sat, 16 Aug 2008 00:10:51 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/08/16/getting-latest-tagged-revision-in-svn-from-dosbatch-script/</guid>
      <description>The way we have setup the build on our continuous integration server, Team City is configured to create a new tag every time the functional tests past successful on that machine.
We then have a QA and Showcase build that we can run to deploy all the artifacts necessary to launch the application on that machine.
Originally I had just written the batch script to take in the tag of the build which the user could find by looking through repo-browser for the last tag created.</description>
    </item>
    
  </channel>
</rss>