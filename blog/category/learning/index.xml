<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learning on Mark Needham</title>
    <link>https://markhneedham.com/blog/category/learning/</link>
    <description>Recent content in Learning on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Mar 2013 22:01:12 +0000</lastBuildDate>
    
	<atom:link href="https://markhneedham.com/blog/category/learning/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Best tool for the job/Learning new ways to do things</title>
      <link>https://markhneedham.com/blog/2013/03/24/best-tool-for-the-joblearning-new-ways-to-do-things/</link>
      <pubDate>Sun, 24 Mar 2013 22:01:12 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/03/24/best-tool-for-the-joblearning-new-ways-to-do-things/</guid>
      <description>I recently came across an interesting post written by Randy Luecke titled &#39;I&#39;m done with the web&#39; in which he expresses his surprise that people often aren&#39;t willing to take the time out to learn something new.
In this context he&#39;s referring to javascript libraries but I think his thinking is generally applicable.
Having worked for a few years now I&#39;ve played around with a reasonable number of programming languages/text editors/databases/etc to the point that I have favourites when it comes to solving certain problems.</description>
    </item>
    
    <item>
      <title>Reading outside your area of interest</title>
      <link>https://markhneedham.com/blog/2013/02/25/reading-outside-your-area-of-interest/</link>
      <pubDate>Mon, 25 Feb 2013 22:56:11 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2013/02/25/reading-outside-your-area-of-interest/</guid>
      <description>A reasonable amount of the information that I consume comes either via scanning twitter or from my prismatic feed but I noticed that I&#39;m quite biased to reading things in similar subject areas.
I tend to end up reading about data mining/science, functional programming and startups and while the articles are mostly interesting it does eventually start to feel like you&#39;re in an echo chamber. I have a subscription to the ACM mainly because I enjoy reading the &#39;Communications of the ACM&#39; magazine which gets sent out every month and until recently I only read articles which I thought would be interesting.</description>
    </item>
    
    <item>
      <title>Restricting your own learning</title>
      <link>https://markhneedham.com/blog/2012/12/27/restricting-your-own-learning/</link>
      <pubDate>Thu, 27 Dec 2012 00:45:59 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/12/27/restricting-your-own-learning/</guid>
      <description>For the first few years that I worked professionally* every project that I worked on was different enough to the previous ones that I was always learning something new without having to put much effort in.
After a while this became less the case because I&#39;d seen more things and if I saw something even remotely similar I would abstract it away as something that I&#39;d done before.
A couple of months ago Martin Fowler wrote a blog post about priming and how research has showed that exposure to a stimulus influences a response to a later stimulus.</description>
    </item>
    
    <item>
      <title>Learning: Switching between theory and practice</title>
      <link>https://markhneedham.com/blog/2012/11/19/learning-switching-between-theory-and-practice/</link>
      <pubDate>Mon, 19 Nov 2012 13:31:49 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2012/11/19/learning-switching-between-theory-and-practice/</guid>
      <description>In one of my first ever blog posts I wrote about the differences I&amp;rsquo;d experienced in learning the theory about a topic and then seeing it in practice.
The way I remember learning at school and university was that you learn all the theory first and then put it into practice but I typically don&amp;rsquo;t find myself doing this whenever I learn something new.
I spent a bit of time over the weekend learning more about neural networks as my colleague Jen Smith suggested this might be a more effective technique for getting a higher accuracy score on the Kaggle Digit Recogniser problem.</description>
    </item>
    
    <item>
      <title>&#34;Everything I know everyone else knows&#34;</title>
      <link>https://markhneedham.com/blog/2011/03/13/everything-i-know-everyone-else-knows/</link>
      <pubDate>Sun, 13 Mar 2011 12:03:13 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2011/03/13/everything-i-know-everyone-else-knows/</guid>
      <description>For as long as I can remember I&amp;rsquo;ve had the belief that, at least as far as software is concerned, everything I know how to do everyone else also knows how to do.
I carried that assumption for quite a while and only realised relatively recently how harmful it can be.
The most observable outcome I noticed is that I either didn&amp;rsquo;t give my opinion in group situations or just didn&amp;rsquo;t take part in them because I assumed that what I wanted to say would eventually be contributed by someone else anyway.</description>
    </item>
    
    <item>
      <title>Team Communication: Learning models</title>
      <link>https://markhneedham.com/blog/2010/11/27/team-communication-learning-models/</link>
      <pubDate>Sat, 27 Nov 2010 10:50:27 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/11/27/team-communication-learning-models/</guid>
      <description>One of the problems I&amp;rsquo;ve noticed in several of the &amp;lsquo;agile&amp;rsquo; communication mechanisms (such as the standup or dev huddle) that we typically use on teams is that they focus almost entirely on verbal communication which only covers one of our learning styles - the auditory learning style.
The Learning Models The VAK learning style model describes a simple model covering the different learning styles that people have:
 Visual - seeing and reading.</description>
    </item>
    
    <item>
      <title>Learning: Writing about simple things</title>
      <link>https://markhneedham.com/blog/2010/10/20/learning-writing-about-simple-things/</link>
      <pubDate>Wed, 20 Oct 2010 20:51:56 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/10/20/learning-writing-about-simple-things/</guid>
      <description>My colleague Aman King is back in Pune for the time being and during one of our conversations he was asking me why I didn&amp;rsquo;t wait a bit longer and learn more about Ruby before writing about it.
In a way he is right and I didn&amp;rsquo;t write anything at all about C# or Java when I was first learning how to write code in those languages because I didn&amp;rsquo;t have the confidence to write about something that I knew nothing about.</description>
    </item>
    
    <item>
      <title>Learning cycles at an overall project level</title>
      <link>https://markhneedham.com/blog/2010/09/20/learning-cycles-at-an-overall-project-level/</link>
      <pubDate>Mon, 20 Sep 2010 18:56:20 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/20/learning-cycles-at-an-overall-project-level/</guid>
      <description>I was looking back over a post I wrote a couple of years ago where I described some learning cycles that I&amp;rsquo;d noticed myself going through with respect to code and although at the time I was thinking of those cycles in terms of code I think they are applicable at a project level as well.
The cycles I described were as follows:
 Don&#39;t know what is good and what&#39;s bad Learn what&#39;s good and what&#39;s bad but don&#39;t know how to fix something that&#39;s bad Learn how to make something that&#39;s bad good  I think I&amp;rsquo;ve followed similar cycles with respect to how an overall project is run.</description>
    </item>
    
    <item>
      <title>Learning: Study habits</title>
      <link>https://markhneedham.com/blog/2010/09/12/learning-study-habits/</link>
      <pubDate>Sun, 12 Sep 2010 13:27:39 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/09/12/learning-study-habits/</guid>
      <description>I came across an interesting article from the New York Times that Michael Feathers originally linked to on twitter which discusses some of the common ideas that we have about good study habits, pointing out the flaws in them and suggesting alternative approaches.
The author starts out by making some interesting observations about spacing out our learning:  An hour of study tonight, an hour on the weekend, another session a week from now: such so-called spacing improves later recall, without requiring students to put in more overall study effort or pay more attention, dozens of studies have found.</description>
    </item>
    
    <item>
      <title>Learning and Situated cognition</title>
      <link>https://markhneedham.com/blog/2010/08/10/learning-and-situated-cognition/</link>
      <pubDate>Tue, 10 Aug 2010 03:26:23 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/08/10/learning-and-situated-cognition/</guid>
      <description>Sumeet recently blogged about the new style ThoughtWorks University that he and the other trainers have introduced and although I only got to see it in action for a few days it seemed clear to me that it was an improvement on the original version.
The questions being asked, discussions being had and situations that were coming up were pretty much the same as I&amp;rsquo;ve seen on any software project that I&amp;rsquo;ve worked on.</description>
    </item>
    
    <item>
      <title>The prepared mind vs having context when learning new ideas</title>
      <link>https://markhneedham.com/blog/2010/07/22/the-prepared-mind-vs-having-context-when-learning-new-ideas/</link>
      <pubDate>Thu, 22 Jul 2010 04:06:40 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/07/22/the-prepared-mind-vs-having-context-when-learning-new-ideas/</guid>
      <description>I&amp;rsquo;m currently working as a trainer for ThoughtWorks University (TWU) and the participants have some Industrial Logic e-learning material to work through before they take part in the 6 week training program.
I&amp;rsquo;ve been working through the refactoring/code smells courses myself and while I&amp;rsquo;ve been finding it really useful, I think this was partly because I&amp;rsquo;ve been able to link the material to situations that I&amp;rsquo;ve seen in code bases that I&amp;rsquo;ve worked on over the past few years.</description>
    </item>
    
    <item>
      <title>Is &#39;be the worst&#39; ever limiting?</title>
      <link>https://markhneedham.com/blog/2010/06/26/is-be-the-worst-ever-limiting/</link>
      <pubDate>Sat, 26 Jun 2010 10:03:25 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2010/06/26/is-be-the-worst-ever-limiting/</guid>
      <description>One of my favourite patterns from Ade Oshineye and Dave Hoover&amp;rsquo;s &amp;lsquo;Apprenticeship Patterns&amp;rsquo; is &amp;lsquo;Be the worst&amp;rsquo; which is described as follows:
 Surround yourself with developers who are better than you. Find a stronger team where you are the weakest member and have room to grow. Be the Worst was the seminal pattern of this pattern language. It was lifted from some advice that Pat Metheny offered to young musicians: “Be the worst guy in every band you’re in.</description>
    </item>
    
    <item>
      <title>The &#39;should&#39; word</title>
      <link>https://markhneedham.com/blog/2009/11/17/the-should-word/</link>
      <pubDate>Tue, 17 Nov 2009 23:52:42 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/11/17/the-should-word/</guid>
      <description>I&amp;rsquo;ve been reading Coders at Work recently and one of my favourite answers from the first chapter interview with Jamie Zawinski is the following:
 I think one thing that&#39;s really important is not to be afraid of your ignorance. If you don&#39;t understand how something works, ask someone who does. A lot of people are skittish about that. And that doesn&#39;t help anybody. Not knowing something doesn&#39;t mean you&#39;re dumb - it just means you don&#39;t know it yet.</description>
    </item>
    
    <item>
      <title>Learn one thing a day</title>
      <link>https://markhneedham.com/blog/2009/10/03/learn-one-thing-a-day/</link>
      <pubDate>Sat, 03 Oct 2009 13:58:55 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/10/03/learn-one-thing-a-day/</guid>
      <description>I came across an interesting post about a month or so written by Chad Fowler on Tim Ferriss&amp;rsquo; blog where he suggested that a useful way of ensuring that we are always improving is to ask the question &amp;lsquo;Am I better than yesterday?&amp;rsquo; at the end of each day.
I really like this idea and I think it fits in quite nicely with the approach that I take which is to try and ensure that I learn one new thing each day.</description>
    </item>
    
    <item>
      <title>Learning from others/Learning yourself</title>
      <link>https://markhneedham.com/blog/2009/09/28/learning-from-otherslearning-yourself/</link>
      <pubDate>Mon, 28 Sep 2009 00:02:12 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/09/28/learning-from-otherslearning-yourself/</guid>
      <description>Something which has become quite apparent to me recently is that I learn things far more quickly if I try it out myself and make mistakes than if I just rely on someone else&amp;rsquo;s word for it but some more experienced colleagues seem able to use information explained to them fair more effectively and don&amp;rsquo;t necessarily need to go through this process.
While reading through the Dreyfus Model one of the ideas that is suggested is that once people reach the level of &amp;lsquo;Proficient&amp;rsquo; at any given skill then they are able to learn from the experiences of others without needing to experience something themselves.</description>
    </item>
    
    <item>
      <title>Learning: Thoughts on doing so more effectively</title>
      <link>https://markhneedham.com/blog/2009/08/24/learning-thoughts-on-doing-so-more-effectively/</link>
      <pubDate>Mon, 24 Aug 2009 18:15:19 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/08/24/learning-thoughts-on-doing-so-more-effectively/</guid>
      <description>One of the quite common sayings that I&amp;rsquo;ve come across when discussing student/teacher type situations is that it&amp;rsquo;s the teacher&amp;rsquo;s responsibility to present the material to the student in a way that they can understand and that if the student still doesn&amp;rsquo;t understand then the teacher hasn&amp;rsquo;t done their job properly.
I believe that this approach is also followed in the UK education system nowadays and while it makes sense in a way I don&amp;rsquo;t think it&amp;rsquo;s a particularly useful belief to have as a student since it seems to encourage you to be quite passive in the learning process.</description>
    </item>
    
    <item>
      <title>Dreyfus Model: More thoughts</title>
      <link>https://markhneedham.com/blog/2009/08/10/dreyfus-model-more-thoughts/</link>
      <pubDate>Mon, 10 Aug 2009 20:36:51 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/08/10/dreyfus-model-more-thoughts/</guid>
      <description>Since we discussed the Dreyfus Model in book club a few weeks ago I&amp;rsquo;ve noticed that I&amp;rsquo;m more aware of my own level of skill at different tasks and references to the model appear more frequent at least amongst my colleagues.
These are some of the things I&amp;rsquo;ve been thinking about:
How do we use the model? Alan Skorks has an interesting post where he discusses the role of the Dreyfus Model in helping to build software development expertise concluding that it doesn&amp;rsquo;t help very much in developing expertise within a team.</description>
    </item>
    
    <item>
      <title>Learning through teaching</title>
      <link>https://markhneedham.com/blog/2009/04/21/learning-through-teaching/</link>
      <pubDate>Tue, 21 Apr 2009 07:38:36 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/04/21/learning-through-teaching/</guid>
      <description>I&amp;rsquo;ve been watching one of the podcasts recorded from the Alt.NET Houston conference titled &amp;lsquo;Why blog and open source&amp;rsquo; and one of the interesting ideas that stood out amongst the opinions express is that people write about their experience in order to understand the topics better themselves.
I&amp;rsquo;ve found this to be a very valuable way of learning - in fact it&amp;rsquo;s probably more beneficial to the teacher than the student, somewhat ironically.</description>
    </item>
    
    <item>
      <title>Re-reading books</title>
      <link>https://markhneedham.com/blog/2009/03/19/re-reading-books/</link>
      <pubDate>Thu, 19 Mar 2009 10:49:30 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/03/19/re-reading-books/</guid>
      <description>An interesting thing that I&amp;rsquo;ve started to notice recently with regards to software development books is that I get a lot more from reading the book the second time compared to what I did reading the book the first time.
I&amp;rsquo;ve noticed this for several books, including The Pragmatic Programmer, Code Complete and Domain Driven Design, so my first thought was that perhaps I had read this books too early when I didn&amp;rsquo;t have the necessary context or experience to gain value from reading them.</description>
    </item>
    
    <item>
      <title>Ferengi Programmer and the Dreyfus Model</title>
      <link>https://markhneedham.com/blog/2009/02/13/ferengi-programmer-and-the-dreyfus-model/</link>
      <pubDate>Fri, 13 Feb 2009 00:01:58 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/02/13/ferengi-programmer-and-the-dreyfus-model/</guid>
      <description>I&amp;rsquo;ve been reading Jeff Atwood&amp;rsquo;s post regarding Joel&amp;rsquo;s comments on the podcast about Uncle Bob&amp;rsquo;s SOLID principles and what struck me as I read through his dislike of having too many rules and guidelines is that there is a misunderstanding of how we should use these rules and I think at the heart of this understanding the Dreyfus Model might clear this up.
To briefly recap the different levels of the Dreyfus Model (you can read more about this in Pragmatic Thinking and Learning)</description>
    </item>
    
    <item>
      <title>Learning alone or Learning together</title>
      <link>https://markhneedham.com/blog/2009/01/25/learning-alone-or-learning-together/</link>
      <pubDate>Sun, 25 Jan 2009 23:00:39 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/01/25/learning-alone-or-learning-together/</guid>
      <description>One of the things that I have been curious about since we started running coding dojos is whether people learn more effectively alone or when learning as part of a group.
Not that I think they are mutually exclusive, I think a combination of both is probably the way to go depending on what it is we are trying to learn and the way that we&amp;rsquo;re trying to learn it.</description>
    </item>
    
    <item>
      <title>Coding: Contextual learning</title>
      <link>https://markhneedham.com/blog/2009/01/21/coding-contextual-learning/</link>
      <pubDate>Wed, 21 Jan 2009 06:42:22 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/01/21/coding-contextual-learning/</guid>
      <description>While reading my colleague&amp;rsquo;s notes on a brown bag session on pair programming she gave I was reminded of my belief that we learn much more effectively when we are learning in a practical environment.
The bit that interested me was this bit regarding onboarding:
 On board new team members to bring them up to speed on the overall goal and design, so you do not need to repeat basic details when you work with them on a story.</description>
    </item>
    
    <item>
      <title>2008: My Technical Review</title>
      <link>https://markhneedham.com/blog/2009/01/01/2008-my-technical-review/</link>
      <pubDate>Thu, 01 Jan 2009 09:28:23 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2009/01/01/2008-my-technical-review/</guid>
      <description>Others in the blogosphere seem to be doing 2008 round ups around about now so I thought I&amp;rsquo;d jump in on the action.
Project Overview   I worked on 5 projects this year writing code in C# 2.0/3.0, Java and Ruby.  2 of the projects were writing client side code, 2 web applications and 1 writing services. The domains I worked in were investment banking, insurance and an industrial automation system  What did I learn in 2008?</description>
    </item>
    
    <item>
      <title>Environment matters a lot</title>
      <link>https://markhneedham.com/blog/2008/12/15/environment-matters-a-lot/</link>
      <pubDate>Mon, 15 Dec 2008 22:02:41 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/12/15/environment-matters-a-lot/</guid>
      <description>One of the discussions we had at the Alt.NET conference back in September was around how important the environment that you work in is to your self improvement as a software developer and it came up again in a discussion with some colleagues.
I posted previously about my software development journey so far but to add to that one of the most important things for me about working at ThoughtWorks is the environment that it has provided me to improve myself as a software developer.</description>
    </item>
    
    <item>
      <title>Twitter as a learning tool</title>
      <link>https://markhneedham.com/blog/2008/12/07/twitter-as-a-learning-tool/</link>
      <pubDate>Sun, 07 Dec 2008 22:30:43 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/12/07/twitter-as-a-learning-tool/</guid>
      <description>About 8 or 9 months ago I remember having a conversation with a colleague where I asked him where he had got his almost encyclopedic knowledge of all things software development.
His reply at the time was that he read a lot of blogs and that this was where he had picked up a lot of the information.
While subscribing to different blogs remains a useful way of learning about different aspects of software development, I think Twitter is now becoming a very useful complementary tool to use alongside the RSS reader.</description>
    </item>
    
    <item>
      <title>Learning cycles</title>
      <link>https://markhneedham.com/blog/2008/12/07/learning-cycles/</link>
      <pubDate>Sun, 07 Dec 2008 11:40:00 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/12/07/learning-cycles/</guid>
      <description>I&amp;rsquo;ve noticed a recurring trend in the way that I learn new concepts which doesn&amp;rsquo;t seem to fit exactly into any of the models of learning that I have come across so far.
It seems to me to be a learning cycle which goes something like this:
 Don&#39;t know what is good and what&#39;s bad Learn what&#39;s good and what&#39;s bad but don&#39;t know how to fix something that&#39;s bad Learn how to make something that&#39;s bad good  The two areas I have noticed this have both been related to concepts about writing clean code.</description>
    </item>
    
    <item>
      <title>Technical/Code Base Retrospective</title>
      <link>https://markhneedham.com/blog/2008/11/12/technicalcode-base-retrospective/</link>
      <pubDate>Wed, 12 Nov 2008 23:50:33 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/11/12/technicalcode-base-retrospective/</guid>
      <description>We decided to run a technical retrospective on our code base yesterday afternoon but apart from one blog post on the subject and a brief mention on Pat Kua&amp;rsquo;s blog I couldn&amp;rsquo;t find much information with regards to how to run one.
We therefore decided to take a fairly similar approach to our weekly retrospectives in terms of having one column for &amp;lsquo;Like&amp;rsquo; and one for &amp;lsquo;Dislike&amp;rsquo;. In addition we had columns for &amp;lsquo;Want To Know More About&amp;rsquo; and &amp;lsquo;Patterns&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Making experience matter</title>
      <link>https://markhneedham.com/blog/2008/10/23/making-experience-matter/</link>
      <pubDate>Thu, 23 Oct 2008 00:12:29 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/10/23/making-experience-matter/</guid>
      <description>I recently came across this post which speaks about the desire of recruiters to put candidates into technology specific boxes when it comes to describing their experience.
I guess this desire is backed by humans&amp;rsquo; need to see the patterns and similarities in data and having someone who doesn&amp;rsquo;t quite fit into a generalised box makes it more difficult.
I have worked on projects in Java, C# and a bit of Ruby so I do agree with most of the points with regards to language specialisation and as Jay Fields points out it is actually beneficial to diversify your experience to improve yourself.</description>
    </item>
    
    <item>
      <title>Context Driven Learning</title>
      <link>https://markhneedham.com/blog/2008/10/13/context-driven-learning/</link>
      <pubDate>Mon, 13 Oct 2008 20:44:03 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/10/13/context-driven-learning/</guid>
      <description>One pattern I&amp;rsquo;ve noticed over the last couple of years with regards to my own learning is that I find it very difficult to learn new things unless I can directly apply what I have learnt to a real life situation.
I feel this was part of the reason I found the way material is taught at universities so difficult to understand - nearly every course I studied was taught on its own without any reference to the others, and rarely did I get to use the ideas I learnt in a practical context.</description>
    </item>
    
    <item>
      <title>What makes a good developer?</title>
      <link>https://markhneedham.com/blog/2008/09/16/what-make-a-good-developer/</link>
      <pubDate>Tue, 16 Sep 2008 10:07:28 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/09/16/what-make-a-good-developer/</guid>
      <description>Early last year I became very curious about what it was that made the best developers in the industry so good at what they do.
Jay Fields points out some things that he believes indicate that a developer is good at the end of this post but a former colleague and I tried to come up with a list of areas that any Developer needed to be skilled in to justifiably consider themselves good.</description>
    </item>
    
    <item>
      <title>My Software Development journey so far</title>
      <link>https://markhneedham.com/blog/2008/09/01/my-software-development-journey-so-far/</link>
      <pubDate>Mon, 01 Sep 2008 01:01:09 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/09/01/my-software-development-journey-so-far/</guid>
      <description>While reading some of the rough drafts of Apprenticeship Patterns online I started thinking about the stages I have gone through on my Software Development journey so far.
I have worked in the industry for just over 3 years; 1 year at Reed Business and 2 years at ThoughtWorks. Over that time my thoughts, opinions and ways of doing things have changed, and no doubt these will continue to evolve as I learn more and more.</description>
    </item>
    
    <item>
      <title>Learning theory first</title>
      <link>https://markhneedham.com/blog/2008/02/09/learning-theory-first/</link>
      <pubDate>Sat, 09 Feb 2008 13:15:11 +0000</pubDate>
      
      <guid>https://markhneedham.com/blog/2008/02/09/learning-theory-first/</guid>
      <description>I’ve always been the type of person who only gets the motivation to do something if there is some useful practical reason for doing so. It therefore probably doesn’t come as much of a surprise that I hated the majority of my mostly theoretical computer science degree.
I was talking to one of my colleagues last week and came out of the conversation convinced that the desire to know the theory behind concepts is amplified when you actually get to see it in action in a real life system.</description>
    </item>
    
  </channel>
</rss>