<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.NET on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/category/.net/</link>
    <description>Recent content in .NET on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Jun 2010 22:27:58 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/category/.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C#: StackTrace</title>
      <link>https://www.markhneedham.com/blog/2010/06/22/c-stacktrace/</link>
      <pubDate>Tue, 22 Jun 2010 22:27:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/22/c-stacktrace/</guid>
      <description>Dermot and I were doing a bit of work on a mini testing DSL that we’ve been writing to try and make some of our interaction tests a bit more explicit and one of the things that we wanted to do was find out which method was being called on one of our collaborators.
We have a stub collaborator which gets injected into our system under test. It looks roughly like this:</description>
    </item>
    
    <item>
      <title>C#: A failed attempt at F#-ish pattern matching</title>
      <link>https://www.markhneedham.com/blog/2010/06/13/c-a-failed-attempt-at-f-ish-pattern-matching/</link>
      <pubDate>Sun, 13 Jun 2010 22:35:14 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/13/c-a-failed-attempt-at-f-ish-pattern-matching/</guid>
      <description>A few weeks ago we had some C# code around calcuations which had got a bit too imperative in nature.
The code looked roughly like this:
public class ACalculator { public double CalculateFrom(UserData userData) { if(userData.Factor1 == Factor1.Option1) { return 1.0; } if(userData.Factor2 == Factor2.Option3) { return 2.0; } if(userData.Factor3 == Factor3.Option2) { return 3.0 } return 0.0; } } I think there should be a more object oriented way to write this code whereby we push some of the logic onto the &amp;#39;UserData&amp;#39; object but it struck me that it reads a little bit like pattern matching code you might see in F#.</description>
    </item>
    
    <item>
      <title>C#: Using a dictionary instead of if statements</title>
      <link>https://www.markhneedham.com/blog/2010/05/30/c-using-a-dictionary-instead-of-if-statements/</link>
      <pubDate>Sun, 30 May 2010 23:13:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/30/c-using-a-dictionary-instead-of-if-statements/</guid>
      <description>A problem we had to solve on my current project is how to handle form submission where the user can click on a different button depending whether they want to go to the previous page, save the form or go to the next page.
An imperative approach to this problem might yield code similar to the following:
public class SomeController { public ActionResult TheAction(string whichButton, UserData userData) { if(whichButton == &amp;#34;Back&amp;#34;) { // do the back action } else if(whichButton == &amp;#34;Next&amp;#34;) { // do the next action } else if(whichButton == &amp;#34;Save&amp;#34;) { // do the save action } throw Exception(&amp;#34;&amp;#34;); } } A neat design idea which my colleague Dermot Kilroy introduced on our project is the idea of using a dictionary to map to the different actions instead of using if statements.</description>
    </item>
    
    <item>
      <title>Iron Ruby: &#39;unitialized constant...NameError&#39;</title>
      <link>https://www.markhneedham.com/blog/2010/04/25/iron-ruby-unitialized-constant-nameerror/</link>
      <pubDate>Sun, 25 Apr 2010 17:27:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/25/iron-ruby-unitialized-constant-nameerror/</guid>
      <description>I’ve been playing around a bit with Iron Ruby and cucumber following Rupak Ganguly’s tutorial and I tried to change the .NET example provided in the 0.4.2 release of cucumber to call a class wrapping Castle’s WindsorContainer.
The feature file now looks like this:
# &amp;#39;MyAssembly.dll&amp;#39; is in the &amp;#39;C:/Ruby/lib/ruby/gems/1.8/gems/cucumber-0.6.4/examples/cs&amp;#39; folder require &amp;#39;MyAssembly&amp;#39; ... Before do @container = Our::Namespace::OurContainer.new.Container end The class is defined roughly like this:
public class OurContainer : IContainerAccessor { private WindsorContainer container = new WindsorContainer(); public SwintonContainer() { container.</description>
    </item>
    
    <item>
      <title>Functional C#: An imperative to declarative example</title>
      <link>https://www.markhneedham.com/blog/2010/04/20/functional-c-an-imperative-to-declarative-example/</link>
      <pubDate>Tue, 20 Apr 2010 07:08:09 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/20/functional-c-an-imperative-to-declarative-example/</guid>
      <description>I wrote previously about how we’ve been working on some calculations on my current project and one thing we’ve been trying to do is write this code in a fairly declarative way.
Since we’ve been test driving the code it initially started off being quite imperative and looked a bit like this:
public class TheCalculator { ... public double CalculateFrom(UserData userData) { return Calculation1(userData) + Calculation2(userData) + Calculation3(userData); } public double Calculation1(UserData userData) { // do calculation stuff here } public double Calculation2(UserData userData) { // do calculation stuff here } .</description>
    </item>
    
    <item>
      <title>Functional C#: Using custom delegates to encapsulate Funcs</title>
      <link>https://www.markhneedham.com/blog/2010/04/17/functional-c-using-custom-delegates-to-encapsulate-funcs/</link>
      <pubDate>Sat, 17 Apr 2010 12:16:46 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/17/functional-c-using-custom-delegates-to-encapsulate-funcs/</guid>
      <description>One of the problems that I’ve frequently run into when writing C# code in a more functional way is that we can often end up with &amp;#39;Funcs&amp;#39; all over the place which don’t really describe what concept they’re encapsulating.
We had some code similar to this where it wasn’t entirely obvious what the Func being stored in the dictionary was actually doing:
public class Calculator { private Dictionary&amp;lt;string, Func&amp;lt;double, double, double&amp;gt;&amp;gt; lookups = new Dictionary&amp;lt;string, Func&amp;lt;double, double, double&amp;gt;&amp;gt;(); public Blah() { lookups.</description>
    </item>
    
    <item>
      <title>C#: Java-ish enums</title>
      <link>https://www.markhneedham.com/blog/2010/04/17/c-java-ish-enums/</link>
      <pubDate>Sat, 17 Apr 2010 10:33:16 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/17/c-java-ish-enums/</guid>
      <description>We’ve been writing quite a bit of code on my current project trying to encapsulate user selected values from drop down menus where we then want to go and look up something in another system based on the value that they select.
Essentially we have the need for some of the things that a Java Enum would give us but which a C# one doesn’t!
Right now we have several classes similar to the following in our code base to achieve this:</description>
    </item>
    
    <item>
      <title>Functional C#: Continuation Passing Style</title>
      <link>https://www.markhneedham.com/blog/2010/03/19/functional-c-continuation-passing-style/</link>
      <pubDate>Fri, 19 Mar 2010 07:48:51 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/19/functional-c-continuation-passing-style/</guid>
      <description>Partly inspired by my colleague Alex Scordellis&amp;#39; recent post about lambda passing style I spent some time trying out a continuation passing style style on some of the code in one of our controllers to see how different the code would look compared to its current top to bottom imperative style.
We had code similar to the following:
public ActionResult Submit(string id, FormCollection form) { var shoppingBasket = CreateShoppingBasketFrom(id, form); if (!</description>
    </item>
    
    <item>
      <title>Functional C#: Using Join and GroupJoin</title>
      <link>https://www.markhneedham.com/blog/2010/03/04/functional-c-using-join-and-groupjoin/</link>
      <pubDate>Thu, 04 Mar 2010 18:55:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/04/functional-c-using-join-and-groupjoin/</guid>
      <description>An interesting problem which I’ve come across a few times recently is where we have two collections which we want to use together in some way and get a result which could either be another collection or some other value.
In one which Chris and I were playing around with we had a collection of years and a collection of cars with corresponding years and the requirement was to show all the years on the page with the first car we found for that year or an empty value if there was no car for that year.</description>
    </item>
    
    <item>
      <title>C#: Overcomplicating with LINQ</title>
      <link>https://www.markhneedham.com/blog/2010/02/21/c-overcomplicating-with-linq/</link>
      <pubDate>Sun, 21 Feb 2010 12:01:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/21/c-overcomplicating-with-linq/</guid>
      <description>I recently came across an interesting bit of code which was going through a collection of strings and then only taking the first &amp;#39;x&amp;#39; number of characters and discarding the rest.
The code looked roughly like this:
var words = new[] {&amp;#34;hello&amp;#34;, &amp;#34;to&amp;#34;, &amp;#34;the&amp;#34;, &amp;#34;world&amp;#34;}; var newWords = new List&amp;lt;string&amp;gt;(); foreach (string word in words) { if (word.Length &amp;gt; 3) { newWords.Add(word.Substring(0, 3)); continue; } newWords.Add(word); } For this initial collection of words we would expect &amp;#39;newWords&amp;#39; to contain [&amp;#34;hel&amp;#34;, &amp;#34;to&amp;#34;, &amp;#34;the&amp;#34;, &amp;#34;wor&amp;#34;]</description>
    </item>
    
    <item>
      <title>C#: A lack of covariance with generics example</title>
      <link>https://www.markhneedham.com/blog/2010/02/20/c-a-lack-of-covariance-with-generics-example/</link>
      <pubDate>Sat, 20 Feb 2010 12:17:16 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/20/c-a-lack-of-covariance-with-generics-example/</guid>
      <description>One of the things I find most confusing when reading about programming languages is the idea of covariance and contravariance and while I’ve previously read that covariance is not possible when using generics in C# I recently came across an example where I saw that this was true.
I came across this problem while looking at how to refactor some code which has been written in an imperative style:</description>
    </item>
    
    <item>
      <title>C#: Causing myself pain with LINQ&#39;s delayed evaluation</title>
      <link>https://www.markhneedham.com/blog/2010/02/18/c-causing-myself-pain-with-linqs-delayed-evaluation/</link>
      <pubDate>Thu, 18 Feb 2010 22:28:12 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/18/c-causing-myself-pain-with-linqs-delayed-evaluation/</guid>
      <description>I recently came across some code was imperatively looping through a collection and then mapping each value to go to something else by using an injected dependency to do that.
I thought I’d try to make use of functional collection parameters to try and simplify the code a bit but actually ended up breaking one of the tests.
About a month ago I wrote about how I’d written a hand rolled stub to simplify a test and this was actually where I caused myself the problem!</description>
    </item>
    
    <item>
      <title>Functional C#: Extracting a higher order function with generics</title>
      <link>https://www.markhneedham.com/blog/2010/02/08/functional-c-extracting-a-higher-order-function-with-generics/</link>
      <pubDate>Mon, 08 Feb 2010 23:17:47 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/08/functional-c-extracting-a-higher-order-function-with-generics/</guid>
      <description>While working on some code with Toni we realised that we’d managed to create two functions that were almost exactly the same except they made different service calls and returned collections of a different type.
The similar functions were like this:
private IEnumerable&amp;lt;Foo&amp;gt; GetFoos(Guid id) { IEnumerable&amp;lt;Foo&amp;gt; foos = new List&amp;lt;Foo&amp;gt;(); try { foos = fooService.GetFoosFor(id); } catch (Exception e) { // do some logging of the exception } return foos; } private IEnumerable&amp;lt;Bar&amp;gt; GetBars(Guid id) { IEnumerable&amp;lt;Bar&amp;gt; bars = new List&amp;lt;Bar&amp;gt;(); try { bars = barService.</description>
    </item>
    
    <item>
      <title>Functional C#: LINQ vs Method chaining</title>
      <link>https://www.markhneedham.com/blog/2010/02/05/functional-c-linq-vs-method-chaining/</link>
      <pubDate>Fri, 05 Feb 2010 18:06:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/05/functional-c-linq-vs-method-chaining/</guid>
      <description>One of the common discussions that I’ve had with several colleagues when we’re making use of some of the higher order functions that can be applied on collections is whether to use the LINQ style syntax or to chain the different methods together.
I tend to prefer the latter approach although when asked the question after my talk at Developer Developer Developer I didn’t really have a good answer other than to suggest that it seemed to just be a personal preference thing.</description>
    </item>
    
    <item>
      <title>Functional C#: Writing a &#39;partition&#39; function</title>
      <link>https://www.markhneedham.com/blog/2010/02/01/functional-c-writing-a-partition-function/</link>
      <pubDate>Mon, 01 Feb 2010 23:34:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/01/functional-c-writing-a-partition-function/</guid>
      <description>One of the more interesting higher order functions that I’ve come across while playing with F# is the partition function which is similar to the filter function except it returns the values which meet the predicate passed in as well as the ones which don’t.
I came across an interesting problem recently where we needed to do exactly this and had ended up taking a more imperative for each style approach to solve the problem because this function doesn’t exist in C# as far as I know.</description>
    </item>
    
    <item>
      <title>DDD8: Mixing functional and object oriented approaches to programming in C#</title>
      <link>https://www.markhneedham.com/blog/2010/01/31/ddd8-mixing-functional-and-object-oriented-approaches-to-programming-in-c/</link>
      <pubDate>Sun, 31 Jan 2010 14:05:05 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/31/ddd8-mixing-functional-and-object-oriented-approaches-to-programming-in-c/</guid>
      <description>I did a presentation titled &amp;#39;Mixing functional and object oriented approaches to programming in C#&amp;#39; at the Developer Developer Developer conference in Reading.
The slides from the talk are below:
Mixing functional and object oriented approaches to programming in C#
I’ve not done many technical talks so far. My only previous attempt was a talk on F# one at the Sydney Alt.NET user group last year so I’m still learning how to do this effectively.</description>
    </item>
    
    <item>
      <title>Automapper: Don&#39;t forget Mapper.Reset() at the start</title>
      <link>https://www.markhneedham.com/blog/2010/01/27/automapper-dont-forget-mapper-reset-at-the-start/</link>
      <pubDate>Wed, 27 Jan 2010 07:57:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/27/automapper-dont-forget-mapper-reset-at-the-start/</guid>
      <description>I wrote about my first thoughts using Automapper last week and although I realised that it makes use of the static gateway pattern we ran into a problem where two consecutive calls to a method using AutoMapper always returned the same value for one of the mappings.
The code was roughly like this:
public Bar CreateNewBar(Bar originalBar, string someNewValue) { Mapper.CreateMap&amp;lt;Baz, Baz&amp;gt;() .ForMember(x =&amp;gt; x.Id, opts =&amp;gt; opts.Ignore()) .ForMember(x =&amp;gt; x.</description>
    </item>
    
    <item>
      <title>Automapper: First thoughts</title>
      <link>https://www.markhneedham.com/blog/2010/01/22/automapper-first-thoughts/</link>
      <pubDate>Fri, 22 Jan 2010 23:21:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/22/automapper-first-thoughts/</guid>
      <description>I came across Jimmy Bogard’s Automapper library a while ago but hadn’t had the opportunity to try it out on a project until this week.
The problem we wanted to solve was relatively simple.
We had a domain object and we wanted to create a copy of that with one of the fields changed and all of the ids cleared from the object and any objects contained within it so that we could persist the new web of objects to the database.</description>
    </item>
    
    <item>
      <title>C# Object Initializer: More thoughts</title>
      <link>https://www.markhneedham.com/blog/2010/01/10/c-object-initializer-more-thoughts/</link>
      <pubDate>Sun, 10 Jan 2010 18:52:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/10/c-object-initializer-more-thoughts/</guid>
      <description>I wrote previously about my dislike of C#&amp;#39;s object initializer syntax and while I still think those arguments hold I came across an interesting argument for why it is a useful feature in Jeremy Miller’s MSDN article on creating internal DSLs in C#.
In the article Jeremy works through an example where he builds up a &amp;#39;SendMessageRequest&amp;#39; first by using a fluent interface and then by making use of object initializer syntax.</description>
    </item>
    
    <item>
      <title>Coding: An abstract class/ASP.NET MVC dilemma</title>
      <link>https://www.markhneedham.com/blog/2009/09/13/coding-an-abstract-classasp-net-mvc-dilemma/</link>
      <pubDate>Sun, 13 Sep 2009 00:19:42 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/09/13/coding-an-abstract-classasp-net-mvc-dilemma/</guid>
      <description>I previously described a refactoring that we have been working on to reduce the number of fields and delay calculations and the actual goal behind this refactoring was to get the code into shape so that we could add in the logic for a new business process that our application needed to handle.
The code in question defines view models being used by different partial views which are rendered depending on the business process that the user is currently executing.</description>
    </item>
    
    <item>
      <title>C#: Removing duplication in mapping code with partial classes</title>
      <link>https://www.markhneedham.com/blog/2009/07/07/c-removing-duplication-in-mapping-code-with-partial-classes/</link>
      <pubDate>Tue, 07 Jul 2009 18:11:36 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/07/07/c-removing-duplication-in-mapping-code-with-partial-classes/</guid>
      <description>One of the problems that we’ve come across while writing the mapping code for our anti corruption layer is that there is quite a lot of duplication of mapping similar types due to the fact that each service has different auto generated classes representing the same data structure.
We are making SOAP web service calls and generating classes to represent the requests and responses to those end points using SvcUtil.</description>
    </item>
    
    <item>
      <title>Using Fiddler with IIS</title>
      <link>https://www.markhneedham.com/blog/2009/06/24/using-fiddler-with-iis/</link>
      <pubDate>Wed, 24 Jun 2009 17:46:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/24/using-fiddler-with-iis/</guid>
      <description>We’ve been using Fiddler to debug the requests and responses sent via web services to a service layer our application interacts with and it works pretty well when you run the application using Cassini but by default won’t work when you run the website through IIS.
The key to this as one of my colleagues (who gives credit to Erik) showed me today is to ensure that IIS is running under the same user that Fiddler is running under which in our case is the &amp;#39;Administrator&amp;#39; account.</description>
    </item>
    
    <item>
      <title>Functional Collection Parameters: A different way of thinking about collections</title>
      <link>https://www.markhneedham.com/blog/2009/06/18/functional-collection-parameters-a-different-way-of-thinking-about-collections/</link>
      <pubDate>Thu, 18 Jun 2009 18:31:59 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/18/functional-collection-parameters-a-different-way-of-thinking-about-collections/</guid>
      <description>One of the changes that I’ve noticed in my coding now compared to around 7 or 8 months ago is that whenever there’s some operations to be performed on a collection I am far more inclined to think of how to do those operations using a functional approach.
I’ve written previously about the ways I’ve been making use of functional collection parameters in my code but what I hadn’t really considered was that the way of thinking about the problem we want to solve is slightly different.</description>
    </item>
    
    <item>
      <title>Functional Collection Parameters: Handling the null collection</title>
      <link>https://www.markhneedham.com/blog/2009/06/16/functional-collection-parameters-handling-the-null-collection/</link>
      <pubDate>Tue, 16 Jun 2009 20:29:29 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/16/functional-collection-parameters-handling-the-null-collection/</guid>
      <description>One of the interesting cases where I’ve noticed we tend to avoid functional collection parameters in our code base is when there’s the possibility of the collection being null.
The code is on the boundary of our application’s interaction with another service so it is actually a valid scenario that we could receive a null collection.
When using extension methods, although we wouldn’t get a null pointer exception by calling one on a null collection, we would get a &amp;#39;source is null&amp;#39; exception when the expression is evaluated so we need to protect ourself against this.</description>
    </item>
    
    <item>
      <title>C#/F#: Using .NET framework classes</title>
      <link>https://www.markhneedham.com/blog/2009/06/16/cf-using-net-framework-classes/</link>
      <pubDate>Tue, 16 Jun 2009 18:55:38 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/06/16/cf-using-net-framework-classes/</guid>
      <description>I was recently discussing F# with a couple of colleagues and one thing that came up is the slightly different ways that we might choose to interact with certain .NET framework classes compared to how we use those same classes in C# code.
One of those where I see potential for different use is the Dictionary class.
In C# code when we’re querying a dictionary to check that a value exists before we try to extract it we might typically do this:</description>
    </item>
    
    <item>
      <title>SharpCouch: Use anonymous type to create JSON objects</title>
      <link>https://www.markhneedham.com/blog/2009/05/31/sharpcouch-use-anonymous-type-to-create-json-objects/</link>
      <pubDate>Sun, 31 May 2009 20:59:47 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/05/31/sharpcouch-use-anonymous-type-to-create-json-objects/</guid>
      <description>I’ve been playing around with CouchDB a bit today and in particular making use of SharpCouch, a library which acts as a wrapper around CouchDB calls. It is included in the CouchBrowse library which is recommended as a good starting point for interacting with CouchDB from C# code.
I decided to work out how the API worked with by writing an integration test to save a document to the database.</description>
    </item>
    
    <item>
      <title>xUnit.NET: Running tests written in Visual Studio 2010</title>
      <link>https://www.markhneedham.com/blog/2009/05/30/xunitnet-running-tests-written-in-visual-studio-2010/</link>
      <pubDate>Sat, 30 May 2009 11:51:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/05/30/xunitnet-running-tests-written-in-visual-studio-2010/</guid>
      <description>I’ve been playing around with F# in Visual Studio 2010 after the Beta 1 release last Wednesday and in particular I’ve been writing some xUnit.NET tests around the twitter application I’ve been working on.
A problem I ran into when attempting to run my tests against &amp;#39;xunit.console.exe&amp;#39; is that xUnit.NET is linked to run against version 2.0 of the CLR and right now you can’t actually change the &amp;#39;targetframework&amp;#39; for a project compiled in Visual Studio 2010.</description>
    </item>
    
    <item>
      <title>C#: Using virtual leads to confusion?</title>
      <link>https://www.markhneedham.com/blog/2009/05/06/c-using-virtual-leads-to-confusion/</link>
      <pubDate>Wed, 06 May 2009 19:30:50 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/05/06/c-using-virtual-leads-to-confusion/</guid>
      <description>A colleague and I were looking through some code that I worked on a couple of months ago where I had created a one level hierarchy using inheritance to represent the response status that we get back from a service call.
The code was along these lines:
public class ResponseStatus { public static readonly ResponseStatus TransactionSuccessful = new TransactionSuccessful(); public static readonly ResponseStatus UnrecoverableError = new UnrecoverableError(); public virtual bool RedirectToErrorPage { get { return true; } } } public class UnrecoverableError : ResponseStatus { } public class TransactionSuccessful : ResponseStatus { public override bool RedirectToErrorPage { get { return false; } } } Looking at it now it does seem a bit over-engineered, but the main confusion with this code is that when you click through to the definition of &amp;#39;RedirectToError&amp;#39; it goes to the ResponseStatus version of that property and it’s not obvious that it is being overridden in a sub class, this being possible due to my use of the virtual key word.</description>
    </item>
    
    <item>
      <title>F#: A day of writing a little twitter application</title>
      <link>https://www.markhneedham.com/blog/2009/04/13/f-a-day-of-writing-a-little-twitter-application/</link>
      <pubDate>Mon, 13 Apr 2009 22:09:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/04/13/f-a-day-of-writing-a-little-twitter-application/</guid>
      <description>I spent most of the bank holiday Monday here in Sydney writing a little application to scan through my twitter feed and find me just the tweets which have links in them since for me that’s where a lot of the value of twitter lies.
I’m sure someone has done this already but it seemed like a good opportunity to try and put a little of the F# that I’ve learned from reading Real World Functional Programming to use.</description>
    </item>
    
    <item>
      <title>Functional C#: The hole in the middle pattern</title>
      <link>https://www.markhneedham.com/blog/2009/04/04/functional-c-the-hole-in-the-middle-pattern/</link>
      <pubDate>Sat, 04 Apr 2009 11:41:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/04/04/functional-c-the-hole-in-the-middle-pattern/</guid>
      <description>While reading Real World Functional Programming I came across an interesting pattern that I have noticed in some code bases recently which I liked but didn’t know had been given a name!
The hole in the middle pattern, coined by Brian Hurt, shows a cool way of using higher order functions in order to reuse code in cases where the code typically looks something like this:
public void SomeServiceCall() { var serviceClient = CreateServiceClient(); try { serviceClient.</description>
    </item>
    
    <item>
      <title>ASP.NET MVC: Pre-compiling views when using SafeEncodingCSharpCodeProvider</title>
      <link>https://www.markhneedham.com/blog/2009/03/24/aspnet-mvc-pre-compiling-views-when-using-safeencodingcsharpcodeprovider/</link>
      <pubDate>Tue, 24 Mar 2009 22:55:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/03/24/aspnet-mvc-pre-compiling-views-when-using-safeencodingcsharpcodeprovider/</guid>
      <description>We’ve been doing some work to get our views in ASP.NET MVC to be pre-compiled which allows us to see any errors in them at compilation rather than at run time.
It’s relatively simple to do. You just need to add the following code into your .csproj file anywhere below the element:
&amp;lt;Target Name=&amp;#34;AfterBuild&amp;#34;&amp;gt; &amp;lt;AspNetCompiler VirtualPath=&amp;#34;/&amp;#34; PhysicalPath=&amp;#34;$(ProjectDir)\..\$(ProjectName)&amp;#34;/&amp;gt; &amp;lt;/Target&amp;gt; where VirtualPath refers to the virtual path defined inside your project file and PhysicalPath is the path to the folder which contains the project with the views in.</description>
    </item>
    
    <item>
      <title>ASP.NET MVC: Reducing duplication for partial models</title>
      <link>https://www.markhneedham.com/blog/2009/03/03/aspnet-mvc-using-adaptors-for-partial-models/</link>
      <pubDate>Tue, 03 Mar 2009 23:55:36 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/03/03/aspnet-mvc-using-adaptors-for-partial-models/</guid>
      <description>One of the problems we can encounter when using partials throughout our views is how we should create the model needed for those partials.
The approach that we have been following is to have the partial/child model on the parent model and then just call the appropriate method where we create the partial.
e.g.
public class ParentModel { public string Property1 {get;set;} public ChildModel ChildModel { get;set; } } public class ChildModel { public string Property1 {get;set;} } We have sometimes run into the problem where the data in the ChildModel is being populated from the ParentModel (due to it also being needed there) leading to data duplication.</description>
    </item>
    
    <item>
      <title>NUnit: Tests with Context/Spec style assertions</title>
      <link>https://www.markhneedham.com/blog/2009/03/01/nunit-tests-with-contextspec-style-assertions/</link>
      <pubDate>Sun, 01 Mar 2009 16:43:46 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/03/01/nunit-tests-with-contextspec-style-assertions/</guid>
      <description>I recently started playing around with Scott Bellware’s Spec-Unit and Aaron’s Jensen’s MSpec, two frameworks which both provide a way of writing Context/Spec style tests/specifications.
What I particularly like about this approach to writing tests is that we can divide assertions into specific blocks and have them all evaluated even if an earlier one fails.
NUnit is our testing tool of choice at the moment and we wanted to try and find a way to test the mapping between the domain and service layers of the application.</description>
    </item>
    
    <item>
      <title>C#: Wrapping DateTime</title>
      <link>https://www.markhneedham.com/blog/2009/02/25/c-wrapping-datetime/</link>
      <pubDate>Wed, 25 Feb 2009 23:12:57 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/25/c-wrapping-datetime/</guid>
      <description>I think it was Darren Hobbs who first introduced me to the idea of wrapping dates in our system to describe what that date actually means in our context, and after suffering the pain of passing some unwrapped dates around our code I think I can safely say that wrapping them is the way to go.
The culprit was a date of birth which was sometimes being created from user input and sometimes being retrieved from another system.</description>
    </item>
    
    <item>
      <title>C#: Wrapping collections vs Extension methods</title>
      <link>https://www.markhneedham.com/blog/2009/02/23/c-wrapping-collections-vs-extension-methods/</link>
      <pubDate>Mon, 23 Feb 2009 20:24:26 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/23/c-wrapping-collections-vs-extension-methods/</guid>
      <description>Another interesting thing I’ve noticed in C# world is that there seems to be a trend towards using extension methods as much as possible. One area where this is particularly prevalent is when working with collections.
From reading Object Calisthenics and working with Nick I have got used to wrapping collections and defining methods on the wrapped class for interacting with the underlying collection.
For example, given that we have a collection of Foos that we need to use in our system we might wrap that in an object Foos.</description>
    </item>
    
    <item>
      <title>C#: Implicit Operator</title>
      <link>https://www.markhneedham.com/blog/2009/02/22/c-implicit-operator/</link>
      <pubDate>Sun, 22 Feb 2009 22:20:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/22/c-implicit-operator/</guid>
      <description>Since it was pointed out in the comments on an earlier post I wrote about using the builder pattern how useful the implicit operator could be in this context we’ve been using it wherever it makes sense.
The main benefit that using this approach provides is that our test code becomes more expressive since we don’t need to explicitly call a method to complete the building of our object.</description>
    </item>
    
    <item>
      <title>ASP.NET MVC: Driving partials by convention</title>
      <link>https://www.markhneedham.com/blog/2009/02/21/aspnet-mvc-driving-partials-by-convention/</link>
      <pubDate>Sat, 21 Feb 2009 10:39:49 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/21/aspnet-mvc-driving-partials-by-convention/</guid>
      <description>I like to have conventions in the code I write - I find it makes the code i write much cleaner which still providing flexibility.
One of the conventions that Jeremy Miller coined for working with ASP.NET MVC applications is that of using one model per controller method aka &amp;#34;The Thunderdome principle&amp;#34;. I think we can take this further by having one model per partial that we use inside our views.</description>
    </item>
    
    <item>
      <title>C#: Extension methods != Open classes</title>
      <link>https://www.markhneedham.com/blog/2009/02/19/c-extensions-methods-open-classes/</link>
      <pubDate>Thu, 19 Feb 2009 06:22:07 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/19/c-extensions-methods-open-classes/</guid>
      <description>When I first heard about extension methods in C# it sounded like a pretty cool idea but I wasn’t sure how they differed to the idea of open classes that I had seen when doing a bit of Ruby.
After a bit of a struggle recently to try and override some extension methods on HtmlHelper in ASP.NET MVC it’s clear to me that we don’t quite have the same power that open classes would provide.</description>
    </item>
    
    <item>
      <title>C#: Object Initializer and The Horse Shoe</title>
      <link>https://www.markhneedham.com/blog/2009/02/16/c-object-initializer-and-the-horse-shoe/</link>
      <pubDate>Mon, 16 Feb 2009 22:04:20 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/16/c-object-initializer-and-the-horse-shoe/</guid>
      <description>The object initializer syntax introduced in C# 3.0 makes it easier for us to initialise our objects in one statement but I think we need to remember that they are not named parameters and that there is still a place (a very good one actually) for creating objects from constructors or factory methods.
Unfortunately what I think the cleaner syntax does is encourage us to create objects with half the fields populated and half of them null by default.</description>
    </item>
    
    <item>
      <title>ASP.NET MVC: Preventing XSS attacks</title>
      <link>https://www.markhneedham.com/blog/2009/02/12/aspnet-mvc-preventing-xss-attacks/</link>
      <pubDate>Thu, 12 Feb 2009 22:47:30 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/12/aspnet-mvc-preventing-xss-attacks/</guid>
      <description>XSS(Cross site scripting) attacks on websites seem to be quite popular these days but luckily if you’re working with the ASP.NET MVC framework Steve Sanderson has written a great post on how to protect yourself from this.
The solution Steve details works the opposite way to other solutions I have heard for this problem - we assume that everything that goes to the browser needs to be HTML encoded unless otherwise stated.</description>
    </item>
    
    <item>
      <title>C#: Properties vs Methods</title>
      <link>https://www.markhneedham.com/blog/2009/02/11/c-properties-vs-methods/</link>
      <pubDate>Wed, 11 Feb 2009 11:20:08 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/11/c-properties-vs-methods/</guid>
      <description>I was browsing through our tests today and noticed a test along these lines (simplified for example purposes):
[Test, ExpectedException(typeof(Exception))] public void ShouldThrowExceptionIfNoBarSet() { var bar = new Foo(null).Bar; } public class Foo { private readonly string bar; public Foo(string bar) { this.bar = bar; } public string Bar { get { if (bar == null) { throw new Exception(&amp;#34;No bar&amp;#34;); } return bar; } } } What I found strange here is that &amp;#39;bar&amp;#39; is never used and Resharper points out as much.</description>
    </item>
    
    <item>
      <title>C#: Public fields vs automatic properties </title>
      <link>https://www.markhneedham.com/blog/2009/02/04/c-public-fields-vs-automatic-properties/</link>
      <pubDate>Wed, 04 Feb 2009 17:52:03 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/04/c-public-fields-vs-automatic-properties/</guid>
      <description>An interesting new feature in C# 3.0 is that of automatic properties on objects - this allows us to define a get/set property and the creation of the underlying field is taken care off for us.
We can therefore create a class like this:
public class Foo { public string Bar { get; set; } } Now ignoring the fact that it’s terrible OO to write a class like that, one thing that we’ve been wondering is what’s the difference between doing the above and just creating a public field on Foo called Bar like so:</description>
    </item>
    
    <item>
      <title>C#: Refactoring to functional collection parameters</title>
      <link>https://www.markhneedham.com/blog/2009/02/03/c-refactoring-to-functional-collection-parameters/</link>
      <pubDate>Tue, 03 Feb 2009 07:18:40 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/02/03/c-refactoring-to-functional-collection-parameters/</guid>
      <description>I wrote about a month or so ago about the functional collection parameters now available in C# and certainly one of the most fun refactorings for me is trying to get code written using a for loop into a state where it is using one of these.
With a bit of help from my colleague James Crisp, these are some of the most common refactorings that I have come across so far.</description>
    </item>
    
    <item>
      <title>C#: Builder pattern still useful for test data</title>
      <link>https://www.markhneedham.com/blog/2009/01/21/c-builder-pattern-still-useful-for-test-data/</link>
      <pubDate>Wed, 21 Jan 2009 23:49:13 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/01/21/c-builder-pattern-still-useful-for-test-data/</guid>
      <description>I had thought that with the ability to use the new object initalizer syntax in C# 3.0 meant that the builder pattern was now no longer necessary but some recent refactoring efforts have made me believe otherwise.
My original thought was that the builder pattern was really useful for providing a nicely chained way of creating objects, but after a bit of discussion with some colleagues I have come across three different reasons why we might want to use the builder pattern to create test data:</description>
    </item>
    
    <item>
      <title>F# vs C# vs Java: Functional Collection Parameters</title>
      <link>https://www.markhneedham.com/blog/2009/01/19/f-vs-c-vs-java-functional-collection-parameters/</link>
      <pubDate>Mon, 19 Jan 2009 19:24:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/01/19/f-vs-c-vs-java-functional-collection-parameters/</guid>
      <description>I wrote a post about a month ago on using functional collection parameters in C# and over the weekend Fabio and I decided to try and contrast the way you would do this in Java, C# and then F# just for fun.
Map Map evaluates a high order function on all the elements in a collection and then returns a new collection containing the results of the function evaluation.</description>
    </item>
    
    <item>
      <title>F#: Partial Function Application with the Function Composition Operator</title>
      <link>https://www.markhneedham.com/blog/2009/01/12/f-partial-function-application-with-the-function-composition-operator/</link>
      <pubDate>Mon, 12 Jan 2009 22:22:43 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/01/12/f-partial-function-application-with-the-function-composition-operator/</guid>
      <description>In my continued reading of F# one of the ideas I’ve come across recently is that of partial function application.
This is a way of allowing us to combine different functions together and allows some quite powerful syntax to be written.
The term &amp;#39;currying&amp;#39; is perhaps a better known term for describing this although as I understand they are not exactly the same.
Currying is where we return a function that has been partially applied, in such a way that we can chain together a group of functions with a single argument.</description>
    </item>
    
    <item>
      <title>F#: Forward Operator</title>
      <link>https://www.markhneedham.com/blog/2009/01/06/f-forward-operator/</link>
      <pubDate>Tue, 06 Jan 2009 00:19:52 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/01/06/f-forward-operator/</guid>
      <description>Continuing on my F# journey I came across a post by Ben Hall describing the approach he takes when learning a new programming language.
One of the approaches he describes is that of writing unit tests to help keep your learning on track. I’ve only been using the F# interactive console so far so I thought I’d give it a try.
After reading about the somewhat convoluted approach required to use NUnit or MBUnit to write F# unit tests I came across XUnit.</description>
    </item>
    
    <item>
      <title>F# Option Types</title>
      <link>https://www.markhneedham.com/blog/2009/01/02/f-option-types/</link>
      <pubDate>Fri, 02 Jan 2009 22:35:31 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2009/01/02/f-option-types/</guid>
      <description>I’ve been spending a bit of time working through the Real World Functional Programming book to learn a bit about F# and one of the cool features I came across today (while reading Chris Smith’s post on F# lists) is the Option type.
I first came across this idea a few months ago when discussing null handling strategies with a colleague who pointed out that you could get around this problem in Scala by using the Option class.</description>
    </item>
    
    <item>
      <title>Oxite: Some Thoughts</title>
      <link>https://www.markhneedham.com/blog/2008/12/31/oxite-some-thoughts/</link>
      <pubDate>Wed, 31 Dec 2008 01:26:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/12/31/oxite-some-thoughts/</guid>
      <description>The recently released Oxite code base has taken a bit of a hammering in the blogosphere for a variety of reasons - the general feeling being that it doesn’t really serve as a particularly good example of an ASP.NET MVC application.
I was intrigued to read the code though - you can always learn something by doing so and reading code is one of the ares that I want to improve in.</description>
    </item>
    
    <item>
      <title>C# lambdas: How much context should you need?</title>
      <link>https://www.markhneedham.com/blog/2008/12/27/c-lambdas-how-much-context-should-you-need/</link>
      <pubDate>Sat, 27 Dec 2008 23:15:31 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/12/27/c-lambdas-how-much-context-should-you-need/</guid>
      <description>I had an interesting discussion with a colleague last week about the names that we give to variables inside lambda expressions which got me thinking about the context that we should need to hold when reading code like this.
The particular discussion was around an example like this:
public class Foo { private String bar; private String baz; public Foo(String bar, String baz) { this.bar = bar; this.baz = baz; } public override string ToString() { return string.</description>
    </item>
    
    <item>
      <title>Functional Collection Parameters in C#</title>
      <link>https://www.markhneedham.com/blog/2008/12/17/functional-collection-parameters-in-c/</link>
      <pubDate>Wed, 17 Dec 2008 22:13:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/12/17/functional-collection-parameters-in-c/</guid>
      <description>While talking through my understanding of the Select method which can be applied to collections in C# with a colleague, it became clear that C# doesn’t seem to use the same names for these type of operations as are used in the world of functional programming.
Coincidentally on the same day I came across Bill Six’s post about using functional collection parameters in Ruby, so I thought I’d see what the equivalent operations are in C#.</description>
    </item>
    
    <item>
      <title>C#&#39;s Lambda ForEach: Only on Lists?</title>
      <link>https://www.markhneedham.com/blog/2008/12/15/cs-lamba-foreach-only-on-lists/</link>
      <pubDate>Mon, 15 Dec 2008 23:52:17 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/12/15/cs-lamba-foreach-only-on-lists/</guid>
      <description>One of my favourite things introduced into C# recently is the new ForEach method which can be applied to (apparently only!) lists.
Last week we had a situation where we wanted to make use of the ForEach method on an IDictionary which we were using to store a collection of Selenium clients.
IDictionary&amp;lt;string, ISelenium&amp;gt; seleniumClients = new Dictionary&amp;lt;string, ISelenium&amp;gt;(); We wanted to write a piece of code to exit all of the clients when our tests had completed.</description>
    </item>
    
    <item>
      <title>Html.RadioButton setting all values to selected value workaround</title>
      <link>https://www.markhneedham.com/blog/2008/11/28/htmlradiobutton-setting-all-values-to-selected-value-workaround/</link>
      <pubDate>Fri, 28 Nov 2008 21:32:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/11/28/htmlradiobutton-setting-all-values-to-selected-value-workaround/</guid>
      <description>While working with the Html.RadioButton() UI helper for ASP.NET MVC we came across an interesting problem whereby when you submitted the form, all the values for that particular group of radio buttons was set to the value of the one that was selected.
For example, given a form like this:
&amp;lt;%= Html.RadioButton(&amp;#34;option1&amp;#34;, true) %&amp;gt;Yes &amp;lt;%= Html.RadioButton(&amp;#34;option2&amp;#34;, false)%&amp;gt;No When we first load the page, this is the HTML it generated:</description>
    </item>
    
    <item>
      <title>Lambda in C#: Conciseness v Readability</title>
      <link>https://www.markhneedham.com/blog/2008/11/24/c-new-language-features-conciseness-v-readability/</link>
      <pubDate>Mon, 24 Nov 2008 23:41:36 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/11/24/c-new-language-features-conciseness-v-readability/</guid>
      <description>One of the things I really disliked when I first came across C# 3.0 code was lambda functions.
At the time I remember speaking to my Tech Lead and expressing the opinion that they were making the code harder to understand and were valuing conciseness over readability.
After a week of reading about the new C# features and understanding how they worked the code was now more readable to me and a lot of the boiler plate code that I had come to expect was no longer necessary.</description>
    </item>
    
    <item>
      <title>Debugging ASP.NET MVC source code</title>
      <link>https://www.markhneedham.com/blog/2008/11/19/debugging-aspnet-mvc-source-code/</link>
      <pubDate>Wed, 19 Nov 2008 21:30:19 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/11/19/debugging-aspnet-mvc-source-code/</guid>
      <description>We’ve been doing some work with the ASP.NET MVC framework this week and one of the things we wanted to be able to do is to debug through the source code to see how it works.
Our initial idea was to bin deploy the ASP.NET MVC assemblies with the corresponding pdbs. Unfortunately this didn’t work and we got a conflict with the assemblies deployed in the GAC:
Compiler Error Message: CS0433: The type &amp;#39;System.</description>
    </item>
    
    <item>
      <title>Java vs .NET: An Overview</title>
      <link>https://www.markhneedham.com/blog/2008/10/15/java-vs-net-an-overview/</link>
      <pubDate>Wed, 15 Oct 2008 00:09:05 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/10/15/java-vs-net-an-overview/</guid>
      <description>A couple of months ago my colleague Mark Thomas posted about working on a C# project after 10 years working in Java, and being someone who has worked on projects in both languages fairly consistently (3 Java projects, 2 .NET projects) over the last two years I thought it would be interesting to do a comparison between the two.
The standard ThoughtWorks joke is that you just need to remember to capitalise the first letter of method names in C# and then you’re good to go but I think there’s more to it than that.</description>
    </item>
    
    <item>
      <title>Alt.NET Sydney User Group Meeting #1</title>
      <link>https://www.markhneedham.com/blog/2008/10/01/altnet-sydney-user-group-meeting-1/</link>
      <pubDate>Wed, 01 Oct 2008 22:09:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/10/01/altnet-sydney-user-group-meeting-1/</guid>
      <description>James Crisp and Richard Banks arranged the first Alt.NET Sydney User Group meeting held on Tuesday night at the ThoughtWorks office.
The first thing to say is thanks to James and Richard for getting this setup so quickly - it was less than a month ago that Richard suggested the idea of creating a group on the Alt.NET mailing list.
Richard and James have already written summaries of what went on but I thought I’d give some of my thoughts as well.</description>
    </item>
    
    <item>
      <title>Alt.NET UK Conference 2.0</title>
      <link>https://www.markhneedham.com/blog/2008/09/14/altnet-uk-conference-20/</link>
      <pubDate>Sun, 14 Sep 2008 16:28:27 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/09/14/altnet-uk-conference-20/</guid>
      <description>I spent most of yesterday at the 2nd Alt.NET UK conference at Conway Hall in London.
First of all kudos to Ian Cooper, Alan Dean and Ben Hall for arranging it. There seemed to be a lot more people around than for the one in February which no doubt took a lot of arranging.
It was again run using the open spaces format and we started with an interesting discussion on what Alt.</description>
    </item>
    
    <item>
      <title>Getting a strongly typed collection using LINQ to Xml</title>
      <link>https://www.markhneedham.com/blog/2008/08/30/getting-a-strongly-typed-collection-using-linq-to-xml/</link>
      <pubDate>Sat, 30 Aug 2008 03:03:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/30/getting-a-strongly-typed-collection-using-linq-to-xml/</guid>
      <description>I mentioned earlier that I have been playing around with LINQ to Xml for parsing a Visual Studio csproj file.
While having namespace issues I decided to try and parse a simpler Xml file to try and work out what I was doing wrong.
Given this fragment of Xml:
&amp;lt;Node&amp;gt; &amp;lt;InnerNode&amp;gt;mark&amp;lt;/InnerNode&amp;gt; &amp;lt;InnerNode&amp;gt;needham&amp;lt;/InnerNode&amp;gt; &amp;lt;/Node&amp;gt; I wanted to get a collection(IEnumerable) of InnerNode values.
Unfortunately my over enthusiasm to use anonymous types meant that I caused myself more problems than I needed to.</description>
    </item>
    
    <item>
      <title>C# Thrift Examples</title>
      <link>https://www.markhneedham.com/blog/2008/08/29/c-thrift-examples/</link>
      <pubDate>Fri, 29 Aug 2008 01:39:52 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/29/c-thrift-examples/</guid>
      <description>As I mentioned in my earlier post I have been working with Facebook’s Thrift messaging project.
Unfortunately there are not currently any C# examples of how to use the Data Transfer Objects the Thrift compiler generates for us on the official wiki.
We managed to figure out how to do it by following the Java instructions and converting them into C# code. Before writing any code we need to import Thrift.</description>
    </item>
    
    <item>
      <title>Querying Xml with LINQ - Don&#39;t forget the namespace</title>
      <link>https://www.markhneedham.com/blog/2008/08/28/querying-xml-with-linq-dont-forget-the-namespace/</link>
      <pubDate>Thu, 28 Aug 2008 10:15:45 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/28/querying-xml-with-linq-dont-forget-the-namespace/</guid>
      <description>I’ve been working with a colleague on parsing a Visual Studio project file using LINQ to effectively create a DOM of the file.
The first thing we tried to do was get a list of all the references from the file. It seemed like a fairly easy problem to solve but for some reason nothing was getting returned:
XDocument projectFile = XDocument.Load(projectFilePath.Path); var references = from itemGroupElement in projectFile.Descendants(&amp;#34;ItemGroup&amp;#34;).First().Elements() select itemGroupElement.</description>
    </item>
    
    <item>
      <title>Resharper templates</title>
      <link>https://www.markhneedham.com/blog/2008/08/27/resharper-templates/</link>
      <pubDate>Wed, 27 Aug 2008 11:58:03 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/27/resharper-templates/</guid>
      <description>One of the first things that I do when I go onto a project is setup a ReSharper template for writing tests.
I generally set this up so that when I type &amp;#39;should&amp;#39; I can press tab and it will automatically create an outline of a test method for me.
Creating a template is as simple as going to &amp;#39;ReSharper &amp;gt; Live Templates&amp;#39; from Visual Studio.
I have attached several templates that I seem to end up writing over and over again.</description>
    </item>
    
    <item>
      <title>Building in release mode with no pdbs with msbuild</title>
      <link>https://www.markhneedham.com/blog/2008/08/20/building-in-release-mode-with-no-pdbs-with-msbuild/</link>
      <pubDate>Wed, 20 Aug 2008 18:50:18 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/20/building-in-release-mode-with-no-pdbs-with-msbuild/</guid>
      <description>I’ve been having trouble trying to work out how to build our projects in msbuild in release mode without creating the customary pdb files that seem to be created by default.
I tried calling msbuild.exe with the &amp;#39;Release&amp;#39; configuration:
&amp;#39;C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild.Exe ( Proj.csproj /p:OutputPath=\output\path\ /p:Configuration=Release)&amp;#39; To no avail. It still created the pdb file. Next I tried setting the &amp;#39;DebugSymbols&amp;#39; property to false:
&amp;#39;C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild.Exe ( Proj.csproj /p:OutputPath=\output\path\ /p:Configuration=Release /p:DebugSymbols=false)&amp;#39; Still it created the file.</description>
    </item>
    
    <item>
      <title>First thoughts on using var in C# 3.0 with Resharper</title>
      <link>https://www.markhneedham.com/blog/2008/08/15/first-thoughts-on-using-var-in-c-30-with-resharper/</link>
      <pubDate>Fri, 15 Aug 2008 08:03:09 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/15/first-thoughts-on-using-var-in-c-30-with-resharper/</guid>
      <description>One of the first things I noticed when coming into the world of C# 3.0 was the use of the key word &amp;#39;var&amp;#39; all over our code base.
I had read about it previously and was under the impression that its main use would be when writing code around LINQ or when creating anonymous types.
On getting Resharper to tidy up my code I noticed that just about every variable type declaration had been removed and replaced with var.</description>
    </item>
    
    <item>
      <title>Controlling window position with the win32 API</title>
      <link>https://www.markhneedham.com/blog/2008/08/10/controlling-window-position-with-the-win32-api/</link>
      <pubDate>Sun, 10 Aug 2008 03:02:47 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/10/controlling-window-position-with-the-win32-api/</guid>
      <description>We’ve been doing a bit of work around controlling the state of the windows of applications launched programmatically.
The problem we were trying to solve is to launch an arbitrary application, move it around the screen and then save its window position on the screen so that next time it’s launched it loads in the same position.
There are some win32 APIs designed to do just this, although it took a fair bit of searching and trial and error to work out exactly how to use them.</description>
    </item>
    
    <item>
      <title>IntelliJ style item tracking in Visual Studio</title>
      <link>https://www.markhneedham.com/blog/2008/08/09/intellij-style-item-tracking-in-visual-studio/</link>
      <pubDate>Sat, 09 Aug 2008 14:51:29 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/09/intellij-style-item-tracking-in-visual-studio/</guid>
      <description>One of my favourite features of IntelliJ is that it tracks the item that you currently have open on your Solution Explorer.
I thought this wasn’t possible in Visual Studio and had resigned myself to trying to remember which project each file was in. Luckily for me a colleague pointed out that it is in fact possible but is just turned off by default.
Tools &amp;gt; Options &amp;gt; Projects and Solutions &amp;gt; Check &amp;#39;Track Active Item in Solution Explorer&amp;#39;</description>
    </item>
    
    <item>
      <title>Keyboard shortcut for running tests with Resharper</title>
      <link>https://www.markhneedham.com/blog/2008/08/08/keyboard-shortcut-for-running-tests-with-resharper/</link>
      <pubDate>Fri, 08 Aug 2008 19:23:13 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2008/08/08/keyboard-shortcut-for-running-tests-with-resharper/</guid>
      <description>Having moved back into the world of C#/.NET development after a few months in the Java world I have had the joy of getting to use Resharper again.
One annoyance that myself and my team have been having over the past few weeks is running unit tests. We always end up going to the Solution Explorer, right click the project and then click &amp;#39;Run Unit Tests&amp;#39;. There is another way…​</description>
    </item>
    
  </channel>
</rss>
