+++
draft = false
date="2016-05-22 09:09:27"
title="Neo4j vs Relational: Refactoring - Add a new field/property"
tag=['neo4j']
category=['neo4j']
+++

<p>
A couple of months ago I presented <a href="http://info.neo4j.com/intro-to-cypher-for-the-sql-developer-lp.html">a webinar comparing how you'd model and evolve a data model using a Postgres SQL database and Neo4j</a>.</p>


<p>This is what the two data models looked like after the initial data import and before any refactoring/migration had been done:</p>


<cite>Relational</cite>
<div>

<img src="http://www.markhneedham.com/blog/wp-content/uploads/2016/05/2016-05-22_09-49-23.png" alt="2016 05 22 09 49 23" title="2016-05-22_09-49-23.png" border="0" width="400"  />

</div>

<cite>Graph</cite>
<div>

<img src="http://www.markhneedham.com/blog/wp-content/uploads/2016/05/2016-05-22_09-52-16.png" alt="2016 05 22 09 52 16" title="2016-05-22_09-52-16.png" border="0" width="400"  /></div>

<p>I wanted to add a 'nationality' property to the players table in the SQL schema and to the nodes with the 'Player' label in the graph.
</p>


<p>
This refactoring is quite easy in both models. In the relational database we first run a query to add the 'nationality' field to the table:
</p>



~~~sql

ALTER TABLE players 
ADD COLUMN nationality varying(30);
~~~

<p>And then we need to generate UPDATE statements from our data dump to update all the existing records:</p>



~~~sql

UPDATE players 
SET nationality = 'Brazil'
WHERE players.id = '/aldair/profil/spieler/4151';

...
~~~

<p>In the graph we can do this in a single step by processing our data dump using the LOAD CSV command and then setting a property on each player:</p>



~~~cypher

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:///transfers.csv" AS row
MATCH (player:Player {id: row.playerUri})
SET player.nationality = row.playerNationality
~~~

<p>
If we wanted to make the nationality field non nullable we could go back and run the following queries:
</p>



~~~sql

ALTER TABLE players 
ALTER COLUMN nationality SET NOT NULL
~~~


~~~cypher

CREATE CONSTRAINT ON (player:Player) 
ASSERT exists(player.nationality)
~~~

<p>And we're done!</p>

