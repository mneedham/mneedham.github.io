+++
draft = false
date="2010-07-15 23:15:54"
title="TDD: I hate deleting unit tests"
tag=['tdd']
category=['Testing']
+++

Following on from <a href="http://www.markhneedham.com/blog/2010/07/11/a-new-found-respect-for-acceptance-tests/">my post about the value we found in acceptance tests on our project when doing a large scale refactoring</a> I had an interesting discussion with <a href="http://twitter.com/JakCharlton">Jak Charlton</a> and <a href="http://twitter.com/Ben_Hall">Ben Hall</a> about deleting unit tests when they're no longer needed.

The following is part of our discussion:

<a href="http://twitter.com/JakCharlton/status/18308678581">Ben</a>:
<blockquote>
@JakCharlton @markhneedham a lot (not all) of the unit tests created can be deleted once the acceptance tests are passing...
</blockquote>

<a href="http://twitter.com/Ben_Hall/status/18308860222">Jak</a>:
<blockquote>
@Ben_Hall @markhneedham yep I agree, but that isn't what TDD really advocates - its a balance, unit tests work well in some places
</blockquote>

<a href="http://twitter.com/markhneedham/status/18312293752">Me</a>:

<blockquote>
@Ben_Hall @JakCharlton gotta be courageous to do that.Its like you're ripping away the safety net. Even if it might be an illusion of safety
</blockquote>

<a href="http://twitter.com/markhneedham/status/18312293752">Jak</a>:

<blockquote>
@markhneedham one of the XP principles ... Courage :)
</blockquote>

<img src="http://www.markhneedham.com/blog/wp-content/uploads/2010/07/dragons2.jpg" alt="dragons2.jpg" border="0" width="300" style="float:right" />

While Jak and Ben are probably right I do <strong>find myself feeling way more anxious about deleting test code than I would deleting production code</strong>.

I think that this is mostly because when I delete production code we usually have some tests around that code so there is a degree of safety in doing so.

Deleting tests seems a bit more risky because there's <strong>much more judgement involved</strong> in working out whether we're removing the safety net that we created by writing those tests in the first place.

The diagram on the right hand side shows the way I see the various safety nets that we create to protect us from making breaking changes in production code.

In this case it might seem that a unit test is providing safety but it's now an illusion of safety and in actual fact it's barely protecting us at all.

I find it much easier to delete a unit test if it's an obvious duplicate or if we've completely changed the way a piece of code works such that the test will never pass again anyway...

..and I find it more difficult to judge when we end up with tests which overlap while testing similar bits of functionality.

Do others feel like this as well or am I just being overly paranoid? 

Either way does anyone have any approaches that give you ore confidence that you're not deleting something that will come back to haunt you later?

