+++
draft = false
date="2010-07-25 14:21:34"
title="Technical Debt around release time"
tag=['coding']
category=['Coding']
+++

One of the requirements that the ThoughtWorks University grads have been given on the internal project they're working on is to ensure that they leave the code base in a good state so that the next batch can potentially continue from where they left off.

The application will be deployed on Thursday and this means that a lot of the time  this week will be spent refactoring certain areas of the code base rather than only adding new functionality.

When this was suggested <a href="http://dudadornelles.wordpress.com/">Duda</a> pointed out that it's often the case that we might accept a certain amount of technical debt in order to get the application out there.

While he is right and this is quite an unusual situation, we did see a similar situation on the last project I worked on.

On that project there was quite a tight delivery deadline for the first release so we knowingly incurred some technical debt in order to make sure that we met that date.

I've <a href="http://www.markhneedham.com/blog/2010/06/20/coding-controlled-technical-debt/">written previously</a> <a href="http://www.markhneedham.com/blog/2010/07/11/a-new-found-respect-for-acceptance-tests/">about some of the technical debt that we incurred</a> in that first release and while I think most of the time we made the right call I think there were still some occasions when we thought we were taking on <a href="http://martinfowler.com/bliki/TechnicalDebtQuadrant.html">deliberate prudent debt but were actually taking on deliberate imprudent debt</a>.

Luckily it didn't really come back to bite us and in the second release we had a much more relaxed pace and were therefore able to go through the code base and refactor certain parts of it to make it more maintainable.

<img src="http://www.markhneedham.com/blog/wp-content/uploads/2010/07/kitchen1.jpg" alt="kitchen.jpg" border="0" width="430" height="200" style="float:right" />

<a href="http://tech.groups.yahoo.com/group/testdrivendevelopment/message/33121">J.B. Rainsberger has a really cool analogy</a> about refactoring where he talks about <strong>cleaning the kitchen</strong> and <strong>cleaning the garage</strong>.

Cleaning the kitchen is what we endeavour to do all the time such that we'll write a bit of code and then clean up after ourselves. Sometimes we don't clean up enough and we end up with a bit of a mess which takes much longer to clean up - i.e. we need to clean the garage.

<img src="http://www.markhneedham.com/blog/wp-content/uploads/2010/07/garage.jpg" alt="garage.jpg" border="0" width="430" height="198"style="float: left;" />

I think we sometimes drift towards thinking that we don't need to clean the kitchen so often and end up cleaning the garage too often as a result.



This is something that Uncle Bob covered in a post he wrote around a year ago where where <a href="http://blog.objectmentor.com/articles/2009/10/15/we-must-ship-now-and-deal-with-consequences">he points out that we're more likely to take on technical debt when we didn't need to rather than the other way around</a>.

Finding the right balance between cleaning the kitchen and cleaning the garage seems to be something that comes from the experience of taking either approach too far.
