+++
draft = false
date="2010-08-20 14:14:28"
title="The fear tax"
tag=['software-development']
category=['Software Development']
+++

Seth Godin recently wrote a post about '<a href="http://sethgodin.typepad.com/seths_blog/2010/08/the-fear-tax.html">the fear tax</a>' which he describes as a 'tax' that we pay when we do something in order to try and calm our fear about something else but don't necessarily end up calming those fears.

<blockquote>
We pay the fear tax every time we spend time or money seeking reassurance. We pay it twice when the act of seeking that reassurance actually makes us more anxious, not less.
</blockquote>

I think one common example of a time we fall into this trap when developing software is around the security of financial systems.

Due to legal requirements that firms operating in that domain operate under we can often end up with a very complicated security solution which is unnecessary for allowing us to achieve what we want to.

On one system we worked on had a requirement to write some Javascript code to encrypt the data sent from the browser which was then sent securely through SSL to the web server. 

Once it reached the web server we then had to send it in a SOAP message to a backend server where it could be unencrypted through the use of a private key.

Since one end point was in Java and one .NET there were slight incompatibilities in the way they handled security so it ended up taking a lot of time to actually get it working properly.

<div align="center">
<img src="http://www.markhneedham.com/blog/wp-content/uploads/2010/08/fear-tax.jpg" alt="fear-tax.jpg" border="0" width="502" height="357" />
</div>

We had this extra security around the messages on the backend to protect against an unauthorised server trying to send messages to that server. 

This despite the fact that the backend server was behind a firewall which would not accept any requests that came from servers outside the specified IP addresses of servers known to be in the DMZ.

In other words in order to remain compliant we were paying a significant fear tax in terms of increased complexity of our code base and the time taken to get all the code working in the first place.

Another simpler example of this that is often found in code is checking whether an object being passed around the code is null.

I've worked on code bases where we've ended up checking whether a particular object is null 2 or 3 times.

Alternatively we can <a href="http://www.markhneedham.com/blog/2008/08/16/null-handling-strategies/">use a pattern to take this problem away and then we don't have to worry about it again</a>. 

Seth's closing advice is as follows:

<blockquote>
Instead of forgetting about the wasted anxiety after the fact, perhaps we ought to keep a log of how often we needlessly pay the fear tax.

Instead of over-staffing, over-planning, over-meeting and over-analyzing, perhaps organizations should take lower-cost steps and actually ship.

Think about how much you could get done if you didn't have to pay a tax to amplify or mollify your fear...
</blockquote>
