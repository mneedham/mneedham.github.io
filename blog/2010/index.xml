<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2010s on Mark Needham</title>
    <link>https://www.markhneedham.com/blog/2010/</link>
    <description>Recent content in 2010s on Mark Needham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Dec 2010 19:15:51 +0000</lastBuildDate><atom:link href="https://www.markhneedham.com/blog/2010/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vim: Learnings so far</title>
      <link>https://www.markhneedham.com/blog/2010/12/27/vim-learnings-so-far/</link>
      <pubDate>Mon, 27 Dec 2010 19:15:51 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/12/27/vim-learnings-so-far/</guid>
      <description>I’ve been using Vim instead of RubyMine for the last month or so and it’s been interesting observing the way that I browse code as I add plugins to make my life easier.
Between files I generally don’t know exactly where in the folder structure different files live since I’m used to being able to search by just the name i.e. RubyMine’s Ctrl-N
Yahuda Katz wrote a blog post earlier in the year where he listed some of the plugins he’s been using - one of which is called Command-T and allows exactly this functionality.</description>
    </item>
    
    <item>
      <title>India Cultural Differences: Hierarchy</title>
      <link>https://www.markhneedham.com/blog/2010/12/27/india-cultural-differences-hierarchy/</link>
      <pubDate>Mon, 27 Dec 2010 14:16:09 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/12/27/india-cultural-differences-hierarchy/</guid>
      <description>One of the more interesting differences between Indian culture and my own is that in India there appears to be more adherence to a hierarchy than I’ve experienced before.
ThoughtWorks tries to keep a reasonably flat hierarchy so I think the idea of hierarchy would be much more obvious if I was working at one of the big Indian services organisations.
Between peers conversations don’t seem to play out any differently but someone in a position of authority is more likely to be able to get their opinion across and accepted with less resistance than they might experience without that authority.</description>
    </item>
    
    <item>
      <title>Theory of Constraints: Blaming the bottleneck</title>
      <link>https://www.markhneedham.com/blog/2010/12/26/theory-of-constraints-blaming-the-bottleneck/</link>
      <pubDate>Sun, 26 Dec 2010 00:04:54 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/12/26/theory-of-constraints-blaming-the-bottleneck/</guid>
      <description>I’ve been reading The Goal over the last week or so where Eliyahu Goldratt describes the theory of constraints as a philosophy for allowing organisations to continually achieve their goal.
Goldratt goes on to describe bottlenecks - resources which have a capacity less than the capacity being demanded of the system.
The capacity of the system cannot be higher than that of the bottleneck which means that we need to find a way to optimise the bottlenecks in any system.</description>
    </item>
    
    <item>
      <title>India Cultural Differences: Language</title>
      <link>https://www.markhneedham.com/blog/2010/12/24/india-cultural-differences-language/</link>
      <pubDate>Fri, 24 Dec 2010 18:12:51 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/12/24/india-cultural-differences-language/</guid>
      <description>For the majority of the time that I’ve spent in Pune so far language hasn’t been a big deal at all but there are a couple of differences that I didn’t initially anticipate.
The local language While the official office language is English my colleagues seem more comfortable talking to each other in Hindi so quite frequently the conversation will move into Hindi if someone isn’t directly speaking to me.</description>
    </item>
    
    <item>
      <title>Communication when it&#39;s not going your way</title>
      <link>https://www.markhneedham.com/blog/2010/12/22/communication-when-its-not-going-your-way/</link>
      <pubDate>Wed, 22 Dec 2010 23:32:46 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/12/22/communication-when-its-not-going-your-way/</guid>
      <description>I’ve been reading some of the articles written about the disruption caused by the snow across Europe and I found one quote in The Daily Telegraph by Phillip Hammond particularly interesting
&amp;#34;I think whilst people are obviously deeply upset about the inconvenience, particularly at this time of year, of having their travel plans disrupted, most of what I am hearing is a sense of outrage about the way they were then treated when they were stranded at Heathrow airport.</description>
    </item>
    
    <item>
      <title>India Cultural Differences: Stretched work day</title>
      <link>https://www.markhneedham.com/blog/2010/12/20/india-cultural-differences-stretched-work-day/</link>
      <pubDate>Mon, 20 Dec 2010 21:23:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/12/20/india-cultural-differences-stretched-work-day/</guid>
      <description>A couple of months ago I briefly touched on the very stretched days I’ve experienced while working in India.
This is in contrast to what I’ve experienced in the UK and Australia where the day was much more time boxed and tended to go from 9am to 6pm.
At the moment we also have a call with colleagues in Chicago at 9pm for about 30-45 minutes so the day has now stretched out until nearly 10pm.</description>
    </item>
    
    <item>
      <title>Distributed Agile: Bringing onshore people offshore</title>
      <link>https://www.markhneedham.com/blog/2010/12/20/distributed-agile-bringing-onshore-people-offshore/</link>
      <pubDate>Mon, 20 Dec 2010 08:58:35 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/12/20/distributed-agile-bringing-onshore-people-offshore/</guid>
      <description>For the last two weeks we’ve had a ThoughtWorks colleague from the onshore team working with us in Pune and it’s been really cool having someone who has been working on &amp;#39;the other side&amp;#39;.
In my time in India there seem to have been many more people going from offshore to onshore than the other way around but based on this experience I don’t think that should necessarily be the case.</description>
    </item>
    
    <item>
      <title>India Cultural Differences: Tolerance/Patience</title>
      <link>https://www.markhneedham.com/blog/2010/12/15/india-cultural-differences-tolerancepatience/</link>
      <pubDate>Wed, 15 Dec 2010 19:08:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/12/15/india-cultural-differences-tolerancepatience/</guid>
      <description>Some colleagues have been asking me recently what cultural differences I’ve noticed working in India compared to my experiences in the UK and Australia and one of the biggest differences by far is the amount of tolerance and patience people here have compared to me.
These attributes seem to show themselves in roughly two situations:
With respect to the environment We’ve had some building work done in the Pune office recently which has meant that there’s been extremely high volume drilling being done to the extent that you can barely hear someone who’s sitting a couple of metres away.</description>
    </item>
    
    <item>
      <title>Ask someone vs work it out yourself</title>
      <link>https://www.markhneedham.com/blog/2010/12/14/ask-someone-vs-work-it-out-yourself/</link>
      <pubDate>Tue, 14 Dec 2010 18:04:18 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/12/14/ask-someone-vs-work-it-out-yourself/</guid>
      <description>Back in 2007/2008 when I worked on my first couple of projects at ThoughtWorks I always found it strange how frequently my colleagues would try and figure something out themselves rather than asking someone else (who already knew how to do it) how to do it.
Fast forward to 2010 and I find myself being the one encouraging people to figure things out themselves.
There’s still merit in communicating with colleagues when we’ve tried to work out how to do something and haven’t managed to figure it out but it’s also useful to not have this as our default mode.</description>
    </item>
    
    <item>
      <title>Technical implementation heavy stories</title>
      <link>https://www.markhneedham.com/blog/2010/12/13/technical-implementation-heavy-stories/</link>
      <pubDate>Mon, 13 Dec 2010 21:29:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/12/13/technical-implementation-heavy-stories/</guid>
      <description>Earlier this year I wrote about some of the problems that we can run into when we have implicit assumptions in stories and another problematic approach I’ve seen around this area is where we end up with stories that are very heavily focused on technical implementation.
Initially this seems like it will work out pretty well since all the developer then needs to do is follow the steps that have been outlined for them but from my experience it seems to create more problems than it solves.</description>
    </item>
    
    <item>
      <title>Distributed Agile: Other observations</title>
      <link>https://www.markhneedham.com/blog/2010/12/12/distributed-agile-other-observations/</link>
      <pubDate>Sun, 12 Dec 2010 08:11:31 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/12/12/distributed-agile-other-observations/</guid>
      <description>Some of the difficulties of working in an offshore environment were clear to me before I even came to India but I’ve come across a few others lately which I either didn’t think about before or didn’t realise how annoying they were!
Getting data from the client’s network For several of the stories that we’ve been working on lately we needed to make use of huge amounts of reference data residing on the client’s network.</description>
    </item>
    
    <item>
      <title>Bugs: Prioritising by bucket</title>
      <link>https://www.markhneedham.com/blog/2010/12/12/bugs-prioritising-by-bucket/</link>
      <pubDate>Sun, 12 Dec 2010 07:59:17 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/12/12/bugs-prioritising-by-bucket/</guid>
      <description>At a lot of organisations that I’ve worked there is a tendency to prioritise bugs by a priority bucket.
We might therefore have priority buckets 1-4 where the bucket number indicates how important the bug is to fix and then any buckets ranked below 4 would not be fixed but would be logged anyway.
From what I’ve noticed this isn’t a particularly effective way of managing bugs.
To start with there tend to be a lot of discussions around what the priority of each bug should be where a QA will argue that it should be a higher priority while a developer disagrees.</description>
    </item>
    
    <item>
      <title>Why am I working in India?</title>
      <link>https://www.markhneedham.com/blog/2010/12/10/why-am-i-working-in-india/</link>
      <pubDate>Fri, 10 Dec 2010 03:47:13 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/12/10/why-am-i-working-in-india/</guid>
      <description>A few colleagues have asked me why I chose to work in India so I thought it would be interesting to explore what it is that appealed to me about working here.
I’ve come to the conclusion that there were 2 main drivers for me:
The buzz of the ThoughtWorks office I was in Bangalore in 2006 when I attended ThoughtWorks University and one of the things that stood out for me was the atmosphere in the Diamond District office.</description>
    </item>
    
    <item>
      <title>Ruby: One method, two parameter types</title>
      <link>https://www.markhneedham.com/blog/2010/12/07/ruby-one-method-two-parameter-types/</link>
      <pubDate>Tue, 07 Dec 2010 05:01:44 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/12/07/ruby-one-method-two-parameter-types/</guid>
      <description>One interesting thing that I’ve noticed while coding in Ruby is that due to the dynamicness of the language it’s possible to pass values of different types into a given method as parameters.
For example, I’ve recently come across a few examples of methods designed like this:
def calculate_foo_prices(foos) ... [foos].flatten.each do |foo| # do something end end This allows us to use the method like this:
# foos would come in as an array from the UI foos = [Foo.</description>
    </item>
    
    <item>
      <title>Ruby: Exiting a &#39;loop&#39; early</title>
      <link>https://www.markhneedham.com/blog/2010/12/01/ruby-exiting-a-loop-early/</link>
      <pubDate>Wed, 01 Dec 2010 17:56:51 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/12/01/ruby-exiting-a-loop-early/</guid>
      <description>We recently had a problem to solve which at its core required us to iterate through a collection, look up a value for each key and then exit as soon as we’d found a value.
The original solution looped through the collection and then explicitly returned once a value had been found:
def iterative_version v = nil [1,2,3,4,5].each do |i| v = long_running_method i return v unless v.nil? end v end def long_running_method(value) puts &amp;#34;inside the long running method with #{value}&amp;#34; return nil if value &amp;gt; 3 value end Which we run like so:</description>
    </item>
    
    <item>
      <title>Noone wants your stupid process - Jeff Patton</title>
      <link>https://www.markhneedham.com/blog/2010/11/30/noone-wants-your-stupid-process-jeff-patton/</link>
      <pubDate>Tue, 30 Nov 2010 20:35:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/30/noone-wants-your-stupid-process-jeff-patton/</guid>
      <description>My former colleague Alexandre Martins recently pointed me to a presentation given by Jeff Patton at Agile Roots titled &amp;#39;Noone wants your stupid process&amp;#39; and it’s one of the most interesting talks I’ve watched recently.
In the talk Jeff cites globo.com as a case study of a company which is using an agile approach to development of their website but are starting to doubt whether it’s the best way to go about things.</description>
    </item>
    
    <item>
      <title>Consulting is like inception</title>
      <link>https://www.markhneedham.com/blog/2010/11/30/consulting-is-like-inception/</link>
      <pubDate>Tue, 30 Nov 2010 19:25:16 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/30/consulting-is-like-inception/</guid>
      <description>My colleague Jason Yip recently tweeted the following…​
Sometimes consulting reminds me of the movie Inception
…​which reminded me of a conversation I was having with a colleague here who’s been working on consulting engagements here for the last few months.
I was describing some of the things that I wanted to change on my team and she pointed out that I always described each change as something that I wanted to change rather than something which I wanted to see change.</description>
    </item>
    
    <item>
      <title>Local port forwarding</title>
      <link>https://www.markhneedham.com/blog/2010/11/29/local-port-forwarding/</link>
      <pubDate>Mon, 29 Nov 2010 19:42:13 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/29/local-port-forwarding/</guid>
      <description>A colleague and I ran into an interesting problem today which we wanted to use local port forwarding to solve.
In our environment.rb file we have a Solr instance url defined like so:
SOLR_CONFIG = { :service_url =&amp;gt; &amp;#34;http://some.internal.address:9983/solr/sco_slave_1&amp;#34; } It’s defined like that because our colleagues in Chicago have setup a Solr instance on a test environment and all the developers hit the same box.
In Pune everyone has Solr configured on their own box so we really wanted to configure that url to be &amp;#39;localhost&amp;#39; on port &amp;#39;8983&amp;#39;.</description>
    </item>
    
    <item>
      <title>Team Communication: Learning models</title>
      <link>https://www.markhneedham.com/blog/2010/11/27/team-communication-learning-models/</link>
      <pubDate>Sat, 27 Nov 2010 10:50:27 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/27/team-communication-learning-models/</guid>
      <description>One of the problems I’ve noticed in several of the &amp;#39;agile&amp;#39; communication mechanisms (such as the standup or dev huddle) that we typically use on teams is that they focus almost entirely on verbal communication which only covers one of our learning styles - the auditory learning style.
The Learning Models The VAK learning style model describes a simple model covering the different learning styles that people have:
Visual - seeing and reading.</description>
    </item>
    
    <item>
      <title>Increasing team sizes: Parallelising work</title>
      <link>https://www.markhneedham.com/blog/2010/11/26/increasing-team-sizes-parallelising-work/</link>
      <pubDate>Fri, 26 Nov 2010 03:53:33 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/26/increasing-team-sizes-parallelising-work/</guid>
      <description>One of the trickiest things to do when working in bigger teams is ensuring that it is possible to parallelise the work we have across the number of pairs that we have available.
From my experience this problem happens much less frequently in smaller teams. Perhaps inevitably it’s much easier to find 2 or 3 things that can be worked on in parallel than it is to find 6 or 7 or more.</description>
    </item>
    
    <item>
      <title>Interviewing: Communication</title>
      <link>https://www.markhneedham.com/blog/2010/11/26/interviewing-communication/</link>
      <pubDate>Fri, 26 Nov 2010 03:50:20 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/26/interviewing-communication/</guid>
      <description>I’ve been in India for around 4 months and in that time I think I’ve probably interviewed more people than I have in the last 4 years.
Over this time I’ve come to realise that the two main things I’m looking for in candidates are passion and ability to communicate effectively.
It’s relatively easy to pick up on whether someone is passionate about what they do in a conversation or while pairing with them but I find the communication aspect a bit more tricky.</description>
    </item>
    
    <item>
      <title>A dirty hack to get around aliases not working in a shell script</title>
      <link>https://www.markhneedham.com/blog/2010/11/24/a-dirty-hack-to-get-around-aliases-not-working-in-a-shell-script/</link>
      <pubDate>Wed, 24 Nov 2010 18:48:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/24/a-dirty-hack-to-get-around-aliases-not-working-in-a-shell-script/</guid>
      <description>In another script I’ve been working on lately I wanted to call &amp;#39;mysql&amp;#39; but unfortunately on my machine it’s &amp;#39;mysql5&amp;#39; rather than &amp;#39;mysql&amp;#39;.
I have an alias defined in &amp;#39;~/.bash_profile&amp;#39; so I can call &amp;#39;mysql&amp;#39; from the terminal whenever I want to.
alias mysql=mysql5 Unfortunately shell scripts don’t seem to have access to this alias and the only suggestion I’ve come across while googling this is to source &amp;#39;~/.bash_profile&amp;#39; inside the script.</description>
    </item>
    
    <item>
      <title>Ruby: Checking for environment variables in a script</title>
      <link>https://www.markhneedham.com/blog/2010/11/24/ruby-checking-for-environment-variables-in-a-script/</link>
      <pubDate>Wed, 24 Nov 2010 18:34:45 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/24/ruby-checking-for-environment-variables-in-a-script/</guid>
      <description>I’ve been working on a Ruby script to allow us to automate part of our Solr data setup and part of the task was to check that some environment variables were set and throw an exception if not.
I got a bit stuck initially trying to work out how to return a message showing only the missing environment variables but it turned out to be pretty simple when I came back to it a couple of hours later.</description>
    </item>
    
    <item>
      <title>Systems Thinking: Individuals and the environment</title>
      <link>https://www.markhneedham.com/blog/2010/11/23/systems-thinking-individuals-and-the-environment/</link>
      <pubDate>Tue, 23 Nov 2010 20:20:03 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/23/systems-thinking-individuals-and-the-environment/</guid>
      <description>Something which I’ve become fairly convinced about recently is that the environment that someone works in has far more impact on their perceived performance than their own individual skills.
Given that belief I’ve often got stuck answering why some people are better able to handle a difficult environment than others - in terms of accepting the situation and finding a way of being productive regardless.
Does this mean that they’re better than people who can’t work in that environment as effectively?</description>
    </item>
    
    <item>
      <title>Make it interesting for yourself</title>
      <link>https://www.markhneedham.com/blog/2010/11/22/make-it-interesting-for-yourself/</link>
      <pubDate>Mon, 22 Nov 2010 19:58:21 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/22/make-it-interesting-for-yourself/</guid>
      <description>Just over a year ago I wrote a post about learning one thing each day and since I’ve been struggling to do this lately I thought I’d come back to this topic again.
My general thinking at the time I wrote that post was that sometimes it would be really difficult to find a way to learn anything on the project I was working on and the only way to learn would be to play around with something outside work.</description>
    </item>
    
    <item>
      <title>The Adventures of Johnny Bunko -  The Last Career Guide You&#39;ll Ever Need: Book Review</title>
      <link>https://www.markhneedham.com/blog/2010/11/21/the-adventures-of-johnny-bunko-the-last-career-guide-youll-ever-need-book-review/</link>
      <pubDate>Sun, 21 Nov 2010 17:02:14 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/21/the-adventures-of-johnny-bunko-the-last-career-guide-youll-ever-need-book-review/</guid>
      <description>I read Dan Pink’s A Whole New Mind earlier in the year but I hadn’t heard of The Adventures of Johnny Bunko until my colleague Sumeet Moghe mentioned it in a conversation during ThoughtWorks India’s XConf, an internal conference run here.
The book is written in the Manga format so it’s incredibly quick to read and it gives 6 ideas around building a career.
I’m generally not a fan of the idea of &amp;#39;building a career&amp;#39; - generally when I hear that phrase it involves having a &amp;#39;five year&amp;#39; plan and other such concepts which I consider to be pointless.</description>
    </item>
    
    <item>
      <title>From unconsciously incompetent to consciously incompetent</title>
      <link>https://www.markhneedham.com/blog/2010/11/19/from-unconsciously-incompetent-to-consciously-incompetent/</link>
      <pubDate>Fri, 19 Nov 2010 20:20:19 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/19/from-unconsciously-incompetent-to-consciously-incompetent/</guid>
      <description>One of the cool things about software development is that despite writing code for 5 years professionally and just under 10 altogether, there are still a phenomenal number of things that I don’t know how to do.
The learning opportunities are vast!
One of the areas which I’ve known I don’t know that much about is Unix command line tools such as awk and sed.
Since the majority of projects that I’ve worked on have involved using Windows as the development environment I’ve never had extended exposure to the types of problems we get on a project which require their use.</description>
    </item>
    
    <item>
      <title>Capistrano, sed, escaping forward slashes and &#39;p&#39; is not &#39;puts&#39;!</title>
      <link>https://www.markhneedham.com/blog/2010/11/18/capistrano-sed-escaping-forward-slashes-and-p-is-not-puts/</link>
      <pubDate>Thu, 18 Nov 2010 18:40:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/18/capistrano-sed-escaping-forward-slashes-and-p-is-not-puts/</guid>
      <description>Priyank and I have been working on automating part of our deployment process and one task we needed to do as part of this is replace some variables used in one of our shell scripts.
All the variables in the script refer to production specific locations but we needed to change a couple of them in order to run the script in our QA environment.
We’re therefore written a sed command, which we call from Capistrano, to allow us to do this.</description>
    </item>
    
    <item>
      <title>Rails: A slightly misleading error</title>
      <link>https://www.markhneedham.com/blog/2010/11/16/rails-a-slightly-misleading-error/</link>
      <pubDate>Tue, 16 Nov 2010 21:17:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/16/rails-a-slightly-misleading-error/</guid>
      <description>We recently created a new project to handle the reporting part of our application and as with all our projects we decided not to checkin any configuration &amp;#34;.yml&amp;#39; files but rather &amp;#39;.yml.example&amp;#39; files which people can then customise for their own environments.
So in our config directory would look something like this when you first checkout the project:
config
database.yml.example
some.yml.example
&amp;lt;/ul&amp;gt; And we’d need to copy those files to get &amp;#39;.</description>
    </item>
    
    <item>
      <title>Retrospectives: My first time facilitating</title>
      <link>https://www.markhneedham.com/blog/2010/11/15/retrospectives-my-first-time-facilitating/</link>
      <pubDate>Mon, 15 Nov 2010 19:52:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/15/retrospectives-my-first-time-facilitating/</guid>
      <description>Despite being part of numerous retrospectives over the past few years I don’t remember actually facilitating one until my current team’s last week.
I’ve gradually come to appreciate the skill involved in facilitating this type of meeting having originally been of the opinion that there wasn’t much to it.
I recently read Agile Retrospectives which has loads of different ideas for activities beyond just creating &amp;#39;went well&amp;#39; and &amp;#39;could improve&amp;#39; columns and then filling those in as a group.</description>
    </item>
    
    <item>
      <title>Agile: Increasing team sizes</title>
      <link>https://www.markhneedham.com/blog/2010/11/14/agile-increasing-team-sizes/</link>
      <pubDate>Sun, 14 Nov 2010 11:51:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/14/agile-increasing-team-sizes/</guid>
      <description>A fairly common trend on nearly every project I’ve worked on is that at some stage the client will ask for more people to be added to the team in order to &amp;#39;improve&amp;#39; the velocity.
Some of the most common arguments against doing so are that it will initially slow down the team’s velocity as the new members learn the domain, code base and get to know the other members of the team.</description>
    </item>
    
    <item>
      <title>Experiments in not using the mouse</title>
      <link>https://www.markhneedham.com/blog/2010/11/12/experiments-in-not-using-the-mouse/</link>
      <pubDate>Fri, 12 Nov 2010 15:43:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/12/experiments-in-not-using-the-mouse/</guid>
      <description>Priyank and I have been pairing a bit lately and we thought it’d be interesting to try and not use the mouse for anything that we had to do while pairing.
Editor Priyank uses GVim (Yehuda Katz recommends MacVim if you’re using Mac OS) so we already don’t need to use the mouse at all when we’re inside the editor.
One annoying thing we found is that sometimes we wanted to copy stuff from the terminal into GVim and couldn’t think of a good way to do that without selecting the text on the terminal with a mouse and then &amp;#39;Ctrl-C’ing.</description>
    </item>
    
    <item>
      <title>Distributed Agile: Communicating big design decisions</title>
      <link>https://www.markhneedham.com/blog/2010/11/10/distributed-agile-communicating-big-design-decisions/</link>
      <pubDate>Wed, 10 Nov 2010 19:58:33 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/10/distributed-agile-communicating-big-design-decisions/</guid>
      <description>Although we mostly split the work on my project so that there aren’t too many dependencies between the teams in Chicago and Pune, there have still been some times when we’ve designed major parts of the code base in Pune and have needed to communicate that to our Chicago colleagues.
I’ve never seen this situation so it’s been interesting to see which approaches work in trying to do this effectively and allowing the people in the other location to have input as well.</description>
    </item>
    
    <item>
      <title>Active Record: Nested attributes</title>
      <link>https://www.markhneedham.com/blog/2010/11/09/active-record-nested-attributes/</link>
      <pubDate>Tue, 09 Nov 2010 18:37:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/09/active-record-nested-attributes/</guid>
      <description>I recently learnt about quite a neat feature of Active Record called nested attributes which allows you to save attributes on associated records of a parent model.
It’s been quite useful for us as we have a few pages in our application where the user is able to update models like this.
We would typically end up with parameters coming into the controller like this:
class FoosController &amp;lt; ApplicationController def update # params = { :id =&amp;gt; &amp;#34;1&amp;#34;, :foo =&amp;gt; { :baz =&amp;gt; &amp;#34;new_baz&amp;#34;, :bar_attributes =&amp;gt; { :value =&amp;gt; &amp;#34;something&amp;#34; } } } Foo.</description>
    </item>
    
    <item>
      <title>Distributed Agile: Communication - Reliance on one person</title>
      <link>https://www.markhneedham.com/blog/2010/11/08/distributed-agile-communication-reliance-on-one-person/</link>
      <pubDate>Mon, 08 Nov 2010 13:56:21 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/08/distributed-agile-communication-reliance-on-one-person/</guid>
      <description>Continuing with my series of observations on what it’s like working in a distributed agile team, another thing that I’ve noticed is that it’s useful to try and ensure that there is communication between as many people as possible in the two cities.
This means that we want to ensure that we don’t have an over reliance on one person to handle any communication.
We have a call once a day between developers in Pune and Chicago and the Chicago guys have been able to achieve this by rotating the person attending the call.</description>
    </item>
    
    <item>
      <title>Retrospectives: General observations</title>
      <link>https://www.markhneedham.com/blog/2010/11/06/retrospectives-general-observations/</link>
      <pubDate>Sat, 06 Nov 2010 17:17:16 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/06/retrospectives-general-observations/</guid>
      <description>Following on from my blog post about some observations about the actions that we create in retrospectives I’ve also noticed some general ways that retrospectives might not end up being as useful as we’d hope.
Having a manager facilitating While having the manager of the team facilitating the retrospective isn’t a problem in itself I think it’s useful to remember that in this context they aren’t in that role anymore.</description>
    </item>
    
    <item>
      <title>Retrospectives: Actions</title>
      <link>https://www.markhneedham.com/blog/2010/11/06/retrospectives-actions/</link>
      <pubDate>Sat, 06 Nov 2010 11:59:16 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/11/06/retrospectives-actions/</guid>
      <description>My colleague Ashwin Raghav wrote a blog post earlier in the week in which he noted some patterns that he’s noticed in retrospectives in his time working in ThoughtWorks.
In it he talks quite generally about things he’s noticed but in my experience one of the areas in which teams typically struggle is when it comes to action items.
Too many action items I think this is probably the number one mistake that we make in retrospectives and it’s really easy to make.</description>
    </item>
    
    <item>
      <title>Distributed Agile: Context</title>
      <link>https://www.markhneedham.com/blog/2010/10/31/distributed-agile-context/</link>
      <pubDate>Sun, 31 Oct 2010 18:27:16 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/31/distributed-agile-context/</guid>
      <description>From my last couple of months working for ThoughtWorks in Pune I think the most common subject that I’ve heard discussed is how to ensure that the team offshore is receiving all the context about the decisions and direction being taken onshore.
What I’ve found most interesting is that I think out of all the teams that I’ve worked on in the last four years my current team has by far the most context about what the client wants to do and the approaches they want to take over the next few months.</description>
    </item>
    
    <item>
      <title>Meetings: Guerilla Collaboration</title>
      <link>https://www.markhneedham.com/blog/2010/10/31/meetings-guerilla-collaboration/</link>
      <pubDate>Sun, 31 Oct 2010 14:53:40 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/31/meetings-guerilla-collaboration/</guid>
      <description>As I’ve mentioned on twitter a few times my current team has a lot of meetings and apart from using the passive aggressive approach that Toby Tripp’s meeting ticker provides I’ve also been flicking through Chapter 19, &amp;#39;Guerilla Collaboration&amp;#39;, of Jean Tabaka’s &amp;#39;Collaboration Explained: Facilitation skills for software project leaders&amp;#39; which gives other ideas.
I’ve also seen some useful ideas that my colleagues have used in meetings that I’ve been part of.</description>
    </item>
    
    <item>
      <title>Ruby: Getting Active Record validation errors twice</title>
      <link>https://www.markhneedham.com/blog/2010/10/29/ruby-getting-active-record-validation-errors-twice/</link>
      <pubDate>Fri, 29 Oct 2010 04:27:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/29/ruby-getting-active-record-validation-errors-twice/</guid>
      <description>I managed to create an interesting problem for myself while playing around with some code whereby I was ending up with validation errors appearing twice every time I called &amp;#39;valid?&amp;#39; on a specific model.
I figured I was probably doing something stupid and in fact a few replies by Aaron Baldwin on a mailing list thread on &amp;#39;rubyonrails-talk&amp;#39; helped explain exactly what I’d done:
Are you calling require &amp;#39;employee&amp;#39; anywhere?</description>
    </item>
    
    <item>
      <title>Ruby: Using a variable in a  regex</title>
      <link>https://www.markhneedham.com/blog/2010/10/27/ruby-using-a-variable-in-a-regex/</link>
      <pubDate>Wed, 27 Oct 2010 13:55:27 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/27/ruby-using-a-variable-in-a-regex/</guid>
      <description>We’re using Web Mock on my current project to stub out some of the external web requests in some of our integration tests and I managed to get myself very confused while trying to use a variable inside a regular expression that I was trying to pass to the &amp;#39;stub_request&amp;#39; method.
The code was roughly like this:
some_url = &amp;#34;http://service.com/method&amp;#34; stub_request(:any, /some_url/). to_return(:body =&amp;gt; File.new(&amp;#39;/path/to/some.xml&amp;#39;), :headers =&amp;gt; {&amp;#39;Content-Length&amp;#39; =&amp;gt; 666, &amp;#39;Content-Type&amp;#39; =&amp;gt; &amp;#39;text/xml&amp;#39;}, :status =&amp;gt; 200, :headers =&amp;gt; {&amp;#39;Content-Type&amp;#39; =&amp;gt; &amp;#39;text/xml&amp;#39;}) The request was being stubbed when I hard coded the url inside the regular expression but not being stubbed when I used the variable like in the example above.</description>
    </item>
    
    <item>
      <title>Distributed Agile: Communication</title>
      <link>https://www.markhneedham.com/blog/2010/10/27/distributed-agile-communication/</link>
      <pubDate>Wed, 27 Oct 2010 13:50:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/27/distributed-agile-communication/</guid>
      <description>I’d always heard that communication when you’re working offshore was much more difficult than in a co-located team but it’s quite difficult to imagine exactly what the difficulties are until you see them for yourself.
These are some of my latest observations in this area so far.
Learning models I’m a very visual learner and the majority of the time any communication between people in two different locations will be done through words either via email or on a conference call.</description>
    </item>
    
    <item>
      <title>Communication: Logging levels</title>
      <link>https://www.markhneedham.com/blog/2010/10/25/communication-logging-levels/</link>
      <pubDate>Mon, 25 Oct 2010 18:49:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/25/communication-logging-levels/</guid>
      <description>I think one of the most important skills to perfect when communicating with other people is to understand the level of detail that we need to be speaking at, something my colleague Ashwin Raghav refers to as our logging level.
We log various things in our code at varying logging levels ranging from &amp;#39;error&amp;#39; through &amp;#39;debug&amp;#39; to &amp;#39;warn&amp;#39;, and each of these is useful for understanding what our code is doing.</description>
    </item>
    
    <item>
      <title>Ruby: Mocking or stubbing methods on the system under test</title>
      <link>https://www.markhneedham.com/blog/2010/10/24/ruby-mocking-or-stubbing-methods-on-the-system-under-test/</link>
      <pubDate>Sun, 24 Oct 2010 17:30:26 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/24/ruby-mocking-or-stubbing-methods-on-the-system-under-test/</guid>
      <description>An approach to testing which I haven’t seen before and am therefore assuming is more specific to Ruby is the idea of stubbing or mocking out functions on the system under test.
I’ve come across a couple of situations where this seems to be done:
When stubbing out calls to methods which are being mixed into the class via a module
When stubbing out calls to private methods within the class</description>
    </item>
    
    <item>
      <title>Feedback loops: Overcompensating</title>
      <link>https://www.markhneedham.com/blog/2010/10/24/feedback-loops-overcompensating/</link>
      <pubDate>Sun, 24 Oct 2010 08:39:14 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/24/feedback-loops-overcompensating/</guid>
      <description>One of the things that I’ve noticed while working with various colleagues over the last few years is that the more experienced ones are much more skilled at making slight adjustments to their approach based on feedback that they receive from the environment.
I’ve been reading a couple of books on systems thinking over the last few months and one of the takeaways for me has been that we need to be careful when reacting to feedback we get from a system to ensure that we don’t over compensate and end up creating a new problem for ourselves instead.</description>
    </item>
    
    <item>
      <title>Agile: Story Wall - A couple of learnings</title>
      <link>https://www.markhneedham.com/blog/2010/10/22/agile-story-wall-a-couple-of-learnings/</link>
      <pubDate>Fri, 22 Oct 2010 17:13:34 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/22/agile-story-wall-a-couple-of-learnings/</guid>
      <description>I wrote earlier in the week about the benefits of having a physical story wall on a distributed team and in the process of getting one in place on the project we learnt a few things that I’d previously taken for granted.
All the work in one place We initially started off by having stories on one part of the wall, bugs on another part and any technical tasks stored in Mingle somewhere.</description>
    </item>
    
    <item>
      <title>Learning: Writing about simple things</title>
      <link>https://www.markhneedham.com/blog/2010/10/20/learning-writing-about-simple-things/</link>
      <pubDate>Wed, 20 Oct 2010 20:51:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/20/learning-writing-about-simple-things/</guid>
      <description>My colleague Aman King is back in Pune for the time being and during one of our conversations he was asking me why I didn’t wait a bit longer and learn more about Ruby before writing about it.
In a way he is right and I didn’t write anything at all about C# or Java when I was first learning how to write code in those languages because I didn’t have the confidence to write about something that I knew nothing about.</description>
    </item>
    
    <item>
      <title>Distributed Agile: Physical story wall still useful</title>
      <link>https://www.markhneedham.com/blog/2010/10/20/distributed-agile-physical-story-wall-still-useful/</link>
      <pubDate>Wed, 20 Oct 2010 17:21:24 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/20/distributed-agile-physical-story-wall-still-useful/</guid>
      <description>When I started working on my current project there was no physical story wall, instead the whole project was being tracked on Mingle.
The current state of the Mingle story wall was sometimes visible on a shared monitor and sometimes wasn’t, depending on whether or not the monitor had been turned off.
There was also a small wall used to track which stories were in development but after that there was no physical visibility of the status of anything.</description>
    </item>
    
    <item>
      <title>Coding: Context independent code</title>
      <link>https://www.markhneedham.com/blog/2010/10/18/coding-context-independent-code/</link>
      <pubDate>Mon, 18 Oct 2010 15:52:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/18/coding-context-independent-code/</guid>
      <description>I’ve been flicking through Growing Object Oriented Software Guided By Tests again and in Chapter 6 on Object Oriented Style I came across the part of the chapter which talks about writing context independent code which reminded me of some code I’ve worked on recently.
The authors suggest the following:
A system is easier to change if its objects are context-independent; that is, if each object has no built-in knowledge about the system in which it executes</description>
    </item>
    
    <item>
      <title>Ruby: Using alias with &#39;indexers&#39;</title>
      <link>https://www.markhneedham.com/blog/2010/10/18/ruby-using-alias-with-indexers/</link>
      <pubDate>Mon, 18 Oct 2010 04:24:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/18/ruby-using-alias-with-indexers/</guid>
      <description>I’ve been browsing through some of the Rails routing code while following Jamis&amp;#39; Buck’s blog post and I came across something I hadn’t seen before while inside the &amp;#39;NamedRouteCollection&amp;#39; class.
The bit of code which initially confused me is in RouteSet.add_named_route:
module ActionController module Routing class RouteSet def initialize ... self.named_routes = NamedRouteCollection.new end def add_named_route(name, path, options = {}) # TODO - is options EVER used? name = options[:name_prefix] + name.</description>
    </item>
    
    <item>
      <title>Distributed Agile: Cultural Differences/Expectation disconnect</title>
      <link>https://www.markhneedham.com/blog/2010/10/17/distributed-agile-cultural-differencesexpectation-disconnect/</link>
      <pubDate>Sun, 17 Oct 2010 15:06:18 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/17/distributed-agile-cultural-differencesexpectation-disconnect/</guid>
      <description>I came across an article written a few months ago titled &amp;#39;Outsourcing doesn’t work&amp;#39; which discussed some of the problems the author has experienced while working with teams offshore.
The article is provocatively titled but has some interesting observations which I thought I could contrast with my own after working offshore in Pune, India for a couple of months now.
The team I’m working on is distributed between Pune and Chicago so it’s not exactly the same situation as the author’s but the majority of the team are in a different country to the client.</description>
    </item>
    
    <item>
      <title>Ruby: Hash default value</title>
      <link>https://www.markhneedham.com/blog/2010/10/16/ruby-hash-default-value/</link>
      <pubDate>Sat, 16 Oct 2010 14:02:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/16/ruby-hash-default-value/</guid>
      <description>I’ve been pairing a fair bit with Ashwin this week and one thing he showed me which I hadn’t previously seen is the ability to set a default value for a hash which gets returned if we search for a key that doesn’t exist.
This is an idea that I originally came across while playing around with Clojure but with Clojure the default value was defined in the calling code rather than in the hash definition.</description>
    </item>
    
    <item>
      <title>RSpec: Testing Rails routes</title>
      <link>https://www.markhneedham.com/blog/2010/10/13/rspec-testing-rails-routes/</link>
      <pubDate>Wed, 13 Oct 2010 18:25:32 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/13/rspec-testing-rails-routes/</guid>
      <description>Something which I keep forgetting is how to write controller tests where I want to check whether an action correctly redirected to another action.
With most of the routes in our application we’ve created a &amp;#39;resourceful route&amp;#39; where each action maps to a CRUD operation in the database.
We can do that with this type of code in routes.rb:
ActionController::Routing::Routes.draw do |map| map.resources :foos end Several helper methods based on named rotes get created and included in our controllers when we do this and we have access to those inside our specs.</description>
    </item>
    
    <item>
      <title>Agile: Constraints</title>
      <link>https://www.markhneedham.com/blog/2010/10/13/agile-constraints/</link>
      <pubDate>Wed, 13 Oct 2010 14:03:54 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/13/agile-constraints/</guid>
      <description>I recently came across quite an interesting post written by Steve Garnett where he discusses the difference between constraints and impediments inside organisations.
He comes to the following conclusion:
For me, the difference between an impediment and a constraint is whether the individual, team, organisation, enterprise, or industry considers the obstacle as removable. If whoever is working with the obstacle believes it can be removed then it is considered an impediment, if the same person doesn’t not believe it can be removed, or doesn’t wish to work towards it’s removal, it’s considered a constraint.</description>
    </item>
    
    <item>
      <title>Ruby: Active Record - Using &#39;exclusive_scope&#39; in IRB</title>
      <link>https://www.markhneedham.com/blog/2010/10/11/ruby-active-record-using-exclusive_scope-in-irb/</link>
      <pubDate>Mon, 11 Oct 2010 19:03:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/11/ruby-active-record-using-exclusive_scope-in-irb/</guid>
      <description>Ashwin and I have been working recently on a bit of code to make it possible to &amp;#39;soft delete&amp;#39; some objects in our system.
We’re doing this by creating an additional column in that table called &amp;#39;deleted_at_date&amp;#39; which we populate if a record is &amp;#39;deleted&amp;#39;.
As we wanted the rest of the application to ignore &amp;#39;deleted&amp;#39; records we added a default scope to it:
class Foo &amp;lt; ActiveRecord::Base default_scope :conditions =&amp;gt; &amp;#34;deleted_at_date is null&amp;#34; end This works fine but we wanted to be able to see the status of all the records in IRB and with the default scope &amp;#39;Foo.</description>
    </item>
    
    <item>
      <title>Agile: The curse of meetings</title>
      <link>https://www.markhneedham.com/blog/2010/10/09/agile-the-curse-of-meetings/</link>
      <pubDate>Sat, 09 Oct 2010 03:39:29 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/09/agile-the-curse-of-meetings/</guid>
      <description>Something which can often happen with agile software development teams is that in the desire to take everyone’s opinion into account for every decision we end up having a lot of meetings.
Toni wrote about this a while ago and described a situation where he’d managed to get rid of a meeting and just have a discussion after the stand up with the necessary people.
While this is a good idea I still think there are occasions where it’s not necessary to discuss every problem down to the minute details with the whole team.</description>
    </item>
    
    <item>
      <title>Ruby: Getting the caller method with Kernel.caller</title>
      <link>https://www.markhneedham.com/blog/2010/10/08/ruby-getting-the-caller-method-with-kernel-caller/</link>
      <pubDate>Fri, 08 Oct 2010 13:19:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/08/ruby-getting-the-caller-method-with-kernel-caller/</guid>
      <description>One of the things I’ve been finding when debugging Cucumber specs is that due to the number of levels of indirection present in those examples it becomes quite difficult to work out exactly how certain pieces of code got called.
In one cuke we were trying to work out how 4 objects of the same type were ending up in the database when it seemed like there should only be two.</description>
    </item>
    
    <item>
      <title>Rails: before_filter, rescue_from and so on</title>
      <link>https://www.markhneedham.com/blog/2010/10/05/rails-before_filter-rescue_from-and-so-on/</link>
      <pubDate>Tue, 05 Oct 2010 08:53:48 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/05/rails-before_filter-rescue_from-and-so-on/</guid>
      <description>One thing I’ve noticed while browsing our Rails code base is that the first entry point inside a controller is much less frequently the method corresponding to the action than it would be with a C# ASP.NET MVC application.
The concept of filters exists in ASP.NET MVC but on the projects I’ve worked on they’ve been used significantly less than before filters would be in a Rails application.
As a result I’m getting much more in the habit of checking for the before filters in the ApplicationController when an action isn’t working as expected to try and figure out what’s going on.</description>
    </item>
    
    <item>
      <title>Coding: Write the first one ugly</title>
      <link>https://www.markhneedham.com/blog/2010/10/03/coding-write-the-first-one-ugly/</link>
      <pubDate>Sun, 03 Oct 2010 05:03:44 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/10/03/coding-write-the-first-one-ugly/</guid>
      <description>I just came across a really cool blog post written a couple of months ago by Evan Light where he proposes that we &amp;#39;write the first one ugly&amp;#39;:
To overcome paralysis, for small chunks of code, it is often better to just write whatever comes to mind — no matter how awful it may seem at the time. Give yourself permission to let the first version suck.
I think this is a really good piece of advice and it seems along the same lines as a suggestion from Uncle Bob in Clean Code:</description>
    </item>
    
    <item>
      <title>RSpec: Another newbie mistake</title>
      <link>https://www.markhneedham.com/blog/2010/09/30/rspec-another-newbie-mistake/</link>
      <pubDate>Thu, 30 Sep 2010 07:03:07 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/30/rspec-another-newbie-mistake/</guid>
      <description>We recently had a spec which was checking that we didn’t receive a call to a specific method on an object…​
describe &amp;#34;Our Object&amp;#34; do it &amp;#34;should not update property if user is not an admin&amp;#34; do our_user = Factory(&amp;#34;user_with_role_x) User.stub!(:find).and_return(our_user) user.stub!(:is_admin?).and_return(false) user.should_not_receive(:property) end end …​where &amp;#39;property&amp;#39; refers to a field in the users table. In the code &amp;#39;property&amp;#39; would get set like this:
class ObjectUnderTest def method_under_test user = User.</description>
    </item>
    
    <item>
      <title>Ruby: ActiveRecord 2.3.5 object equality</title>
      <link>https://www.markhneedham.com/blog/2010/09/30/ruby-activerecord-2-3-5-object-equality/</link>
      <pubDate>Thu, 30 Sep 2010 07:00:57 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/30/ruby-activerecord-2-3-5-object-equality/</guid>
      <description>We learnt something interesting about the equality of ActiveRecord objects today while comparing two user objects - one which was being provided to our application by Warden and the other that we’d retrieved by a &amp;#39;User.find&amp;#39; call.
Both objects referred to the same user in the database but were different instances in memory.
We needed to check that we were referring to the same user for one piece of functionality and were therefore able to make use of the &amp;#39;==&amp;#39; method defined on ActiveRecord::Base which is defined in the documentation like so:</description>
    </item>
    
    <item>
      <title>Ruby: Intersection/Difference/Concatenation with collections</title>
      <link>https://www.markhneedham.com/blog/2010/09/29/ruby-intersectiondifferenceconcatenation-with-collections/</link>
      <pubDate>Wed, 29 Sep 2010 03:28:40 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/29/ruby-intersectiondifferenceconcatenation-with-collections/</guid>
      <description>We came across a couple of situations yesterday where we wanted to perform operations on two different arrays.
My immediate thought was that there should be some methods available similar to what we have in C# which Mike Wagg and I spoke about in our talk about using functional programming techniques in C#.
I was expecting to find methods with names indicating the operation they perform but in actual fact the methods are more like operators which makes for code that reads really well.</description>
    </item>
    
    <item>
      <title>FactoryGirl: &#39;has_and_belongs_to_many&#39; associations and the &#39;NoMethodError&#39;</title>
      <link>https://www.markhneedham.com/blog/2010/09/27/factorygirl-has_and_belongs_to_many-associations-and-the-nomethoderror/</link>
      <pubDate>Mon, 27 Sep 2010 14:18:48 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/27/factorygirl-has_and_belongs_to_many-associations-and-the-nomethoderror/</guid>
      <description>We ran into a somewhat frustrating problem while using Factory Girl to create an object which had a &amp;#39;has_and_belongs_to_many&amp;#39; association with another object.
The relevant code in the two classes was like this..
class Bar &amp;lt; ActiveRecord::Base has_and_belongs_to_many :foos, :class_name =&amp;gt; &amp;#34;Foo&amp;#34;, :join-table =&amp;gt; &amp;#34;bar_foos&amp;#34; end class Foo &amp;lt; ActiveRecord::Base has_many :bars end …​and we originally defined our &amp;#39;Bar&amp;#39; factory like so:
Factory.define :bar do |f| f.association(:foos, :factory =&amp;gt; :foo) end Factory.</description>
    </item>
    
    <item>
      <title>RSpec: Fooled by stub!...with</title>
      <link>https://www.markhneedham.com/blog/2010/09/26/rspec-fooled-by-stub-with/</link>
      <pubDate>Sun, 26 Sep 2010 19:03:24 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/26/rspec-fooled-by-stub-with/</guid>
      <description>We had an RSpec spec setup roughly like this the other day…​
describe &amp;#34;my stub test&amp;#34; do it &amp;#34;should be amazin&amp;#34; do Mark.stub!(:random).with(&amp;#34;some_wrong_argument&amp;#34;).and_return(&amp;#34;something&amp;#34;) Another.new.a_method end end …​where &amp;#39;Mark&amp;#39; and &amp;#39;Another&amp;#39; were defined like so:
class Mark def self.random(params) &amp;#34;do some amazing stuff&amp;#34; end end class Another def a_method random = Mark.random(&amp;#34;foo&amp;#34;) # use random for something end end When we ran the spec we would get the following error message which was initially a little baffling:</description>
    </item>
    
    <item>
      <title>RSpec: Causing ourselves much pain through &#39;attr&#39; misuse</title>
      <link>https://www.markhneedham.com/blog/2010/09/26/rspec-causing-ourselves-much-pain-through-attr-misuse/</link>
      <pubDate>Sun, 26 Sep 2010 18:57:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/26/rspec-causing-ourselves-much-pain-through-attr-misuse/</guid>
      <description>While testing some code that we were mixing into one of our controllers we made what I thought was an interesting mistake.
The module we wanted to test had some code a bit like this…​
module OurModule def some_method @User = User.find(params[:id]) # in the test code this is always true if @user == user ... end end end .and we had the spec setup like so: describe &amp;#39;OurController&amp;#39; do class TestController include OurModule attr_accessor :user end before(:each) do @controller = TestController.</description>
    </item>
    
    <item>
      <title>Ruby: Control flow using &#39;and&#39;</title>
      <link>https://www.markhneedham.com/blog/2010/09/23/ruby-control-flow-using-and/</link>
      <pubDate>Thu, 23 Sep 2010 14:33:29 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/23/ruby-control-flow-using-and/</guid>
      <description>Something I’ve noticed while reading Ruby code is that quite frequently the flow of a program is controlled by the &amp;#39;chaining&amp;#39; of different operations through use of the &amp;#39;and&amp;#39; keyword.
I’ve noticed that this pattern is used in Javascript code as well and it’s particularly prevalent when we want to get a status for those operations after they’ve all been executed.
For example we might have the following code…​</description>
    </item>
    
    <item>
      <title>Ruby: Returning hashes using merge! and merge</title>
      <link>https://www.markhneedham.com/blog/2010/09/21/ruby-returning-hashes-using-merge-and-merge/</link>
      <pubDate>Tue, 21 Sep 2010 20:24:47 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/21/ruby-returning-hashes-using-merge-and-merge/</guid>
      <description>We came across an interesting problem today with some code which was unexpectedly returning nil.
The code that we had looked like this…​
class SomeClass def our_method a_hash = { :a =&amp;gt; 2 } a_hash.merge!({:b =&amp;gt; 3}) unless some_condition.nil? end end …​and we didn’t notice the &amp;#39;unless&amp;#39; statement on the end which meant that if &amp;#39;some_condition&amp;#39; was nil then the return value of the method would be nil.
One way around it is to ensure that we explicitly return a_hash at the end of the method…​</description>
    </item>
    
    <item>
      <title>Learning cycles at an overall project level</title>
      <link>https://www.markhneedham.com/blog/2010/09/20/learning-cycles-at-an-overall-project-level/</link>
      <pubDate>Mon, 20 Sep 2010 18:56:20 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/20/learning-cycles-at-an-overall-project-level/</guid>
      <description>I was looking back over a post I wrote a couple of years ago where I described some learning cycles that I’d noticed myself going through with respect to code and although at the time I was thinking of those cycles in terms of code I think they are applicable at a project level as well.
The cycles I described were as follows:
Don’t know what is good and what’s bad</description>
    </item>
    
    <item>
      <title>Rails: Faking a delete method with &#39;form_for&#39;</title>
      <link>https://www.markhneedham.com/blog/2010/09/20/rails-faking-a-delete-method-with-form_for/</link>
      <pubDate>Mon, 20 Sep 2010 18:52:15 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/20/rails-faking-a-delete-method-with-form_for/</guid>
      <description>We recently had a requirement to delete an item based on user input and wanting to adhere to the &amp;#39;RESTful&amp;#39; approach that Rails encourages we therefore needed to fake a HTTP Delete method request.
The documentation talks a little about this:
The Rails framework encourages RESTful design of your applications, which means you’ll be making a lot of “PUT” and “DELETE” requests (besides “GET” and “POST”). However, most browsers don’t support methods other than “GET” and “POST” when it comes to submitting forms.</description>
    </item>
    
    <item>
      <title>Ruby: Random Observations</title>
      <link>https://www.markhneedham.com/blog/2010/09/19/ruby-random-observations/</link>
      <pubDate>Sun, 19 Sep 2010 11:35:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/19/ruby-random-observations/</guid>
      <description>I thought it’d be interesting to write down some of my observations after working with Ruby and Rails for a couple more weeks so here are some more things I’ve come across and others that I’ve got confused with…​
The :: operator (apparently also known as the leading double colon operator)
I came across this while looking at some of the rails_warden code to try to understand how that gem opens the ActionController::Base class to add helper methods to it.</description>
    </item>
    
    <item>
      <title>Ruby: Testing declarative_authorization</title>
      <link>https://www.markhneedham.com/blog/2010/09/17/ruby-testing-declarative_authorization/</link>
      <pubDate>Fri, 17 Sep 2010 19:53:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/17/ruby-testing-declarative_authorization/</guid>
      <description>As I mentioned in a post earlier in the week we’re using the declarative_authorization gem to control access to various parts of our application and as we’ve been migrating parts of the code base over to use that framework one thing we’ve noticed is that there seems to be a diminishing return in how much value we get from writing specs to cover each rule that we create.
We found that while it is possible to write a spec to cover every single rule it sometimes seems like the spec is just duplicating what the rule already describes.</description>
    </item>
    
    <item>
      <title>SICP: Iterative process vs Recursive process functions</title>
      <link>https://www.markhneedham.com/blog/2010/09/16/sicp-iterative-process-vs-recursive-process-functions/</link>
      <pubDate>Thu, 16 Sep 2010 18:48:31 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/16/sicp-iterative-process-vs-recursive-process-functions/</guid>
      <description>I was working my way through some of the exercises in SICP over the weekend and one that I found particularly interesting was 1.11 where you have to write a function by means of a recursive process and then by means of an iterative process.
A function f is defined by the rule that f(n) = n if n&amp;lt;3 and f(n) = f(n - 1) + 2f(n - 2) + 3f(n - 3) if n&amp;gt; 3.</description>
    </item>
    
    <item>
      <title>Ruby: Caught out by no type checking</title>
      <link>https://www.markhneedham.com/blog/2010/09/13/ruby-caught-out-by-no-type-checking/</link>
      <pubDate>Mon, 13 Sep 2010 17:44:04 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/13/ruby-caught-out-by-no-type-checking/</guid>
      <description>I got caught out for a little while today when comparing a value coming into a controller from &amp;#39;params&amp;#39; which we were then comparing with a collection of numbers.
The code was roughly like this…​
class SomeController def some_action some_collection = [1,2,3,4,5] selected_item = some_collection.find { |item| item == params[:id] } end end …​and since the &amp;#39;id&amp;#39; being passed in was &amp;#39;1&amp;#39; I was expected that we should have a selected item but we didn’t.</description>
    </item>
    
    <item>
      <title>Ruby: FactoryGirl &amp; declarative_authorization - Random thoughts</title>
      <link>https://www.markhneedham.com/blog/2010/09/12/ruby-factorygirl-declarative_authorization-random-thoughts/</link>
      <pubDate>Sun, 12 Sep 2010 14:25:06 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/12/ruby-factorygirl-declarative_authorization-random-thoughts/</guid>
      <description>Two other gems that we’re using on my current project are FactoryGirl and declarative_authorization.
We use declarative_authorization for controlling access to various parts of the application and FactoryGirl allows us to build objects for use in our tests.
We wanted to be able to deactivate the authorization when creating test objects because otherwise our test wouldn’t have permission to create certain objects.
Our original approach was to create a &amp;#39;God&amp;#39; role which we could assign to the &amp;#39;current_user&amp;#39; in our tests therefore allowing us to create whatever objects we wanted.</description>
    </item>
    
    <item>
      <title>Learning: Study habits</title>
      <link>https://www.markhneedham.com/blog/2010/09/12/learning-study-habits/</link>
      <pubDate>Sun, 12 Sep 2010 13:27:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/12/learning-study-habits/</guid>
      <description>I came across an interesting article from the New York Times that Michael Feathers originally linked to on twitter which discusses some of the common ideas that we have about good study habits, pointing out the flaws in them and suggesting alternative approaches.
The author starts out by making some interesting observations about spacing out our learning:
An hour of study tonight, an hour on the weekend, another session a week from now: such so-called spacing improves later recall, without requiring students to put in more overall study effort or pay more attention, dozens of studies have found.</description>
    </item>
    
    <item>
      <title>Rails: Polymorphism through &#39;constantize&#39;</title>
      <link>https://www.markhneedham.com/blog/2010/09/10/rails-polymorphism-through-constantize/</link>
      <pubDate>Fri, 10 Sep 2010 21:26:04 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/10/rails-polymorphism-through-constantize/</guid>
      <description>One interesting feature of Rails which Shishir pointed out the other day is the ability to take a user provided value and make use of Active Support’s &amp;#39;constantize&amp;#39; method to effectively achieve polymorphism directly from the user’s input.
As an example if we were creating different types of widgets from the same web page we might have several different forms that the user could submit.
We could have a hidden field representing the type of the widget like so:</description>
    </item>
    
    <item>
      <title>Ruby: Checking an array contains an item</title>
      <link>https://www.markhneedham.com/blog/2010/09/08/ruby-checking-an-array-contains-an-item/</link>
      <pubDate>Wed, 08 Sep 2010 18:54:50 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/08/ruby-checking-an-array-contains-an-item/</guid>
      <description>A couple of times in the past few days I’ve wanted to check if a particular item exists in an array and presumably influenced by working for too long with the .NET/Java APIs I keep expecting there to be a &amp;#39;contains&amp;#39; method that I can call on the array!
More as an attempt to help myself remember than anything else, the method we want is actually called &amp;#39;include?&amp;#39;.
Therefore…​</description>
    </item>
    
    <item>
      <title>jQuery UI Tabs: Changing selected tab</title>
      <link>https://www.markhneedham.com/blog/2010/09/08/jquery-ui-tabs-changing-selected-tab/</link>
      <pubDate>Wed, 08 Sep 2010 18:32:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/08/jquery-ui-tabs-changing-selected-tab/</guid>
      <description>We’re using the tabs part of the jQuery UI library on the project I’m currently working on and one thing we wanted to do was change the default tab that was being selected.
The documentation suggested that one way to do this was to give the index of the tab we wanted selected when calling the tabs function:
$( &amp;#34;.selector&amp;#34; ).tabs({ selected: 3 }); Since we wanted to select the tab by name based on a value from the query string we thought it would probably be simpler if we could just set the selected tab using a css class.</description>
    </item>
    
    <item>
      <title>Ruby: Hash ordering</title>
      <link>https://www.markhneedham.com/blog/2010/09/07/ruby-hash-ordering/</link>
      <pubDate>Tue, 07 Sep 2010 03:52:32 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/07/ruby-hash-ordering/</guid>
      <description>The application that I’m working on at the moment is deployed into production on JRuby but we also use the C Ruby 1.8.7 interpreter when developing locally since this allows us much quicker feedback.
As a result we sometimes come across interesting differences in the way that the two runtimes work.
One that we noticed yesterday is that if you create a hash, the order of the keys in the hash will be preserved when interpreted on JRuby but not with the C Ruby interpreter.</description>
    </item>
    
    <item>
      <title>Flow in software teams</title>
      <link>https://www.markhneedham.com/blog/2010/09/05/flow-in-software-teams/</link>
      <pubDate>Sun, 05 Sep 2010 17:34:17 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/05/flow-in-software-teams/</guid>
      <description>My former colleague Greg Gigon has written an interesting blog post where he talks about the pain that we cause ourselves by multi-tasking, a point which Kevin Fox also makes on the Theory of Constraints blog.
I think the overall point that he makes is very true:
We can switch our attention quickly from one task to another. But …​ is it good for our brain? Is it good for the work we are doing?</description>
    </item>
    
    <item>
      <title>Design Simplicity: Partially updating an object</title>
      <link>https://www.markhneedham.com/blog/2010/09/05/design-simplicity-partially-updating-an-object/</link>
      <pubDate>Sun, 05 Sep 2010 17:32:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/09/05/design-simplicity-partially-updating-an-object/</guid>
      <description>One of the most common discussions that I have with my colleagues is around designing bits of code in the simplest way possible.
I’ve never quite been able to put my finger on exactly what makes a design simple and there is frequently disagreement about what is even considered simple.
On the last project I worked on we had an interesting problem where we wanted to partially update different parts of an object from different pages of the application.</description>
    </item>
    
    <item>
      <title>Objective C: Observations</title>
      <link>https://www.markhneedham.com/blog/2010/08/31/objective-c-observations/</link>
      <pubDate>Tue, 31 Aug 2010 18:27:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/31/objective-c-observations/</guid>
      <description>I’ve been playing around with Objective C over the last month or so and although my knowledge of the language is still very much limited I thought it’d be interesting to describe some of the things about the language that I think are quite interesting and others that keep catching me out.
Protocols I touched on protocols a bit in my first post but they seem like an interesting middle ground between interfaces and duck typing.</description>
    </item>
    
    <item>
      <title>Rails: Populating a dropdown list using &#39;form_for&#39;</title>
      <link>https://www.markhneedham.com/blog/2010/08/31/rails-populating-a-dropdown-list-using-form_for/</link>
      <pubDate>Tue, 31 Aug 2010 01:22:14 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/31/rails-populating-a-dropdown-list-using-form_for/</guid>
      <description>Last week we were trying to make use of Rails&amp;#39; &amp;#39;form_for&amp;#39; helper to populate a dropdown list with the values of a collection that we’d set to an instance variable in our controller.
My colleague pointed out that we’d need to use &amp;#39;collection_select&amp;#39; in order to do this.
We want to put the values in the &amp;#39;foos&amp;#39; collection onto the page. &amp;#39;foos&amp;#39; is a hash which defines some display values and their corresponding values like so:</description>
    </item>
    
    <item>
      <title>Coding: Mutating parameters</title>
      <link>https://www.markhneedham.com/blog/2010/08/26/coding-mutating-parameters/</link>
      <pubDate>Thu, 26 Aug 2010 07:47:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/26/coding-mutating-parameters/</guid>
      <description>One of the earliest rules of thumb that I was taught by my colleagues is the idea that we should try and avoid mutating/changing values passed into a function as a parameter.
The underlying reason as I understand it is that if you’re just skimming through the code you wouldn’t necessarily expect the values of incoming parameters to be different depending where in the function they’re used.
I think the most dangerous example of this is when we completely change the value of a parameter, like so:</description>
    </item>
    
    <item>
      <title>Ruby: &#39;method_missing&#39; and slightly misled by RubyMine</title>
      <link>https://www.markhneedham.com/blog/2010/08/23/ruby-method_missing-and-slightly-misled-by-rubymine/</link>
      <pubDate>Mon, 23 Aug 2010 21:07:46 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/23/ruby-method_missing-and-slightly-misled-by-rubymine/</guid>
      <description>Another library that we’re using on my project is ActionMailer and before reading through the documentation I was confused for quite a while with respect to how it actually worked.
We have something similar to the following piece of code…​
Emailer.deliver_some_email …​which when you click its definition in RubyMine takes you to this class definition:
class Emailer &amp;lt; ActionMailer::Base def some_email recipients &amp;#34;some@email.com&amp;#34; from &amp;#34;some_other_email@whatever.com&amp;#34; # and so on end end I initially thought that method was called &amp;#39;deliver_some_mail&amp;#39; but having realised that it wasn’t I was led to the &amp;#39;magic&amp;#39; that is &amp;#39;method_missing&amp;#39; on &amp;#39;ActionMailer::Base&amp;#39; which is defined as follows:</description>
    </item>
    
    <item>
      <title>Distributed Agile: Initial observations</title>
      <link>https://www.markhneedham.com/blog/2010/08/23/distributed-agile-initial-observations/</link>
      <pubDate>Mon, 23 Aug 2010 02:52:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/23/distributed-agile-initial-observations/</guid>
      <description>One of the reasons I wanted to come and work for ThoughtWorks in India is that I wanted to see how a distributed agile project is run and see the ways in which it differs to one which is done co-located.
I worked on a project which was distributed between Sydney and Melbourne in 2008/2009 and while some of the challenges seem to be quite similar to the ones we faced there, some are completely different.</description>
    </item>
    
    <item>
      <title>Ruby: Accessing fields</title>
      <link>https://www.markhneedham.com/blog/2010/08/22/ruby-accessing-fields/</link>
      <pubDate>Sun, 22 Aug 2010 18:26:17 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/22/ruby-accessing-fields/</guid>
      <description>I’ve spent a little time browsing through some of the libraries used by my project and one thing which I noticed in ActiveSupport is that fields don’t seem to be accessed directly but rather are accessed through a method which effectively encapsulates them inside the object.
For example the following function is defined in &amp;#39;inheritable_attributes.rb&amp;#39;
def write_inheritable_attribute(key, value) if inheritable_attributes.equal?(EMPTY_INHERITABLE_ATTRIBUTES) @inheritable_attributes = {} end inheritable_attributes[key] = value end def inheritable_attributes @inheritable_attributes ||= EMPTY_INHERITABLE_ATTRIBUTES end EMPTY_INHERITABLE_ATTRIBUTES = {}.</description>
    </item>
    
    <item>
      <title>Ultimate configurability</title>
      <link>https://www.markhneedham.com/blog/2010/08/21/ultimate-configurability/</link>
      <pubDate>Sat, 21 Aug 2010 11:04:54 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/21/ultimate-configurability/</guid>
      <description>In Continuous Delivery the authors talk about the danger of ultimate configurability…​
Configurable software is not always the cheaper solution it appears to be. It’s almost always better to focus on delivering the high-value functionality with little configuration and then add configuration options later when necessary
…​and from my experience when you take this over configurability to its logical conclusion you end up developing a framework that can hopefully just be &amp;#39;configured&amp;#39; for any number of &amp;#39;front ends&amp;#39;.</description>
    </item>
    
    <item>
      <title>The fear tax</title>
      <link>https://www.markhneedham.com/blog/2010/08/20/the-fear-tax/</link>
      <pubDate>Fri, 20 Aug 2010 14:14:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/20/the-fear-tax/</guid>
      <description>Seth Godin recently wrote a post about &amp;#39;the fear tax&amp;#39; which he describes as a &amp;#39;tax&amp;#39; that we pay when we do something in order to try and calm our fear about something else but don’t necessarily end up calming those fears.
We pay the fear tax every time we spend time or money seeking reassurance. We pay it twice when the act of seeking that reassurance actually makes us more anxious, not less.</description>
    </item>
    
    <item>
      <title>Database configuration: Just like any other change</title>
      <link>https://www.markhneedham.com/blog/2010/08/18/database-configuration-just-like-any-other-change/</link>
      <pubDate>Wed, 18 Aug 2010 10:07:42 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/18/database-configuration-just-like-any-other-change/</guid>
      <description>I’ve been flicking through Continuous Deployment and one section early on about changing configuration information in our applications particularly caught my eye:
In our experience, it is an enduring myth that configuration information is somehow less risky to change than source code. Our bet is that, given access to both, we can stop your system at least as easily by changing the configuration as by changing the source code.</description>
    </item>
    
    <item>
      <title>iPad: Getting PragProg books onto the Kindle App</title>
      <link>https://www.markhneedham.com/blog/2010/08/16/ipad-getting-pragprog-books-onto-the-kindle-app/</link>
      <pubDate>Mon, 16 Aug 2010 07:18:05 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/16/ipad-getting-pragprog-books-onto-the-kindle-app/</guid>
      <description>As I’ve mentioned previously I think the Kindle application on the iPad is the best one for reading books and as a result of that I wanted to be able to read some books which I’d bought from the PragProg store onto it.
The first step is to download the &amp;#39;.mobi&amp;#39; version of the book and use iPhoneExplorer to drag the file into the &amp;#39;Kindle/Documents/eBook&amp;#39; folder on the iPad.</description>
    </item>
    
    <item>
      <title>Creativity - John Cleese</title>
      <link>https://www.markhneedham.com/blog/2010/08/16/creativity-john-cleese/</link>
      <pubDate>Mon, 16 Aug 2010 05:42:51 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/16/creativity-john-cleese/</guid>
      <description>Jonas Boner recently linked to a really cool (and short) presentation by John Cleese about creativity which I think is very applicable to software development.&amp;lt;/param&amp;gt;&amp;lt;/param&amp;gt;&amp;lt;/param&amp;gt;&amp;lt;/embed&amp;gt;
Cleese describes some observations he’s made about creativity from his experiences working in comedy. These were some of the key ideas:
Plan to throw one away? Cleese describes a situation where he wrote a script for Fawlty Towers and then lost it. He decided to rewrite it from memory and after he’d done that he found the original.</description>
    </item>
    
    <item>
      <title>Can we always release to production incrementally?</title>
      <link>https://www.markhneedham.com/blog/2010/08/16/can-we-always-release-to-production-incrementally/</link>
      <pubDate>Mon, 16 Aug 2010 04:22:40 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/16/can-we-always-release-to-production-incrementally/</guid>
      <description>Jez recently linked to a post written by Timothy Fitz about a year ago where he talks about the way his team use continuous delivery which means that every change made to the code base goes into production immediately as long as it passes their test suite.
I’ve become fairly convinced recently that it should always be possible to deploy to production frequently but we recently came across a situation where it seemed like doing that wouldn’t make much sense.</description>
    </item>
    
    <item>
      <title>Objective C: Expected &#39;(&#39; before &#39;Project&#39;</title>
      <link>https://www.markhneedham.com/blog/2010/08/14/objective-c-expected-before-project/</link>
      <pubDate>Sat, 14 Aug 2010 10:33:24 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/14/objective-c-expected-before-project/</guid>
      <description>A mistake I’ve made more than a few times while declaring headers in Objective C is forgetting to explicitly import the classes used in the interface definition.
I’ve been refactoring some of the code I wrote earlier in the week and wanted to create a &amp;#39;LabelFactory&amp;#39;. I had the following code:
LabelFactory.h
#import &amp;lt;UIKit/UIKit.h&amp;gt; @interface LabelFactory : NSObject { } + (UILabel*)createLabelFrom:(Project *)project withXCoordinate:(NSInteger)x withYCoordinate:(NSInteger)y; @end Which gives this error on compilation:</description>
    </item>
    
    <item>
      <title>Rules of thumb vs Exercise your judgement</title>
      <link>https://www.markhneedham.com/blog/2010/08/13/rules-of-thumb-vs-exercise-your-judgement/</link>
      <pubDate>Fri, 13 Aug 2010 10:05:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/13/rules-of-thumb-vs-exercise-your-judgement/</guid>
      <description>I spent a bit of time working through the first Micro Testing album of the Industrial Logic eLearning suite a few weeks ago and there’s an interesting piece of advice towards the end of the album:
Microtesting is not a formula. It’s a technique. When microtesting rigorously, you will be called constantly to make judgments like these, between one set of names and another, and their corresponding approaches. Remember the judgment premise.</description>
    </item>
    
    <item>
      <title>One idea at a time</title>
      <link>https://www.markhneedham.com/blog/2010/08/12/one-idea-at-a-time/</link>
      <pubDate>Thu, 12 Aug 2010 18:59:54 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/12/one-idea-at-a-time/</guid>
      <description>One thing I noticed while pairing with some of the ThoughtWorks University guys a few weeks ago is that I had an almost overwhelming urge to show them all sorts of coding techniques that I’ve learned, probably to the point where it’d be more confusing than helpful.
JK pointed out that it’s more effective to bite your tongue and just focus on one idea at a time which is something that the authors of Agile Coaching touch on briefly at the beginning of the book:</description>
    </item>
    
    <item>
      <title>Coding: Using a library/rolling your own</title>
      <link>https://www.markhneedham.com/blog/2010/08/10/coding-using-a-libraryrolling-your-own/</link>
      <pubDate>Tue, 10 Aug 2010 17:25:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/10/coding-using-a-libraryrolling-your-own/</guid>
      <description>One of the things that I’ve noticed as we’ve started writing more client side code is that I’m much more likely to look for a library which solves a problem than I would be with server side code.
A requirement that we’ve had on at least the last 3 or 4 projects I’ve worked on is to do client side validation on the values entered into a form by the user.</description>
    </item>
    
    <item>
      <title>Learning and Situated cognition</title>
      <link>https://www.markhneedham.com/blog/2010/08/10/learning-and-situated-cognition/</link>
      <pubDate>Tue, 10 Aug 2010 03:26:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/10/learning-and-situated-cognition/</guid>
      <description>Sumeet recently blogged about the new style ThoughtWorks University that he and the other trainers have introduced and although I only got to see it in action for a few days it seemed clear to me that it was an improvement on the original version.
The questions being asked, discussions being had and situations that were coming up were pretty much the same as I’ve seen on any software project that I’ve worked on.</description>
    </item>
    
    <item>
      <title>iPad: Redrawing the screen</title>
      <link>https://www.markhneedham.com/blog/2010/08/09/ipad-redrawing-the-screen/</link>
      <pubDate>Mon, 09 Aug 2010 04:38:17 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/09/ipad-redrawing-the-screen/</guid>
      <description>As I mentioned in a post I wrote last week I’ve been writing a little iPad application to parse a cctray feed and then display the status of the various builds on the screen.
The way I’ve been doing this is by dynamically adding labels to the view and colouring the background of those labels red or green depending on the build status.
FirstViewController.h
@interface FirstViewController : UIViewController { .</description>
    </item>
    
    <item>
      <title>Coding: Tools/Techniques influence the way we work</title>
      <link>https://www.markhneedham.com/blog/2010/08/07/coding-toolstechniques-influence-the-way-we-work/</link>
      <pubDate>Sat, 07 Aug 2010 13:14:05 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/07/coding-toolstechniques-influence-the-way-we-work/</guid>
      <description>Dave Astels mentions in his BDD paper that the way we use language influences the way that we write code, quoting the Sapir-Whorf hypothesis
“there is a systematic relationship between the grammatical categories of the language a person speaks and how that person both understands the world and behaves in it.”
In a similar way, something which I didn’t fully appreciate until the last project I worked on is how much the tools and techniques that you use can influence the way that you work.</description>
    </item>
    
    <item>
      <title>Objective C: Back to being a novice</title>
      <link>https://www.markhneedham.com/blog/2010/08/06/objective-c-back-to-being-a-novice/</link>
      <pubDate>Fri, 06 Aug 2010 03:59:20 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/06/objective-c-back-to-being-a-novice/</guid>
      <description>As I mentioned in my previous post about parsing an XML file in Objective C I’m a novice on the Dreyfus Model when it comes to this type of development and I’ve found it interesting that I’ve dropped back into habits from my PHP days when I was first learning how to program.
The big picture My first instinct after I’d created a project in XCode was to try and understand how an iPad application fits together.</description>
    </item>
    
    <item>
      <title>Objective C: Parsing an XML file</title>
      <link>https://www.markhneedham.com/blog/2010/08/04/objective-c-parsing-an-xml-file/</link>
      <pubDate>Wed, 04 Aug 2010 05:00:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/08/04/objective-c-parsing-an-xml-file/</guid>
      <description>I’ve been wanting to try out some iPad development for a while and as a hello worldish exercise for myself I thought I’d try and work out how to parse the cctray.xml file from Sam Newman’s bigvisiblewall.
Realising that I’m a novice on the Dreyfus Model when it comes to Objective C I started out by following a tutorial from iPhone SDK Articles which explained how to do this.</description>
    </item>
    
    <item>
      <title>The value of naming things</title>
      <link>https://www.markhneedham.com/blog/2010/07/31/the-value-of-naming-things/</link>
      <pubDate>Sat, 31 Jul 2010 07:05:52 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/31/the-value-of-naming-things/</guid>
      <description>Nikhil and I were discussing some of the ideas around Test Driven Development earlier in the week and at one stage I pointed out that I quite liked Bryan Liles&amp;#39; idea of &amp;#39;make it pass or change the message&amp;#39;.
Bryan suggests that when we have a failing test our next step should be to make that test pass or at least write some code which results in us getting a different error message and hopefully one step closer to making the test pass.</description>
    </item>
    
    <item>
      <title>Kent Beck&#39;s Test Driven Development Screencasts</title>
      <link>https://www.markhneedham.com/blog/2010/07/28/kent-becks-test-driven-development-screencasts/</link>
      <pubDate>Wed, 28 Jul 2010 10:44:05 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/28/kent-becks-test-driven-development-screencasts/</guid>
      <description>Following the recommendations of Corey Haines, Michael Guterl, James Martin and Michael Hunger I decided to get Kent Beck’s screencasts on Test Driven Development which have been published by the Pragmatic Programmers.
I read Kent’s &amp;#39;Test Driven Development By Example&amp;#39; book a couple of years ago and remember enjoying that so I was intrigued as to what it would be like to see some of those ideas put into practice in real time.</description>
    </item>
    
    <item>
      <title>TDD: Call your shots</title>
      <link>https://www.markhneedham.com/blog/2010/07/28/tdd-call-your-shots/</link>
      <pubDate>Wed, 28 Jul 2010 07:39:03 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/28/tdd-call-your-shots/</guid>
      <description>One of the other neat ideas I was reminded of when watching Kent Beck’s TDD screencasts is the value of &amp;#39;calling your shots&amp;#39; i.e. writing a test and then saying what’s going to happen when you run that test.
It reminds me of an exercise we used to do in tennis training when I was younger.
The coach would feed the ball to you and just before you hit it you had to say exactly where on the court you were going to place it - cross court/down the line and short/deep.</description>
    </item>
    
    <item>
      <title>TDD: Testing collections</title>
      <link>https://www.markhneedham.com/blog/2010/07/28/tdd-testing-collections/</link>
      <pubDate>Wed, 28 Jul 2010 06:05:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/28/tdd-testing-collections/</guid>
      <description>I’ve been watching Kent Beck’s TDD screencasts and in the 3rd episode he reminded me of a mistake I used to make when I was first learning how to test drive code.
The mistake happens when testing collections and I would write a test which would pass even if the collection had nothing in it.
The code would look something like this:
[Test] public void SomeTestOfACollection() { var someObject = new Object(); var aCollection = someObject.</description>
    </item>
    
    <item>
      <title>Agile: Developer attendance at showcases</title>
      <link>https://www.markhneedham.com/blog/2010/07/27/agile-developer-attendance-at-showcases/</link>
      <pubDate>Tue, 27 Jul 2010 07:31:59 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/27/agile-developer-attendance-at-showcases/</guid>
      <description>On the majority of the projects that I’ve worked on at ThoughtWorks we’ve held a showcase at the end of each iteration to show our client what we’ve been working on and finished over the previous one or two weeks.
The format of these showcases has been fairly similar each time but the people who attended has tended to vary depending on the situation.
As part of the project being worked on at ThoughtWorks University we’ve run a showcase at the end of each week which the whole team have been attending.</description>
    </item>
    
    <item>
      <title>Technical Debt around release time</title>
      <link>https://www.markhneedham.com/blog/2010/07/25/technical-debt-around-release-time/</link>
      <pubDate>Sun, 25 Jul 2010 14:21:34 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/25/technical-debt-around-release-time/</guid>
      <description>One of the requirements that the ThoughtWorks University grads have been given on the internal project they’re working on is to ensure that they leave the code base in a good state so that the next batch can potentially continue from where they left off.
The application will be deployed on Thursday and this means that a lot of the time this week will be spent refactoring certain areas of the code base rather than only adding new functionality.</description>
    </item>
    
    <item>
      <title>Bundler: Don&#39;t forget to call &#39;source&#39;</title>
      <link>https://www.markhneedham.com/blog/2010/07/25/bundler-dont-forget-to-call-source/</link>
      <pubDate>Sun, 25 Jul 2010 11:48:51 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/25/bundler-dont-forget-to-call-source/</guid>
      <description>Brian, Tejas and I (well mainly them) have been working on an application to give badges to people based on their GitHub activity at the Yahoo Open Hack Day in Bangalore and we’ve been making use of Bundler to pull in our dependencies.
Our Gemfile was originally like this:
gem &amp;#34;sinatra&amp;#34;, &amp;#34;1.0&amp;#34; gem &amp;#34;haml&amp;#34;, &amp;#34;3.0.13&amp;#34; gem &amp;#34;activesupport&amp;#34;, &amp;#34;3.0.0.beta4&amp;#34;, :require =&amp;gt; false gem &amp;#34;tzinfo&amp;#34;, &amp;#34;0.3.22&amp;#34; gem &amp;#34;nokogiri&amp;#34;, &amp;#34;1.4.2&amp;#34; ... For quite a while we were wondering why &amp;#39;bundle install&amp;#39; wasn’t actually resolving anything at all before we RTFM and realised that we needed to call &amp;#39;source&amp;#39; at the top so that bundler knows where to pull the dependencies from.</description>
    </item>
    
    <item>
      <title>TDD, small steps and no need for comments</title>
      <link>https://www.markhneedham.com/blog/2010/07/23/tdd-small-steps-and-no-need-for-comments/</link>
      <pubDate>Fri, 23 Jul 2010 02:52:03 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/23/tdd-small-steps-and-no-need-for-comments/</guid>
      <description>I recently came a blog post written by Matt Ward describing some habits to make you a better coder and while he presented a lot of good ideas I found myself disagreeing with his 2nd tip:
Write Your Logic through Comments When it comes to coding, there are many tenets and ideas I stand by. One of this is that code is 95% logic. Another is that logic doesn&amp;#39;t change when translated from human language into a programming language.</description>
    </item>
    
    <item>
      <title>The prepared mind vs having context when learning new ideas</title>
      <link>https://www.markhneedham.com/blog/2010/07/22/the-prepared-mind-vs-having-context-when-learning-new-ideas/</link>
      <pubDate>Thu, 22 Jul 2010 04:06:40 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/22/the-prepared-mind-vs-having-context-when-learning-new-ideas/</guid>
      <description>I’m currently working as a trainer for ThoughtWorks University (TWU) and the participants have some Industrial Logic e-learning material to work through before they take part in the 6 week training program.
I’ve been working through the refactoring/https://elearning.industriallogic.com/gh/submit?Action=AlbumContentsAction&amp;amp;album=recognizingSmells&amp;amp;devLanguage=Java[code smells] courses myself and while I’ve been finding it really useful, I think this was partly because I’ve been able to link the material to situations that I’ve seen in code bases that I’ve worked on over the past few years.</description>
    </item>
    
    <item>
      <title>Feedback, the environment and other people</title>
      <link>https://www.markhneedham.com/blog/2010/07/20/feedback-the-environment-and-other-people/</link>
      <pubDate>Tue, 20 Jul 2010 17:30:16 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/20/feedback-the-environment-and-other-people/</guid>
      <description>Something that I’ve noticed over the last few years is that when people give feedback to each other there is often an over emphasis on the individual and less attention paid to the environment in which they were working.
I covered this a bit in a blog post I wrote about a year ago titled &amp;#39;Challenging projects and the Kubler Ross Grief Cycle&amp;#39; which I converted into a presentation that I gave at XP2010 in June.</description>
    </item>
    
    <item>
      <title>Writing off a badly executed practice</title>
      <link>https://www.markhneedham.com/blog/2010/07/17/writing-off-a-badly-executed-practice/</link>
      <pubDate>Sat, 17 Jul 2010 11:13:51 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/17/writing-off-a-badly-executed-practice/</guid>
      <description>I recently came across an interesting post about pair programming by Paritosh Ranjan where he outlines some of the problems he’s experienced with this practice.
While some of the points that he raises are certainly valid I think they’re more evidence of pair programming not being done in an effective way rather than a problem with the idea in itself.
To take one example:
Generally people don’t think a lot while pair programming as the person who wants to think about the pros and cons will be considered inefficient (as he will slow down the coding speed).</description>
    </item>
    
    <item>
      <title>TDD: I hate deleting unit tests</title>
      <link>https://www.markhneedham.com/blog/2010/07/15/tdd-i-hate-deleting-unit-tests/</link>
      <pubDate>Thu, 15 Jul 2010 23:15:54 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/15/tdd-i-hate-deleting-unit-tests/</guid>
      <description>Following on from my post about the value we found in acceptance tests on our project when doing a large scale refactoring I had an interesting discussion with Jak Charlton and Ben Hall about deleting unit tests when they’re no longer needed.
The following is part of our discussion:
Ben:
@JakCharlton @markhneedham a lot (not all) of the unit tests created can be deleted once the acceptance tests are passing.</description>
    </item>
    
    <item>
      <title>Drive - Dan Pink</title>
      <link>https://www.markhneedham.com/blog/2010/07/15/drive-dan-pink/</link>
      <pubDate>Thu, 15 Jul 2010 00:21:09 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/15/drive-dan-pink/</guid>
      <description>One of the more interesting presentations doing the rounds on twitter and on our internal mailing lists is the following one by Dan Pink titled &amp;#39;Drive - The surprising truth about what motivates us&amp;#39;.&amp;lt;/param&amp;gt;&amp;lt;/param&amp;gt;&amp;lt;/param&amp;gt;&amp;lt;/embed&amp;gt;
This topic generally interests me anyway but it’s quite intriguing that the research Dan has gathered support for what I imagine many people intrinsically knew.
Incentives The presentation dispels the myth that money always works as a motivator for getting people to do what we want them to do.</description>
    </item>
    
    <item>
      <title>J: Tacit Programming</title>
      <link>https://www.markhneedham.com/blog/2010/07/13/j-tacit-programming/</link>
      <pubDate>Tue, 13 Jul 2010 14:47:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/13/j-tacit-programming/</guid>
      <description>A couple of months ago I wrote about tacit programming with respect to F#, a term which I first came across while reading about the J programming language.
There’s a good introduction to tacit programming on the J website which shows the evolution of a function which originally has several local variables into a state where it has none at all.
I’ve been having a go at writing Roy Osherove’s TDD Kata in J and while I haven’t got very far yet I saw a good opportunity to move the code I’ve written so far into a more tacit style.</description>
    </item>
    
    <item>
      <title>Linchpin: Book Review</title>
      <link>https://www.markhneedham.com/blog/2010/07/12/linchpin-book-review/</link>
      <pubDate>Mon, 12 Jul 2010 16:07:12 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/12/linchpin-book-review/</guid>
      <description>I’ve read a couple of Seth Godin’s other books - Tribes and The Dip - and found them fairly readable so I figured his latest offering, Linchpin, would probably be worth a read too.
This is the first book that I’ve read on the iPad’s Kindle application and it was a reasonably good reading experience - I particularly like the fact that you can make notes and highlight certain parts of the text.</description>
    </item>
    
    <item>
      <title>The Internet Explorer 6 dilemma</title>
      <link>https://www.markhneedham.com/blog/2010/07/11/the-internet-explorer-6-dilemma/</link>
      <pubDate>Sun, 11 Jul 2010 19:31:16 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/11/the-internet-explorer-6-dilemma/</guid>
      <description>A couple of weeks ago Dermot and I showcased a piece of functionality that we’d been working on - notably hiding some options in a drop down list.
We showcased this piece of functionality to the rest of the team in Firefox and it all worked correctly.
Our business analyst, who was also acting as QA, then had a look at the story in Internet Explorer 6 and we promptly realised that the way we’d solved the problem didn’t actually work in IE6.</description>
    </item>
    
    <item>
      <title>A new found respect for acceptance tests</title>
      <link>https://www.markhneedham.com/blog/2010/07/11/a-new-found-respect-for-acceptance-tests/</link>
      <pubDate>Sun, 11 Jul 2010 17:08:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/11/a-new-found-respect-for-acceptance-tests/</guid>
      <description>On the project that I’ve been working on over the past few months one of the key benefits of the application was its ability to perform various calculations based on user input.
In order to check that these calculators are producing the correct outputs we created a series of acceptance tests that ran directly against one of the objects in the system.
We did this by defining the inputs and expected outputs for each scenario in an excel spreadsheet which we converted into a CSV file before reading that into an NUnit test.</description>
    </item>
    
    <item>
      <title>Performance: Do it less or find another way</title>
      <link>https://www.markhneedham.com/blog/2010/07/10/performance-do-it-less-or-find-another-way/</link>
      <pubDate>Sat, 10 Jul 2010 22:49:52 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/10/performance-do-it-less-or-find-another-way/</guid>
      <description>One thing that we tried to avoid on the project that I’ve been working on is making use of C# expressions trees in production code.
We found that the areas of the code where we compiled these expressions trees frequently showed up as being the least performant areas of the code base when run through a performance profiler.
In a discussion about the ways to improve the performance of an application Christian pointed out that once we’ve identified the area for improvement there are two ways to do this:</description>
    </item>
    
    <item>
      <title>Installing Ruby 1.9.2 with RVM on Snow Leopard</title>
      <link>https://www.markhneedham.com/blog/2010/07/08/installing-ruby-1-9-2-with-rvm-on-snow-leopard/</link>
      <pubDate>Thu, 08 Jul 2010 13:10:32 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/08/installing-ruby-1-9-2-with-rvm-on-snow-leopard/</guid>
      <description>Yesterday evening I decided to try and upgrade the Ruby installation on my Mac from 1.8.7 to 1.9.2 and went on the yak shaving mission which is doing just that.
RVM seems to be the way to install Ruby these days so I started off by installing that with the following command from the terminal:
bash &amp;lt; &amp;lt;( curl http://rvm.beginrescueend.com/releases/rvm-install-head ) That bit worked fine for me but there are further instructions on the RVM website if that doesn’t work.</description>
    </item>
    
    <item>
      <title>Group feedback</title>
      <link>https://www.markhneedham.com/blog/2010/07/07/group-feedback/</link>
      <pubDate>Wed, 07 Jul 2010 00:17:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/07/group-feedback/</guid>
      <description>On an internal mailing list my colleague David Pattinson recently described a feedback approach he’d used on a project where everyone on the team went into a room and they took turns giving direct feedback to each person.
Since we were finishing the project that we’ve been working on for the past few months, Christian, Dermot and I decided to give it a try last week.
One thing to note is that this feedback wasn’t linked to any performance review, it was just between the 3 of us to allow us to find ways that we can be more effective on projects that we work on in the future.</description>
    </item>
    
    <item>
      <title>The Limited Red Society - Joshua Kerievsky</title>
      <link>https://www.markhneedham.com/blog/2010/07/05/the-limited-red-society-joshua-kerievsky/</link>
      <pubDate>Mon, 05 Jul 2010 15:02:32 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/05/the-limited-red-society-joshua-kerievsky/</guid>
      <description>I recently watched a presentation given by Joshua Kerievsky from the Lean Software &amp;amp; Systems conference titled &amp;#39;The Limited Red Society&amp;#39; in which describes an approach to refactoring where we try to minimise the amount of time that the code is in a &amp;#39;red&amp;#39; state.
This means that the code should be compiling and the tests green for as much of this time as possible .
I think it’s very important to follow these principles in order to successfully refactor code on a project team and it’s an approach that my colleague Dave Cameron first introduced me to when we worked together last year.</description>
    </item>
    
    <item>
      <title>Mikado-ish method for debugging</title>
      <link>https://www.markhneedham.com/blog/2010/07/04/mikado-ish-method-for-debugging/</link>
      <pubDate>Sun, 04 Jul 2010 01:20:45 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/04/mikado-ish-method-for-debugging/</guid>
      <description>I’ve written previously about the Mikado method and how I’ve made use of it for identifying ways in which I could refactor code but I think this approach is more generally applicable for any kind of code investigation.
Our application has a lot of calculations in it and we’ve been trying to refactor the code which wires all the calculators up to make use of a DSL which reveals the intention of the code more as well as making it easier to test.</description>
    </item>
    
    <item>
      <title>Coding: Having the design influenced by the ORM</title>
      <link>https://www.markhneedham.com/blog/2010/07/02/coding-having-the-design-influenced-by-the-orm/</link>
      <pubDate>Fri, 02 Jul 2010 16:56:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/07/02/coding-having-the-design-influenced-by-the-orm/</guid>
      <description>I wrote a few weeks ago about incremental refactoring using a static factory method where we ended up with the following code:
public class LookUpKey { private readonly string param1; private readonly string param2; private readonly string param3; public LookUpKey(string param1, string param2, string param3) { this.param1 = param1; this.param2 = param2; this.param3 = param3; } public static LookUpKey CreateFrom(UserData userData) { var param1 = GetParam1From(userData); var param2 = GetParam2From(userData); var param3 = GetParam3From(userData); return new LookUpKey(param1, param2, param3); } public string Param1Key { { get { return param1; } } } .</description>
    </item>
    
    <item>
      <title>jQuery: Dynamically updating a drop down list</title>
      <link>https://www.markhneedham.com/blog/2010/06/30/jquery-dynamically-updating-a-drop-down-list/</link>
      <pubDate>Wed, 30 Jun 2010 10:46:20 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/30/jquery-dynamically-updating-a-drop-down-list/</guid>
      <description>We recently had a requirement to dynamically update a drop down list based on how the user had filled in other parts of the page.
Our initial approach was to populate the drop down with all potential options on page load and then add CSS selectors to the options that we wanted to hide. That worked fine in Chrome and Firefox but Internet Explorer seems to ignore CSS selectors inside a drop down list so none of the options were being hidden.</description>
    </item>
    
    <item>
      <title>NHibernate 2nd level cache: Doing it wrong?</title>
      <link>https://www.markhneedham.com/blog/2010/06/29/nhibernate-2nd-level-cache-doing-it-wrong/</link>
      <pubDate>Tue, 29 Jun 2010 06:45:11 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/29/nhibernate-2nd-level-cache-doing-it-wrong/</guid>
      <description>I wrote a couple of weeks ago about how we’d been trying to make use of the NHibernate 2nd level cache and we were able to cache our data by following the various posts that I listed.
Unfortunately when we ran some performance tests we found that the performance of the application was significantly worse than when we just wrote our own &amp;#39;cache&amp;#39; - an object which had a dictionary containing the reference data items we’d previously tried to lookup and the appropriate values.</description>
    </item>
    
    <item>
      <title>Intuition and &#39;quit thinking and look&#39;</title>
      <link>https://www.markhneedham.com/blog/2010/06/28/intuition-and-quit-thinking-and-look/</link>
      <pubDate>Mon, 28 Jun 2010 08:39:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/28/intuition-and-quit-thinking-and-look/</guid>
      <description>Something which Dermot, Christian and I noticed last week is that on our project we’ve reached the stage where we intuitively know what the underlying problem is for any given error message in the application we’re working on.
We’re pretty much at the stage where we’re effectively pattern matching what’s going on without needing to think that much anymore.
This is a good thing because it saves a lot of time analysing every single message to try and work out what’s going on - I think this means that we’ve reached a higher level of the Dreyfus model when it comes to this particular situation.</description>
    </item>
    
    <item>
      <title>Is &#39;be the worst&#39; ever limiting?</title>
      <link>https://www.markhneedham.com/blog/2010/06/26/is-be-the-worst-ever-limiting/</link>
      <pubDate>Sat, 26 Jun 2010 10:03:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/26/is-be-the-worst-ever-limiting/</guid>
      <description>One of my favourite patterns from Ade Oshineye and Dave Hoover’s &amp;#39;Apprenticeship Patterns&amp;#39; is &amp;#39;Be the worst&amp;#39; which is described as follows:
Surround yourself with developers who are better than you. Find a stronger team where you are the weakest member and have room to grow. Be the Worst was the seminal pattern of this pattern language. It was lifted from some advice that Pat Metheny offered to young musicians: “Be the worst guy in every band you’re in.</description>
    </item>
    
    <item>
      <title>Mercurial: Only pushing some local changes</title>
      <link>https://www.markhneedham.com/blog/2010/06/25/mercurial-only-pushing-some-local-changes/</link>
      <pubDate>Fri, 25 Jun 2010 23:32:36 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/25/mercurial-only-pushing-some-local-changes/</guid>
      <description>One problem we’ve come across a few times over the last couple of months while using Mercurial is the situation where we want to quickly commit a local change without committing other local changes that we’ve made.
The example we came across today was where we wanted to make a change to the build file as we’d made a mistake in the target that runs on our continuous integration server and hadn’t noticed for a while during which time we’d accumulated other local changes.</description>
    </item>
    
    <item>
      <title>Leadership and software teams: Some thoughts</title>
      <link>https://www.markhneedham.com/blog/2010/06/22/leadership-and-software-teams-some-thoughts/</link>
      <pubDate>Tue, 22 Jun 2010 22:51:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/22/leadership-and-software-teams-some-thoughts/</guid>
      <description>Roy Osherove wrote a post about a month ago describing the different maturity levels of software teams and the strategies that he uses when leading each of these which I found quite interesting.
He describes the following states of maturity for a team:
Chaotic Stage — the state where a team does not possess the skills, motives or ambition to become a mature self managing team.
Mid-Life stage — where a team possesses some skills for self management and decision making , and can make some of its own decisions without needing a team lead.</description>
    </item>
    
    <item>
      <title>C#: StackTrace</title>
      <link>https://www.markhneedham.com/blog/2010/06/22/c-stacktrace/</link>
      <pubDate>Tue, 22 Jun 2010 22:27:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/22/c-stacktrace/</guid>
      <description>Dermot and I were doing a bit of work on a mini testing DSL that we’ve been writing to try and make some of our interaction tests a bit more explicit and one of the things that we wanted to do was find out which method was being called on one of our collaborators.
We have a stub collaborator which gets injected into our system under test. It looks roughly like this:</description>
    </item>
    
    <item>
      <title>iPad: First thoughts</title>
      <link>https://www.markhneedham.com/blog/2010/06/21/ipad-first-thoughts/</link>
      <pubDate>Mon, 21 Jun 2010 21:30:20 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/21/ipad-first-thoughts/</guid>
      <description>I’ve had the iPad for about a month now and since my colleagues Martin Fowler, Neal Ford and Chris Stevenson have already previously written about their experiences with it I thought I’d share the way I’m using it as well.
Twitter I follow a lot of people involved in software development on twitter and come across a lot of interesting articles/blogs that people link to or write. A lot of the time I don’t really want to read those posts when I come across them - it would be much better if I could just save them to read later on.</description>
    </item>
    
    <item>
      <title>Coding: Controlled Technical Debt</title>
      <link>https://www.markhneedham.com/blog/2010/06/20/coding-controlled-technical-debt/</link>
      <pubDate>Sun, 20 Jun 2010 22:37:32 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/20/coding-controlled-technical-debt/</guid>
      <description>A couple of months ago I wrote about an approach to stories that Christian has been encouraging on our project whereby we slim stories down to allow us to deliver the core functionality of the application as quickly as possible.
In our case we had a requirement to setup a range of different parameters used to lookup reference data used in the different calculations that we have in our application.</description>
    </item>
    
    <item>
      <title>Git/Mercurial: Pushing regularly</title>
      <link>https://www.markhneedham.com/blog/2010/06/19/gitmercurial-pushing-regularly/</link>
      <pubDate>Sat, 19 Jun 2010 22:14:06 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/19/gitmercurial-pushing-regularly/</guid>
      <description>I was reading a recent blog post by Gabriel Schenker where he discusses http://feedproxy.google.com/r/LosTechies/3/h-tL8ABnNkY/git-and-our-friction-points-and-beginners-mistakes.aspx[how his team is making use of Git] and about half way through he says the following:
When using Git as your SCM it is normal to work for quite a while — maybe for a couple of days — in a local branch and without ever pushing the changes to the origin. Usually we only push when a feature is done or a defect is completely resolved.</description>
    </item>
    
    <item>
      <title>Slack time</title>
      <link>https://www.markhneedham.com/blog/2010/06/18/slack-time/</link>
      <pubDate>Fri, 18 Jun 2010 17:36:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/18/slack-time/</guid>
      <description>Ken Schwaber recently wrote a blog post where he compared the differences between the kanban, lean and scrum approaches to software development and although I haven’t had the same experiences as he has with the first two, one interesting thing he implies is that with a scrum approach we have slack time built in.
God help us. People found ways to have slack in waterfall, to rest and be creative.</description>
    </item>
    
    <item>
      <title>Using real life metaphors</title>
      <link>https://www.markhneedham.com/blog/2010/06/17/using-real-life-metaphors/</link>
      <pubDate>Thu, 17 Jun 2010 07:00:09 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/17/using-real-life-metaphors/</guid>
      <description>My colleague Dermot Kilroy attended the DDD 2010 Exchange in London last week and one of the ideas that he’s been sharing with us from that is that of thinking how the user would solve a given problem without a technological solution i.e. how was something done before computers existed.
This encourages us to take a bigger picture view and can actually lead to a much simpler solution than we’d otherwise come up with.</description>
    </item>
    
    <item>
      <title>Incremental Refactoring: Create factory method</title>
      <link>https://www.markhneedham.com/blog/2010/06/17/incremental-refactoring-create-factory-method/</link>
      <pubDate>Thu, 17 Jun 2010 00:43:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/17/incremental-refactoring-create-factory-method/</guid>
      <description>Dermot and I spent a bit of time today refactoring some code where the logic had ended up in the wrong place.
The code originally looked a bit like this:
public class LookupService { public LookUp Find(UserData userData) { var param1 = GetParam1From(userData); var param2 = GetParam2From(userData); var param3 = GetParam3From(userData); var lookupKey = new LookUpKey(param1, param2, param3); return lookupRepository.Find(lookupKey); } } public class LookUpKey { private readonly string param1; private readonly string param2; private readonly string param3; public LookUpKey(string param1, string param2, string param3) { this.</description>
    </item>
    
    <item>
      <title>Fluent NHibernate and the 2nd level cache</title>
      <link>https://www.markhneedham.com/blog/2010/06/16/fluent-nhibernate-and-the-2nd-level-cache/</link>
      <pubDate>Wed, 16 Jun 2010 00:07:43 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/16/fluent-nhibernate-and-the-2nd-level-cache/</guid>
      <description>We’ve been trying to cache some objects using NHibernate’s second level cache which always proves to be a trickier task than I remember it being the previous time!
We’re storing some reference data in the database and then using LINQ to NHibernate to query for the specific row that we want based on some user entered criteria.
We can cache that query by calling &amp;#39;SetCacheable&amp;#39; on the &amp;#39;QueryOptions&amp;#39; property of our query:</description>
    </item>
    
    <item>
      <title>Fluent NHibernate: Seeing the mapping files generated</title>
      <link>https://www.markhneedham.com/blog/2010/06/15/fluent-nhibernate-seeing-the-mapping-files-generated/</link>
      <pubDate>Tue, 15 Jun 2010 23:15:30 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/15/fluent-nhibernate-seeing-the-mapping-files-generated/</guid>
      <description>We’ve been fiddling around with Fluent NHibernate a bit over the last couple of days and one of the things that we wanted to do was output the NHibernate mapping files being generated so we could see if they were as expected.
I couldn’t figure out how to do it but thanks to the help of James Gregory, Andrew Bullock and Matthew Erbs on twitter this is the code that you need in order to do that:</description>
    </item>
    
    <item>
      <title>TDD: Driving from the assertion up</title>
      <link>https://www.markhneedham.com/blog/2010/06/14/tdd-driving-from-the-assertion-up/</link>
      <pubDate>Mon, 14 Jun 2010 22:46:00 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/14/tdd-driving-from-the-assertion-up/</guid>
      <description>About a year ago I wrote a post about a book club we ran in Sydney covering &amp;#39;The readability of tests&amp;#39; from Steve Freeman and Nat Pryce’s book in which they suggest that their preferred way of writing tests is to drive them from the assertion up:
Write Tests Backwards Although we stick to a canonical format for test code, we don’t necessarily write tests from top to bottom. What we often do is: write the test name, which helps us decide what we want to achieve; write the call to the target code, which is the entry point for the feature; write the expectations and assertions, so we know what effects the feature should have; and, write the setup and teardown to define the context for the test.</description>
    </item>
    
    <item>
      <title>C#: A failed attempt at F#-ish pattern matching</title>
      <link>https://www.markhneedham.com/blog/2010/06/13/c-a-failed-attempt-at-f-ish-pattern-matching/</link>
      <pubDate>Sun, 13 Jun 2010 22:35:14 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/13/c-a-failed-attempt-at-f-ish-pattern-matching/</guid>
      <description>A few weeks ago we had some C# code around calcuations which had got a bit too imperative in nature.
The code looked roughly like this:
public class ACalculator { public double CalculateFrom(UserData userData) { if(userData.Factor1 == Factor1.Option1) { return 1.0; } if(userData.Factor2 == Factor2.Option3) { return 2.0; } if(userData.Factor3 == Factor3.Option2) { return 3.0 } return 0.0; } } I think there should be a more object oriented way to write this code whereby we push some of the logic onto the &amp;#39;UserData&amp;#39; object but it struck me that it reads a little bit like pattern matching code you might see in F#.</description>
    </item>
    
    <item>
      <title>The Refactoring Dilemma</title>
      <link>https://www.markhneedham.com/blog/2010/06/13/the-refactoring-dilemma/</link>
      <pubDate>Sun, 13 Jun 2010 13:37:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/13/the-refactoring-dilemma/</guid>
      <description>On several of the projects that I’ve worked on over the last couple of years we’ve seen the following situation evolve:
The team starts coding the application.
At some stage there is a breakthrough in understanding and a chance to really improve the code.
However the deadline is tight and we wouldn’t see a return within the time left if we refactored the code now
The team keeps on going with the old approach</description>
    </item>
    
    <item>
      <title>Retrospectives: Some thoughts</title>
      <link>https://www.markhneedham.com/blog/2010/06/10/retrospectives-some-thoughts/</link>
      <pubDate>Thu, 10 Jun 2010 07:22:38 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/10/retrospectives-some-thoughts/</guid>
      <description>I’ve worked on two different teams this year which had quite different approaches to retrospectives.
In the first team we had a retrospective at the beginning of every iteration i.e. once every two weeks and in the second team we tried out the idea of having a rolling retrospective i.e. we put up potential retrospective items on the wall and when there were enough of those we discussed them in the standup.</description>
    </item>
    
    <item>
      <title>XP2010: General thoughts</title>
      <link>https://www.markhneedham.com/blog/2010/06/09/xp2010-general-thoughts/</link>
      <pubDate>Wed, 09 Jun 2010 15:29:44 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/09/xp2010-general-thoughts/</guid>
      <description>I had the chance to attend the XP2010 conference in Trondheim, Norway for a couple of days last week as I was presenting a lightening talk based on a blog post I wrote last year titled &amp;#39;Tough projects and the Kubler Ross Grief Cycle&amp;#39;.
It was interesting to see the way another conference was organised as the only other conference I’ve attended was QCon which is a much more technical conference.</description>
    </item>
    
    <item>
      <title>XP2010: Coding Dojo Open Space</title>
      <link>https://www.markhneedham.com/blog/2010/06/04/xp2010-coding-dojo-open-space/</link>
      <pubDate>Fri, 04 Jun 2010 21:05:52 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/04/xp2010-coding-dojo-open-space/</guid>
      <description>I attended an open space hosted by Emily Bache at the XP2010 conference in Trondheim, Norway with several other people who have been organising coding dojos around the world.
It was really interesting to hear about some of the different approaches that people have taken and how a lot of the issues we had with the one we used to run in Sydney were the same as what others had experienced.</description>
    </item>
    
    <item>
      <title>Ask for forgiveness, not for permission</title>
      <link>https://www.markhneedham.com/blog/2010/06/04/ask-for-forgiveness-not-for-permission/</link>
      <pubDate>Fri, 04 Jun 2010 21:03:38 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/06/04/ask-for-forgiveness-not-for-permission/</guid>
      <description>I gave a presentation at our ThoughtWorks Brazil office in Porto Alegre last way on some of the things that I’ve learned while working at ThoughtWorks and the first point I made was that it was better to &amp;#39;ask for forgiveness, not for permission&amp;#39;.
This was something that was taught to me a few years ago and the idea behind this is that if there’s some idea we want to try out it makes much more sense to start trying it now and then we can always apologise later on if someone has a problem with us doing that.</description>
    </item>
    
    <item>
      <title>C#: Using a dictionary instead of if statements</title>
      <link>https://www.markhneedham.com/blog/2010/05/30/c-using-a-dictionary-instead-of-if-statements/</link>
      <pubDate>Sun, 30 May 2010 23:13:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/30/c-using-a-dictionary-instead-of-if-statements/</guid>
      <description>A problem we had to solve on my current project is how to handle form submission where the user can click on a different button depending whether they want to go to the previous page, save the form or go to the next page.
An imperative approach to this problem might yield code similar to the following:
public class SomeController { public ActionResult TheAction(string whichButton, UserData userData) { if(whichButton == &amp;#34;Back&amp;#34;) { // do the back action } else if(whichButton == &amp;#34;Next&amp;#34;) { // do the next action } else if(whichButton == &amp;#34;Save&amp;#34;) { // do the save action } throw Exception(&amp;#34;&amp;#34;); } } A neat design idea which my colleague Dermot Kilroy introduced on our project is the idea of using a dictionary to map to the different actions instead of using if statements.</description>
    </item>
    
    <item>
      <title>Evolving a design: Some thoughts</title>
      <link>https://www.markhneedham.com/blog/2010/05/13/evolving-a-design-some-thoughts/</link>
      <pubDate>Thu, 13 May 2010 07:00:18 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/13/evolving-a-design-some-thoughts/</guid>
      <description>Phil wrote an interesting post recently about the Ubuntu decision making process with respect to design and suggested that we should look to follow something similar on agile software development teams.
The Ubuntu design process basically comes down to this:
This is not a democracy. Good feedback, good data, are welcome. But we are not voting on design decisions.
Phil suggests the following:
That doesn’t mean that there is an Architect (capital A, please), designing the system for the less-skilled developers to write.</description>
    </item>
    
    <item>
      <title>Agile: Chasing a points total</title>
      <link>https://www.markhneedham.com/blog/2010/05/11/agile-chasing-a-points-total/</link>
      <pubDate>Tue, 11 May 2010 22:28:42 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/11/agile-chasing-a-points-total/</guid>
      <description>I’ve previously written about the danger of using velocity as a goal but on almost every project I’ve worked on at some stage we do actually end up chasing a points total.
Something I find quite interesting towards the end of an iteration is that if there is a choice of two stories to pick up then the project manager will nearly always press for one which can be completed within the remaining time in order to get the points total for that iteration higher.</description>
    </item>
    
    <item>
      <title>F#: Tacit programming</title>
      <link>https://www.markhneedham.com/blog/2010/05/10/f-tacit-programming/</link>
      <pubDate>Mon, 10 May 2010 23:24:39 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/10/f-tacit-programming/</guid>
      <description>I recently came across the idea of tacit programming which is described as such:
Tacit programming is a programming paradigm in which a function definition does not include information regarding its arguments, using combinators and function composition (but not λ-abstraction) instead of variables. The simplicity behind this idea allows its use on several programming languages, such as J programming language and APL and especially in stack or concatenative languages, such as PostScript, Forth, Joy or Factor.</description>
    </item>
    
    <item>
      <title>Learnings from my first project of 2010</title>
      <link>https://www.markhneedham.com/blog/2010/05/09/learnings-from-my-first-project-of-2010/</link>
      <pubDate>Sun, 09 May 2010 22:17:57 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/09/learnings-from-my-first-project-of-2010/</guid>
      <description>Pat Kua recently wrote a retrospective of his time working at ThoughtWorks and since I recently finished the first project I’ve worked on in 2010 I thought it would be interesting to have a look at what I’d learned and observed while working on it.
&amp;#34;Perfect&amp;#34; code I’ve previously believed that driving for the cleanest code with the least duplication and best structured object oriented design was the way to go but on this project we favoured a simpler design which felt quite procedural in comparison to some of the code bases I’ve worked on.</description>
    </item>
    
    <item>
      <title>Coding: Paying attention</title>
      <link>https://www.markhneedham.com/blog/2010/05/09/coding-paying-attention/</link>
      <pubDate>Sun, 09 May 2010 13:04:48 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/09/coding-paying-attention/</guid>
      <description>Jeremy Miller tweeted earlier in the week about the dangers of using an auto mocking container and how it can encourage sloppy design:
That whole &amp;#34;Auto Mocking Containers encourage sloppy design&amp;#34; meme that I blew off last week? Seeing an example in our code.
I haven’t used an auto mocking container but it seems to me that although that type of tool might be useful for reducing the amount of code we have to write in our tests it also hides the actual problem that we have - an object has too many dependencies.</description>
    </item>
    
    <item>
      <title>F#: My current coding approach</title>
      <link>https://www.markhneedham.com/blog/2010/05/06/f-my-current-coding-approach/</link>
      <pubDate>Thu, 06 May 2010 23:36:26 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/06/f-my-current-coding-approach/</guid>
      <description>I spent a bit of time over the weekend coding a simple generic builder for test objects in F# and I noticed that although there were similarity with the ways I drive code in C# or Java my approach didn’t seem to be exactly the same.
I’ve previously written about the importance of getting quick feedback when programming and how I believe that this can often be achieved faster by using the REPL rather than unit testing.</description>
    </item>
    
    <item>
      <title>Consistency in the code base and incremental refactoring</title>
      <link>https://www.markhneedham.com/blog/2010/05/05/consistency-in-the-code-base-and-incremental-refactoring/</link>
      <pubDate>Wed, 05 May 2010 22:34:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/05/consistency-in-the-code-base-and-incremental-refactoring/</guid>
      <description>I wrote a post a while ago about keeping consistency in the code base where I covered some of the reasons that you might want to rewrite parts of a code base and the potential impact of those changes but an interesting side to this discussion which I didn’t cover that much but which seems to play a big role is the role of incremental refactoring.
In our code base we recently realised that the naming of the fields in some parts of a form don’t really make sense and I wanted to start naming new fields with the new naming style and then go back and change the existing ones incrementally when it was a good time to do so.</description>
    </item>
    
    <item>
      <title>F#: The Kestrel Revisited</title>
      <link>https://www.markhneedham.com/blog/2010/05/04/f-the-kestrel-revisited/</link>
      <pubDate>Tue, 04 May 2010 18:36:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/04/f-the-kestrel-revisited/</guid>
      <description>A couple of days I wrote about a &amp;#39;returning&amp;#39; function that I’d written to simplify a bit of F# code that I’ve been working on.
It’s defined like so:
let returning t f = f(t); t And can then be used like this:
let build (t:Type) = returning (Activator.CreateInstance(t)) (fun t -&amp;gt; t.GetType().GetProperties() |&amp;gt; Array.iter (fun p -&amp;gt; p.SetValue(t, createValueFor p, null))) While I quite like this function it didn’t quite feel like idiomatic F# to me.</description>
    </item>
    
    <item>
      <title>Coding: Make the mutation obvious</title>
      <link>https://www.markhneedham.com/blog/2010/05/04/coding-make-the-mutation-obvious/</link>
      <pubDate>Tue, 04 May 2010 18:32:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/04/coding-make-the-mutation-obvious/</guid>
      <description>Although I’m generally quite opposed to coding approaches whereby we mutate objects, sometimes the way a framework is designed seems to make this a preferable option.
We came across a situation like this last week when we wanted to hydrate an object with data coming back from the browser.
The signature of the action in question looked like this:
public class SomeController { public ActionResult SomeAction(string id, UserData userData) { } We were able to automatically bind most of the values onto &amp;#39;UserData&amp;#39; except for the &amp;#39;id&amp;#39; which was coming in from the URL.</description>
    </item>
    
    <item>
      <title>Coding: The Kestrel</title>
      <link>https://www.markhneedham.com/blog/2010/05/03/coding-the-kestrel/</link>
      <pubDate>Mon, 03 May 2010 00:28:04 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/05/03/coding-the-kestrel/</guid>
      <description>Reg Braithwaite has a cool series of posts where he covers the different combinators from Raymond Smullyan’s &amp;#39;To Mock a Mockingbird&amp;#39; book and one of my favourites is the &amp;#39;Kestrel&amp;#39; or &amp;#39;K Combinator&amp;#39; which describes a function that returns a constant function.
It’s described like so:
Kxy = x The Kestrel function would take in 2 arguments and return the value of the first one. The second argument would probably be a function that takes in the first argument and then performs some side effects with that value.</description>
    </item>
    
    <item>
      <title>Coding: Generalising too early</title>
      <link>https://www.markhneedham.com/blog/2010/04/30/coding-generalising-too-early/</link>
      <pubDate>Fri, 30 Apr 2010 07:12:26 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/30/coding-generalising-too-early/</guid>
      <description>I’ve previously written about the value of adding duplication to code before removing it and we had an interesting situation this week where we failed to do that and ended up generalising a piece of code too early to the point where it actually didn’t solve the problem anymore.
The problem we were trying to solve was around the validation of some dependent fields and to start with we had this requirement:</description>
    </item>
    
    <item>
      <title>QTB: thetrainline.com - &#39;Scale at speed&#39;</title>
      <link>https://www.markhneedham.com/blog/2010/04/29/qtb-thetrainline-com-scale-at-speed/</link>
      <pubDate>Thu, 29 Apr 2010 23:51:17 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/29/qtb-thetrainline-com-scale-at-speed/</guid>
      <description>About 18 months on from the first ThoughtWorks QTB that I saw about offshoring, on Wednesday night I attended the latest QTB in Manchester titled &amp;#39;thetrainline.com - Scale at speed&amp;#39;.
The presenters were thetrainline.com’s CIO David Jack and the Managing Director of ThoughtWorks India, Mahesh Baxi.
They took us on the journey that thetrainline.com have taken while working with ThoughtWorks to re-architect part of their system to allow them to quickly deliver new functionality on the 2,500 websites that their portal technology powers.</description>
    </item>
    
    <item>
      <title>Listening to your tests: An example</title>
      <link>https://www.markhneedham.com/blog/2010/04/27/listening-to-your-tests-an-example/</link>
      <pubDate>Tue, 27 Apr 2010 22:34:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/27/listening-to-your-tests-an-example/</guid>
      <description>I was recently reading a blog post by Esko Luontola where he talks about the direct and indirect effects of TDD and one particularly interesting point he makes is that driving our code with a TDD approach helps to amplify the problems caused by writing bad code.
if the code is not maintainable, it will be hard to change. Also if the code is not testable, it will be hard to write tests for it.</description>
    </item>
    
    <item>
      <title>Small step refactoring: Overload constructor</title>
      <link>https://www.markhneedham.com/blog/2010/04/25/small-step-refactoring-overload-constructor/</link>
      <pubDate>Sun, 25 Apr 2010 22:48:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/25/small-step-refactoring-overload-constructor/</guid>
      <description>I’ve previously written about some approaches that I’ve been taught with respect to taking small steps when refactoring code and another approach which a couple of colleagues have been using recently is the idea of overloading the constructor when refactoring objects.
On a couple of occasions we’ve been trying to completely change the way an object was designed and changing the current constructor would mean that we’d have to change all the tests against that object before checking if the new design was actually going to work or not.</description>
    </item>
    
    <item>
      <title>Iron Ruby: &#39;unitialized constant...NameError&#39;</title>
      <link>https://www.markhneedham.com/blog/2010/04/25/iron-ruby-unitialized-constant-nameerror/</link>
      <pubDate>Sun, 25 Apr 2010 17:27:25 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/25/iron-ruby-unitialized-constant-nameerror/</guid>
      <description>I’ve been playing around a bit with Iron Ruby and cucumber following Rupak Ganguly’s tutorial and I tried to change the .NET example provided in the 0.4.2 release of cucumber to call a class wrapping Castle’s WindsorContainer.
The feature file now looks like this:
# &amp;#39;MyAssembly.dll&amp;#39; is in the &amp;#39;C:/Ruby/lib/ruby/gems/1.8/gems/cucumber-0.6.4/examples/cs&amp;#39; folder require &amp;#39;MyAssembly&amp;#39; ... Before do @container = Our::Namespace::OurContainer.new.Container end The class is defined roughly like this:
public class OurContainer : IContainerAccessor { private WindsorContainer container = new WindsorContainer(); public SwintonContainer() { container.</description>
    </item>
    
    <item>
      <title>Haskell: parse error on input `=&#39;</title>
      <link>https://www.markhneedham.com/blog/2010/04/22/haskell-parse-error-on-input/</link>
      <pubDate>Thu, 22 Apr 2010 23:35:27 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/22/haskell-parse-error-on-input/</guid>
      <description>I’ve been trying to follow the &amp;#39;Monads for Java/C++ programmers&amp;#39; post in ghci and getting the following type of error when trying out the code snippets:
Prelude&amp;gt; a = 3 &amp;lt;interactive&amp;gt;:1:2: parse error on input `=&amp;#39; I figured there must be something wrong with my installation of the compiler since I was copying and pasting the example across and having this problem. Having reinstalled that, however, I still had the same problem.</description>
    </item>
    
    <item>
      <title>Lured in by the complexity</title>
      <link>https://www.markhneedham.com/blog/2010/04/21/lured-in-by-the-complexity/</link>
      <pubDate>Wed, 21 Apr 2010 07:21:55 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/21/lured-in-by-the-complexity/</guid>
      <description>We recently ran into an interesting problem when running the website we’re building on our &amp;#39;user replica machine&amp;#39; where you can access the application via a web browser running on Citrix.
The problem we were having was that the result of a post redirect get request that we were making via the jQuery Form plugin was failing to update the fragment of the page correctly. It looked like it was replacing it with the original HTML.</description>
    </item>
    
    <item>
      <title>Functional C#: An imperative to declarative example</title>
      <link>https://www.markhneedham.com/blog/2010/04/20/functional-c-an-imperative-to-declarative-example/</link>
      <pubDate>Tue, 20 Apr 2010 07:08:09 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/20/functional-c-an-imperative-to-declarative-example/</guid>
      <description>I wrote previously about how we’ve been working on some calculations on my current project and one thing we’ve been trying to do is write this code in a fairly declarative way.
Since we’ve been test driving the code it initially started off being quite imperative and looked a bit like this:
public class TheCalculator { ... public double CalculateFrom(UserData userData) { return Calculation1(userData) + Calculation2(userData) + Calculation3(userData); } public double Calculation1(UserData userData) { // do calculation stuff here } public double Calculation2(UserData userData) { // do calculation stuff here } .</description>
    </item>
    
    <item>
      <title>Coding: Another outside in example</title>
      <link>https://www.markhneedham.com/blog/2010/04/18/coding-another-outside-in-example/</link>
      <pubDate>Sun, 18 Apr 2010 22:46:46 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/18/coding-another-outside-in-example/</guid>
      <description>I’ve written before about my thoughts on outside in development and we came across another example last week where we made our life difficult by not initially following this approach.
The rough design of what we were working on looked like this:
My pair and I were working on the code to do the calculations and we deliberately chose not to drive the functionality from the UI because the other pair were reworking all our validation code and we didn’t want to step on each others toes.</description>
    </item>
    
    <item>
      <title>Late integration: Some thoughts</title>
      <link>https://www.markhneedham.com/blog/2010/04/18/late-integration-some-thoughts/</link>
      <pubDate>Sun, 18 Apr 2010 21:19:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/18/late-integration-some-thoughts/</guid>
      <description>John Daniels has an interesting post summarising GOOSgaggle, an event run a few weeks ago where people met up to talk about the ideas in &amp;#39;Growing Object Oriented Software, Guided by Tests&amp;#39;.
It’s an interesting post and towards the end he states the following:
Given these two compelling justifications for starting with end-to-end tests, why is it that many people apparently don’t start there? We came up with two possibilities, although there may be many others:</description>
    </item>
    
    <item>
      <title>Functional C#: Using custom delegates to encapsulate Funcs</title>
      <link>https://www.markhneedham.com/blog/2010/04/17/functional-c-using-custom-delegates-to-encapsulate-funcs/</link>
      <pubDate>Sat, 17 Apr 2010 12:16:46 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/17/functional-c-using-custom-delegates-to-encapsulate-funcs/</guid>
      <description>One of the problems that I’ve frequently run into when writing C# code in a more functional way is that we can often end up with &amp;#39;Funcs&amp;#39; all over the place which don’t really describe what concept they’re encapsulating.
We had some code similar to this where it wasn’t entirely obvious what the Func being stored in the dictionary was actually doing:
public class Calculator { private Dictionary&amp;lt;string, Func&amp;lt;double, double, double&amp;gt;&amp;gt; lookups = new Dictionary&amp;lt;string, Func&amp;lt;double, double, double&amp;gt;&amp;gt;(); public Blah() { lookups.</description>
    </item>
    
    <item>
      <title>C#: Java-ish enums</title>
      <link>https://www.markhneedham.com/blog/2010/04/17/c-java-ish-enums/</link>
      <pubDate>Sat, 17 Apr 2010 10:33:16 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/17/c-java-ish-enums/</guid>
      <description>We’ve been writing quite a bit of code on my current project trying to encapsulate user selected values from drop down menus where we then want to go and look up something in another system based on the value that they select.
Essentially we have the need for some of the things that a Java Enum would give us but which a C# one doesn’t!
Right now we have several classes similar to the following in our code base to achieve this:</description>
    </item>
    
    <item>
      <title>hg: Reverting committed changes</title>
      <link>https://www.markhneedham.com/blog/2010/04/15/hg-reverting-committed-changes/</link>
      <pubDate>Thu, 15 Apr 2010 22:35:53 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/15/hg-reverting-committed-changes/</guid>
      <description>Continuing with our learning with Mercurial, yesterday we wanted to revert a couple of change sets that we had previously committed and go back to an old version of the code and continue working from there.
As an example, say we wanted to go back to Revision 1 and had the following changes committed:
Revision 3 Revision 2 Revision 1 Revision 0 My original thought was that we could merge revision 1 with the current tip:</description>
    </item>
    
    <item>
      <title>Agile: Slimming down stories</title>
      <link>https://www.markhneedham.com/blog/2010/04/14/agile-slimming-down-stories/</link>
      <pubDate>Wed, 14 Apr 2010 22:53:07 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/14/agile-slimming-down-stories/</guid>
      <description>On the project I’m currently working on we have several stories around writing the code that does various different calculations based on user input and then shows the results on the screen.
The original assumption on these stories was that we would be looking up the data of the business rules from a local database. The data would be copied across from a central database into that one for this project.</description>
    </item>
    
    <item>
      <title>Maverick: Book review</title>
      <link>https://www.markhneedham.com/blog/2010/04/14/maverick-book-review/</link>
      <pubDate>Wed, 14 Apr 2010 07:23:54 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/14/maverick-book-review/</guid>
      <description>My colleagues Frankie and Danilo have been recommending &amp;#39;Maverick&amp;#39; to me for a long time and I finally got around to reading it.
In this book Ricardo Semler, the CEO of Semco, tells the story of the company and how he helped evolved the organisation into one which is more employee led and embraces ideas such as open &amp;amp; self set salaries while encouraging civil obedience in the workforce as a necessity to alert the organisation to its problems.</description>
    </item>
    
    <item>
      <title>F#: The &#39;defaultArg&#39; function</title>
      <link>https://www.markhneedham.com/blog/2010/04/12/f-the-defaultarg-function/</link>
      <pubDate>Mon, 12 Apr 2010 18:21:41 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/12/f-the-defaultarg-function/</guid>
      <description>While reading through an old blog post by Matthew Podwysocki about writing F# code in a functional rather than imperative way I came across the &amp;#39;defaultArg&amp;#39; function which I haven’t seen previously.
It’s quite a simple function that we can use when we want to set a default value if an option type has a value of &amp;#39;None&amp;#39;:
The type signature is as follows:
&amp;gt; defaultArg;; val it : (&amp;#39;a option -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a) = &amp;lt;fun:clo@0&amp;gt; And the definition is relatively simple:</description>
    </item>
    
    <item>
      <title>Mercurial: Early thoughts</title>
      <link>https://www.markhneedham.com/blog/2010/04/10/mercurial-early-thoughts/</link>
      <pubDate>Sat, 10 Apr 2010 11:43:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/10/mercurial-early-thoughts/</guid>
      <description>We’re using Mercurial as our source control system on the project I’m working on at the moment and since I’ve not yet used a distributed source control system on a team I thought it’d be interesting to note some of my initial thoughts.
One of the neat things about having a local repository and a central one is that you can check in lots of times locally and then push those changes to the central repository when you want everyone else to get the changes that you’ve made.</description>
    </item>
    
    <item>
      <title>Coding: Maybe vs Null Object patterns</title>
      <link>https://www.markhneedham.com/blog/2010/04/10/coding-maybe-vs-null-object-patterns/</link>
      <pubDate>Sat, 10 Apr 2010 11:21:30 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/10/coding-maybe-vs-null-object-patterns/</guid>
      <description>On the project I’m currently working on my colleague Christian Blunden has introduced a version of the Maybe type into the code base, a concept that originally derives from the world of functional programming.
The code looks a bit like this:
public interface Maybe&amp;lt;T&amp;gt; { bool HasValue(); T Value(); } public class Some&amp;lt;T&amp;gt; : Maybe&amp;lt;T&amp;gt; { private readonly T t; public Some(T t) { this.t = t; } public bool HasValue() { return true; } public T Value() { return t; } } public class None&amp;lt;T&amp;gt; : Maybe&amp;lt;T&amp;gt; { public bool HasValue() { return false; } public T Value() { throw new NotImplementedException(); } } We would then use it in the code like this:</description>
    </item>
    
    <item>
      <title>Coding: FindOrCreateUser and similar methods</title>
      <link>https://www.markhneedham.com/blog/2010/04/09/coding-findorcreateuser-and-similar-methods/</link>
      <pubDate>Fri, 09 Apr 2010 07:09:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/09/coding-findorcreateuser-and-similar-methods/</guid>
      <description>One of the general guidelines that I like to follow when writing methods is trying to ensure that it’s only doing one thing but on several recent projects I’ve noticed us breaking this guideline and it feels like the right thing to do.
The method in question typically takes in some user details, looks up that user in some data store and then returning it if there is an existing user and creating a new user if not.</description>
    </item>
    
    <item>
      <title>Velocity as a goal </title>
      <link>https://www.markhneedham.com/blog/2010/04/07/velocity-as-a-goal/</link>
      <pubDate>Wed, 07 Apr 2010 23:36:16 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/07/velocity-as-a-goal/</guid>
      <description>Grant Joung wrote a post a while ago about velocity goals and whether they’re a good or bad idea, a topic which seems to come up from time to time on agile teams.
My colleague Danilo Sato previously wrote about the dangers of using velocity as a performance measure because it’s something that’s directly within our control and can therefore be gamed:
Value should be measured at the highest level possible, so that it doesn’t fall into one team’s (or individual’s) span of control.</description>
    </item>
    
    <item>
      <title>LDNUG: Mixing functional and object oriented approaches to programming in C#</title>
      <link>https://www.markhneedham.com/blog/2010/04/02/ldnug-mixing-functional-and-object-oriented-approaches-to-programming-in-c/</link>
      <pubDate>Fri, 02 Apr 2010 23:11:07 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/02/ldnug-mixing-functional-and-object-oriented-approaches-to-programming-in-c/</guid>
      <description>On Wednesday evening my colleague Mike Wagg and I presented a variation of a talk I originally presented at Developer Developer Developer 8 titled &amp;#39;Mixing functional and object oriented approaches to programming in C#&amp;#39; to the London .NET User Group at Skillsmatter.
The slides from the talk are below and there is a video of the talk on the Skillsmatter website.
Mixing functional and object oriented approaches to programming in C#</description>
    </item>
    
    <item>
      <title>How I Learned to Let My Workers Lead</title>
      <link>https://www.markhneedham.com/blog/2010/04/01/how-i-learned-to-let-my-workers-lead/</link>
      <pubDate>Thu, 01 Apr 2010 09:38:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/04/01/how-i-learned-to-let-my-workers-lead/</guid>
      <description>I recently came across a really interesting article written by Ralph Stayer titled &amp;#39;How I Learned to Let My Workers Lead&amp;#39; about his experiences at Johnsonville Foods.
It describes the way that he was able to help change the company culture from one where he made all the decisions and took all responsibility to one where everyone in the company was involved in decision making, resulting in a more successful organisation.</description>
    </item>
    
    <item>
      <title>Saved from an episode of bear shaving</title>
      <link>https://www.markhneedham.com/blog/2010/03/30/saved-from-an-episode-of-bear-shaving/</link>
      <pubDate>Tue, 30 Mar 2010 06:57:43 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/30/saved-from-an-episode-of-bear-shaving/</guid>
      <description>As part of our continuous integration build we have a step in the build which tears down a Windows service, uninstalls it and then reinstalls it later on from the latest files checked into the repository.
One problem we’ve been having recently is that despite the fact it should already have been uninstalled a lock has been kept on the log4net dll in our build directory, a directory that we tear down as one of the next steps.</description>
    </item>
    
    <item>
      <title>Reading Code: underscore.js</title>
      <link>https://www.markhneedham.com/blog/2010/03/28/reading-code-underscore-js/</link>
      <pubDate>Sun, 28 Mar 2010 20:02:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/28/reading-code-underscore-js/</guid>
      <description>I’ve been spending a bit of time reading through the source code of underscore.js, a JavaScript library that provides lots of functional programming support which my colleague Dave Yeung pointed out to me after reading my post about building a small application with node.js.
I’m still getting used to the way that JavaScript libraries are written but these were some of the interesting things that I got from reading the code:</description>
    </item>
    
    <item>
      <title>Finding the assumptions in stories</title>
      <link>https://www.markhneedham.com/blog/2010/03/26/finding-the-assumptions-in-stories/</link>
      <pubDate>Fri, 26 Mar 2010 01:14:15 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/26/finding-the-assumptions-in-stories/</guid>
      <description>My colleague J.K. has written an interesting blog post where he describes a slightly different approach that he’s been taking to writing stories to help move the business value in a story towards the beginning of the description and avoid detailing a solution in the &amp;#39;I want&amp;#39; section of the story.
To summarise, J.K.&amp;#39;s current approach involves moving from the traditional story format of:
As I... I want.. So that.</description>
    </item>
    
    <item>
      <title>Selenium, Firefox and HTTPS pages</title>
      <link>https://www.markhneedham.com/blog/2010/03/25/selenium-firefox-and-https-pages/</link>
      <pubDate>Thu, 25 Mar 2010 08:09:26 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/25/selenium-firefox-and-https-pages/</guid>
      <description>A fairly common scenario that we come across when building automated test suites using Selenium is the need to get past the security exception that Firefox pops up when you try to access a self signed HTTPS page.
Luckily there is quite a cool plugin for Firefox called &amp;#39;Remember Certificate Exception&amp;#39; which automatically clicks through the exception and allows the automated tests to keep running and not get stuck on the certificate exception page.</description>
    </item>
    
    <item>
      <title>TDD: Consistent test structure</title>
      <link>https://www.markhneedham.com/blog/2010/03/24/tdd-consistent-test-structure/</link>
      <pubDate>Wed, 24 Mar 2010 06:53:55 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/24/tdd-consistent-test-structure/</guid>
      <description>While pairing with Damian we came across the fairly common situation where we’d written two different tests - one to handle the positive case and one the negative case.
While tidying up the tests after we’d got them passing we noticed that the test structure wasn’t exactly the same. The two tests looked a bit like this:
[Test] public void ShouldSetSomethingIfWeHaveAFoo() { var aFoo = FooBuilder.Build.WithBar(&amp;#34;bar&amp;#34;).WithBaz(&amp;#34;baz&amp;#34;).AFoo(); // some random setup // some stubs/expectations var result = new Controller(.</description>
    </item>
    
    <item>
      <title>Defensive Programming and the UI</title>
      <link>https://www.markhneedham.com/blog/2010/03/22/defensive-programming-and-the-ui/</link>
      <pubDate>Mon, 22 Mar 2010 23:42:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/22/defensive-programming-and-the-ui/</guid>
      <description>A few weeks ago I was looking at quite an interesting bug in our system which initially didn’t seem possible.
On one of our screens we have some questions that the user fills in which read a bit like this:
Do you have a foo?
Is your foo an approved foo?
Is your foo special?
i.e. you would only see the 2nd and 3rd questions on the screen if you answered yes to the first question.</description>
    </item>
    
    <item>
      <title>node.js: A little application with Twitter &amp; CouchDB</title>
      <link>https://www.markhneedham.com/blog/2010/03/21/node-js-a-little-application-with-twitter-couchdb/</link>
      <pubDate>Sun, 21 Mar 2010 22:13:27 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/21/node-js-a-little-application-with-twitter-couchdb/</guid>
      <description>I’ve been continuing to play around with node.js and I thought it would be interesting to write a little application to poll Twitter every minute and save any new Tweets into a CouchDB database.
I first played around with CouchDB in May last year and initially spent a lot of time trying to work out how to install it before coming across CouchDBX which gives you one click installation for Mac OS X.</description>
    </item>
    
    <item>
      <title>TDD: Expressive test names</title>
      <link>https://www.markhneedham.com/blog/2010/03/19/tdd-expressive-test-names/</link>
      <pubDate>Fri, 19 Mar 2010 18:06:51 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/19/tdd-expressive-test-names/</guid>
      <description>Towards the end of a post I wrote just over a year ago I suggested that I wasn’t really bothered about test names anymore because I could learn what I wanted from reading the test body.
Recently, however, I’ve come across several tests that I wrote previously which were testing the wrong thing and had such generic test names that it wasn’t obvious that it was happening.
The tests in question were around code which partially clones an object but doesn’t copy some fields for various reasons.</description>
    </item>
    
    <item>
      <title>Functional C#: Continuation Passing Style</title>
      <link>https://www.markhneedham.com/blog/2010/03/19/functional-c-continuation-passing-style/</link>
      <pubDate>Fri, 19 Mar 2010 07:48:51 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/19/functional-c-continuation-passing-style/</guid>
      <description>Partly inspired by my colleague Alex Scordellis&amp;#39; recent post about lambda passing style I spent some time trying out a continuation passing style style on some of the code in one of our controllers to see how different the code would look compared to its current top to bottom imperative style.
We had code similar to the following:
public ActionResult Submit(string id, FormCollection form) { var shoppingBasket = CreateShoppingBasketFrom(id, form); if (!</description>
    </item>
    
    <item>
      <title>Essential and accidental complexity</title>
      <link>https://www.markhneedham.com/blog/2010/03/18/essential-and-accidental-complexity/</link>
      <pubDate>Thu, 18 Mar 2010 23:21:55 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/18/essential-and-accidental-complexity/</guid>
      <description>I’ve been reading Neal Ford’s series of articles on Evolutionary architecture and emergent design and in the one about &amp;#39;Investigating architecture and design&amp;#39; he discusses Essential and accidental complexity which I’ve previously read about in Neal’s book, &amp;#39;The Productive Programmer&amp;#39;.
Neal defines these terms like so:
Essential complexity is the core of the problem we have to solve, and it consists of the parts of the software that are legitimately difficult problems.</description>
    </item>
    
    <item>
      <title>Parallel Pair Programming</title>
      <link>https://www.markhneedham.com/blog/2010/03/16/parallel-pair-programming/</link>
      <pubDate>Tue, 16 Mar 2010 23:56:47 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/16/parallel-pair-programming/</guid>
      <description>I’ve spent a bit of time working with Les recently and it’s been quite interesting working out the best way for us to pair together as he’s working as a front end developer on the team which means he’s best utilised working on the CSS/JavaScript/HTML side of things.
Having said that there are often features which require both front end and backend collaboration and we’ve been trying to drive these features from the front end through to the backend rather than working on the backend code separately and then working with Les later on to hook it all up to the frontend.</description>
    </item>
    
    <item>
      <title>node.js: First thoughts</title>
      <link>https://www.markhneedham.com/blog/2010/03/15/node-js-first-thoughts/</link>
      <pubDate>Mon, 15 Mar 2010 00:09:47 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/15/node-js-first-thoughts/</guid>
      <description>I recently came across node.js via a blog post by Paul Gross and I’ve been playing around with it a bit over the weekend trying to hook up some code to call through to the Twitter API and then return the tweets on my friend timeline.
node.js gives us event driven I/O using JavaScript running server side on top of Google’s V8 JavaScript engine.
Simon Willison has http://www.slideshare.net/simon/evented-io-based-web-servers-explained-using-bunnies - Simon Willison’s talk[part of a presentation on slideshare] where he describes the difference between the typical thread per request approach and the event based approach to dealing with web requests using the metaphor of bunnies.</description>
    </item>
    
    <item>
      <title>A reminder of the usefulness of Git</title>
      <link>https://www.markhneedham.com/blog/2010/03/14/a-reminder-of-the-usefulness-of-git/</link>
      <pubDate>Sun, 14 Mar 2010 00:45:34 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/14/a-reminder-of-the-usefulness-of-git/</guid>
      <description>Despite the fact that none of the projects that I’ve worked on have used Git or Mercurial as the team’s main repository I keep forgetting how useful those tools can be even if they’re just being used locally.
I ran into a problem when trying to work out why a Rhino Mocks expectation wasn’t working as I expected last week having refactored a bit of code to include a constructor.</description>
    </item>
    
    <item>
      <title>Preventing systematic errors: An example</title>
      <link>https://www.markhneedham.com/blog/2010/03/13/preventing-systematic-errors-an-example/</link>
      <pubDate>Sat, 13 Mar 2010 23:26:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/13/preventing-systematic-errors-an-example/</guid>
      <description>James Shore has an interesting recent blog post where he describes some alternatives to over reliance on acceptance testing and one of the ideas that he describes is fixing the process whenever a bug is found in exploratory testing.
He describes two ways of preventing bugs from making it through to exploratory testing:
Make the bug impossible
Catch the bug automatically
Sometimes we can prevent defects by changing the design of our system so that type of defect is impossible.</description>
    </item>
    
    <item>
      <title>Does an organisation need to be fully committed to agile/lean/scrum?</title>
      <link>https://www.markhneedham.com/blog/2010/03/11/does-an-organisation-need-to-be-fully-committed-to-agileleanscrum/</link>
      <pubDate>Thu, 11 Mar 2010 08:05:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/11/does-an-organisation-need-to-be-fully-committed-to-agileleanscrum/</guid>
      <description>Alan Atlas has a recent blog post where he discusses agile, lean and scrum and suggests that you can’t truly achieve agility unless your company is fully committed to it which differs slightly from my experiences.
Alan makes a valid point that we’re not really following an approach just because we use all the practices:
Many people make the mistake of viewing Scrum and Agile and Lean as sets of practices.</description>
    </item>
    
    <item>
      <title>Javascript: Function scoping</title>
      <link>https://www.markhneedham.com/blog/2010/03/10/javascript-function-scoping/</link>
      <pubDate>Wed, 10 Mar 2010 23:06:31 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/10/javascript-function-scoping/</guid>
      <description>My colleague John Hume wrote an interesting post about his experience with the &amp;#39;const&amp;#39; keyword in ActionScript where he describes the problems with trying to capture a loop variable in a closure and then evaluating it later on in the code.
Since ActionScript and JavaScript are both dialects of ECMAscript, this is a problem in JavaScript as well, and is due to the fact that variables in JavaScript have function scope rather than block scope which is the case in many other languages.</description>
    </item>
    
    <item>
      <title>Pair Programming: Some thoughts</title>
      <link>https://www.markhneedham.com/blog/2010/03/09/pair-programming-some-thoughts/</link>
      <pubDate>Tue, 09 Mar 2010 23:04:29 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/09/pair-programming-some-thoughts/</guid>
      <description>Mark Wilden pointed me to a post he’s written about his experience pair programming at Pivotal Labs where he makes some interesting although not uncommon observations.
When you pair program, you’re effectively joined at the hip with your pair. You can’t pair if only one of you is there.
I’ve previously written wondering what we should do if our pair isn’t around where I was leaning more towards the opinion that we should try to continue along the same path that we were on when working with our pair if they’re gone for a short amount of time and to find a new pair or work alone if they’re gone for longer.</description>
    </item>
    
    <item>
      <title>Getting real: Book review</title>
      <link>https://www.markhneedham.com/blog/2010/03/08/getting-real-book-review/</link>
      <pubDate>Mon, 08 Mar 2010 21:56:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/08/getting-real-book-review/</guid>
      <description>I recently came across 37 Signals &amp;#39;Getting Real&amp;#39; book where they go through their approach to building web applications and there have certainly been some good reminders and ideas on the best way to do this.
These are some of my favourite parts:
Ship it!
If there are minor bugs, ship it as soon you have the core scenarios nailed and ship the bug ﬁxes to web gradually after that.</description>
    </item>
    
    <item>
      <title>Javascript: The &#39;new&#39; keyword</title>
      <link>https://www.markhneedham.com/blog/2010/03/06/javascript-the-new-keyword/</link>
      <pubDate>Sat, 06 Mar 2010 15:16:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/06/javascript-the-new-keyword/</guid>
      <description>I came across an interesting post by John Resig where he describes a &amp;#39;makeClass&amp;#39; function that he uses in his code to create functions which can instantiate objects regardless of whether the user calls that function with or without the new keyword.
The main reason that the new keyword seems to be considered harmful is because we might make assumptions in our function that it will be called with the new keyword which changes the meaning of &amp;#39;this&amp;#39; inside that function.</description>
    </item>
    
    <item>
      <title>Functional C#: Using Join and GroupJoin</title>
      <link>https://www.markhneedham.com/blog/2010/03/04/functional-c-using-join-and-groupjoin/</link>
      <pubDate>Thu, 04 Mar 2010 18:55:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/04/functional-c-using-join-and-groupjoin/</guid>
      <description>An interesting problem which I’ve come across a few times recently is where we have two collections which we want to use together in some way and get a result which could either be another collection or some other value.
In one which Chris and I were playing around with we had a collection of years and a collection of cars with corresponding years and the requirement was to show all the years on the page with the first car we found for that year or an empty value if there was no car for that year.</description>
    </item>
    
    <item>
      <title>Riskiest thing first vs Outside in development</title>
      <link>https://www.markhneedham.com/blog/2010/03/02/riskiest-thing-first-vs-outside-in-development/</link>
      <pubDate>Tue, 02 Mar 2010 22:49:11 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/02/riskiest-thing-first-vs-outside-in-development/</guid>
      <description>I had an interesting conversation with my colleague David Santoro last week where I described the way that I often pick out the riskiest parts of a story or task and do those first and David pointed out that this approach didn’t seem to fit in with the idea of outside in development.
The idea with outside in development as I understand it is that we would look to drive any new functionality from the UI i.</description>
    </item>
    
    <item>
      <title>A reminder about context switching</title>
      <link>https://www.markhneedham.com/blog/2010/03/01/a-reminder-about-context-switching/</link>
      <pubDate>Mon, 01 Mar 2010 23:12:01 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/03/01/a-reminder-about-context-switching/</guid>
      <description>I’ve spent most of my time working on agile software development teams over the last few years so for the most part each pair is only working on one story, keeping the work in progress low and allowing them to focus on that piece of work until it’s completed.
My pair and I ended up in a therefore somewhat unusual situation last week where we were attempting to work on three things at the same time and weren’t doing a particularly great job on any of them.</description>
    </item>
    
    <item>
      <title>Javascript: Confusing &#39;call&#39; and &#39;apply&#39;</title>
      <link>https://www.markhneedham.com/blog/2010/02/28/javascript-confusing-call-and-apply/</link>
      <pubDate>Sun, 28 Feb 2010 01:45:49 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/28/javascript-confusing-call-and-apply/</guid>
      <description>I wrote a couple of weeks ago about using the &amp;#39;call&amp;#39; and &amp;#39;apply&amp;#39; functions in Javascript when passing functions around and while working on our IE6 specific code I realised that I’d got them mixed up.
We were writing some code to override one of our functions so that we could call the original function and then do something else after that.
The code was roughly like this:
Foo = { bar : function(duck) { console.</description>
    </item>
    
    <item>
      <title>Javascript: Isolating browser specific code</title>
      <link>https://www.markhneedham.com/blog/2010/02/28/javascript-isolating-browser-specific-code/</link>
      <pubDate>Sun, 28 Feb 2010 00:11:20 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/28/javascript-isolating-browser-specific-code/</guid>
      <description>One thing we’ve found on my current project is that despite our best efforts we’ve still ended up with some javascript code which we only want to run if the user is using Internet Explorer 6 and the question then becomes how to write that code so that it doesn’t end up being spread all over the application.
jQuery has some functions which allow you to work out which browser’s being used but I’ve noticed that when we use those you tend to end up with if statements dotted all around the code which isn’t so good.</description>
    </item>
    
    <item>
      <title>Shu Ha Ri harmful?</title>
      <link>https://www.markhneedham.com/blog/2010/02/26/shu-ha-ri-harmful/</link>
      <pubDate>Fri, 26 Feb 2010 23:53:31 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/26/shu-ha-ri-harmful/</guid>
      <description>I came across a blog post by Rachel Davies where she wonders whether the Shu-Ha-Ri approach to learning/teaching is actually harmful and I found Rachel’s thoughts around the teaching of principles and practices quite interesting.
Quoting Jeff Sutherland:
Only when you have mastered the basic practices are you allowed to improvise. And the last and most important — Before you have gained discipline, centering, and flexibility, you are a hazard to yourself and others.</description>
    </item>
    
    <item>
      <title>Coding: Shared libraries</title>
      <link>https://www.markhneedham.com/blog/2010/02/26/coding-shared-libraries/</link>
      <pubDate>Fri, 26 Feb 2010 00:36:50 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/26/coding-shared-libraries/</guid>
      <description>On a few projects that I’ve worked on one of the things that we’ve done is create a shared library of objects which can be used across several different projects and while at the time it seemed like a good idea, in hindsight I’m not sure if it’s an entirely successful strategy.
I’m quite a fan of not recreating effort which is generally the goal when trying to pull out common code and within one team this seems to be a good approach the majority of the time.</description>
    </item>
    
    <item>
      <title>Pair Programming: In interviews</title>
      <link>https://www.markhneedham.com/blog/2010/02/25/pair-programming-in-interviews/</link>
      <pubDate>Thu, 25 Feb 2010 08:03:12 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/25/pair-programming-in-interviews/</guid>
      <description>I came across a couple of quite interesting blog posts recently which described some approaches to interviewing which suggest a more empirical approach to interviewing whereby the interview is treated more like an audition for the person being interviewed.
I like this idea and it’s something that we do when recruiting developers in a pair programming interview.
The general idea is that we pair with the candidate as they go through a coding problem.</description>
    </item>
    
    <item>
      <title>Refactoring: Small steps to pull out responsibilities</title>
      <link>https://www.markhneedham.com/blog/2010/02/24/refactoring-small-steps-to-pull-out-responsibilities/</link>
      <pubDate>Wed, 24 Feb 2010 00:45:38 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/24/refactoring-small-steps-to-pull-out-responsibilities/</guid>
      <description>I wrote previously about how I’ve been using effect sketches to identify responsibilities in objects so that I can pull them out into other objects and once I’ve done this I often find that I can’t see a small next step to take.
At this stage in the past I’ve often then stopped and left the refactoring until I have more time to complete it but this hasn’t really worked and a lot of the time I end up only seeing the code change in my mind and not in the actual code.</description>
    </item>
    
    <item>
      <title>Coding: Effect sketches and the Mikado method</title>
      <link>https://www.markhneedham.com/blog/2010/02/23/coding-effect-sketches-and-the-mikado-method/</link>
      <pubDate>Tue, 23 Feb 2010 00:29:34 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/23/coding-effect-sketches-and-the-mikado-method/</guid>
      <description>I’ve written previously about how useful I find effect sketches for helping me to understand how an object’s methods and fields fit together and while drawing one a couple of weeks ago I noticed that it’s actually quite useful for seeing which parts of the code will be the easiest to change.
I was fairly sure one of the object’s in our code base was doing too many things due to the fact that it had a lot of dependencies.</description>
    </item>
    
    <item>
      <title>Javascript: Bowling Game Kata</title>
      <link>https://www.markhneedham.com/blog/2010/02/22/javascript-bowling-game-kata/</link>
      <pubDate>Mon, 22 Feb 2010 23:14:20 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/22/javascript-bowling-game-kata/</guid>
      <description>I spent some time over the weekend playing with the bowling game kata in Javascript.
I thought I knew the language well enough to be able to do this kata quite easily so I was quite surprised at how much I struggled initially.
These are some of my observations from this exercise:
I was using screw-unit as my unit testing framework - I originally tried to setup JSTestDriver but I was having problems getting that to work so in the interests of not shaving the yak I decided to go with something I already know how to use.</description>
    </item>
    
    <item>
      <title>C#: Overcomplicating with LINQ</title>
      <link>https://www.markhneedham.com/blog/2010/02/21/c-overcomplicating-with-linq/</link>
      <pubDate>Sun, 21 Feb 2010 12:01:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/21/c-overcomplicating-with-linq/</guid>
      <description>I recently came across an interesting bit of code which was going through a collection of strings and then only taking the first &amp;#39;x&amp;#39; number of characters and discarding the rest.
The code looked roughly like this:
var words = new[] {&amp;#34;hello&amp;#34;, &amp;#34;to&amp;#34;, &amp;#34;the&amp;#34;, &amp;#34;world&amp;#34;}; var newWords = new List&amp;lt;string&amp;gt;(); foreach (string word in words) { if (word.Length &amp;gt; 3) { newWords.Add(word.Substring(0, 3)); continue; } newWords.Add(word); } For this initial collection of words we would expect &amp;#39;newWords&amp;#39; to contain [&amp;#34;hel&amp;#34;, &amp;#34;to&amp;#34;, &amp;#34;the&amp;#34;, &amp;#34;wor&amp;#34;]</description>
    </item>
    
    <item>
      <title>C#: A lack of covariance with generics example</title>
      <link>https://www.markhneedham.com/blog/2010/02/20/c-a-lack-of-covariance-with-generics-example/</link>
      <pubDate>Sat, 20 Feb 2010 12:17:16 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/20/c-a-lack-of-covariance-with-generics-example/</guid>
      <description>One of the things I find most confusing when reading about programming languages is the idea of covariance and contravariance and while I’ve previously read that covariance is not possible when using generics in C# I recently came across an example where I saw that this was true.
I came across this problem while looking at how to refactor some code which has been written in an imperative style:</description>
    </item>
    
    <item>
      <title>C#: Causing myself pain with LINQ&#39;s delayed evaluation</title>
      <link>https://www.markhneedham.com/blog/2010/02/18/c-causing-myself-pain-with-linqs-delayed-evaluation/</link>
      <pubDate>Thu, 18 Feb 2010 22:28:12 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/18/c-causing-myself-pain-with-linqs-delayed-evaluation/</guid>
      <description>I recently came across some code was imperatively looping through a collection and then mapping each value to go to something else by using an injected dependency to do that.
I thought I’d try to make use of functional collection parameters to try and simplify the code a bit but actually ended up breaking one of the tests.
About a month ago I wrote about how I’d written a hand rolled stub to simplify a test and this was actually where I caused myself the problem!</description>
    </item>
    
    <item>
      <title>Rules of Thumb: Don&#39;t use the session</title>
      <link>https://www.markhneedham.com/blog/2010/02/16/rules-of-thumb-dont-use-the-session/</link>
      <pubDate>Tue, 16 Feb 2010 23:19:09 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/16/rules-of-thumb-dont-use-the-session/</guid>
      <description>A while ago I wrote about some rules of thumb that I’d been taught by my colleagues with respect to software development and I was reminded of one of them - don’t put anything in the session - during a presentation my colleague Luca Grulla gave at our client on scaling applications by making use of the infrastructure of the web.
The problem with putting state in the session is that it means that requests from a specific user have to be tied to a specific server i.</description>
    </item>
    
    <item>
      <title>F#: Passing an argument to a member constraint</title>
      <link>https://www.markhneedham.com/blog/2010/02/15/f-passing-an-argument-to-a-member-constraint/</link>
      <pubDate>Mon, 15 Feb 2010 00:05:17 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/15/f-passing-an-argument-to-a-member-constraint/</guid>
      <description>I’ve written previously about function overloading in F# and my struggles working out how to do it and last week I came across the concept of inline functions and statically resolved parameters as a potential way to solve that problem.
I came across a problem where I thought I would be able to make use of this while playing around with some code parsing Xml today.
I had a &amp;#39;descendants&amp;#39; function which I wanted to be applicable against &amp;#39;XDocument&amp;#39; and &amp;#39;XElement&amp;#39; so I originally just defined the functions separately forgetting that the compiler wouldn’t allow me to do so as we would have a duplicate definition of the function:</description>
    </item>
    
    <item>
      <title>F#: Unexpected identifier in implementation file</title>
      <link>https://www.markhneedham.com/blog/2010/02/14/f-unexpected-identifier-in-implementation-file/</link>
      <pubDate>Sun, 14 Feb 2010 01:03:34 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/14/f-unexpected-identifier-in-implementation-file/</guid>
      <description>I’ve been playing around with some F# code this evening and one of the bits of code needs to make a HTTP call and return the result.
I wrote this code and then tried to make use of the &amp;#39;Async.RunSynchronously&amp;#39; function to execute the call.
The code I had looked roughly like this:
namespace Twitter module RetrieveLinks open System.Net open System.IO open System.Web open Microsoft.FSharp.Control let AsyncHttp (url:string) = async { let request = HttpWebRequest.</description>
    </item>
    
    <item>
      <title>Javascript: Some stuff I learnt this week</title>
      <link>https://www.markhneedham.com/blog/2010/02/12/javascript-some-stuff-i-learnt-this-week/</link>
      <pubDate>Fri, 12 Feb 2010 21:11:54 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/12/javascript-some-stuff-i-learnt-this-week/</guid>
      <description>I already wrote about how I’ve learnt a bit about the &amp;#39;call&amp;#39; and &amp;#39;apply&amp;#39; functions in Javascript this week but as I’ve spent the majority of my time doing front end stuff this week I’ve also learnt and noticed some other things which I thought were quite interesting.
Finding character codes We were doing some testing early in the week where we needed to restrict the characters that could be entered into a text box.</description>
    </item>
    
    <item>
      <title>Javascript: Passing functions around with call and apply</title>
      <link>https://www.markhneedham.com/blog/2010/02/12/javascript-passing-functions-around-with-call-and-apply/</link>
      <pubDate>Fri, 12 Feb 2010 20:18:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/12/javascript-passing-functions-around-with-call-and-apply/</guid>
      <description>Having read Douglas Crockford’s &amp;#39;Javascript: The Good Parts&amp;#39; I was already aware that making use of the &amp;#39;this&amp;#39; keyword in Javascript is quite dangerous but we came across what must be a fairly common situation this week where we wanted to pass around a function which made use of &amp;#39;this&amp;#39; internally.
We were writing some JSTestDriver tests around a piece of code which looked roughly like this:
function Common() { this.</description>
    </item>
    
    <item>
      <title>F#: Inline functions and statically resolved type parameters</title>
      <link>https://www.markhneedham.com/blog/2010/02/10/f-inline-functions-and-statically-resolved-type-parameters/</link>
      <pubDate>Wed, 10 Feb 2010 23:06:14 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/10/f-inline-functions-and-statically-resolved-type-parameters/</guid>
      <description>One thing which I’ve often wondered when playing around with F# is that when writing the following function the type of the function is inferred to be &amp;#39;int -&amp;gt; int -&amp;gt; int&amp;#39; rather than allowing any values which can be added together:
let add x y = x + y &amp;gt; val add : int -&amp;gt; int -&amp;gt; int It turns out if you use the &amp;#39;inline&amp;#39; keyword then the compiler does exactly what we want:</description>
    </item>
    
    <item>
      <title>Javascript: File encoding when using string.replace</title>
      <link>https://www.markhneedham.com/blog/2010/02/10/javascript-file-encoding-when-using-string-replace/</link>
      <pubDate>Wed, 10 Feb 2010 00:02:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/10/javascript-file-encoding-when-using-string-replace/</guid>
      <description>We ran into an interesting problem today when moving some Javascript code which was making use of the &amp;#39;string.replace&amp;#39; function to strip out the £ sign from some text boxes on a form.
The code we had written was just doing this:
var textboxValue = $(&amp;#34;#fieldId&amp;#34;).val().replace(/£/, &amp;#39;&amp;#39;); So having realised that we had this code all over the place we decided it would make sense to create a common function that strip the pound sign out.</description>
    </item>
    
    <item>
      <title>Functional C#: Extracting a higher order function with generics</title>
      <link>https://www.markhneedham.com/blog/2010/02/08/functional-c-extracting-a-higher-order-function-with-generics/</link>
      <pubDate>Mon, 08 Feb 2010 23:17:47 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/08/functional-c-extracting-a-higher-order-function-with-generics/</guid>
      <description>While working on some code with Toni we realised that we’d managed to create two functions that were almost exactly the same except they made different service calls and returned collections of a different type.
The similar functions were like this:
private IEnumerable&amp;lt;Foo&amp;gt; GetFoos(Guid id) { IEnumerable&amp;lt;Foo&amp;gt; foos = new List&amp;lt;Foo&amp;gt;(); try { foos = fooService.GetFoosFor(id); } catch (Exception e) { // do some logging of the exception } return foos; } private IEnumerable&amp;lt;Bar&amp;gt; GetBars(Guid id) { IEnumerable&amp;lt;Bar&amp;gt; bars = new List&amp;lt;Bar&amp;gt;(); try { bars = barService.</description>
    </item>
    
    <item>
      <title>Willed vs Forced designs</title>
      <link>https://www.markhneedham.com/blog/2010/02/08/willed-vs-forced-designs/</link>
      <pubDate>Mon, 08 Feb 2010 22:48:05 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/08/willed-vs-forced-designs/</guid>
      <description>I came across an interesting post that Roy Osherove wrote a few months ago where he talks about &amp;#39;Willed vs Forced Designs&amp;#39; and some common arguments that people give for not using TypeMock on their projects.
I’m not really a fan of the TypeMock approach to dealing with dependencies in tests because it seems to avoid the fact that the code is probably bad in the first place if we have to resort to using some of the approaches it encourages.</description>
    </item>
    
    <item>
      <title>F#: function keyword</title>
      <link>https://www.markhneedham.com/blog/2010/02/07/f-function-keyword/</link>
      <pubDate>Sun, 07 Feb 2010 02:54:13 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/07/f-function-keyword/</guid>
      <description>I’ve been browsing through Chris Smith’s Programming F# book and in the chapter on pattern matching he describes the &amp;#39;function&amp;#39; key word which I haven’t used before.
It’s used in pattern matching expressions when we want to match against one of the parameters passed into the function which contains the pattern match.
For example if we have this somewhat contrived example:
let isEven value = match value with | x when (x % 2) = 0 -&amp;gt; true | _ -&amp;gt; false That could be rewritten using the function keyword to the following:</description>
    </item>
    
    <item>
      <title>Functional C#: LINQ vs Method chaining</title>
      <link>https://www.markhneedham.com/blog/2010/02/05/functional-c-linq-vs-method-chaining/</link>
      <pubDate>Fri, 05 Feb 2010 18:06:28 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/05/functional-c-linq-vs-method-chaining/</guid>
      <description>One of the common discussions that I’ve had with several colleagues when we’re making use of some of the higher order functions that can be applied on collections is whether to use the LINQ style syntax or to chain the different methods together.
I tend to prefer the latter approach although when asked the question after my talk at Developer Developer Developer I didn’t really have a good answer other than to suggest that it seemed to just be a personal preference thing.</description>
    </item>
    
    <item>
      <title>Coding: Wrapping/not wrapping 3rd party libraries and DSLs</title>
      <link>https://www.markhneedham.com/blog/2010/02/02/coding-wrappingnot-wrapping-3rd-party-libraries-and-dsls/</link>
      <pubDate>Tue, 02 Feb 2010 23:54:21 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/02/coding-wrappingnot-wrapping-3rd-party-libraries-and-dsls/</guid>
      <description>One of the things which Nat Pryce and Steve Freeman suggest in their book Growing Object Oriented Software guided by tests is the idea of wrapping any third party libraries that we use in our own code.
We came across a situation where we did this and then later on I made the mistake of not following this advice.
To start with my colleague David had created a DSL which kept all the calls to Selenium nicely wrapped inside one class.</description>
    </item>
    
    <item>
      <title>Functional C#: Writing a &#39;partition&#39; function</title>
      <link>https://www.markhneedham.com/blog/2010/02/01/functional-c-writing-a-partition-function/</link>
      <pubDate>Mon, 01 Feb 2010 23:34:02 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/02/01/functional-c-writing-a-partition-function/</guid>
      <description>One of the more interesting higher order functions that I’ve come across while playing with F# is the partition function which is similar to the filter function except it returns the values which meet the predicate passed in as well as the ones which don’t.
I came across an interesting problem recently where we needed to do exactly this and had ended up taking a more imperative for each style approach to solve the problem because this function doesn’t exist in C# as far as I know.</description>
    </item>
    
    <item>
      <title>DDD8: Mixing functional and object oriented approaches to programming in C#</title>
      <link>https://www.markhneedham.com/blog/2010/01/31/ddd8-mixing-functional-and-object-oriented-approaches-to-programming-in-c/</link>
      <pubDate>Sun, 31 Jan 2010 14:05:05 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/31/ddd8-mixing-functional-and-object-oriented-approaches-to-programming-in-c/</guid>
      <description>I did a presentation titled &amp;#39;Mixing functional and object oriented approaches to programming in C#&amp;#39; at the Developer Developer Developer conference in Reading.
The slides from the talk are below:
Mixing functional and object oriented approaches to programming in C#
I’ve not done many technical talks so far. My only previous attempt was a talk on F# one at the Sydney Alt.NET user group last year so I’m still learning how to do this effectively.</description>
    </item>
    
    <item>
      <title>Book Club: Growing Object Oriented Software - Chapter 7 (Steve Freeman &amp; Nat Pryce)</title>
      <link>https://www.markhneedham.com/blog/2010/01/28/book-club-growing-object-oriented-software-chapter-7-steve-freeman-nat-pryce/</link>
      <pubDate>Thu, 28 Jan 2010 19:13:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/28/book-club-growing-object-oriented-software-chapter-7-steve-freeman-nat-pryce/</guid>
      <description>My colleague David Santoro has started up a technical book club at the client we’re working at in Wales and the book choice for the first session was Chapter 7 - Achieving Object Oriented Design - of Growing Object Oriented Software, guided by tests written by Steve Freeman and Nat Pryce.
In this chapter they cover various approaches for driving towards object oriented code including techniques to find new objects and a detailed description of TDD and how we can approach this in a way that allows us to drive out new behaviour effectively.</description>
    </item>
    
    <item>
      <title>Automapper: Don&#39;t forget Mapper.Reset() at the start</title>
      <link>https://www.markhneedham.com/blog/2010/01/27/automapper-dont-forget-mapper-reset-at-the-start/</link>
      <pubDate>Wed, 27 Jan 2010 07:57:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/27/automapper-dont-forget-mapper-reset-at-the-start/</guid>
      <description>I wrote about my first thoughts using Automapper last week and although I realised that it makes use of the static gateway pattern we ran into a problem where two consecutive calls to a method using AutoMapper always returned the same value for one of the mappings.
The code was roughly like this:
public Bar CreateNewBar(Bar originalBar, string someNewValue) { Mapper.CreateMap&amp;lt;Baz, Baz&amp;gt;() .ForMember(x =&amp;gt; x.Id, opts =&amp;gt; opts.Ignore()) .ForMember(x =&amp;gt; x.</description>
    </item>
    
    <item>
      <title>TDD: Rewriting/refactoring tests</title>
      <link>https://www.markhneedham.com/blog/2010/01/25/tdd-rewritingrefactoring-tests/</link>
      <pubDate>Mon, 25 Jan 2010 22:06:23 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/25/tdd-rewritingrefactoring-tests/</guid>
      <description>I’ve read several times about the dangers of the big rewrite when it comes to production code but I’ve recently been wondering whether or not we should apply the same rules when it comes to test code or not.
I worked with Raphael Speyer for a few weeks last year and on the code base we were working on he often spent some time rewriting tests originally written using rMock to use mockito which was the framework we were driving towards.</description>
    </item>
    
    <item>
      <title>TDD: Simplifying a test with a hand rolled stub</title>
      <link>https://www.markhneedham.com/blog/2010/01/25/tdd-simplifying-a-test-with-a-hand-rolled-stub/</link>
      <pubDate>Mon, 25 Jan 2010 21:23:31 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/25/tdd-simplifying-a-test-with-a-hand-rolled-stub/</guid>
      <description>I wrote a couple of weeks ago about my thoughts on hand written stubs vs framework generated stubs and I noticed an interesting situation where it helped me out while trying to simplify some test code.
The code in question was making use of several framework generated stubs/mocks and one in particular was trying to return different values depending on the value passed as a parameter.
The test was failing and I spent about half an hour unsuccessfully trying to work out why it wasn’t working as expected before I decided to replace it with a hand rolled stub that did exactly what I wanted.</description>
    </item>
    
    <item>
      <title>TDD: Removing the clutter</title>
      <link>https://www.markhneedham.com/blog/2010/01/24/tdd-removing-the-clutter/</link>
      <pubDate>Sun, 24 Jan 2010 01:13:57 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/24/tdd-removing-the-clutter/</guid>
      <description>I got the chance to work with Phil for a couple of weeks last year and one of the most interesting things that he started teaching me was the importance of reducing the clutter in our tests and ensuring that we take some time to refactor them as well as the code as part of the &amp;#39;red-green-refactor&amp;#39; cycle.
I’m still trying to work out the best way to do this but I came across a really interesting post by J.</description>
    </item>
    
    <item>
      <title>Coding: The collecting parameter pattern</title>
      <link>https://www.markhneedham.com/blog/2010/01/23/coding-the-collecting-parameter-pattern/</link>
      <pubDate>Sat, 23 Jan 2010 14:45:59 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/23/coding-the-collecting-parameter-pattern/</guid>
      <description>The collecting parameter pattern is one of my favourite ones when used well but I’ve noticed recently that it can lead to quit misleading APIs as well.
One way that we used it quite effectively was when getting objects to render themselves to a ViewData container which was then used to populate the view.
public class Micro { private string micro; public Micro(string micro) { this.micro = micro; } public void renderTo(ViewData viewData) { viewData.</description>
    </item>
    
    <item>
      <title>Automapper: First thoughts</title>
      <link>https://www.markhneedham.com/blog/2010/01/22/automapper-first-thoughts/</link>
      <pubDate>Fri, 22 Jan 2010 23:21:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/22/automapper-first-thoughts/</guid>
      <description>I came across Jimmy Bogard’s Automapper library a while ago but hadn’t had the opportunity to try it out on a project until this week.
The problem we wanted to solve was relatively simple.
We had a domain object and we wanted to create a copy of that with one of the fields changed and all of the ids cleared from the object and any objects contained within it so that we could persist the new web of objects to the database.</description>
    </item>
    
    <item>
      <title>Functional collectional parameters: Some thoughts</title>
      <link>https://www.markhneedham.com/blog/2010/01/20/functional-collectional-parameters-some-thoughts/</link>
      <pubDate>Wed, 20 Jan 2010 22:45:55 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/20/functional-collectional-parameters-some-thoughts/</guid>
      <description>I’ve been reading through a bit of Steve Freeman and Nat Pryce’s &amp;#39;Growing Object Oriented Software guided by tests&amp;#39; book and I found the following observation in chapter 7 quite interesting:
When starting a new area of code, we might temporarily suspend our design judgment and just write code without attempting to impose much structure.
It’s interesting that they don’t try and write perfect code the first time around which is actually something I thought experienced developers did until I came across Uncle Bob’s Clean Code book where he suggested something similar.</description>
    </item>
    
    <item>
      <title>Strategic Design (Responsibility Traps) - Eric Evans</title>
      <link>https://www.markhneedham.com/blog/2010/01/18/strategic-design-responsibility-traps-eric-evans/</link>
      <pubDate>Mon, 18 Jan 2010 22:52:15 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/18/strategic-design-responsibility-traps-eric-evans/</guid>
      <description>Reading through some of Simon Harris&amp;#39; blog entries I came across his thoughts on a presentation Eric Evans did at QCon titled &amp;#39;Strategic Design - Responsibility Traps&amp;#39; which seems to cover a lot of the ground from the second half of Domain Driven Design and more.
In the presentation Evans make some really insightful comments and points out a lot of mistakes that I’ve made on projects. It certainly serves as a reminder to go back and read part 4 of the book again and really understand the material from that section.</description>
    </item>
    
    <item>
      <title>Coding: Missing abstractions and LINQ</title>
      <link>https://www.markhneedham.com/blog/2010/01/17/coding-missing-abstractions-and-linq/</link>
      <pubDate>Sun, 17 Jan 2010 19:09:35 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/17/coding-missing-abstractions-and-linq/</guid>
      <description>Something which I’ve noticed quite a lot on the projects that I’ve worked on since C# 3.0 was released is that lists seem to be passed around code much more and have LINQ style filters and transformations performed on them while failing to describe the underlying abstraction explcitly in the code.
As a result of this we quite frequently we end up with this code being in multiple places and since it’s usually not very much code the repetition goes unnoticed more than other types of duplication might do.</description>
    </item>
    
    <item>
      <title>Nant: Populating templates</title>
      <link>https://www.markhneedham.com/blog/2010/01/16/nant-populating-templates/</link>
      <pubDate>Sat, 16 Jan 2010 00:13:30 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/16/nant-populating-templates/</guid>
      <description>One of the common tasks that we need to do on every project I’ve worked on is ensure that we can create a web.config file for the different environments that we need to deploy our application to.
Nant has quite a neat task called &amp;#39;expandproperties&amp;#39; which allows us to do this quite easily.
In our build file we would have the following:
build-file.build
&amp;lt;property name =&amp;#34;configFile&amp;#34; value=&amp;#34;${environment}.properties&amp;#34; readonly=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;if test=&amp;#34;${not file::exists(configFile)}&amp;#34;&amp;gt; &amp;lt;fail message=&amp;#34;Configuration file &amp;#39;${configFile}&amp;#39; could not be found.</description>
    </item>
    
    <item>
      <title>C#: A functional solution to a modeling problem</title>
      <link>https://www.markhneedham.com/blog/2010/01/15/c-a-functional-solutional-to-a-modeling-problem/</link>
      <pubDate>Fri, 15 Jan 2010 23:23:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/15/c-a-functional-solutional-to-a-modeling-problem/</guid>
      <description>We were working on some refactoring today where we pushed some logic back from a service and onto a domain object and I noticed that we were able to use functions quite effectively to reduce the amount of code we had to write while still describing differences in behaviour.
The class we want to write needs to take in two integers which represent two different situations related to Foo. Depending upon whether we have &amp;#39;Situation 1&amp;#39;, &amp;#39;Situation 2&amp;#39; or both situations we will display the results slightly differently.</description>
    </item>
    
    <item>
      <title>TDD: Thoughts on using a clock in tests</title>
      <link>https://www.markhneedham.com/blog/2010/01/15/tdd-thoughts-on-using-a-clock-in-tests/</link>
      <pubDate>Fri, 15 Jan 2010 21:56:48 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/15/tdd-thoughts-on-using-a-clock-in-tests/</guid>
      <description>A few months ago Uncle Bob wrote a post about TDD where he suggested that he preferred to use hand created stubs in his tests wherever possible and only resorted to using a Mockito created stub as a last resort.
I wrote previously about my thoughts of where to use each of the two approaches and one example of where hand written stubs seems to make sense is the clock.</description>
    </item>
    
    <item>
      <title>TDD: Hand written stubs vs Framework generated stubs</title>
      <link>https://www.markhneedham.com/blog/2010/01/15/tdd-hand-written-stubs-vs-framework-generated-stubs/</link>
      <pubDate>Fri, 15 Jan 2010 21:44:36 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/15/tdd-hand-written-stubs-vs-framework-generated-stubs/</guid>
      <description>A few months ago Uncle Bob wrote a post about TDD where he suggested that he preferred to use hand created stubs in his tests wherever possible and only resorted to using a Mockito created stub as a last resort.
I’ve tended to use framework created ones but my colleague Matt Dunn and I noticed that it didn’t seem to work out too well for us writing some tests around a controller where the majority of our tests were making exactly the same call to that repository and expected to receive the same return value but a few select edge cases expected something different.</description>
    </item>
    
    <item>
      <title>F#: Refactoring to sequence/for expressions</title>
      <link>https://www.markhneedham.com/blog/2010/01/14/f-refactoring-to-sequencefor-expressions/</link>
      <pubDate>Thu, 14 Jan 2010 08:01:29 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/14/f-refactoring-to-sequencefor-expressions/</guid>
      <description>Since I started playing around with F# one of the things I’ve been trying to do is not use the &amp;#39;for&amp;#39; keyword because I was trying to avoid writing code in an imperative way and for loops are a big part of this for me.
Having read Jon Harrop’s solution to the word count problem where he made use of both sequence and for expressions I thought it’d be intersting to see what some of the code I’ve written would look like using that approach.</description>
    </item>
    
    <item>
      <title>C# Test Builder Pattern: My current thinking</title>
      <link>https://www.markhneedham.com/blog/2010/01/13/c-test-builder-pattern-my-current-thinking/</link>
      <pubDate>Wed, 13 Jan 2010 01:37:15 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/13/c-test-builder-pattern-my-current-thinking/</guid>
      <description>I’ve written previously about the test builder pattern in C# and having noticed some different implementations of this pattern I thought it’d be interesting to post my current thinking on how to use it.
One thing I’ve noticed is that we often end up just creating methods which effectively act as setters rather than easing the construction of an object.
This seems to happen most commonly when the value we want to set is a boolean value.</description>
    </item>
    
    <item>
      <title>F#: Refactoring to pattern matching</title>
      <link>https://www.markhneedham.com/blog/2010/01/12/f-refactoring-to-pattern-matching/</link>
      <pubDate>Tue, 12 Jan 2010 01:33:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/12/f-refactoring-to-pattern-matching/</guid>
      <description>I was looking through some of the F# code I’ve written recently and I realised that I was very much writing C# in F# with respect to the number of if statements I’ve been using.
I thought it would be interesting to see what the code would look like if I was able to refactor some of that code to make use of pattern matching instead which would be a more idiomatic way of solving the problem in F#.</description>
    </item>
    
    <item>
      <title>C# Object Initializer: More thoughts</title>
      <link>https://www.markhneedham.com/blog/2010/01/10/c-object-initializer-more-thoughts/</link>
      <pubDate>Sun, 10 Jan 2010 18:52:22 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/10/c-object-initializer-more-thoughts/</guid>
      <description>I wrote previously about my dislike of C#&amp;#39;s object initializer syntax and while I still think those arguments hold I came across an interesting argument for why it is a useful feature in Jeremy Miller’s MSDN article on creating internal DSLs in C#.
In the article Jeremy works through an example where he builds up a &amp;#39;SendMessageRequest&amp;#39; first by using a fluent interface and then by making use of object initializer syntax.</description>
    </item>
    
    <item>
      <title>Roy Osherove&#39;s TDD Kata: An F# attempt</title>
      <link>https://www.markhneedham.com/blog/2010/01/10/roy-osheroves-tdd-kata-an-f-attempt/</link>
      <pubDate>Sun, 10 Jan 2010 01:46:07 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/10/roy-osheroves-tdd-kata-an-f-attempt/</guid>
      <description>As I’ve mentioned in a few of my recent posts I’ve been having another go at Roy Osherove’s TDD Kata but this time in F#.
One thing I’ve been struggling with when coding in F# is working out how many intermediate variables we actually need. They can be useful for expressing intent better but they’re clutter in a way.
I’ve included my solution at the end and in the active pattern which determines whether or not we have a custom delimeter defined in our input string I can’t decide whether or not to create a value to represent the expressions that determine that.</description>
    </item>
    
    <item>
      <title>F#: Refactoring to active patterns</title>
      <link>https://www.markhneedham.com/blog/2010/01/07/f-refactoring-to-active-patterns/</link>
      <pubDate>Thu, 07 Jan 2010 23:31:37 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/07/f-refactoring-to-active-patterns/</guid>
      <description>I’ve been playing around with more F# code and after realising that I’d peppered the code with if statements I thought it would be interesting to try and refactor it to make use of active patterns.
The code is part of my F# solution to Roy Osherove’s TDD Kata and is used to parse the input string and find which delimeters are being used.
This is the original code:</description>
    </item>
    
    <item>
      <title>TDD: Hungarian notation for mocks/stubs</title>
      <link>https://www.markhneedham.com/blog/2010/01/06/tdd-hungarian-notation-for-mocksstubs/</link>
      <pubDate>Wed, 06 Jan 2010 00:08:14 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/06/tdd-hungarian-notation-for-mocksstubs/</guid>
      <description>A fairly common discussion that I’ve had with several of my colleagues is around the way that we name the variables used for mocks and stubs in our tests.
There seems to be about a 50/50 split between including &amp;#39;Stub&amp;#39; or &amp;#39;Mock&amp;#39; on the end of those variable names and not doing so.
In a simple example test using Rhino Mocks as the testing framework this would be the contrast between the two approaches:</description>
    </item>
    
    <item>
      <title>F#: String.Split with a multi character delimeter</title>
      <link>https://www.markhneedham.com/blog/2010/01/05/f-string-split-with-a-multi-character-delimeter/</link>
      <pubDate>Tue, 05 Jan 2010 23:10:56 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/05/f-string-split-with-a-multi-character-delimeter/</guid>
      <description>In my continued efforts at Roy Osherove’s TDD Kata I’ve been trying to work out how to split a string based on a delimeter which contains more than one character.
My original thinking was that it should be possible to do so like this:
&amp;#34;1***2&amp;#34;.Split(&amp;#34;***&amp;#34;.ToCharArray());; I didn’t realise that splitting the string like that splits on each of the stars individually which means that we end up getting 2 empty values in the result:</description>
    </item>
    
    <item>
      <title>F#: Expressing intent and the forward/application operators</title>
      <link>https://www.markhneedham.com/blog/2010/01/04/f-expressing-intent-and-the-forwardapplication-operators/</link>
      <pubDate>Mon, 04 Jan 2010 11:11:10 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/04/f-expressing-intent-and-the-forwardapplication-operators/</guid>
      <description>A while ago I wrote about F#&amp;#39;s forward and application operators where I’d looked at how these could be used to simplify code and while trying out Roy Osherove’s TDD Kata I realised that perhaps the choice of which of these to use or whether to use them at all depends on what intent we’re expressing.
The specific bit of code I was writing was for raising an exception if negative values were provided and I originally thought I’d use the forward operator to express this code:</description>
    </item>
    
    <item>
      <title>The Last Lecture - Randy Pausch</title>
      <link>https://www.markhneedham.com/blog/2010/01/01/the-last-lecture-randy-pausch/</link>
      <pubDate>Fri, 01 Jan 2010 14:32:58 +0000</pubDate>
      
      <guid>https://www.markhneedham.com/blog/2010/01/01/the-last-lecture-randy-pausch/</guid>
      <description>I recently watched Randy Pausch’s &amp;#39;Last Lecture: Achieving Your Childhood Dreams&amp;#39; and read the corresponding book and although it’s not directly related to software development I think that some of the points that he makes are really intriguing.
These were some of the parts that particularly stood out for me:
Introduce the elephant in the room - whatever it is that people are really thinking about, put it out in the open.</description>
    </item>
    
  </channel>
</rss>
