+++
draft = false
date="2012-04-29 00:01:07"
title="Haskell: Colour highlighting when writing to the shell"
tag=['haskell']
category=['Haskell']
+++

I spent a few hours writing a simple front end on top of the <a href="http://www.markhneedham.com/blog/2012/04/25/algorithms-rabin-karp-in-haskell/">Rabin Karp algorithm</a> so that I could show the line of the first occurrence of a pattern in a piece of text on the shell.

I thought it would be quite cool if I could highlight the appropriate text on the line <a href="http://www.debian-administration.org/articles/460">like how grep does</a> when the '--color=auto' flag is supplied.

We can make use of <a href="http://en.wikipedia.org/wiki/ANSI_escape_code">ANSI escape codes</a> to do this.

We need to construct an escape sequence which starts with the 'ESC' character, represented by decimal value 27 or hexidecimal value 1b, followed by a left bracket ("["):

<blockquote>
"\x1b[" or "\27["
</blockquote>

In the second part of the sequence we can choose <a href="http://en.wikipedia.org/wiki/ANSI_escape_code#CSI_codes">a variety of different options</a>. In this case we use the following:

<blockquote>
CSI n [;k] m	

SGR â€“ Select Graphic Rendition	
Sets SGR parameters, including text color. After CSI can be zero or more parameters separated with ;. With no parameters, CSI m is treated as CSI 0 m (reset / normal), which is typical of most of the ANSI escape sequences.
</blockquote>

To change the colour of the text we need to set 'k' to one of the following values:

<ul>
<li>30 - Black</li>
<li>31 - Red</li>
<li>32 - Green</li>
<li>33 - Yellow</li>
<li>34 - Blue</li>
<li>35 - Magenta</li>
<li>36 - Cyan</li>
<li>37 - White</li>
</ul>

For example, if we want to print all future text in green then we can use the following escape sequence:


~~~haskell

> putStrLn $ "\x1b[32m"
~~~

<img src="http://www.markhneedham.com/blog/wp-content/uploads/2012/04/green.jpg" alt="Green" title="green.jpg" border="0" width="600" height="50" />




Ideally we should then reset the terminal which means passing a 'k' value of 0.

So if we just want to highlight one word we'd end up with this:


~~~haskell

> putStrLn $ "\x1b[32m" ++ "highlight me" ++ "\x1b[0m" ++ " but not me"
~~~

<img src="http://www.markhneedham.com/blog/wp-content/uploads/2012/04/green2.png" alt="Green2" title="green2.png" border="0" width="600" height="31" />
