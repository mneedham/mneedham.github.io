+++
draft = false
date="2012-07-21 22:46:06"
title="neo4j: Embracing the sub graph"
tag=['neo4j', 'cypher']
category=['neo4j']
+++

In May I wrote a blog post explaining how I'd been designing a neo4j graph by <a href="http://www.markhneedham.com/blog/2012/05/05/neo4j-what-question-do-you-want-to-answer/">thinking about what questions I wanted to answer about the data</a>.

In the comments Josh Adell gave me the following advice:

<blockquote>
The neat things about graphs is that multiple subgraphs can live in the same data-space. 
<br />
...<br />

Keep your data model rich! Don't be afraid to have as many relationships as you need. The power of graph databases comes from finding surprising results when you have strongly interconnected data.
</blockquote>

At the time I didn't really understand the advice but I've since updated my graph so that it includes 'colleagues' relationships which can be derived by looking at the projects that people had worked together on.

<div>
<img src="http://www.markhneedham.com/blog/wp-content/uploads/2012/07/v2-a.png" alt="V2 a" title="v2-a.png" border="0" width="600" height="145" />
</div>

When I was showing the graph to <a href="http://www.linkedin.com/profile/view?id=15082115&authType=NAME_SEARCH&authToken=t4ys&locale=en_US&srchid=66859460-2706-4d7d-848c-3924569bc30e-0&srchindex=1&srchtotal=19&goback=%2Efps_PBCK_*1_Marc_Hofer_*1_*1_*1_*1_*2_*1_Y_*1_*1_*1_false_1_R_*1_*51_*1_*51_true_*2_*2_*2_*2_*2_*2_*2_*2_*2_*2_*2_*2_*2_*2_*2_*2_*2_*2_*2_*2_*2&pvs=ps&trk=pp_profile_name_link">Marc</a> he thought it would be quite interesting to see all the people that he hadn't worked with before, a query that's very easy to write when we have these two sub graphs.

We could write the following cypher query to find who Marc hadn't worked with on a specific project:


~~~text

START project=node:projects(name="Project X"), me=node:people(name="Marc Hofer")
MATCH project<-[:worked_on]-neverColleague-[c?:colleagues]->me
WHERE c is NULL
RETURN neverColleague
~~~

We do an index lookup to find the appropriate project node and to find the node that represent's Marc.

THe MATCH clause starts from the project and then work backwards to the people who have worked on it. We then follow an optional colleagues relationship back to Marc.

The WHERE clause makes sure that we only return people that Marc doesn't have a 'colleagues' relationship with i.e. people Marc hasn't worked with.

Along the same lines we could also find out all the people that Marc has worked with from a specific office:


~~~text

START office=node:offices(name="London - UK South"), me=node:people(name="Marc Hofer")
MATCH office<-[r:member_of]-colleague-[c:colleagues]->me
WHERE (NOT(HAS(r.end_date)))
RETURN colleague, c
~~~

This is reasonably similar to the previous query except the colleagues relationship is no longer optional since we only want to find people that Marc has worked with.

I'm sure there are other queries we could run but these were a couple that I hadn't thought of before I had multiple sub graphs together on the same overall graph.
